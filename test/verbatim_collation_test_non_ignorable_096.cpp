// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_096_000)
{
    // 17DD 0041;	
    // (៝) KHMER SIGN ATTHACAN	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17DD, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_001)
{
    // 1AB0 0041;	
    // (᪰) COMBINING DOUBLED CIRCUMFLEX ACCENT	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1AB0, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_002)
{
    // 1AB1 0041;	
    // (᪱) COMBINING DIAERESIS-RING	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1AB1, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_003)
{
    // 1AB2 0041;	
    // (᪲) COMBINING INFINITY	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1AB2, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_004)
{
    // 1AB3 0041;	
    // (᪳) COMBINING DOWNWARDS ARROW	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1AB3, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_005)
{
    // 1AB4 0041;	
    // (᪴) COMBINING TRIPLE DOT	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1AB4, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_006)
{
    // 1ABB 0041;	
    // (᪻) COMBINING PARENTHESES ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1ABB, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_007)
{
    // 1ABC 0041;	
    // (᪼) COMBINING DOUBLE PARENTHESES ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1ABC, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_008)
{
    // 1DC0 0041;	
    // (᷀) COMBINING DOTTED GRAVE ACCENT	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DC0, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_009)
{
    // 1DC1 0041;	
    // (᷁) COMBINING DOTTED ACUTE ACCENT	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DC1, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_010)
{
    // 1DC3 0041;	
    // (᷃) COMBINING SUSPENSION MARK	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DC3, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_011)
{
    // 1DC4 0041;	
    // (᷄) COMBINING MACRON-ACUTE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DC4, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_012)
{
    // 1DC5 0041;	
    // (᷅) COMBINING GRAVE-MACRON	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DC5, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_013)
{
    // 1DC6 0041;	
    // (᷆) COMBINING MACRON-GRAVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DC6, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_014)
{
    // 1DC7 0041;	
    // (᷇) COMBINING ACUTE-MACRON	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DC7, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_015)
{
    // 1DC8 0041;	
    // (᷈) COMBINING GRAVE-ACUTE-GRAVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DC8, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_016)
{
    // 1DC9 0041;	
    // (᷉) COMBINING ACUTE-GRAVE-ACUTE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DC9, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_017)
{
    // 1DCB 0041;	
    // (᷋) COMBINING BREVE-MACRON	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DCB, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_018)
{
    // 1DCC 0041;	
    // (᷌) COMBINING MACRON-BREVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DCC, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_019)
{
    // 1DCD 0041;	
    // (᷍) COMBINING DOUBLE CIRCUMFLEX ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DCD, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_020)
{
    // 1DCE 0041;	
    // (᷎) COMBINING OGONEK ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DCE, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_021)
{
    // 1DD1 0041;	
    // (᷑) COMBINING UR ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DD1, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_022)
{
    // 1DF5 0041;	
    // (᷵) COMBINING UP TACK ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DF5, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_023)
{
    // 1DF6 0041;	
    // (᷶) COMBINING KAVYKA ABOVE RIGHT	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DF6, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_024)
{
    // 1DF7 0041;	
    // (᷷) COMBINING KAVYKA ABOVE LEFT	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DF7, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_025)
{
    // 1DF8 0041;	
    // (᷸) COMBINING DOT ABOVE LEFT	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DF8, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_026)
{
    // 1DFB 0041;	
    // (᷻) COMBINING DELETION MARK	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DFB, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_027)
{
    // 1DFE 0041;	
    // (᷾) COMBINING LEFT ARROWHEAD ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DFE, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_028)
{
    // 20F0 0041;	
    // (⃰) COMBINING ASTERISK ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20F0, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_029)
{
    // 2CEF 0041;	
    // (⳯) COPTIC COMBINING NI ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CEF, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_030)
{
    // A67C 0041;	
    // (꙼) COMBINING CYRILLIC KAVYKA	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA67C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_031)
{
    // A67D 0041;	
    // (꙽) COMBINING CYRILLIC PAYEROK	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA67D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_032)
{
    // 10AE5 0041;	
    // (𐫥) MANICHAEAN ABBREVIATION MARK ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AE5, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_033)
{
    // 1BC9D 0041;	
    // (𛲝) DUPLOYAN THICK LETTER SELECTOR	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC9D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_034)
{
    // 0316 0061;	
    // (̖) COMBINING GRAVE ACCENT BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0316, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_035)
{
    // 0317 0061;	
    // (̗) COMBINING ACUTE ACCENT BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0317, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_036)
{
    // 0318 0061;	
    // (̘) COMBINING LEFT TACK BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0318, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_037)
{
    // 0319 0061;	
    // (̙) COMBINING RIGHT TACK BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0319, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_038)
{
    // 031C 0061;	
    // (̜) COMBINING LEFT HALF RING BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_039)
{
    // 031D 0061;	
    // (̝) COMBINING UP TACK BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_040)
{
    // 031E 0061;	
    // (̞) COMBINING DOWN TACK BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_041)
{
    // 031F 0061;	
    // (̟) COMBINING PLUS SIGN BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031F, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_042)
{
    // 0320 0061;	
    // (̠) COMBINING MINUS SIGN BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0320, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_043)
{
    // 0329 0061;	
    // (̩) COMBINING VERTICAL LINE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0329, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_044)
{
    // 032A 0061;	
    // (̪) COMBINING BRIDGE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_045)
{
    // 032B 0061;	
    // (̫) COMBINING INVERTED DOUBLE ARCH BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032B, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_046)
{
    // 032C 0061;	
    // (̬) COMBINING CARON BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_047)
{
    // 032F 0061;	
    // (̯) COMBINING INVERTED BREVE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032F, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_048)
{
    // 0333 0061;	
    // (̳) COMBINING DOUBLE LOW LINE	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0333, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_049)
{
    // 033A 0061;	
    // (̺) COMBINING INVERTED BRIDGE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_050)
{
    // 033B 0061;	
    // (̻) COMBINING SQUARE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033B, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_051)
{
    // 033C 0061;	
    // (̼) COMBINING SEAGULL BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_052)
{
    // 0347 0061;	
    // (͇) COMBINING EQUALS SIGN BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0347, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_053)
{
    // 0348 0061;	
    // (͈) COMBINING DOUBLE VERTICAL LINE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0348, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_054)
{
    // 0349 0061;	
    // (͉) COMBINING LEFT ANGLE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0349, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_055)
{
    // 034D 0061;	
    // (͍) COMBINING LEFT RIGHT ARROW BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_056)
{
    // 034E 0061;	
    // (͎) COMBINING UPWARDS ARROW BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_057)
{
    // 0353 0061;	
    // (͓) COMBINING X BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0353, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_058)
{
    // 0354 0061;	
    // (͔) COMBINING LEFT ARROWHEAD BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0354, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_059)
{
    // 0355 0061;	
    // (͕) COMBINING RIGHT ARROWHEAD BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0355, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_060)
{
    // 0356 0061;	
    // (͖) COMBINING RIGHT ARROWHEAD AND UP ARROWHEAD BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0356, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_061)
{
    // 0359 0061;	
    // (͙) COMBINING ASTERISK BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0359, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_062)
{
    // 035A 0061;	
    // (͚) COMBINING DOUBLE RING BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_063)
{
    // 035C 0061;	
    // (͜) COMBINING DOUBLE BREVE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_064)
{
    // 035F 0061;	
    // (͟) COMBINING DOUBLE MACRON BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035F, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_065)
{
    // 0362 0061;	
    // (͢) COMBINING DOUBLE RIGHTWARDS ARROW BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0362, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_066)
{
    // 0742 0061;	
    // (݂) SYRIAC RUKKAKHA	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0742, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_067)
{
    // 0746 0061;	
    // (݆) SYRIAC THREE DOTS BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0746, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_068)
{
    // 0859 0061;	
    // (࡙) MANDAIC AFFRICATION MARK	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0859, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_069)
{
    // 085A 0061;	
    // (࡚) MANDAIC VOCALIZATION MARK	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x085A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_070)
{
    // 085B 0061;	
    // (࡛) MANDAIC GEMINATION MARK	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x085B, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_071)
{
    // 1AB5 0061;	
    // (᪵) COMBINING X-X BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB5, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_072)
{
    // 1AB6 0061;	
    // (᪶) COMBINING WIGGLY LINE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB6, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_073)
{
    // 1AB7 0061;	
    // (᪷) COMBINING OPEN MARK BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB7, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_074)
{
    // 1AB8 0061;	
    // (᪸) COMBINING DOUBLE OPEN MARK BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB8, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_075)
{
    // 1AB9 0061;	
    // (᪹) COMBINING LIGHT CENTRALIZATION STROKE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB9, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_076)
{
    // 1ABA 0061;	
    // (᪺) COMBINING STRONG CENTRALIZATION STROKE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABA, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_077)
{
    // 1ABD 0061;	
    // (᪽) COMBINING PARENTHESES BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABD, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_078)
{
    // 1DC2 0061;	
    // (᷂) COMBINING SNAKE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC2, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_079)
{
    // 1DCF 0061;	
    // (᷏) COMBINING ZIGZAG BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCF, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_080)
{
    // 1DD0 0061;	
    // (᷐) COMBINING IS BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DD0, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_081)
{
    // 1DF9 0061;	
    // (᷹) COMBINING WIDE INVERTED BRIDGE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF9, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_082)
{
    // 1DFC 0061;	
    // (᷼) COMBINING DOUBLE INVERTED BREVE BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFC, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_083)
{
    // 1DFD 0061;	
    // (᷽) COMBINING ALMOST EQUAL TO BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFD, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_084)
{
    // 1DFF 0061;	
    // (᷿) COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFF, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_085)
{
    // 20EC 0061;	
    // (⃬) COMBINING RIGHTWARDS HARPOON WITH BARB DOWNWARDS	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EC, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_086)
{
    // 20ED 0061;	
    // (⃭) COMBINING LEFTWARDS HARPOON WITH BARB DOWNWARDS	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20ED, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_087)
{
    // 20EE 0061;	
    // (⃮) COMBINING LEFT ARROW BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EE, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_088)
{
    // 20EF 0061;	
    // (⃯) COMBINING RIGHT ARROW BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EF, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_089)
{
    // FE27 0061;	
    // (︧) COMBINING LIGATURE LEFT HALF BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE27, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_090)
{
    // 10A0D 0061;	
    // (𐨍) KHAROSHTHI SIGN DOUBLE RING BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_091)
{
    // 10AE6 0061;	
    // (𐫦) MANICHAEAN ABBREVIATION MARK BELOW	[1CAD | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE6, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_092)
{
    // 0316 0041;	
    // (̖) COMBINING GRAVE ACCENT BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0316, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_093)
{
    // 0317 0041;	
    // (̗) COMBINING ACUTE ACCENT BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0317, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_094)
{
    // 0318 0041;	
    // (̘) COMBINING LEFT TACK BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0318, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_095)
{
    // 0319 0041;	
    // (̙) COMBINING RIGHT TACK BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0319, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_096)
{
    // 031C 0041;	
    // (̜) COMBINING LEFT HALF RING BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x031C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_097)
{
    // 031D 0041;	
    // (̝) COMBINING UP TACK BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x031D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_098)
{
    // 031E 0041;	
    // (̞) COMBINING DOWN TACK BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x031E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_099)
{
    // 031F 0041;	
    // (̟) COMBINING PLUS SIGN BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x031F, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_100)
{
    // 0320 0041;	
    // (̠) COMBINING MINUS SIGN BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0320, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_101)
{
    // 0329 0041;	
    // (̩) COMBINING VERTICAL LINE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0329, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_102)
{
    // 032A 0041;	
    // (̪) COMBINING BRIDGE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x032A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_103)
{
    // 032B 0041;	
    // (̫) COMBINING INVERTED DOUBLE ARCH BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x032B, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_104)
{
    // 032C 0041;	
    // (̬) COMBINING CARON BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x032C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_105)
{
    // 032F 0041;	
    // (̯) COMBINING INVERTED BREVE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x032F, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_106)
{
    // 0333 0041;	
    // (̳) COMBINING DOUBLE LOW LINE	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0333, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_107)
{
    // 033A 0041;	
    // (̺) COMBINING INVERTED BRIDGE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x033A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_108)
{
    // 033B 0041;	
    // (̻) COMBINING SQUARE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x033B, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_109)
{
    // 033C 0041;	
    // (̼) COMBINING SEAGULL BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x033C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_110)
{
    // 0347 0041;	
    // (͇) COMBINING EQUALS SIGN BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0347, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_111)
{
    // 0348 0041;	
    // (͈) COMBINING DOUBLE VERTICAL LINE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0348, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_112)
{
    // 0349 0041;	
    // (͉) COMBINING LEFT ANGLE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0349, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_113)
{
    // 034D 0041;	
    // (͍) COMBINING LEFT RIGHT ARROW BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x034D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_114)
{
    // 034E 0041;	
    // (͎) COMBINING UPWARDS ARROW BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x034E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_115)
{
    // 0353 0041;	
    // (͓) COMBINING X BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0353, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_116)
{
    // 0354 0041;	
    // (͔) COMBINING LEFT ARROWHEAD BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0354, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_117)
{
    // 0355 0041;	
    // (͕) COMBINING RIGHT ARROWHEAD BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0355, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_118)
{
    // 0356 0041;	
    // (͖) COMBINING RIGHT ARROWHEAD AND UP ARROWHEAD BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0356, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_119)
{
    // 0359 0041;	
    // (͙) COMBINING ASTERISK BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0359, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_120)
{
    // 035A 0041;	
    // (͚) COMBINING DOUBLE RING BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x035A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_121)
{
    // 035C 0041;	
    // (͜) COMBINING DOUBLE BREVE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x035C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_122)
{
    // 035F 0041;	
    // (͟) COMBINING DOUBLE MACRON BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x035F, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_123)
{
    // 0362 0041;	
    // (͢) COMBINING DOUBLE RIGHTWARDS ARROW BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0362, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_124)
{
    // 0742 0041;	
    // (݂) SYRIAC RUKKAKHA	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0742, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_125)
{
    // 0746 0041;	
    // (݆) SYRIAC THREE DOTS BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0746, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_126)
{
    // 0859 0041;	
    // (࡙) MANDAIC AFFRICATION MARK	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0859, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_127)
{
    // 085A 0041;	
    // (࡚) MANDAIC VOCALIZATION MARK	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x085A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_128)
{
    // 085B 0041;	
    // (࡛) MANDAIC GEMINATION MARK	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x085B, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_129)
{
    // 1AB5 0041;	
    // (᪵) COMBINING X-X BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1AB5, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_130)
{
    // 1AB6 0041;	
    // (᪶) COMBINING WIGGLY LINE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1AB6, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_131)
{
    // 1AB7 0041;	
    // (᪷) COMBINING OPEN MARK BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1AB7, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_132)
{
    // 1AB8 0041;	
    // (᪸) COMBINING DOUBLE OPEN MARK BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1AB8, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_133)
{
    // 1AB9 0041;	
    // (᪹) COMBINING LIGHT CENTRALIZATION STROKE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1AB9, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_134)
{
    // 1ABA 0041;	
    // (᪺) COMBINING STRONG CENTRALIZATION STROKE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1ABA, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_135)
{
    // 1ABD 0041;	
    // (᪽) COMBINING PARENTHESES BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1ABD, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_136)
{
    // 1DC2 0041;	
    // (᷂) COMBINING SNAKE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DC2, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_137)
{
    // 1DCF 0041;	
    // (᷏) COMBINING ZIGZAG BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DCF, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_138)
{
    // 1DD0 0041;	
    // (᷐) COMBINING IS BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DD0, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_139)
{
    // 1DF9 0041;	
    // (᷹) COMBINING WIDE INVERTED BRIDGE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DF9, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_140)
{
    // 1DFC 0041;	
    // (᷼) COMBINING DOUBLE INVERTED BREVE BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DFC, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_141)
{
    // 1DFD 0041;	
    // (᷽) COMBINING ALMOST EQUAL TO BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DFD, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_142)
{
    // 1DFF 0041;	
    // (᷿) COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DFF, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_143)
{
    // 20EC 0041;	
    // (⃬) COMBINING RIGHTWARDS HARPOON WITH BARB DOWNWARDS	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20EC, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_144)
{
    // 20ED 0041;	
    // (⃭) COMBINING LEFTWARDS HARPOON WITH BARB DOWNWARDS	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20ED, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_145)
{
    // 20EE 0041;	
    // (⃮) COMBINING LEFT ARROW BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20EE, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_146)
{
    // 20EF 0041;	
    // (⃯) COMBINING RIGHT ARROW BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20EF, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_147)
{
    // FE27 0041;	
    // (︧) COMBINING LIGATURE LEFT HALF BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFE27, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_148)
{
    // 10A0D 0041;	
    // (𐨍) KHAROSHTHI SIGN DOUBLE RING BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A0D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_149)
{
    // 10AE6 0041;	
    // (𐫦) MANICHAEAN ABBREVIATION MARK BELOW	[1CAD | 0034 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AE6, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_150)
{
    // 0336 0061;	
    // (̶) COMBINING LONG STROKE OVERLAY	[1CAD | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0336, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_151)
{
    // 0337 0061;	
    // (̷) COMBINING SHORT SOLIDUS OVERLAY	[1CAD | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0337, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_152)
{
    // 20D8 0061;	
    // (⃘) COMBINING RING OVERLAY	[1CAD | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D8, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_153)
{
    // 20D9 0061;	
    // (⃙) COMBINING CLOCKWISE RING OVERLAY	[1CAD | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D9, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_154)
{
    // 20DA 0061;	
    // (⃚) COMBINING ANTICLOCKWISE RING OVERLAY	[1CAD | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DA, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_155)
{
    // 20E5 0061;	
    // (⃥) COMBINING REVERSE SOLIDUS OVERLAY	[1CAD | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E5, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_156)
{
    // 20EA 0061;	
    // (⃪) COMBINING LEFTWARDS ARROW OVERLAY	[1CAD | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EA, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_157)
{
    // 20EB 0061;	
    // (⃫) COMBINING LONG DOUBLE SOLIDUS OVERLAY	[1CAD | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EB, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_158)
{
    // 1BC9E 0061;	
    // (𛲞) DUPLOYAN DOUBLE MARK	[1CAD | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_159)
{
    // 0336 0041;	
    // (̶) COMBINING LONG STROKE OVERLAY	[1CAD | 0035 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0336, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_160)
{
    // 0337 0041;	
    // (̷) COMBINING SHORT SOLIDUS OVERLAY	[1CAD | 0035 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0337, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_161)
{
    // 20D8 0041;	
    // (⃘) COMBINING RING OVERLAY	[1CAD | 0035 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20D8, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_162)
{
    // 20D9 0041;	
    // (⃙) COMBINING CLOCKWISE RING OVERLAY	[1CAD | 0035 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20D9, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_163)
{
    // 20DA 0041;	
    // (⃚) COMBINING ANTICLOCKWISE RING OVERLAY	[1CAD | 0035 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20DA, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_164)
{
    // 20E5 0041;	
    // (⃥) COMBINING REVERSE SOLIDUS OVERLAY	[1CAD | 0035 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20E5, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_165)
{
    // 20EA 0041;	
    // (⃪) COMBINING LEFTWARDS ARROW OVERLAY	[1CAD | 0035 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20EA, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_166)
{
    // 20EB 0041;	
    // (⃫) COMBINING LONG DOUBLE SOLIDUS OVERLAY	[1CAD | 0035 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20EB, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_167)
{
    // 1BC9E 0041;	
    // (𛲞) DUPLOYAN DOUBLE MARK	[1CAD | 0035 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC9E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_168)
{
    // 1ABE 0061;	
    // (᪾) COMBINING PARENTHESES OVERLAY	[1CAD | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABE, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_169)
{
    // 20DD 0061;	
    // (⃝) COMBINING ENCLOSING CIRCLE	[1CAD | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DD, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_170)
{
    // 20DE 0061;	
    // (⃞) COMBINING ENCLOSING SQUARE	[1CAD | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DE, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_171)
{
    // 20DF 0061;	
    // (⃟) COMBINING ENCLOSING DIAMOND	[1CAD | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DF, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_172)
{
    // 20E0 0061;	
    // (⃠) COMBINING ENCLOSING CIRCLE BACKSLASH	[1CAD | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E0, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_173)
{
    // 20E2 0061;	
    // (⃢) COMBINING ENCLOSING SCREEN	[1CAD | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E2, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_174)
{
    // 20E3 0061;	
    // (⃣) COMBINING ENCLOSING KEYCAP	[1CAD | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E3, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_175)
{
    // 20E4 0061;	
    // (⃤) COMBINING ENCLOSING UPWARD POINTING TRIANGLE	[1CAD | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E4, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_176)
{
    // 1ABE 0041;	
    // (᪾) COMBINING PARENTHESES OVERLAY	[1CAD | 0036 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1ABE, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_177)
{
    // 20DD 0041;	
    // (⃝) COMBINING ENCLOSING CIRCLE	[1CAD | 0036 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20DD, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_178)
{
    // 20DE 0041;	
    // (⃞) COMBINING ENCLOSING SQUARE	[1CAD | 0036 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20DE, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_179)
{
    // 20DF 0041;	
    // (⃟) COMBINING ENCLOSING DIAMOND	[1CAD | 0036 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20DF, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_180)
{
    // 20E0 0041;	
    // (⃠) COMBINING ENCLOSING CIRCLE BACKSLASH	[1CAD | 0036 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20E0, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_181)
{
    // 20E2 0041;	
    // (⃢) COMBINING ENCLOSING SCREEN	[1CAD | 0036 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20E2, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_182)
{
    // 20E3 0041;	
    // (⃣) COMBINING ENCLOSING KEYCAP	[1CAD | 0036 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20E3, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_183)
{
    // 20E4 0041;	
    // (⃤) COMBINING ENCLOSING UPWARD POINTING TRIANGLE	[1CAD | 0036 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20E4, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_184)
{
    // 3099 0061;	
    // (゙) COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[1CAD | 0037 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3099, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_185)
{
    // 3099 0041;	
    // (゙) COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[1CAD | 0037 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3099, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0037, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_186)
{
    // FF9E 0061;	
    // (ﾞ) HALFWIDTH KATAKANA VOICED SOUND MARK	[1CAD | 0037 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0037, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_187)
{
    // FF9E 0041;	
    // (ﾞ) HALFWIDTH KATAKANA VOICED SOUND MARK	[1CAD | 0037 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF9E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0037, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_188)
{
    // 309A 0061;	
    // (゚) COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[1CAD | 0038 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0038, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_189)
{
    // 309A 0041;	
    // (゚) COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[1CAD | 0038 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x309A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0038, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_190)
{
    // FF9F 0061;	
    // (ﾟ) HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK	[1CAD | 0038 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9F, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0038, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_191)
{
    // FF9F 0041;	
    // (ﾟ) HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK	[1CAD | 0038 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF9F, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0038, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_192)
{
    // 0335 0061;	
    // (̵) COMBINING SHORT STROKE OVERLAY	[1CAD | 0039 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0335, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0039, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_193)
{
    // 0335 0041;	
    // (̵) COMBINING SHORT STROKE OVERLAY	[1CAD | 0039 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0335, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0039, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_194)
{
    // 0305 0061;	
    // (̅) COMBINING OVERLINE	[1CAD | 003A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0305, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_195)
{
    // 0305 0041;	
    // (̅) COMBINING OVERLINE	[1CAD | 003A 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0305, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003A, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_196)
{
    // 0309 0061;	
    // (̉) COMBINING HOOK ABOVE	[1CAD | 003B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0309, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_197)
{
    // 0309 0041;	
    // (̉) COMBINING HOOK ABOVE	[1CAD | 003B 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0309, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003B, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_198)
{
    // 030F 0061;	
    // (̏) COMBINING DOUBLE GRAVE ACCENT	[1CAD | 003C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030F, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_199)
{
    // 030F 0041;	
    // (̏) COMBINING DOUBLE GRAVE ACCENT	[1CAD | 003C 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x030F, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003C, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_200)
{
    // 0310 0061;	
    // (̐) COMBINING CANDRABINDU	[1CAD | 003D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0310, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_201)
{
    // 0310 0041;	
    // (̐) COMBINING CANDRABINDU	[1CAD | 003D 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0310, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003D, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_202)
{
    // 0311 0061;	
    // (̑) COMBINING INVERTED BREVE	[1CAD | 003E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0311, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_203)
{
    // 0311 0041;	
    // (̑) COMBINING INVERTED BREVE	[1CAD | 003E 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0311, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003E, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_204)
{
    // 031B 0061;	
    // (̛) COMBINING HORN	[1CAD | 003F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031B, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_205)
{
    // 031B 0041;	
    // (̛) COMBINING HORN	[1CAD | 003F 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x031B, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x003F, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_206)
{
    // 0321 0061;	
    // (̡) COMBINING PALATALIZED HOOK BELOW	[1CAD | 0040 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0321, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0040, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_207)
{
    // 0321 0041;	
    // (̡) COMBINING PALATALIZED HOOK BELOW	[1CAD | 0040 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0321, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0040, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_208)
{
    // 0322 0061;	
    // (̢) COMBINING RETROFLEX HOOK BELOW	[1CAD | 0041 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0322, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0041, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_209)
{
    // 0322 0041;	
    // (̢) COMBINING RETROFLEX HOOK BELOW	[1CAD | 0041 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0322, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0041, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_210)
{
    // 0323 0061;	
    // (̣) COMBINING DOT BELOW	[1CAD | 0042 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0323, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_211)
{
    // 0323 0041;	
    // (̣) COMBINING DOT BELOW	[1CAD | 0042 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0323, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0042, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_212)
{
    // 0324 0061;	
    // (̤) COMBINING DIAERESIS BELOW	[1CAD | 0043 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0324, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0043, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_213)
{
    // 0324 0041;	
    // (̤) COMBINING DIAERESIS BELOW	[1CAD | 0043 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0324, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0043, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_214)
{
    // 0325 0061;	
    // (̥) COMBINING RING BELOW	[1CAD | 0044 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0325, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0044, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_215)
{
    // 0325 0041;	
    // (̥) COMBINING RING BELOW	[1CAD | 0044 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0325, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0044, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_216)
{
    // 0326 0061;	
    // (̦) COMBINING COMMA BELOW	[1CAD | 0045 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0326, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0045, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_217)
{
    // 0326 0041;	
    // (̦) COMBINING COMMA BELOW	[1CAD | 0045 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0326, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0045, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_218)
{
    // 032D 0061;	
    // (̭) COMBINING CIRCUMFLEX ACCENT BELOW	[1CAD | 0046 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_219)
{
    // 032D 0041;	
    // (̭) COMBINING CIRCUMFLEX ACCENT BELOW	[1CAD | 0046 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x032D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0046, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_220)
{
    // 032E 0061;	
    // (̮) COMBINING BREVE BELOW	[1CAD | 0047 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0047, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_221)
{
    // 032E 0041;	
    // (̮) COMBINING BREVE BELOW	[1CAD | 0047 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x032E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0047, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_222)
{
    // 0330 0061;	
    // (̰) COMBINING TILDE BELOW	[1CAD | 0048 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0330, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_223)
{
    // 0330 0041;	
    // (̰) COMBINING TILDE BELOW	[1CAD | 0048 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0330, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0048, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_224)
{
    // 0331 0061;	
    // (̱) COMBINING MACRON BELOW	[1CAD | 0049 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0331, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_225)
{
    // 0331 0041;	
    // (̱) COMBINING MACRON BELOW	[1CAD | 0049 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0331, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0049, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_226)
{
    // 0334 0061;	
    // (a) LATIN SMALL LETTER A	[1CAD | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_227)
{
    // 0334 0363;	
    // (ͣ) COMBINING LATIN SMALL LETTER A	[1CAD | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x0363 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_228)
{
    // 0363 0334;	
    // (ͣ) COMBINING LATIN SMALL LETTER A	[1CAD | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0363, 0x0334 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_229)
{
    // 0334 0041;	
    // (A) LATIN CAPITAL LETTER A	[1CAD | 004A 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0334, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_230)
{
    // 0334 1DF2;	
    // (ᷲ) COMBINING LATIN SMALL LETTER A WITH DIAERESIS	[1CAD | 004A 0020 002B | 0002 0004 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DF2 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x004A, 0x0020, 0x002B, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_231)
{
    // 1DF2 0334;	
    // (ᷲ) COMBINING LATIN SMALL LETTER A WITH DIAERESIS	[1CAD | 004A 0020 002B | 0002 0004 0004 |]

    uint32_t cps[2] = { 0x1DF2, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x004A, 0x0020, 0x002B, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_232)
{
    // 0334 1DD3;	
    // (ᷓ) COMBINING LATIN SMALL LETTER FLATTENED OPEN A ABOVE	[1CAD | 004A 0020 0111 | 0002 0004 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DD3 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x004A, 0x0020, 0x0111, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_233)
{
    // 1DD3 0334;	
    // (ᷓ) COMBINING LATIN SMALL LETTER FLATTENED OPEN A ABOVE	[1CAD | 004A 0020 0111 | 0002 0004 0004 |]

    uint32_t cps[2] = { 0x1DD3, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x004A, 0x0020, 0x0111, 0x0000, 0x0002, 0x0004, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_234)
{
    // 0339 0061;	
    // (̹) COMBINING RIGHT HALF RING BELOW	[1CAD | 004B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0339, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_235)
{
    // 0339 0041;	
    // (̹) COMBINING RIGHT HALF RING BELOW	[1CAD | 004B 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0339, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004B, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_236)
{
    // 0345 0061;	
    // (ͅ) COMBINING GREEK YPOGEGRAMMENI	[1CAD | 004C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0345, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_237)
{
    // 0345 0041;	
    // (ͅ) COMBINING GREEK YPOGEGRAMMENI	[1CAD | 004C 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0345, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004C, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_238)
{
    // 0358 0061;	
    // (͘) COMBINING DOT ABOVE RIGHT	[1CAD | 004D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0358, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_239)
{
    // 0358 0041;	
    // (͘) COMBINING DOT ABOVE RIGHT	[1CAD | 004D 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0358, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004D, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_240)
{
    // 0360 0061;	
    // (͠) COMBINING DOUBLE TILDE	[1CAD | 004E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0360, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_241)
{
    // FE22 0061;	
    // (︢) COMBINING DOUBLE TILDE LEFT HALF	[1CAD | 004E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE22, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_242)
{
    // FE29 0061;	
    // (︩) COMBINING TILDE LEFT HALF BELOW	[1CAD | 004E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE29, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_243)
{
    // 0360 0041;	
    // (͠) COMBINING DOUBLE TILDE	[1CAD | 004E 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0360, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_244)
{
    // FE22 0041;	
    // (︢) COMBINING DOUBLE TILDE LEFT HALF	[1CAD | 004E 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFE22, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_245)
{
    // FE29 0041;	
    // (︩) COMBINING TILDE LEFT HALF BELOW	[1CAD | 004E 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFE29, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_246)
{
    // 0361 0061;	
    // (͡) COMBINING DOUBLE INVERTED BREVE	[1CAD | 004F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0361, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_247)
{
    // FE20 0061;	
    // (︠) COMBINING LIGATURE LEFT HALF	[1CAD | 004F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE20, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_248)
{
    // 0361 0041;	
    // (͡) COMBINING DOUBLE INVERTED BREVE	[1CAD | 004F 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0361, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004F, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_249)
{
    // FE20 0041;	
    // (︠) COMBINING LIGATURE LEFT HALF	[1CAD | 004F 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFE20, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x004F, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_250)
{
    // 0483 0061;	
    // (҃) COMBINING CYRILLIC TITLO	[1CAD | 0050 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0483, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0050, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_251)
{
    // FE2E 0061;	
    // (︮) COMBINING CYRILLIC TITLO LEFT HALF	[1CAD | 0050 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE2E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0050, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_252)
{
    // 0483 0041;	
    // (҃) COMBINING CYRILLIC TITLO	[1CAD | 0050 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0483, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0050, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_253)
{
    // FE2E 0041;	
    // (︮) COMBINING CYRILLIC TITLO LEFT HALF	[1CAD | 0050 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFE2E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0050, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_254)
{
    // A66F 0061;	
    // (꙯) COMBINING CYRILLIC VZMET	[1CAD | 0051 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA66F, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0051, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_255)
{
    // A66F 0041;	
    // (꙯) COMBINING CYRILLIC VZMET	[1CAD | 0051 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA66F, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0051, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_256)
{
    // 05B0 0061;	
    // (ְ) HEBREW POINT SHEVA	[1CAD | 0052 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B0, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0052, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_257)
{
    // 05B0 0041;	
    // (ְ) HEBREW POINT SHEVA	[1CAD | 0052 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05B0, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0052, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_258)
{
    // 05B1 0061;	
    // (ֱ) HEBREW POINT HATAF SEGOL	[1CAD | 0053 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B1, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0053, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_259)
{
    // 05B1 0041;	
    // (ֱ) HEBREW POINT HATAF SEGOL	[1CAD | 0053 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05B1, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0053, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_260)
{
    // 05B2 0061;	
    // (ֲ) HEBREW POINT HATAF PATAH	[1CAD | 0054 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B2, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0054, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_261)
{
    // 05B2 0041;	
    // (ֲ) HEBREW POINT HATAF PATAH	[1CAD | 0054 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05B2, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0054, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_262)
{
    // 05B3 0061;	
    // (ֳ) HEBREW POINT HATAF QAMATS	[1CAD | 0055 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B3, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0055, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_263)
{
    // 05B3 0041;	
    // (ֳ) HEBREW POINT HATAF QAMATS	[1CAD | 0055 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05B3, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0055, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_264)
{
    // 05B4 0061;	
    // (ִ) HEBREW POINT HIRIQ	[1CAD | 0056 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B4, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0056, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_265)
{
    // 05B4 0041;	
    // (ִ) HEBREW POINT HIRIQ	[1CAD | 0056 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05B4, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0056, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_266)
{
    // 05B5 0061;	
    // (ֵ) HEBREW POINT TSERE	[1CAD | 0057 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B5, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0057, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_267)
{
    // 05B5 0041;	
    // (ֵ) HEBREW POINT TSERE	[1CAD | 0057 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05B5, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0057, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_268)
{
    // 05B6 0061;	
    // (ֶ) HEBREW POINT SEGOL	[1CAD | 0058 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B6, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0058, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_269)
{
    // 05B6 0041;	
    // (ֶ) HEBREW POINT SEGOL	[1CAD | 0058 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05B6, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0058, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_270)
{
    // 05B7 0061;	
    // (ַ) HEBREW POINT PATAH	[1CAD | 0059 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B7, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0059, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_271)
{
    // 05B7 0041;	
    // (ַ) HEBREW POINT PATAH	[1CAD | 0059 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05B7, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0059, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_272)
{
    // 05B8 0061;	
    // (ָ) HEBREW POINT QAMATS	[1CAD | 005A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B8, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_273)
{
    // 05C7 0061;	
    // (ׇ) HEBREW POINT QAMATS QATAN	[1CAD | 005A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C7, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_274)
{
    // 05B8 0041;	
    // (ָ) HEBREW POINT QAMATS	[1CAD | 005A 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05B8, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005A, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_275)
{
    // 05C7 0041;	
    // (ׇ) HEBREW POINT QAMATS QATAN	[1CAD | 005A 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05C7, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005A, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_276)
{
    // 05B9 0061;	
    // (ֹ) HEBREW POINT HOLAM	[1CAD | 005B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B9, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_277)
{
    // 05BA 0061;	
    // (ֺ) HEBREW POINT HOLAM HASER FOR VAV	[1CAD | 005B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BA, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_278)
{
    // 05B9 0041;	
    // (ֹ) HEBREW POINT HOLAM	[1CAD | 005B 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05B9, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005B, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_279)
{
    // 05BA 0041;	
    // (ֺ) HEBREW POINT HOLAM HASER FOR VAV	[1CAD | 005B 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05BA, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005B, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_280)
{
    // 05BB 0061;	
    // (ֻ) HEBREW POINT QUBUTS	[1CAD | 005C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BB, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_281)
{
    // 05BB 0041;	
    // (ֻ) HEBREW POINT QUBUTS	[1CAD | 005C 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05BB, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005C, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_282)
{
    // 05C2 0061;	
    // (ׂ) HEBREW POINT SIN DOT	[1CAD | 005D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C2, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_283)
{
    // 05C2 0041;	
    // (ׂ) HEBREW POINT SIN DOT	[1CAD | 005D 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05C2, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005D, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_284)
{
    // 05C1 0061;	
    // (ׁ) HEBREW POINT SHIN DOT	[1CAD | 005E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C1, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_285)
{
    // 05C1 0041;	
    // (ׁ) HEBREW POINT SHIN DOT	[1CAD | 005E 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05C1, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005E, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_286)
{
    // 05BC 0061;	
    // (ּ) HEBREW POINT DAGESH OR MAPIQ	[1CAD | 005F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BC, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_287)
{
    // 05BC 0041;	
    // (ּ) HEBREW POINT DAGESH OR MAPIQ	[1CAD | 005F 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05BC, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x005F, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_288)
{
    // 05BF 0061;	
    // (ֿ) HEBREW POINT RAFE	[1CAD | 0060 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BF, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_289)
{
    // 05BF 0041;	
    // (ֿ) HEBREW POINT RAFE	[1CAD | 0060 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05BF, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0060, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_290)
{
    // FB1E 0061;	
    // (ﬞ) HEBREW POINT JUDEO-SPANISH VARIKA	[1CAD | 0061 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFB1E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0061, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_291)
{
    // FB1E 0041;	
    // (ﬞ) HEBREW POINT JUDEO-SPANISH VARIKA	[1CAD | 0061 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFB1E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0061, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_292)
{
    // 081C 0061;	
    // (ࠜ) SAMARITAN VOWEL SIGN LONG E	[1CAD | 0062 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0062, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_293)
{
    // 081D 0061;	
    // (ࠝ) SAMARITAN VOWEL SIGN E	[1CAD | 0062 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0062, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_294)
{
    // 081C 0041;	
    // (ࠜ) SAMARITAN VOWEL SIGN LONG E	[1CAD | 0062 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x081C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0062, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_295)
{
    // 081D 0041;	
    // (ࠝ) SAMARITAN VOWEL SIGN E	[1CAD | 0062 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x081D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0062, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_296)
{
    // 081E 0061;	
    // (ࠞ) SAMARITAN VOWEL SIGN OVERLONG AA	[1CAD | 0063 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_297)
{
    // 081F 0061;	
    // (ࠟ) SAMARITAN VOWEL SIGN LONG AA	[1CAD | 0063 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081F, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_298)
{
    // 0820 0061;	
    // (ࠠ) SAMARITAN VOWEL SIGN AA	[1CAD | 0063 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0820, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_299)
{
    // 081E 0041;	
    // (ࠞ) SAMARITAN VOWEL SIGN OVERLONG AA	[1CAD | 0063 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x081E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_300)
{
    // 081F 0041;	
    // (ࠟ) SAMARITAN VOWEL SIGN LONG AA	[1CAD | 0063 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x081F, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_301)
{
    // 0820 0041;	
    // (ࠠ) SAMARITAN VOWEL SIGN AA	[1CAD | 0063 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0820, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_302)
{
    // 0821 0061;	
    // (ࠡ) SAMARITAN VOWEL SIGN OVERLONG A	[1CAD | 0064 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0821, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_303)
{
    // 0822 0061;	
    // (ࠢ) SAMARITAN VOWEL SIGN LONG A	[1CAD | 0064 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0822, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_304)
{
    // 0823 0061;	
    // (ࠣ) SAMARITAN VOWEL SIGN A	[1CAD | 0064 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0823, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_305)
{
    // 0821 0041;	
    // (ࠡ) SAMARITAN VOWEL SIGN OVERLONG A	[1CAD | 0064 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0821, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_306)
{
    // 0822 0041;	
    // (ࠢ) SAMARITAN VOWEL SIGN LONG A	[1CAD | 0064 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0822, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_307)
{
    // 0823 0041;	
    // (ࠣ) SAMARITAN VOWEL SIGN A	[1CAD | 0064 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0823, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_308)
{
    // 0824 0061;	
    // (‎‎ࠤ‎‎) SAMARITAN MODIFIER LETTER SHORT A	[1CAD | 0065 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0824, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0065, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_309)
{
    // 0825 0061;	
    // (ࠥ) SAMARITAN VOWEL SIGN SHORT A	[1CAD | 0065 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0825, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0065, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_310)
{
    // 0824 0041;	
    // (‎‎ࠤ‎‎) SAMARITAN MODIFIER LETTER SHORT A	[1CAD | 0065 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0824, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0065, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_311)
{
    // 0825 0041;	
    // (ࠥ) SAMARITAN VOWEL SIGN SHORT A	[1CAD | 0065 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0825, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0065, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_312)
{
    // 0826 0061;	
    // (ࠦ) SAMARITAN VOWEL SIGN LONG U	[1CAD | 0066 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0826, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0066, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_313)
{
    // 0827 0061;	
    // (ࠧ) SAMARITAN VOWEL SIGN U	[1CAD | 0066 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0827, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0066, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_314)
{
    // 0826 0041;	
    // (ࠦ) SAMARITAN VOWEL SIGN LONG U	[1CAD | 0066 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0826, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0066, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_315)
{
    // 0827 0041;	
    // (ࠧ) SAMARITAN VOWEL SIGN U	[1CAD | 0066 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0827, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0066, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_316)
{
    // 0828 0061;	
    // (‎‎ࠨ‎‎) SAMARITAN MODIFIER LETTER I	[1CAD | 0067 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0828, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_317)
{
    // 0829 0061;	
    // (ࠩ) SAMARITAN VOWEL SIGN LONG I	[1CAD | 0067 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0829, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_318)
{
    // 082A 0061;	
    // (ࠪ) SAMARITAN VOWEL SIGN I	[1CAD | 0067 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_319)
{
    // 0828 0041;	
    // (‎‎ࠨ‎‎) SAMARITAN MODIFIER LETTER I	[1CAD | 0067 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0828, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_320)
{
    // 0829 0041;	
    // (ࠩ) SAMARITAN VOWEL SIGN LONG I	[1CAD | 0067 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0829, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_321)
{
    // 082A 0041;	
    // (ࠪ) SAMARITAN VOWEL SIGN I	[1CAD | 0067 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x082A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_322)
{
    // 082B 0061;	
    // (ࠫ) SAMARITAN VOWEL SIGN O	[1CAD | 0068 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082B, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0068, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_323)
{
    // 082B 0041;	
    // (ࠫ) SAMARITAN VOWEL SIGN O	[1CAD | 0068 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x082B, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0068, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_324)
{
    // 082C 0061;	
    // (ࠬ) SAMARITAN VOWEL SIGN SUKUN	[1CAD | 0069 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0069, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_325)
{
    // 082C 0041;	
    // (ࠬ) SAMARITAN VOWEL SIGN SUKUN	[1CAD | 0069 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x082C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0069, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_326)
{
    // 0818 0061;	
    // (࠘) SAMARITAN MARK OCCLUSION	[1CAD | 006A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0818, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_327)
{
    // 0818 0041;	
    // (࠘) SAMARITAN MARK OCCLUSION	[1CAD | 006A 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0818, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006A, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_328)
{
    // 0819 0061;	
    // (࠙) SAMARITAN MARK DAGESH	[1CAD | 006B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0819, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_329)
{
    // 0819 0041;	
    // (࠙) SAMARITAN MARK DAGESH	[1CAD | 006B 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0819, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006B, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_330)
{
    // 082D 0061;	
    // (࠭) SAMARITAN MARK NEQUDAA	[1CAD | 006C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_331)
{
    // 082D 0041;	
    // (࠭) SAMARITAN MARK NEQUDAA	[1CAD | 006C 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x082D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006C, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_332)
{
    // 064B 0061;	
    // (ً) ARABIC FATHATAN	[1CAD | 006D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064B, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_333)
{
    // 064B 0041;	
    // (ً) ARABIC FATHATAN	[1CAD | 006D 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x064B, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006D, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_334)
{
    // FE71 0061;	
    // (‎‎ﹱ‎‎) ARABIC TATWEEL WITH FATHATAN ABOVE	[1CAD | 006D 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE71, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006D, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_335)
{
    // FE71 0041;	
    // (‎‎ﹱ‎‎) ARABIC TATWEEL WITH FATHATAN ABOVE	[1CAD | 006D 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFE71, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006D, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_336)
{
    // FE70 0061;	
    // (‎‎ﹰ‎‎) ARABIC FATHATAN ISOLATED FORM	[1CAD | 006D 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE70, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006D, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_337)
{
    // FE70 0041;	
    // (‎‎ﹰ‎‎) ARABIC FATHATAN ISOLATED FORM	[1CAD | 006D 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE70, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006D, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_338)
{
    // 08F0 0061;	
    // (ࣰ) ARABIC OPEN FATHATAN	[1CAD | 006E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F0, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_339)
{
    // 08F0 0041;	
    // (ࣰ) ARABIC OPEN FATHATAN	[1CAD | 006E 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08F0, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006E, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_340)
{
    // 08E7 0061;	
    // (ࣧ) ARABIC CURLY FATHATAN	[1CAD | 006F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E7, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_341)
{
    // 08E7 0041;	
    // (ࣧ) ARABIC CURLY FATHATAN	[1CAD | 006F 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08E7, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x006F, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_342)
{
    // 064C 0061;	
    // (ٌ) ARABIC DAMMATAN	[1CAD | 0070 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0070, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_343)
{
    // 064C 0041;	
    // (ٌ) ARABIC DAMMATAN	[1CAD | 0070 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x064C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0070, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_344)
{
    // FE72 0061;	
    // (‎‎ﹲ‎‎) ARABIC DAMMATAN ISOLATED FORM	[1CAD | 0070 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE72, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0070, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_345)
{
    // FE72 0041;	
    // (‎‎ﹲ‎‎) ARABIC DAMMATAN ISOLATED FORM	[1CAD | 0070 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE72, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0070, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_346)
{
    // FC5E 0061;	
    // (‎‎ﱞ‎‎) ARABIC LIGATURE SHADDA WITH DAMMATAN ISOLATED FORM	[1CAD | 0070 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5E, 0x0061 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0070, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_347)
{
    // FC5E 0041;	
    // (‎‎ﱞ‎‎) ARABIC LIGATURE SHADDA WITH DAMMATAN ISOLATED FORM	[1CAD | 0070 0080 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC5E, 0x0041 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0070, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_348)
{
    // 08F1 0061;	
    // (ࣱ) ARABIC OPEN DAMMATAN	[1CAD | 0071 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F1, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0071, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_349)
{
    // 08F1 0041;	
    // (ࣱ) ARABIC OPEN DAMMATAN	[1CAD | 0071 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08F1, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0071, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_350)
{
    // 08E8 0061;	
    // (ࣨ) ARABIC CURLY DAMMATAN	[1CAD | 0072 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E8, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0072, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_351)
{
    // 08E8 0041;	
    // (ࣨ) ARABIC CURLY DAMMATAN	[1CAD | 0072 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08E8, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0072, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_352)
{
    // 064D 0061;	
    // (ٍ) ARABIC KASRATAN	[1CAD | 0073 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0073, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_353)
{
    // 064D 0041;	
    // (ٍ) ARABIC KASRATAN	[1CAD | 0073 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x064D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0073, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_354)
{
    // FE74 0061;	
    // (‎‎ﹴ‎‎) ARABIC KASRATAN ISOLATED FORM	[1CAD | 0073 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE74, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0073, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_355)
{
    // FE74 0041;	
    // (‎‎ﹴ‎‎) ARABIC KASRATAN ISOLATED FORM	[1CAD | 0073 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE74, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0073, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_356)
{
    // FC5F 0061;	
    // (‎‎ﱟ‎‎) ARABIC LIGATURE SHADDA WITH KASRATAN ISOLATED FORM	[1CAD | 0073 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5F, 0x0061 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0073, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_357)
{
    // FC5F 0041;	
    // (‎‎ﱟ‎‎) ARABIC LIGATURE SHADDA WITH KASRATAN ISOLATED FORM	[1CAD | 0073 0080 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC5F, 0x0041 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0073, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_358)
{
    // 08F2 0061;	
    // (ࣲ) ARABIC OPEN KASRATAN	[1CAD | 0074 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F2, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0074, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_359)
{
    // 08F2 0041;	
    // (ࣲ) ARABIC OPEN KASRATAN	[1CAD | 0074 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08F2, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0074, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_360)
{
    // 08E9 0061;	
    // (ࣩ) ARABIC CURLY KASRATAN	[1CAD | 0075 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E9, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0075, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_361)
{
    // 08E9 0041;	
    // (ࣩ) ARABIC CURLY KASRATAN	[1CAD | 0075 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08E9, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0075, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_362)
{
    // 064E 0061;	
    // (َ) ARABIC FATHA	[1CAD | 0076 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0076, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_363)
{
    // 064E 0041;	
    // (َ) ARABIC FATHA	[1CAD | 0076 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x064E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0076, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_364)
{
    // FE77 0061;	
    // (‎‎ﹷ‎‎) ARABIC FATHA MEDIAL FORM	[1CAD | 0076 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE77, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0076, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_365)
{
    // FE77 0041;	
    // (‎‎ﹷ‎‎) ARABIC FATHA MEDIAL FORM	[1CAD | 0076 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFE77, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0076, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_366)
{
    // FE76 0061;	
    // (‎‎ﹶ‎‎) ARABIC FATHA ISOLATED FORM	[1CAD | 0076 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE76, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0076, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_367)
{
    // FE76 0041;	
    // (‎‎ﹶ‎‎) ARABIC FATHA ISOLATED FORM	[1CAD | 0076 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE76, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0076, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_368)
{
    // FCF2 0061;	
    // (‎‎ﳲ‎‎) ARABIC LIGATURE SHADDA WITH FATHA MEDIAL FORM	[1CAD | 0076 0080 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCF2, 0x0061 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0076, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_369)
{
    // FCF2 0041;	
    // (‎‎ﳲ‎‎) ARABIC LIGATURE SHADDA WITH FATHA MEDIAL FORM	[1CAD | 0076 0080 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCF2, 0x0041 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0076, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_370)
{
    // FC60 0061;	
    // (‎‎ﱠ‎‎) ARABIC LIGATURE SHADDA WITH FATHA ISOLATED FORM	[1CAD | 0076 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC60, 0x0061 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0076, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_371)
{
    // FC60 0041;	
    // (‎‎ﱠ‎‎) ARABIC LIGATURE SHADDA WITH FATHA ISOLATED FORM	[1CAD | 0076 0080 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC60, 0x0041 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0076, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_372)
{
    // 08E4 0061;	
    // (ࣤ) ARABIC CURLY FATHA	[1CAD | 0077 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E4, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0077, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_373)
{
    // 08E4 0041;	
    // (ࣤ) ARABIC CURLY FATHA	[1CAD | 0077 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08E4, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0077, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_374)
{
    // 08F4 0061;	
    // (ࣴ) ARABIC FATHA WITH RING	[1CAD | 0078 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F4, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0078, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_375)
{
    // 08F4 0041;	
    // (ࣴ) ARABIC FATHA WITH RING	[1CAD | 0078 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08F4, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0078, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_376)
{
    // 08F5 0061;	
    // (ࣵ) ARABIC FATHA WITH DOT ABOVE	[1CAD | 0079 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F5, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0079, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_377)
{
    // 08F5 0041;	
    // (ࣵ) ARABIC FATHA WITH DOT ABOVE	[1CAD | 0079 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08F5, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0079, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_378)
{
    // 064F 0061;	
    // (ُ) ARABIC DAMMA	[1CAD | 007A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064F, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_379)
{
    // 064F 0041;	
    // (ُ) ARABIC DAMMA	[1CAD | 007A 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x064F, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007A, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_380)
{
    // FE79 0061;	
    // (‎‎ﹹ‎‎) ARABIC DAMMA MEDIAL FORM	[1CAD | 007A 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE79, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007A, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_381)
{
    // FE79 0041;	
    // (‎‎ﹹ‎‎) ARABIC DAMMA MEDIAL FORM	[1CAD | 007A 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFE79, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007A, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_382)
{
    // FE78 0061;	
    // (‎‎ﹸ‎‎) ARABIC DAMMA ISOLATED FORM	[1CAD | 007A 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE78, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007A, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_383)
{
    // FE78 0041;	
    // (‎‎ﹸ‎‎) ARABIC DAMMA ISOLATED FORM	[1CAD | 007A 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE78, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007A, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_384)
{
    // FCF3 0061;	
    // (‎‎ﳳ‎‎) ARABIC LIGATURE SHADDA WITH DAMMA MEDIAL FORM	[1CAD | 007A 0080 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCF3, 0x0061 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x007A, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_385)
{
    // FCF3 0041;	
    // (‎‎ﳳ‎‎) ARABIC LIGATURE SHADDA WITH DAMMA MEDIAL FORM	[1CAD | 007A 0080 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCF3, 0x0041 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x007A, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_386)
{
    // FC61 0061;	
    // (‎‎ﱡ‎‎) ARABIC LIGATURE SHADDA WITH DAMMA ISOLATED FORM	[1CAD | 007A 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC61, 0x0061 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x007A, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_387)
{
    // FC61 0041;	
    // (‎‎ﱡ‎‎) ARABIC LIGATURE SHADDA WITH DAMMA ISOLATED FORM	[1CAD | 007A 0080 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC61, 0x0041 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x007A, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_388)
{
    // 08E5 0061;	
    // (ࣥ) ARABIC CURLY DAMMA	[1CAD | 007B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E5, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_389)
{
    // 08E5 0041;	
    // (ࣥ) ARABIC CURLY DAMMA	[1CAD | 007B 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08E5, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007B, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_390)
{
    // 08FE 0061;	
    // (ࣾ) ARABIC DAMMA WITH DOT	[1CAD | 007C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FE, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_391)
{
    // 08FE 0041;	
    // (ࣾ) ARABIC DAMMA WITH DOT	[1CAD | 007C 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08FE, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007C, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_392)
{
    // 0650 0061;	
    // (ِ) ARABIC KASRA	[1CAD | 007D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0650, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_393)
{
    // 0650 0041;	
    // (ِ) ARABIC KASRA	[1CAD | 007D 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0650, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007D, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_394)
{
    // FE7B 0061;	
    // (‎‎ﹻ‎‎) ARABIC KASRA MEDIAL FORM	[1CAD | 007D 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7B, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007D, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_395)
{
    // FE7B 0041;	
    // (‎‎ﹻ‎‎) ARABIC KASRA MEDIAL FORM	[1CAD | 007D 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFE7B, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007D, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_396)
{
    // FE7A 0061;	
    // (‎‎ﹺ‎‎) ARABIC KASRA ISOLATED FORM	[1CAD | 007D 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007D, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_397)
{
    // FE7A 0041;	
    // (‎‎ﹺ‎‎) ARABIC KASRA ISOLATED FORM	[1CAD | 007D 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE7A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007D, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_398)
{
    // FCF4 0061;	
    // (‎‎ﳴ‎‎) ARABIC LIGATURE SHADDA WITH KASRA MEDIAL FORM	[1CAD | 007D 0080 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCF4, 0x0061 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x007D, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_399)
{
    // FCF4 0041;	
    // (‎‎ﳴ‎‎) ARABIC LIGATURE SHADDA WITH KASRA MEDIAL FORM	[1CAD | 007D 0080 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCF4, 0x0041 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x007D, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_400)
{
    // FC62 0061;	
    // (‎‎ﱢ‎‎) ARABIC LIGATURE SHADDA WITH KASRA ISOLATED FORM	[1CAD | 007D 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC62, 0x0061 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x007D, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_401)
{
    // FC62 0041;	
    // (‎‎ﱢ‎‎) ARABIC LIGATURE SHADDA WITH KASRA ISOLATED FORM	[1CAD | 007D 0080 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC62, 0x0041 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x007D, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_402)
{
    // 08E6 0061;	
    // (ࣦ) ARABIC CURLY KASRA	[1CAD | 007E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E6, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_403)
{
    // 08E6 0041;	
    // (ࣦ) ARABIC CURLY KASRA	[1CAD | 007E 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08E6, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007E, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_404)
{
    // 08F6 0061;	
    // (ࣶ) ARABIC KASRA WITH DOT BELOW	[1CAD | 007F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F6, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_405)
{
    // 08F6 0041;	
    // (ࣶ) ARABIC KASRA WITH DOT BELOW	[1CAD | 007F 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08F6, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x007F, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_406)
{
    // 0651 0061;	
    // (ّ) ARABIC SHADDA	[1CAD | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0651, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_407)
{
    // 0AFB 0061;	
    // (ૻ) GUJARATI SIGN SHADDA	[1CAD | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFB, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_408)
{
    // 11237 0061;	
    // (𑈷) KHOJKI SIGN SHADDA	[1CAD | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11237, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_409)
{
    // 0651 0041;	
    // (ّ) ARABIC SHADDA	[1CAD | 0080 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0651, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_410)
{
    // 0AFB 0041;	
    // (ૻ) GUJARATI SIGN SHADDA	[1CAD | 0080 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AFB, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_411)
{
    // 11237 0041;	
    // (𑈷) KHOJKI SIGN SHADDA	[1CAD | 0080 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11237, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_412)
{
    // FE7D 0061;	
    // (‎‎ﹽ‎‎) ARABIC SHADDA MEDIAL FORM	[1CAD | 0080 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0080, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_413)
{
    // FE7D 0041;	
    // (‎‎ﹽ‎‎) ARABIC SHADDA MEDIAL FORM	[1CAD | 0080 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFE7D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0080, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_414)
{
    // FE7C 0061;	
    // (‎‎ﹼ‎‎) ARABIC SHADDA ISOLATED FORM	[1CAD | 0080 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0080, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_415)
{
    // FE7C 0041;	
    // (‎‎ﹼ‎‎) ARABIC SHADDA ISOLATED FORM	[1CAD | 0080 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE7C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0080, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_416)
{
    // FC63 0061;	
    // (‎‎ﱣ‎‎) ARABIC LIGATURE SHADDA WITH SUPERSCRIPT ALEF ISOLATED FORM	[1CAD | 0080 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC63, 0x0061 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0080, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_417)
{
    // FC63 0041;	
    // (‎‎ﱣ‎‎) ARABIC LIGATURE SHADDA WITH SUPERSCRIPT ALEF ISOLATED FORM	[1CAD | 0080 0098 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC63, 0x0041 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0080, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_418)
{
    // 0652 0061;	
    // (ْ) ARABIC SUKUN	[1CAD | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0652, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_419)
{
    // 0AFA 0061;	
    // (ૺ) GUJARATI SIGN SUKUN	[1CAD | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFA, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_420)
{
    // 1123E 0061;	
    // (𑈾) KHOJKI SIGN SUKUN	[1CAD | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1123E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_421)
{
    // 0652 0041;	
    // (ْ) ARABIC SUKUN	[1CAD | 0081 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0652, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_422)
{
    // 0AFA 0041;	
    // (ૺ) GUJARATI SIGN SUKUN	[1CAD | 0081 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AFA, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_423)
{
    // 1123E 0041;	
    // (𑈾) KHOJKI SIGN SUKUN	[1CAD | 0081 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1123E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_424)
{
    // FE7F 0061;	
    // (‎‎ﹿ‎‎) ARABIC SUKUN MEDIAL FORM	[1CAD | 0081 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7F, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0081, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_425)
{
    // FE7F 0041;	
    // (‎‎ﹿ‎‎) ARABIC SUKUN MEDIAL FORM	[1CAD | 0081 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFE7F, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0081, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_426)
{
    // FE7E 0061;	
    // (‎‎ﹾ‎‎) ARABIC SUKUN ISOLATED FORM	[1CAD | 0081 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0081, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_427)
{
    // FE7E 0041;	
    // (‎‎ﹾ‎‎) ARABIC SUKUN ISOLATED FORM	[1CAD | 0081 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE7E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0081, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_428)
{
    // 0653 0061;	
    // (ٓ) ARABIC MADDAH ABOVE	[1CAD | 0082 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0653, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0082, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_429)
{
    // 0AFC 0061;	
    // (ૼ) GUJARATI SIGN MADDAH	[1CAD | 0082 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFC, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0082, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_430)
{
    // 0653 0041;	
    // (ٓ) ARABIC MADDAH ABOVE	[1CAD | 0082 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0653, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0082, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_431)
{
    // 0AFC 0041;	
    // (ૼ) GUJARATI SIGN MADDAH	[1CAD | 0082 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AFC, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0082, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_432)
{
    // 0654 0061;	
    // (ٔ) ARABIC HAMZA ABOVE	[1CAD | 0083 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0654, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_433)
{
    // 0654 0041;	
    // (ٔ) ARABIC HAMZA ABOVE	[1CAD | 0083 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0654, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0083, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_434)
{
    // 0655 0061;	
    // (ٕ) ARABIC HAMZA BELOW	[1CAD | 0084 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0655, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0084, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_435)
{
    // 0655 0041;	
    // (ٕ) ARABIC HAMZA BELOW	[1CAD | 0084 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0655, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0084, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_436)
{
    // 065F 0061;	
    // (ٟ) ARABIC WAVY HAMZA BELOW	[1CAD | 0085 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065F, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0085, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_437)
{
    // 065F 0041;	
    // (ٟ) ARABIC WAVY HAMZA BELOW	[1CAD | 0085 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x065F, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0085, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_438)
{
    // 0656 0061;	
    // (ٖ) ARABIC SUBSCRIPT ALEF	[1CAD | 0086 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0656, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0086, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_439)
{
    // 0656 0041;	
    // (ٖ) ARABIC SUBSCRIPT ALEF	[1CAD | 0086 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0656, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0086, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_440)
{
    // 0657 0061;	
    // (ٗ) ARABIC INVERTED DAMMA	[1CAD | 0087 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0657, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0087, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_441)
{
    // 0657 0041;	
    // (ٗ) ARABIC INVERTED DAMMA	[1CAD | 0087 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0657, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0087, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_442)
{
    // 0658 0061;	
    // (٘) ARABIC MARK NOON GHUNNA	[1CAD | 0088 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0658, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0088, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_443)
{
    // 0658 0041;	
    // (٘) ARABIC MARK NOON GHUNNA	[1CAD | 0088 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0658, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0088, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_444)
{
    // 08FF 0061;	
    // (ࣿ) ARABIC MARK SIDEWAYS NOON GHUNNA	[1CAD | 0089 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FF, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0089, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_445)
{
    // 08FF 0041;	
    // (ࣿ) ARABIC MARK SIDEWAYS NOON GHUNNA	[1CAD | 0089 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08FF, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0089, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_446)
{
    // 0659 0061;	
    // (ٙ) ARABIC ZWARAKAY	[1CAD | 008A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0659, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_447)
{
    // 0659 0041;	
    // (ٙ) ARABIC ZWARAKAY	[1CAD | 008A 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0659, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008A, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_448)
{
    // 065A 0061;	
    // (ٚ) ARABIC VOWEL SIGN SMALL V ABOVE	[1CAD | 008B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_449)
{
    // 065A 0041;	
    // (ٚ) ARABIC VOWEL SIGN SMALL V ABOVE	[1CAD | 008B 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x065A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008B, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_450)
{
    // 065B 0061;	
    // (ٛ) ARABIC VOWEL SIGN INVERTED SMALL V ABOVE	[1CAD | 008C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065B, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_451)
{
    // 065B 0041;	
    // (ٛ) ARABIC VOWEL SIGN INVERTED SMALL V ABOVE	[1CAD | 008C 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x065B, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008C, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_452)
{
    // 065C 0061;	
    // (ٜ) ARABIC VOWEL SIGN DOT BELOW	[1CAD | 008D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_453)
{
    // 065C 0041;	
    // (ٜ) ARABIC VOWEL SIGN DOT BELOW	[1CAD | 008D 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x065C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008D, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_454)
{
    // 065D 0061;	
    // (ٝ) ARABIC REVERSED DAMMA	[1CAD | 008E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_455)
{
    // 065D 0041;	
    // (ٝ) ARABIC REVERSED DAMMA	[1CAD | 008E 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x065D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008E, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_456)
{
    // 065E 0061;	
    // (ٞ) ARABIC FATHA WITH TWO DOTS	[1CAD | 008F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_457)
{
    // 065E 0041;	
    // (ٞ) ARABIC FATHA WITH TWO DOTS	[1CAD | 008F 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x065E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x008F, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_458)
{
    // 08E3 0061;	
    // (ࣣ) ARABIC TURNED DAMMA BELOW	[1CAD | 0090 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E3, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0090, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_459)
{
    // 08E3 0041;	
    // (ࣣ) ARABIC TURNED DAMMA BELOW	[1CAD | 0090 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08E3, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0090, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_460)
{
    // 08F7 0061;	
    // (ࣷ) ARABIC LEFT ARROWHEAD ABOVE	[1CAD | 0091 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F7, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0091, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_461)
{
    // 08F7 0041;	
    // (ࣷ) ARABIC LEFT ARROWHEAD ABOVE	[1CAD | 0091 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08F7, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0091, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_462)
{
    // 08F8 0061;	
    // (ࣸ) ARABIC RIGHT ARROWHEAD ABOVE	[1CAD | 0092 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F8, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0092, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_463)
{
    // 08F8 0041;	
    // (ࣸ) ARABIC RIGHT ARROWHEAD ABOVE	[1CAD | 0092 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08F8, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0092, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_464)
{
    // 08FD 0061;	
    // (ࣽ) ARABIC RIGHT ARROWHEAD ABOVE WITH DOT	[1CAD | 0093 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FD, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0093, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_465)
{
    // 08FD 0041;	
    // (ࣽ) ARABIC RIGHT ARROWHEAD ABOVE WITH DOT	[1CAD | 0093 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08FD, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0093, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_466)
{
    // 08FB 0061;	
    // (ࣻ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE	[1CAD | 0094 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FB, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0094, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_467)
{
    // 08FB 0041;	
    // (ࣻ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE	[1CAD | 0094 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08FB, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0094, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_468)
{
    // 08FC 0061;	
    // (ࣼ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT	[1CAD | 0095 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FC, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0095, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_469)
{
    // 08FC 0041;	
    // (ࣼ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT	[1CAD | 0095 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08FC, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0095, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_470)
{
    // 08F9 0061;	
    // (ࣹ) ARABIC LEFT ARROWHEAD BELOW	[1CAD | 0096 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F9, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0096, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_471)
{
    // 08F9 0041;	
    // (ࣹ) ARABIC LEFT ARROWHEAD BELOW	[1CAD | 0096 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08F9, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0096, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_472)
{
    // 08FA 0061;	
    // (ࣺ) ARABIC RIGHT ARROWHEAD BELOW	[1CAD | 0097 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FA, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0097, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_473)
{
    // 08FA 0041;	
    // (ࣺ) ARABIC RIGHT ARROWHEAD BELOW	[1CAD | 0097 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08FA, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0097, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_474)
{
    // 0670 0061;	
    // (ٰ) ARABIC LETTER SUPERSCRIPT ALEF	[1CAD | 0098 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0670, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0098, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_475)
{
    // 0670 0041;	
    // (ٰ) ARABIC LETTER SUPERSCRIPT ALEF	[1CAD | 0098 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0670, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0098, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_476)
{
    // 0711 0061;	
    // (ܑ) SYRIAC LETTER SUPERSCRIPT ALAPH	[1CAD | 0099 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0711, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0099, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_477)
{
    // 0711 0041;	
    // (ܑ) SYRIAC LETTER SUPERSCRIPT ALAPH	[1CAD | 0099 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0711, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0099, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_478)
{
    // 0730 0061;	
    // (ܰ) SYRIAC PTHAHA ABOVE	[1CAD | 009A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0730, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_479)
{
    // 0730 0041;	
    // (ܰ) SYRIAC PTHAHA ABOVE	[1CAD | 009A 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0730, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009A, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_480)
{
    // 0731 0061;	
    // (ܱ) SYRIAC PTHAHA BELOW	[1CAD | 009B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0731, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_481)
{
    // 0731 0041;	
    // (ܱ) SYRIAC PTHAHA BELOW	[1CAD | 009B 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0731, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009B, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_482)
{
    // 0732 0061;	
    // (ܲ) SYRIAC PTHAHA DOTTED	[1CAD | 009C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0732, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_483)
{
    // 0732 0041;	
    // (ܲ) SYRIAC PTHAHA DOTTED	[1CAD | 009C 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0732, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009C, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_484)
{
    // 0733 0061;	
    // (ܳ) SYRIAC ZQAPHA ABOVE	[1CAD | 009D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0733, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_485)
{
    // 0733 0041;	
    // (ܳ) SYRIAC ZQAPHA ABOVE	[1CAD | 009D 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0733, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009D, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_486)
{
    // 0734 0061;	
    // (ܴ) SYRIAC ZQAPHA BELOW	[1CAD | 009E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0734, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_487)
{
    // 0734 0041;	
    // (ܴ) SYRIAC ZQAPHA BELOW	[1CAD | 009E 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0734, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009E, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_488)
{
    // 0735 0061;	
    // (ܵ) SYRIAC ZQAPHA DOTTED	[1CAD | 009F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0735, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_489)
{
    // 0735 0041;	
    // (ܵ) SYRIAC ZQAPHA DOTTED	[1CAD | 009F 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0735, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x009F, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_490)
{
    // 0736 0061;	
    // (ܶ) SYRIAC RBASA ABOVE	[1CAD | 00A0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0736, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x00A0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_491)
{
    // 0736 0041;	
    // (ܶ) SYRIAC RBASA ABOVE	[1CAD | 00A0 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0736, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x00A0, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_492)
{
    // 0737 0061;	
    // (ܷ) SYRIAC RBASA BELOW	[1CAD | 00A1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0737, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x00A1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_493)
{
    // 0737 0041;	
    // (ܷ) SYRIAC RBASA BELOW	[1CAD | 00A1 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0737, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x00A1, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_494)
{
    // 0738 0061;	
    // (ܸ) SYRIAC DOTTED ZLAMA HORIZONTAL	[1CAD | 00A2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0738, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x00A2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_495)
{
    // 0738 0041;	
    // (ܸ) SYRIAC DOTTED ZLAMA HORIZONTAL	[1CAD | 00A2 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0738, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x00A2, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_496)
{
    // 0739 0061;	
    // (ܹ) SYRIAC DOTTED ZLAMA ANGULAR	[1CAD | 00A3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0739, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x00A3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_497)
{
    // 0739 0041;	
    // (ܹ) SYRIAC DOTTED ZLAMA ANGULAR	[1CAD | 00A3 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0739, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x00A3, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_498)
{
    // 073A 0061;	
    // (ܺ) SYRIAC HBASA ABOVE	[1CAD | 00A4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x00A4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_096_499)
{
    // 073A 0041;	
    // (ܺ) SYRIAC HBASA ABOVE	[1CAD | 00A4 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x073A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x00A4, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

