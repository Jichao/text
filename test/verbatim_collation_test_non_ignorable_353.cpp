// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_353_000)
{
    // 3E28 003F;	
    // (㸨) CJK UNIFIED IDEOGRAPH-3E28	[FB80 BE28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E28, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_001)
{
    // 3E28 0061;	
    // (㸨) CJK UNIFIED IDEOGRAPH-3E28	[FB80 BE28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E28, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_002)
{
    // 3E28 0041;	
    // (㸨) CJK UNIFIED IDEOGRAPH-3E28	[FB80 BE28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E28, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_003)
{
    // 3E28 0062;	
    // (㸨) CJK UNIFIED IDEOGRAPH-3E28	[FB80 BE28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E28, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_004)
{
    // 3E29 0021;	
    // (㸩) CJK UNIFIED IDEOGRAPH-3E29	[FB80 BE29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E29, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_005)
{
    // 3E29 003F;	
    // (㸩) CJK UNIFIED IDEOGRAPH-3E29	[FB80 BE29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E29, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_006)
{
    // 3E29 0061;	
    // (㸩) CJK UNIFIED IDEOGRAPH-3E29	[FB80 BE29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E29, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_007)
{
    // 3E29 0041;	
    // (㸩) CJK UNIFIED IDEOGRAPH-3E29	[FB80 BE29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E29, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_008)
{
    // 3E29 0062;	
    // (㸩) CJK UNIFIED IDEOGRAPH-3E29	[FB80 BE29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E29, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_009)
{
    // 3E2A 0021;	
    // (㸪) CJK UNIFIED IDEOGRAPH-3E2A	[FB80 BE2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_010)
{
    // 3E2A 003F;	
    // (㸪) CJK UNIFIED IDEOGRAPH-3E2A	[FB80 BE2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_011)
{
    // 3E2A 0061;	
    // (㸪) CJK UNIFIED IDEOGRAPH-3E2A	[FB80 BE2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_012)
{
    // 3E2A 0041;	
    // (㸪) CJK UNIFIED IDEOGRAPH-3E2A	[FB80 BE2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E2A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_013)
{
    // 3E2A 0062;	
    // (㸪) CJK UNIFIED IDEOGRAPH-3E2A	[FB80 BE2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_014)
{
    // 3E2B 0021;	
    // (㸫) CJK UNIFIED IDEOGRAPH-3E2B	[FB80 BE2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_015)
{
    // 3E2B 003F;	
    // (㸫) CJK UNIFIED IDEOGRAPH-3E2B	[FB80 BE2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_016)
{
    // 3E2B 0061;	
    // (㸫) CJK UNIFIED IDEOGRAPH-3E2B	[FB80 BE2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_017)
{
    // 3E2B 0041;	
    // (㸫) CJK UNIFIED IDEOGRAPH-3E2B	[FB80 BE2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E2B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_018)
{
    // 3E2B 0062;	
    // (㸫) CJK UNIFIED IDEOGRAPH-3E2B	[FB80 BE2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_019)
{
    // 3E2C 0021;	
    // (㸬) CJK UNIFIED IDEOGRAPH-3E2C	[FB80 BE2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_020)
{
    // 3E2C 003F;	
    // (㸬) CJK UNIFIED IDEOGRAPH-3E2C	[FB80 BE2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_021)
{
    // 3E2C 0061;	
    // (㸬) CJK UNIFIED IDEOGRAPH-3E2C	[FB80 BE2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_022)
{
    // 3E2C 0041;	
    // (㸬) CJK UNIFIED IDEOGRAPH-3E2C	[FB80 BE2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E2C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_023)
{
    // 3E2C 0062;	
    // (㸬) CJK UNIFIED IDEOGRAPH-3E2C	[FB80 BE2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_024)
{
    // 3E2D 0021;	
    // (㸭) CJK UNIFIED IDEOGRAPH-3E2D	[FB80 BE2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_025)
{
    // 3E2D 003F;	
    // (㸭) CJK UNIFIED IDEOGRAPH-3E2D	[FB80 BE2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_026)
{
    // 3E2D 0061;	
    // (㸭) CJK UNIFIED IDEOGRAPH-3E2D	[FB80 BE2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_027)
{
    // 3E2D 0041;	
    // (㸭) CJK UNIFIED IDEOGRAPH-3E2D	[FB80 BE2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E2D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_028)
{
    // 3E2D 0062;	
    // (㸭) CJK UNIFIED IDEOGRAPH-3E2D	[FB80 BE2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_029)
{
    // 3E2E 0021;	
    // (㸮) CJK UNIFIED IDEOGRAPH-3E2E	[FB80 BE2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_030)
{
    // 3E2E 003F;	
    // (㸮) CJK UNIFIED IDEOGRAPH-3E2E	[FB80 BE2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_031)
{
    // 3E2E 0061;	
    // (㸮) CJK UNIFIED IDEOGRAPH-3E2E	[FB80 BE2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_032)
{
    // 3E2E 0041;	
    // (㸮) CJK UNIFIED IDEOGRAPH-3E2E	[FB80 BE2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E2E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_033)
{
    // 3E2E 0062;	
    // (㸮) CJK UNIFIED IDEOGRAPH-3E2E	[FB80 BE2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_034)
{
    // 3E2F 0021;	
    // (㸯) CJK UNIFIED IDEOGRAPH-3E2F	[FB80 BE2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_035)
{
    // 3E2F 003F;	
    // (㸯) CJK UNIFIED IDEOGRAPH-3E2F	[FB80 BE2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_036)
{
    // 3E2F 0061;	
    // (㸯) CJK UNIFIED IDEOGRAPH-3E2F	[FB80 BE2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_037)
{
    // 3E2F 0041;	
    // (㸯) CJK UNIFIED IDEOGRAPH-3E2F	[FB80 BE2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E2F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_038)
{
    // 3E2F 0062;	
    // (㸯) CJK UNIFIED IDEOGRAPH-3E2F	[FB80 BE2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E2F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_039)
{
    // 3E30 0021;	
    // (㸰) CJK UNIFIED IDEOGRAPH-3E30	[FB80 BE30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E30, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_040)
{
    // 3E30 003F;	
    // (㸰) CJK UNIFIED IDEOGRAPH-3E30	[FB80 BE30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E30, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_041)
{
    // 3E30 0061;	
    // (㸰) CJK UNIFIED IDEOGRAPH-3E30	[FB80 BE30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E30, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_042)
{
    // 3E30 0041;	
    // (㸰) CJK UNIFIED IDEOGRAPH-3E30	[FB80 BE30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E30, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_043)
{
    // 3E30 0062;	
    // (㸰) CJK UNIFIED IDEOGRAPH-3E30	[FB80 BE30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E30, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_044)
{
    // 3E31 0021;	
    // (㸱) CJK UNIFIED IDEOGRAPH-3E31	[FB80 BE31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E31, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_045)
{
    // 3E31 003F;	
    // (㸱) CJK UNIFIED IDEOGRAPH-3E31	[FB80 BE31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E31, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_046)
{
    // 3E31 0061;	
    // (㸱) CJK UNIFIED IDEOGRAPH-3E31	[FB80 BE31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E31, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_047)
{
    // 3E31 0041;	
    // (㸱) CJK UNIFIED IDEOGRAPH-3E31	[FB80 BE31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E31, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_048)
{
    // 3E31 0062;	
    // (㸱) CJK UNIFIED IDEOGRAPH-3E31	[FB80 BE31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E31, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_049)
{
    // 3E32 0021;	
    // (㸲) CJK UNIFIED IDEOGRAPH-3E32	[FB80 BE32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E32, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_050)
{
    // 3E32 003F;	
    // (㸲) CJK UNIFIED IDEOGRAPH-3E32	[FB80 BE32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E32, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_051)
{
    // 3E32 0061;	
    // (㸲) CJK UNIFIED IDEOGRAPH-3E32	[FB80 BE32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E32, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_052)
{
    // 3E32 0041;	
    // (㸲) CJK UNIFIED IDEOGRAPH-3E32	[FB80 BE32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E32, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_053)
{
    // 3E32 0062;	
    // (㸲) CJK UNIFIED IDEOGRAPH-3E32	[FB80 BE32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E32, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_054)
{
    // 3E33 0021;	
    // (㸳) CJK UNIFIED IDEOGRAPH-3E33	[FB80 BE33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E33, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_055)
{
    // 3E33 003F;	
    // (㸳) CJK UNIFIED IDEOGRAPH-3E33	[FB80 BE33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E33, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_056)
{
    // 3E33 0061;	
    // (㸳) CJK UNIFIED IDEOGRAPH-3E33	[FB80 BE33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E33, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_057)
{
    // 3E33 0041;	
    // (㸳) CJK UNIFIED IDEOGRAPH-3E33	[FB80 BE33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E33, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_058)
{
    // 3E33 0062;	
    // (㸳) CJK UNIFIED IDEOGRAPH-3E33	[FB80 BE33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E33, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_059)
{
    // 3E34 0021;	
    // (㸴) CJK UNIFIED IDEOGRAPH-3E34	[FB80 BE34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E34, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_060)
{
    // 3E34 003F;	
    // (㸴) CJK UNIFIED IDEOGRAPH-3E34	[FB80 BE34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E34, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_061)
{
    // 3E34 0061;	
    // (㸴) CJK UNIFIED IDEOGRAPH-3E34	[FB80 BE34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E34, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_062)
{
    // 3E34 0041;	
    // (㸴) CJK UNIFIED IDEOGRAPH-3E34	[FB80 BE34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E34, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_063)
{
    // 3E34 0062;	
    // (㸴) CJK UNIFIED IDEOGRAPH-3E34	[FB80 BE34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E34, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_064)
{
    // 3E35 0021;	
    // (㸵) CJK UNIFIED IDEOGRAPH-3E35	[FB80 BE35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E35, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_065)
{
    // 3E35 003F;	
    // (㸵) CJK UNIFIED IDEOGRAPH-3E35	[FB80 BE35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E35, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_066)
{
    // 3E35 0061;	
    // (㸵) CJK UNIFIED IDEOGRAPH-3E35	[FB80 BE35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E35, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_067)
{
    // 3E35 0041;	
    // (㸵) CJK UNIFIED IDEOGRAPH-3E35	[FB80 BE35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E35, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_068)
{
    // 3E35 0062;	
    // (㸵) CJK UNIFIED IDEOGRAPH-3E35	[FB80 BE35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E35, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_069)
{
    // 3E36 0021;	
    // (㸶) CJK UNIFIED IDEOGRAPH-3E36	[FB80 BE36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E36, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_070)
{
    // 3E36 003F;	
    // (㸶) CJK UNIFIED IDEOGRAPH-3E36	[FB80 BE36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E36, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_071)
{
    // 3E36 0061;	
    // (㸶) CJK UNIFIED IDEOGRAPH-3E36	[FB80 BE36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E36, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_072)
{
    // 3E36 0041;	
    // (㸶) CJK UNIFIED IDEOGRAPH-3E36	[FB80 BE36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E36, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_073)
{
    // 3E36 0062;	
    // (㸶) CJK UNIFIED IDEOGRAPH-3E36	[FB80 BE36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E36, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_074)
{
    // 3E37 0021;	
    // (㸷) CJK UNIFIED IDEOGRAPH-3E37	[FB80 BE37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E37, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_075)
{
    // 3E37 003F;	
    // (㸷) CJK UNIFIED IDEOGRAPH-3E37	[FB80 BE37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E37, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_076)
{
    // 3E37 0061;	
    // (㸷) CJK UNIFIED IDEOGRAPH-3E37	[FB80 BE37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E37, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_077)
{
    // 3E37 0041;	
    // (㸷) CJK UNIFIED IDEOGRAPH-3E37	[FB80 BE37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E37, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_078)
{
    // 3E37 0062;	
    // (㸷) CJK UNIFIED IDEOGRAPH-3E37	[FB80 BE37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E37, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_079)
{
    // 3E38 0021;	
    // (㸸) CJK UNIFIED IDEOGRAPH-3E38	[FB80 BE38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E38, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_080)
{
    // 3E38 003F;	
    // (㸸) CJK UNIFIED IDEOGRAPH-3E38	[FB80 BE38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E38, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_081)
{
    // 3E38 0061;	
    // (㸸) CJK UNIFIED IDEOGRAPH-3E38	[FB80 BE38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E38, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_082)
{
    // 3E38 0041;	
    // (㸸) CJK UNIFIED IDEOGRAPH-3E38	[FB80 BE38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E38, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_083)
{
    // 3E38 0062;	
    // (㸸) CJK UNIFIED IDEOGRAPH-3E38	[FB80 BE38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E38, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_084)
{
    // 3E39 0021;	
    // (㸹) CJK UNIFIED IDEOGRAPH-3E39	[FB80 BE39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E39, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_085)
{
    // 3E39 003F;	
    // (㸹) CJK UNIFIED IDEOGRAPH-3E39	[FB80 BE39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E39, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_086)
{
    // 3E39 0061;	
    // (㸹) CJK UNIFIED IDEOGRAPH-3E39	[FB80 BE39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E39, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_087)
{
    // 3E39 0041;	
    // (㸹) CJK UNIFIED IDEOGRAPH-3E39	[FB80 BE39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E39, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_088)
{
    // 3E39 0062;	
    // (㸹) CJK UNIFIED IDEOGRAPH-3E39	[FB80 BE39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E39, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_089)
{
    // 3E3A 0021;	
    // (㸺) CJK UNIFIED IDEOGRAPH-3E3A	[FB80 BE3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_090)
{
    // 3E3A 003F;	
    // (㸺) CJK UNIFIED IDEOGRAPH-3E3A	[FB80 BE3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_091)
{
    // 3E3A 0061;	
    // (㸺) CJK UNIFIED IDEOGRAPH-3E3A	[FB80 BE3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_092)
{
    // 3E3A 0041;	
    // (㸺) CJK UNIFIED IDEOGRAPH-3E3A	[FB80 BE3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E3A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_093)
{
    // 3E3A 0062;	
    // (㸺) CJK UNIFIED IDEOGRAPH-3E3A	[FB80 BE3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_094)
{
    // 3E3B 0021;	
    // (㸻) CJK UNIFIED IDEOGRAPH-3E3B	[FB80 BE3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_095)
{
    // 3E3B 003F;	
    // (㸻) CJK UNIFIED IDEOGRAPH-3E3B	[FB80 BE3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_096)
{
    // 3E3B 0061;	
    // (㸻) CJK UNIFIED IDEOGRAPH-3E3B	[FB80 BE3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_097)
{
    // 3E3B 0041;	
    // (㸻) CJK UNIFIED IDEOGRAPH-3E3B	[FB80 BE3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E3B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_098)
{
    // 3E3B 0062;	
    // (㸻) CJK UNIFIED IDEOGRAPH-3E3B	[FB80 BE3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_099)
{
    // 3E3C 0021;	
    // (㸼) CJK UNIFIED IDEOGRAPH-3E3C	[FB80 BE3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_100)
{
    // 3E3C 003F;	
    // (㸼) CJK UNIFIED IDEOGRAPH-3E3C	[FB80 BE3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_101)
{
    // 3E3C 0061;	
    // (㸼) CJK UNIFIED IDEOGRAPH-3E3C	[FB80 BE3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_102)
{
    // 3E3C 0041;	
    // (㸼) CJK UNIFIED IDEOGRAPH-3E3C	[FB80 BE3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E3C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_103)
{
    // 3E3C 0062;	
    // (㸼) CJK UNIFIED IDEOGRAPH-3E3C	[FB80 BE3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_104)
{
    // 3E3D 0021;	
    // (㸽) CJK UNIFIED IDEOGRAPH-3E3D	[FB80 BE3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_105)
{
    // 3E3D 003F;	
    // (㸽) CJK UNIFIED IDEOGRAPH-3E3D	[FB80 BE3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_106)
{
    // 3E3D 0061;	
    // (㸽) CJK UNIFIED IDEOGRAPH-3E3D	[FB80 BE3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_107)
{
    // 3E3D 0041;	
    // (㸽) CJK UNIFIED IDEOGRAPH-3E3D	[FB80 BE3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E3D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_108)
{
    // 3E3D 0062;	
    // (㸽) CJK UNIFIED IDEOGRAPH-3E3D	[FB80 BE3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_109)
{
    // 3E3E 0021;	
    // (㸾) CJK UNIFIED IDEOGRAPH-3E3E	[FB80 BE3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_110)
{
    // 3E3E 003F;	
    // (㸾) CJK UNIFIED IDEOGRAPH-3E3E	[FB80 BE3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_111)
{
    // 3E3E 0061;	
    // (㸾) CJK UNIFIED IDEOGRAPH-3E3E	[FB80 BE3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_112)
{
    // 3E3E 0041;	
    // (㸾) CJK UNIFIED IDEOGRAPH-3E3E	[FB80 BE3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E3E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_113)
{
    // 3E3E 0062;	
    // (㸾) CJK UNIFIED IDEOGRAPH-3E3E	[FB80 BE3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_114)
{
    // 3E3F 0021;	
    // (㸿) CJK UNIFIED IDEOGRAPH-3E3F	[FB80 BE3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_115)
{
    // 3E3F 003F;	
    // (㸿) CJK UNIFIED IDEOGRAPH-3E3F	[FB80 BE3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_116)
{
    // 3E3F 0061;	
    // (㸿) CJK UNIFIED IDEOGRAPH-3E3F	[FB80 BE3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_117)
{
    // 3E3F 0041;	
    // (㸿) CJK UNIFIED IDEOGRAPH-3E3F	[FB80 BE3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E3F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_118)
{
    // 3E3F 0062;	
    // (㸿) CJK UNIFIED IDEOGRAPH-3E3F	[FB80 BE3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E3F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_119)
{
    // 3E40 0021;	
    // (㹀) CJK UNIFIED IDEOGRAPH-3E40	[FB80 BE40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E40, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_120)
{
    // 3E40 003F;	
    // (㹀) CJK UNIFIED IDEOGRAPH-3E40	[FB80 BE40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E40, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_121)
{
    // 3E40 0061;	
    // (㹀) CJK UNIFIED IDEOGRAPH-3E40	[FB80 BE40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E40, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_122)
{
    // 3E40 0041;	
    // (㹀) CJK UNIFIED IDEOGRAPH-3E40	[FB80 BE40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E40, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_123)
{
    // 3E40 0062;	
    // (㹀) CJK UNIFIED IDEOGRAPH-3E40	[FB80 BE40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E40, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_124)
{
    // 3E41 0021;	
    // (㹁) CJK UNIFIED IDEOGRAPH-3E41	[FB80 BE41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E41, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_125)
{
    // 3E41 003F;	
    // (㹁) CJK UNIFIED IDEOGRAPH-3E41	[FB80 BE41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E41, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_126)
{
    // 3E41 0061;	
    // (㹁) CJK UNIFIED IDEOGRAPH-3E41	[FB80 BE41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E41, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_127)
{
    // 3E41 0041;	
    // (㹁) CJK UNIFIED IDEOGRAPH-3E41	[FB80 BE41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E41, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_128)
{
    // 3E41 0062;	
    // (㹁) CJK UNIFIED IDEOGRAPH-3E41	[FB80 BE41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E41, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_129)
{
    // 3E42 0021;	
    // (㹂) CJK UNIFIED IDEOGRAPH-3E42	[FB80 BE42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E42, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_130)
{
    // 3E42 003F;	
    // (㹂) CJK UNIFIED IDEOGRAPH-3E42	[FB80 BE42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E42, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_131)
{
    // 3E42 0061;	
    // (㹂) CJK UNIFIED IDEOGRAPH-3E42	[FB80 BE42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E42, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_132)
{
    // 3E42 0041;	
    // (㹂) CJK UNIFIED IDEOGRAPH-3E42	[FB80 BE42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E42, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_133)
{
    // 3E42 0062;	
    // (㹂) CJK UNIFIED IDEOGRAPH-3E42	[FB80 BE42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E42, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_134)
{
    // 3E43 0021;	
    // (㹃) CJK UNIFIED IDEOGRAPH-3E43	[FB80 BE43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E43, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_135)
{
    // 3E43 003F;	
    // (㹃) CJK UNIFIED IDEOGRAPH-3E43	[FB80 BE43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E43, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_136)
{
    // 3E43 0061;	
    // (㹃) CJK UNIFIED IDEOGRAPH-3E43	[FB80 BE43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E43, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_137)
{
    // 3E43 0041;	
    // (㹃) CJK UNIFIED IDEOGRAPH-3E43	[FB80 BE43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E43, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_138)
{
    // 3E43 0062;	
    // (㹃) CJK UNIFIED IDEOGRAPH-3E43	[FB80 BE43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E43, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_139)
{
    // 3E44 0021;	
    // (㹄) CJK UNIFIED IDEOGRAPH-3E44	[FB80 BE44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E44, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_140)
{
    // 3E44 003F;	
    // (㹄) CJK UNIFIED IDEOGRAPH-3E44	[FB80 BE44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E44, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_141)
{
    // 3E44 0061;	
    // (㹄) CJK UNIFIED IDEOGRAPH-3E44	[FB80 BE44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E44, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_142)
{
    // 3E44 0041;	
    // (㹄) CJK UNIFIED IDEOGRAPH-3E44	[FB80 BE44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E44, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_143)
{
    // 3E44 0062;	
    // (㹄) CJK UNIFIED IDEOGRAPH-3E44	[FB80 BE44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E44, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_144)
{
    // 3E45 0021;	
    // (㹅) CJK UNIFIED IDEOGRAPH-3E45	[FB80 BE45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E45, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_145)
{
    // 3E45 003F;	
    // (㹅) CJK UNIFIED IDEOGRAPH-3E45	[FB80 BE45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E45, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_146)
{
    // 3E45 0061;	
    // (㹅) CJK UNIFIED IDEOGRAPH-3E45	[FB80 BE45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E45, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_147)
{
    // 3E45 0041;	
    // (㹅) CJK UNIFIED IDEOGRAPH-3E45	[FB80 BE45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E45, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_148)
{
    // 3E45 0062;	
    // (㹅) CJK UNIFIED IDEOGRAPH-3E45	[FB80 BE45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E45, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_149)
{
    // 3E46 0021;	
    // (㹆) CJK UNIFIED IDEOGRAPH-3E46	[FB80 BE46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E46, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_150)
{
    // 3E46 003F;	
    // (㹆) CJK UNIFIED IDEOGRAPH-3E46	[FB80 BE46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E46, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_151)
{
    // 3E46 0061;	
    // (㹆) CJK UNIFIED IDEOGRAPH-3E46	[FB80 BE46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E46, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_152)
{
    // 3E46 0041;	
    // (㹆) CJK UNIFIED IDEOGRAPH-3E46	[FB80 BE46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E46, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_153)
{
    // 3E46 0062;	
    // (㹆) CJK UNIFIED IDEOGRAPH-3E46	[FB80 BE46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E46, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_154)
{
    // 3E47 0021;	
    // (㹇) CJK UNIFIED IDEOGRAPH-3E47	[FB80 BE47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E47, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_155)
{
    // 3E47 003F;	
    // (㹇) CJK UNIFIED IDEOGRAPH-3E47	[FB80 BE47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E47, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_156)
{
    // 3E47 0061;	
    // (㹇) CJK UNIFIED IDEOGRAPH-3E47	[FB80 BE47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E47, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_157)
{
    // 3E47 0041;	
    // (㹇) CJK UNIFIED IDEOGRAPH-3E47	[FB80 BE47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E47, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_158)
{
    // 3E47 0062;	
    // (㹇) CJK UNIFIED IDEOGRAPH-3E47	[FB80 BE47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E47, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_159)
{
    // 3E48 0021;	
    // (㹈) CJK UNIFIED IDEOGRAPH-3E48	[FB80 BE48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E48, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_160)
{
    // 3E48 003F;	
    // (㹈) CJK UNIFIED IDEOGRAPH-3E48	[FB80 BE48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E48, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_161)
{
    // 3E48 0061;	
    // (㹈) CJK UNIFIED IDEOGRAPH-3E48	[FB80 BE48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E48, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_162)
{
    // 3E48 0041;	
    // (㹈) CJK UNIFIED IDEOGRAPH-3E48	[FB80 BE48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E48, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_163)
{
    // 3E48 0062;	
    // (㹈) CJK UNIFIED IDEOGRAPH-3E48	[FB80 BE48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E48, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_164)
{
    // 3E49 0021;	
    // (㹉) CJK UNIFIED IDEOGRAPH-3E49	[FB80 BE49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E49, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_165)
{
    // 3E49 003F;	
    // (㹉) CJK UNIFIED IDEOGRAPH-3E49	[FB80 BE49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E49, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_166)
{
    // 3E49 0061;	
    // (㹉) CJK UNIFIED IDEOGRAPH-3E49	[FB80 BE49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E49, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_167)
{
    // 3E49 0041;	
    // (㹉) CJK UNIFIED IDEOGRAPH-3E49	[FB80 BE49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E49, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_168)
{
    // 3E49 0062;	
    // (㹉) CJK UNIFIED IDEOGRAPH-3E49	[FB80 BE49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E49, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_169)
{
    // 3E4A 0021;	
    // (㹊) CJK UNIFIED IDEOGRAPH-3E4A	[FB80 BE4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_170)
{
    // 3E4A 003F;	
    // (㹊) CJK UNIFIED IDEOGRAPH-3E4A	[FB80 BE4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_171)
{
    // 3E4A 0061;	
    // (㹊) CJK UNIFIED IDEOGRAPH-3E4A	[FB80 BE4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_172)
{
    // 3E4A 0041;	
    // (㹊) CJK UNIFIED IDEOGRAPH-3E4A	[FB80 BE4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E4A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_173)
{
    // 3E4A 0062;	
    // (㹊) CJK UNIFIED IDEOGRAPH-3E4A	[FB80 BE4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_174)
{
    // 3E4B 0021;	
    // (㹋) CJK UNIFIED IDEOGRAPH-3E4B	[FB80 BE4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_175)
{
    // 3E4B 003F;	
    // (㹋) CJK UNIFIED IDEOGRAPH-3E4B	[FB80 BE4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_176)
{
    // 3E4B 0061;	
    // (㹋) CJK UNIFIED IDEOGRAPH-3E4B	[FB80 BE4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_177)
{
    // 3E4B 0041;	
    // (㹋) CJK UNIFIED IDEOGRAPH-3E4B	[FB80 BE4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E4B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_178)
{
    // 3E4B 0062;	
    // (㹋) CJK UNIFIED IDEOGRAPH-3E4B	[FB80 BE4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_179)
{
    // 3E4C 0021;	
    // (㹌) CJK UNIFIED IDEOGRAPH-3E4C	[FB80 BE4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_180)
{
    // 3E4C 003F;	
    // (㹌) CJK UNIFIED IDEOGRAPH-3E4C	[FB80 BE4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_181)
{
    // 3E4C 0061;	
    // (㹌) CJK UNIFIED IDEOGRAPH-3E4C	[FB80 BE4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_182)
{
    // 3E4C 0041;	
    // (㹌) CJK UNIFIED IDEOGRAPH-3E4C	[FB80 BE4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E4C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_183)
{
    // 3E4C 0062;	
    // (㹌) CJK UNIFIED IDEOGRAPH-3E4C	[FB80 BE4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_184)
{
    // 3E4D 0021;	
    // (㹍) CJK UNIFIED IDEOGRAPH-3E4D	[FB80 BE4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_185)
{
    // 3E4D 003F;	
    // (㹍) CJK UNIFIED IDEOGRAPH-3E4D	[FB80 BE4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_186)
{
    // 3E4D 0061;	
    // (㹍) CJK UNIFIED IDEOGRAPH-3E4D	[FB80 BE4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_187)
{
    // 3E4D 0041;	
    // (㹍) CJK UNIFIED IDEOGRAPH-3E4D	[FB80 BE4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E4D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_188)
{
    // 3E4D 0062;	
    // (㹍) CJK UNIFIED IDEOGRAPH-3E4D	[FB80 BE4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_189)
{
    // 3E4E 0021;	
    // (㹎) CJK UNIFIED IDEOGRAPH-3E4E	[FB80 BE4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_190)
{
    // 3E4E 003F;	
    // (㹎) CJK UNIFIED IDEOGRAPH-3E4E	[FB80 BE4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_191)
{
    // 3E4E 0061;	
    // (㹎) CJK UNIFIED IDEOGRAPH-3E4E	[FB80 BE4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_192)
{
    // 3E4E 0041;	
    // (㹎) CJK UNIFIED IDEOGRAPH-3E4E	[FB80 BE4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E4E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_193)
{
    // 3E4E 0062;	
    // (㹎) CJK UNIFIED IDEOGRAPH-3E4E	[FB80 BE4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_194)
{
    // 3E4F 0021;	
    // (㹏) CJK UNIFIED IDEOGRAPH-3E4F	[FB80 BE4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_195)
{
    // 3E4F 003F;	
    // (㹏) CJK UNIFIED IDEOGRAPH-3E4F	[FB80 BE4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_196)
{
    // 3E4F 0061;	
    // (㹏) CJK UNIFIED IDEOGRAPH-3E4F	[FB80 BE4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_197)
{
    // 3E4F 0041;	
    // (㹏) CJK UNIFIED IDEOGRAPH-3E4F	[FB80 BE4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E4F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_198)
{
    // 3E4F 0062;	
    // (㹏) CJK UNIFIED IDEOGRAPH-3E4F	[FB80 BE4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E4F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_199)
{
    // 3E50 0021;	
    // (㹐) CJK UNIFIED IDEOGRAPH-3E50	[FB80 BE50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E50, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_200)
{
    // 3E50 003F;	
    // (㹐) CJK UNIFIED IDEOGRAPH-3E50	[FB80 BE50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E50, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_201)
{
    // 3E50 0061;	
    // (㹐) CJK UNIFIED IDEOGRAPH-3E50	[FB80 BE50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E50, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_202)
{
    // 3E50 0041;	
    // (㹐) CJK UNIFIED IDEOGRAPH-3E50	[FB80 BE50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E50, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_203)
{
    // 3E50 0062;	
    // (㹐) CJK UNIFIED IDEOGRAPH-3E50	[FB80 BE50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E50, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_204)
{
    // 3E51 0021;	
    // (㹑) CJK UNIFIED IDEOGRAPH-3E51	[FB80 BE51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E51, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_205)
{
    // 3E51 003F;	
    // (㹑) CJK UNIFIED IDEOGRAPH-3E51	[FB80 BE51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E51, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_206)
{
    // 3E51 0061;	
    // (㹑) CJK UNIFIED IDEOGRAPH-3E51	[FB80 BE51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E51, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_207)
{
    // 3E51 0041;	
    // (㹑) CJK UNIFIED IDEOGRAPH-3E51	[FB80 BE51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E51, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_208)
{
    // 3E51 0062;	
    // (㹑) CJK UNIFIED IDEOGRAPH-3E51	[FB80 BE51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E51, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_209)
{
    // 3E52 0021;	
    // (㹒) CJK UNIFIED IDEOGRAPH-3E52	[FB80 BE52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E52, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_210)
{
    // 3E52 003F;	
    // (㹒) CJK UNIFIED IDEOGRAPH-3E52	[FB80 BE52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E52, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_211)
{
    // 3E52 0061;	
    // (㹒) CJK UNIFIED IDEOGRAPH-3E52	[FB80 BE52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E52, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_212)
{
    // 3E52 0041;	
    // (㹒) CJK UNIFIED IDEOGRAPH-3E52	[FB80 BE52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E52, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_213)
{
    // 3E52 0062;	
    // (㹒) CJK UNIFIED IDEOGRAPH-3E52	[FB80 BE52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E52, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_214)
{
    // 3E53 0021;	
    // (㹓) CJK UNIFIED IDEOGRAPH-3E53	[FB80 BE53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E53, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_215)
{
    // 3E53 003F;	
    // (㹓) CJK UNIFIED IDEOGRAPH-3E53	[FB80 BE53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E53, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_216)
{
    // 3E53 0061;	
    // (㹓) CJK UNIFIED IDEOGRAPH-3E53	[FB80 BE53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E53, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_217)
{
    // 3E53 0041;	
    // (㹓) CJK UNIFIED IDEOGRAPH-3E53	[FB80 BE53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E53, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_218)
{
    // 3E53 0062;	
    // (㹓) CJK UNIFIED IDEOGRAPH-3E53	[FB80 BE53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E53, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_219)
{
    // 3E54 0021;	
    // (㹔) CJK UNIFIED IDEOGRAPH-3E54	[FB80 BE54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E54, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_220)
{
    // 3E54 003F;	
    // (㹔) CJK UNIFIED IDEOGRAPH-3E54	[FB80 BE54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E54, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_221)
{
    // 3E54 0061;	
    // (㹔) CJK UNIFIED IDEOGRAPH-3E54	[FB80 BE54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E54, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_222)
{
    // 3E54 0041;	
    // (㹔) CJK UNIFIED IDEOGRAPH-3E54	[FB80 BE54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E54, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_223)
{
    // 3E54 0062;	
    // (㹔) CJK UNIFIED IDEOGRAPH-3E54	[FB80 BE54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E54, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_224)
{
    // 3E55 0021;	
    // (㹕) CJK UNIFIED IDEOGRAPH-3E55	[FB80 BE55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E55, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_225)
{
    // 3E55 003F;	
    // (㹕) CJK UNIFIED IDEOGRAPH-3E55	[FB80 BE55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E55, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_226)
{
    // 3E55 0061;	
    // (㹕) CJK UNIFIED IDEOGRAPH-3E55	[FB80 BE55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E55, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_227)
{
    // 3E55 0041;	
    // (㹕) CJK UNIFIED IDEOGRAPH-3E55	[FB80 BE55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E55, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_228)
{
    // 3E55 0062;	
    // (㹕) CJK UNIFIED IDEOGRAPH-3E55	[FB80 BE55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E55, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_229)
{
    // 3E56 0021;	
    // (㹖) CJK UNIFIED IDEOGRAPH-3E56	[FB80 BE56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E56, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_230)
{
    // 3E56 003F;	
    // (㹖) CJK UNIFIED IDEOGRAPH-3E56	[FB80 BE56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E56, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_231)
{
    // 3E56 0061;	
    // (㹖) CJK UNIFIED IDEOGRAPH-3E56	[FB80 BE56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E56, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_232)
{
    // 3E56 0041;	
    // (㹖) CJK UNIFIED IDEOGRAPH-3E56	[FB80 BE56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E56, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_233)
{
    // 3E56 0062;	
    // (㹖) CJK UNIFIED IDEOGRAPH-3E56	[FB80 BE56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E56, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_234)
{
    // 3E57 0021;	
    // (㹗) CJK UNIFIED IDEOGRAPH-3E57	[FB80 BE57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E57, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_235)
{
    // 3E57 003F;	
    // (㹗) CJK UNIFIED IDEOGRAPH-3E57	[FB80 BE57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E57, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_236)
{
    // 3E57 0061;	
    // (㹗) CJK UNIFIED IDEOGRAPH-3E57	[FB80 BE57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E57, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_237)
{
    // 3E57 0041;	
    // (㹗) CJK UNIFIED IDEOGRAPH-3E57	[FB80 BE57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E57, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_238)
{
    // 3E57 0062;	
    // (㹗) CJK UNIFIED IDEOGRAPH-3E57	[FB80 BE57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E57, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_239)
{
    // 3E58 0021;	
    // (㹘) CJK UNIFIED IDEOGRAPH-3E58	[FB80 BE58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E58, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_240)
{
    // 3E58 003F;	
    // (㹘) CJK UNIFIED IDEOGRAPH-3E58	[FB80 BE58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E58, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_241)
{
    // 3E58 0061;	
    // (㹘) CJK UNIFIED IDEOGRAPH-3E58	[FB80 BE58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E58, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_242)
{
    // 3E58 0041;	
    // (㹘) CJK UNIFIED IDEOGRAPH-3E58	[FB80 BE58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E58, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_243)
{
    // 3E58 0062;	
    // (㹘) CJK UNIFIED IDEOGRAPH-3E58	[FB80 BE58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E58, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_244)
{
    // 3E59 0021;	
    // (㹙) CJK UNIFIED IDEOGRAPH-3E59	[FB80 BE59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E59, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_245)
{
    // 3E59 003F;	
    // (㹙) CJK UNIFIED IDEOGRAPH-3E59	[FB80 BE59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E59, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_246)
{
    // 3E59 0061;	
    // (㹙) CJK UNIFIED IDEOGRAPH-3E59	[FB80 BE59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E59, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_247)
{
    // 3E59 0041;	
    // (㹙) CJK UNIFIED IDEOGRAPH-3E59	[FB80 BE59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E59, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_248)
{
    // 3E59 0062;	
    // (㹙) CJK UNIFIED IDEOGRAPH-3E59	[FB80 BE59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E59, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_249)
{
    // 3E5A 0021;	
    // (㹚) CJK UNIFIED IDEOGRAPH-3E5A	[FB80 BE5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_250)
{
    // 3E5A 003F;	
    // (㹚) CJK UNIFIED IDEOGRAPH-3E5A	[FB80 BE5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_251)
{
    // 3E5A 0061;	
    // (㹚) CJK UNIFIED IDEOGRAPH-3E5A	[FB80 BE5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_252)
{
    // 3E5A 0041;	
    // (㹚) CJK UNIFIED IDEOGRAPH-3E5A	[FB80 BE5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_253)
{
    // 3E5A 0062;	
    // (㹚) CJK UNIFIED IDEOGRAPH-3E5A	[FB80 BE5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_254)
{
    // 3E5B 0021;	
    // (㹛) CJK UNIFIED IDEOGRAPH-3E5B	[FB80 BE5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_255)
{
    // 3E5B 003F;	
    // (㹛) CJK UNIFIED IDEOGRAPH-3E5B	[FB80 BE5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_256)
{
    // 3E5B 0061;	
    // (㹛) CJK UNIFIED IDEOGRAPH-3E5B	[FB80 BE5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_257)
{
    // 3E5B 0041;	
    // (㹛) CJK UNIFIED IDEOGRAPH-3E5B	[FB80 BE5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_258)
{
    // 3E5B 0062;	
    // (㹛) CJK UNIFIED IDEOGRAPH-3E5B	[FB80 BE5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_259)
{
    // 3E5C 0021;	
    // (㹜) CJK UNIFIED IDEOGRAPH-3E5C	[FB80 BE5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_260)
{
    // 3E5C 003F;	
    // (㹜) CJK UNIFIED IDEOGRAPH-3E5C	[FB80 BE5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_261)
{
    // 3E5C 0061;	
    // (㹜) CJK UNIFIED IDEOGRAPH-3E5C	[FB80 BE5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_262)
{
    // 3E5C 0041;	
    // (㹜) CJK UNIFIED IDEOGRAPH-3E5C	[FB80 BE5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_263)
{
    // 3E5C 0062;	
    // (㹜) CJK UNIFIED IDEOGRAPH-3E5C	[FB80 BE5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_264)
{
    // 3E5D 0021;	
    // (㹝) CJK UNIFIED IDEOGRAPH-3E5D	[FB80 BE5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_265)
{
    // 3E5D 003F;	
    // (㹝) CJK UNIFIED IDEOGRAPH-3E5D	[FB80 BE5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_266)
{
    // 3E5D 0061;	
    // (㹝) CJK UNIFIED IDEOGRAPH-3E5D	[FB80 BE5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_267)
{
    // 3E5D 0041;	
    // (㹝) CJK UNIFIED IDEOGRAPH-3E5D	[FB80 BE5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_268)
{
    // 3E5D 0062;	
    // (㹝) CJK UNIFIED IDEOGRAPH-3E5D	[FB80 BE5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_269)
{
    // 3E5E 0021;	
    // (㹞) CJK UNIFIED IDEOGRAPH-3E5E	[FB80 BE5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_270)
{
    // 3E5E 003F;	
    // (㹞) CJK UNIFIED IDEOGRAPH-3E5E	[FB80 BE5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_271)
{
    // 3E5E 0061;	
    // (㹞) CJK UNIFIED IDEOGRAPH-3E5E	[FB80 BE5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_272)
{
    // 3E5E 0041;	
    // (㹞) CJK UNIFIED IDEOGRAPH-3E5E	[FB80 BE5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_273)
{
    // 3E5E 0062;	
    // (㹞) CJK UNIFIED IDEOGRAPH-3E5E	[FB80 BE5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_274)
{
    // 3E5F 0021;	
    // (㹟) CJK UNIFIED IDEOGRAPH-3E5F	[FB80 BE5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_275)
{
    // 3E5F 003F;	
    // (㹟) CJK UNIFIED IDEOGRAPH-3E5F	[FB80 BE5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_276)
{
    // 3E5F 0061;	
    // (㹟) CJK UNIFIED IDEOGRAPH-3E5F	[FB80 BE5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_277)
{
    // 3E5F 0041;	
    // (㹟) CJK UNIFIED IDEOGRAPH-3E5F	[FB80 BE5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_278)
{
    // 3E5F 0062;	
    // (㹟) CJK UNIFIED IDEOGRAPH-3E5F	[FB80 BE5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_279)
{
    // 3E60 0021;	
    // (㹠) CJK UNIFIED IDEOGRAPH-3E60	[FB80 BE60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E60, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_280)
{
    // 3E60 003F;	
    // (㹠) CJK UNIFIED IDEOGRAPH-3E60	[FB80 BE60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E60, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_281)
{
    // 3E60 0061;	
    // (㹠) CJK UNIFIED IDEOGRAPH-3E60	[FB80 BE60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E60, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_282)
{
    // 3E60 0041;	
    // (㹠) CJK UNIFIED IDEOGRAPH-3E60	[FB80 BE60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E60, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_283)
{
    // 3E60 0062;	
    // (㹠) CJK UNIFIED IDEOGRAPH-3E60	[FB80 BE60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E60, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_284)
{
    // 3E61 0021;	
    // (㹡) CJK UNIFIED IDEOGRAPH-3E61	[FB80 BE61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E61, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_285)
{
    // 3E61 003F;	
    // (㹡) CJK UNIFIED IDEOGRAPH-3E61	[FB80 BE61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E61, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_286)
{
    // 3E61 0061;	
    // (㹡) CJK UNIFIED IDEOGRAPH-3E61	[FB80 BE61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E61, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_287)
{
    // 3E61 0041;	
    // (㹡) CJK UNIFIED IDEOGRAPH-3E61	[FB80 BE61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E61, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_288)
{
    // 3E61 0062;	
    // (㹡) CJK UNIFIED IDEOGRAPH-3E61	[FB80 BE61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E61, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_289)
{
    // 3E62 0021;	
    // (㹢) CJK UNIFIED IDEOGRAPH-3E62	[FB80 BE62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E62, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_290)
{
    // 3E62 003F;	
    // (㹢) CJK UNIFIED IDEOGRAPH-3E62	[FB80 BE62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E62, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_291)
{
    // 3E62 0061;	
    // (㹢) CJK UNIFIED IDEOGRAPH-3E62	[FB80 BE62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E62, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_292)
{
    // 3E62 0041;	
    // (㹢) CJK UNIFIED IDEOGRAPH-3E62	[FB80 BE62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E62, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_293)
{
    // 3E62 0062;	
    // (㹢) CJK UNIFIED IDEOGRAPH-3E62	[FB80 BE62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E62, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_294)
{
    // 3E63 0021;	
    // (㹣) CJK UNIFIED IDEOGRAPH-3E63	[FB80 BE63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E63, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_295)
{
    // 3E63 003F;	
    // (㹣) CJK UNIFIED IDEOGRAPH-3E63	[FB80 BE63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E63, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_296)
{
    // 3E63 0061;	
    // (㹣) CJK UNIFIED IDEOGRAPH-3E63	[FB80 BE63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E63, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_297)
{
    // 3E63 0041;	
    // (㹣) CJK UNIFIED IDEOGRAPH-3E63	[FB80 BE63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E63, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_298)
{
    // 3E63 0062;	
    // (㹣) CJK UNIFIED IDEOGRAPH-3E63	[FB80 BE63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E63, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_299)
{
    // 3E64 0021;	
    // (㹤) CJK UNIFIED IDEOGRAPH-3E64	[FB80 BE64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E64, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_300)
{
    // 3E64 003F;	
    // (㹤) CJK UNIFIED IDEOGRAPH-3E64	[FB80 BE64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E64, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_301)
{
    // 3E64 0061;	
    // (㹤) CJK UNIFIED IDEOGRAPH-3E64	[FB80 BE64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E64, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_302)
{
    // 3E64 0041;	
    // (㹤) CJK UNIFIED IDEOGRAPH-3E64	[FB80 BE64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E64, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_303)
{
    // 3E64 0062;	
    // (㹤) CJK UNIFIED IDEOGRAPH-3E64	[FB80 BE64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E64, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_304)
{
    // 3E65 0021;	
    // (㹥) CJK UNIFIED IDEOGRAPH-3E65	[FB80 BE65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E65, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_305)
{
    // 3E65 003F;	
    // (㹥) CJK UNIFIED IDEOGRAPH-3E65	[FB80 BE65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E65, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_306)
{
    // 3E65 0061;	
    // (㹥) CJK UNIFIED IDEOGRAPH-3E65	[FB80 BE65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E65, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_307)
{
    // 3E65 0041;	
    // (㹥) CJK UNIFIED IDEOGRAPH-3E65	[FB80 BE65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E65, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_308)
{
    // 3E65 0062;	
    // (㹥) CJK UNIFIED IDEOGRAPH-3E65	[FB80 BE65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E65, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_309)
{
    // 3E66 0021;	
    // (㹦) CJK UNIFIED IDEOGRAPH-3E66	[FB80 BE66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E66, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_310)
{
    // 3E66 003F;	
    // (㹦) CJK UNIFIED IDEOGRAPH-3E66	[FB80 BE66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E66, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_311)
{
    // 3E66 0061;	
    // (㹦) CJK UNIFIED IDEOGRAPH-3E66	[FB80 BE66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E66, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_312)
{
    // 3E66 0041;	
    // (㹦) CJK UNIFIED IDEOGRAPH-3E66	[FB80 BE66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E66, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_313)
{
    // 3E66 0062;	
    // (㹦) CJK UNIFIED IDEOGRAPH-3E66	[FB80 BE66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E66, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_314)
{
    // 3E67 0021;	
    // (㹧) CJK UNIFIED IDEOGRAPH-3E67	[FB80 BE67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E67, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_315)
{
    // 3E67 003F;	
    // (㹧) CJK UNIFIED IDEOGRAPH-3E67	[FB80 BE67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E67, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_316)
{
    // 3E67 0061;	
    // (㹧) CJK UNIFIED IDEOGRAPH-3E67	[FB80 BE67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E67, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_317)
{
    // 3E67 0041;	
    // (㹧) CJK UNIFIED IDEOGRAPH-3E67	[FB80 BE67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E67, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_318)
{
    // 3E67 0062;	
    // (㹧) CJK UNIFIED IDEOGRAPH-3E67	[FB80 BE67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E67, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_319)
{
    // 3E68 0021;	
    // (㹨) CJK UNIFIED IDEOGRAPH-3E68	[FB80 BE68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E68, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_320)
{
    // 3E68 003F;	
    // (㹨) CJK UNIFIED IDEOGRAPH-3E68	[FB80 BE68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E68, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_321)
{
    // 3E68 0061;	
    // (㹨) CJK UNIFIED IDEOGRAPH-3E68	[FB80 BE68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E68, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_322)
{
    // 3E68 0041;	
    // (㹨) CJK UNIFIED IDEOGRAPH-3E68	[FB80 BE68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E68, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_323)
{
    // 3E68 0062;	
    // (㹨) CJK UNIFIED IDEOGRAPH-3E68	[FB80 BE68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E68, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_324)
{
    // 3E69 0021;	
    // (㹩) CJK UNIFIED IDEOGRAPH-3E69	[FB80 BE69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E69, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_325)
{
    // 3E69 003F;	
    // (㹩) CJK UNIFIED IDEOGRAPH-3E69	[FB80 BE69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E69, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_326)
{
    // 3E69 0061;	
    // (㹩) CJK UNIFIED IDEOGRAPH-3E69	[FB80 BE69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E69, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_327)
{
    // 3E69 0041;	
    // (㹩) CJK UNIFIED IDEOGRAPH-3E69	[FB80 BE69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E69, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_328)
{
    // 3E69 0062;	
    // (㹩) CJK UNIFIED IDEOGRAPH-3E69	[FB80 BE69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E69, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_329)
{
    // 3E6A 0021;	
    // (㹪) CJK UNIFIED IDEOGRAPH-3E6A	[FB80 BE6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_330)
{
    // 3E6A 003F;	
    // (㹪) CJK UNIFIED IDEOGRAPH-3E6A	[FB80 BE6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_331)
{
    // 3E6A 0061;	
    // (㹪) CJK UNIFIED IDEOGRAPH-3E6A	[FB80 BE6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_332)
{
    // 3E6A 0041;	
    // (㹪) CJK UNIFIED IDEOGRAPH-3E6A	[FB80 BE6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E6A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_333)
{
    // 3E6A 0062;	
    // (㹪) CJK UNIFIED IDEOGRAPH-3E6A	[FB80 BE6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_334)
{
    // 3E6B 0021;	
    // (㹫) CJK UNIFIED IDEOGRAPH-3E6B	[FB80 BE6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_335)
{
    // 3E6B 003F;	
    // (㹫) CJK UNIFIED IDEOGRAPH-3E6B	[FB80 BE6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_336)
{
    // 3E6B 0061;	
    // (㹫) CJK UNIFIED IDEOGRAPH-3E6B	[FB80 BE6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_337)
{
    // 3E6B 0041;	
    // (㹫) CJK UNIFIED IDEOGRAPH-3E6B	[FB80 BE6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E6B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_338)
{
    // 3E6B 0062;	
    // (㹫) CJK UNIFIED IDEOGRAPH-3E6B	[FB80 BE6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_339)
{
    // 3E6C 0021;	
    // (㹬) CJK UNIFIED IDEOGRAPH-3E6C	[FB80 BE6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_340)
{
    // 3E6C 003F;	
    // (㹬) CJK UNIFIED IDEOGRAPH-3E6C	[FB80 BE6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_341)
{
    // 3E6C 0061;	
    // (㹬) CJK UNIFIED IDEOGRAPH-3E6C	[FB80 BE6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_342)
{
    // 3E6C 0041;	
    // (㹬) CJK UNIFIED IDEOGRAPH-3E6C	[FB80 BE6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E6C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_343)
{
    // 3E6C 0062;	
    // (㹬) CJK UNIFIED IDEOGRAPH-3E6C	[FB80 BE6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_344)
{
    // 3E6D 0021;	
    // (㹭) CJK UNIFIED IDEOGRAPH-3E6D	[FB80 BE6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_345)
{
    // 3E6D 003F;	
    // (㹭) CJK UNIFIED IDEOGRAPH-3E6D	[FB80 BE6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_346)
{
    // 3E6D 0061;	
    // (㹭) CJK UNIFIED IDEOGRAPH-3E6D	[FB80 BE6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_347)
{
    // 3E6D 0041;	
    // (㹭) CJK UNIFIED IDEOGRAPH-3E6D	[FB80 BE6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E6D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_348)
{
    // 3E6D 0062;	
    // (㹭) CJK UNIFIED IDEOGRAPH-3E6D	[FB80 BE6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_349)
{
    // 3E6E 0021;	
    // (㹮) CJK UNIFIED IDEOGRAPH-3E6E	[FB80 BE6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_350)
{
    // 3E6E 003F;	
    // (㹮) CJK UNIFIED IDEOGRAPH-3E6E	[FB80 BE6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_351)
{
    // 3E6E 0061;	
    // (㹮) CJK UNIFIED IDEOGRAPH-3E6E	[FB80 BE6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_352)
{
    // 3E6E 0041;	
    // (㹮) CJK UNIFIED IDEOGRAPH-3E6E	[FB80 BE6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E6E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_353)
{
    // 3E6E 0062;	
    // (㹮) CJK UNIFIED IDEOGRAPH-3E6E	[FB80 BE6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_354)
{
    // 3E6F 0021;	
    // (㹯) CJK UNIFIED IDEOGRAPH-3E6F	[FB80 BE6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_355)
{
    // 3E6F 003F;	
    // (㹯) CJK UNIFIED IDEOGRAPH-3E6F	[FB80 BE6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_356)
{
    // 3E6F 0061;	
    // (㹯) CJK UNIFIED IDEOGRAPH-3E6F	[FB80 BE6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_357)
{
    // 3E6F 0041;	
    // (㹯) CJK UNIFIED IDEOGRAPH-3E6F	[FB80 BE6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E6F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_358)
{
    // 3E6F 0062;	
    // (㹯) CJK UNIFIED IDEOGRAPH-3E6F	[FB80 BE6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E6F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_359)
{
    // 3E70 0021;	
    // (㹰) CJK UNIFIED IDEOGRAPH-3E70	[FB80 BE70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E70, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_360)
{
    // 3E70 003F;	
    // (㹰) CJK UNIFIED IDEOGRAPH-3E70	[FB80 BE70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E70, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_361)
{
    // 3E70 0061;	
    // (㹰) CJK UNIFIED IDEOGRAPH-3E70	[FB80 BE70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E70, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_362)
{
    // 3E70 0041;	
    // (㹰) CJK UNIFIED IDEOGRAPH-3E70	[FB80 BE70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E70, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_363)
{
    // 3E70 0062;	
    // (㹰) CJK UNIFIED IDEOGRAPH-3E70	[FB80 BE70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E70, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_364)
{
    // 3E71 0021;	
    // (㹱) CJK UNIFIED IDEOGRAPH-3E71	[FB80 BE71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E71, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_365)
{
    // 3E71 003F;	
    // (㹱) CJK UNIFIED IDEOGRAPH-3E71	[FB80 BE71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E71, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_366)
{
    // 3E71 0061;	
    // (㹱) CJK UNIFIED IDEOGRAPH-3E71	[FB80 BE71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E71, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_367)
{
    // 3E71 0041;	
    // (㹱) CJK UNIFIED IDEOGRAPH-3E71	[FB80 BE71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E71, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_368)
{
    // 3E71 0062;	
    // (㹱) CJK UNIFIED IDEOGRAPH-3E71	[FB80 BE71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E71, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_369)
{
    // 3E72 0021;	
    // (㹲) CJK UNIFIED IDEOGRAPH-3E72	[FB80 BE72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E72, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_370)
{
    // 3E72 003F;	
    // (㹲) CJK UNIFIED IDEOGRAPH-3E72	[FB80 BE72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E72, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_371)
{
    // 3E72 0061;	
    // (㹲) CJK UNIFIED IDEOGRAPH-3E72	[FB80 BE72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E72, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_372)
{
    // 3E72 0041;	
    // (㹲) CJK UNIFIED IDEOGRAPH-3E72	[FB80 BE72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E72, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_373)
{
    // 3E72 0062;	
    // (㹲) CJK UNIFIED IDEOGRAPH-3E72	[FB80 BE72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E72, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_374)
{
    // 3E73 0021;	
    // (㹳) CJK UNIFIED IDEOGRAPH-3E73	[FB80 BE73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E73, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_375)
{
    // 3E73 003F;	
    // (㹳) CJK UNIFIED IDEOGRAPH-3E73	[FB80 BE73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E73, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_376)
{
    // 3E73 0061;	
    // (㹳) CJK UNIFIED IDEOGRAPH-3E73	[FB80 BE73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E73, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_377)
{
    // 3E73 0041;	
    // (㹳) CJK UNIFIED IDEOGRAPH-3E73	[FB80 BE73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E73, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_378)
{
    // 3E73 0062;	
    // (㹳) CJK UNIFIED IDEOGRAPH-3E73	[FB80 BE73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E73, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_379)
{
    // 3E74 0021;	
    // (㹴) CJK UNIFIED IDEOGRAPH-3E74	[FB80 BE74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E74, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_380)
{
    // 3E74 003F;	
    // (㹴) CJK UNIFIED IDEOGRAPH-3E74	[FB80 BE74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E74, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_381)
{
    // 3E74 0061;	
    // (㹴) CJK UNIFIED IDEOGRAPH-3E74	[FB80 BE74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E74, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_382)
{
    // 3E74 0041;	
    // (㹴) CJK UNIFIED IDEOGRAPH-3E74	[FB80 BE74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E74, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_383)
{
    // 3E74 0062;	
    // (㹴) CJK UNIFIED IDEOGRAPH-3E74	[FB80 BE74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E74, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_384)
{
    // 3E75 0021;	
    // (㹵) CJK UNIFIED IDEOGRAPH-3E75	[FB80 BE75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E75, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_385)
{
    // 3E75 003F;	
    // (㹵) CJK UNIFIED IDEOGRAPH-3E75	[FB80 BE75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E75, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_386)
{
    // 3E75 0061;	
    // (㹵) CJK UNIFIED IDEOGRAPH-3E75	[FB80 BE75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E75, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_387)
{
    // 3E75 0041;	
    // (㹵) CJK UNIFIED IDEOGRAPH-3E75	[FB80 BE75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E75, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_388)
{
    // 3E75 0062;	
    // (㹵) CJK UNIFIED IDEOGRAPH-3E75	[FB80 BE75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E75, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_389)
{
    // 3E76 0021;	
    // (㹶) CJK UNIFIED IDEOGRAPH-3E76	[FB80 BE76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E76, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_390)
{
    // 3E76 003F;	
    // (㹶) CJK UNIFIED IDEOGRAPH-3E76	[FB80 BE76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E76, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_391)
{
    // 3E76 0061;	
    // (㹶) CJK UNIFIED IDEOGRAPH-3E76	[FB80 BE76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E76, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_392)
{
    // 3E76 0041;	
    // (㹶) CJK UNIFIED IDEOGRAPH-3E76	[FB80 BE76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E76, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_393)
{
    // 3E76 0062;	
    // (㹶) CJK UNIFIED IDEOGRAPH-3E76	[FB80 BE76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E76, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_394)
{
    // 3E77 0021;	
    // (㹷) CJK UNIFIED IDEOGRAPH-3E77	[FB80 BE77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E77, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_395)
{
    // 3E77 003F;	
    // (㹷) CJK UNIFIED IDEOGRAPH-3E77	[FB80 BE77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E77, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_396)
{
    // 3E77 0061;	
    // (㹷) CJK UNIFIED IDEOGRAPH-3E77	[FB80 BE77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E77, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_397)
{
    // 3E77 0041;	
    // (㹷) CJK UNIFIED IDEOGRAPH-3E77	[FB80 BE77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E77, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_398)
{
    // 3E77 0062;	
    // (㹷) CJK UNIFIED IDEOGRAPH-3E77	[FB80 BE77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E77, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_399)
{
    // 3E78 0021;	
    // (㹸) CJK UNIFIED IDEOGRAPH-3E78	[FB80 BE78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E78, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_400)
{
    // 3E78 003F;	
    // (㹸) CJK UNIFIED IDEOGRAPH-3E78	[FB80 BE78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E78, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_401)
{
    // 3E78 0061;	
    // (㹸) CJK UNIFIED IDEOGRAPH-3E78	[FB80 BE78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E78, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_402)
{
    // 3E78 0041;	
    // (㹸) CJK UNIFIED IDEOGRAPH-3E78	[FB80 BE78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E78, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_403)
{
    // 3E78 0062;	
    // (㹸) CJK UNIFIED IDEOGRAPH-3E78	[FB80 BE78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E78, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_404)
{
    // 3E79 0021;	
    // (㹹) CJK UNIFIED IDEOGRAPH-3E79	[FB80 BE79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E79, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_405)
{
    // 3E79 003F;	
    // (㹹) CJK UNIFIED IDEOGRAPH-3E79	[FB80 BE79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E79, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_406)
{
    // 3E79 0061;	
    // (㹹) CJK UNIFIED IDEOGRAPH-3E79	[FB80 BE79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E79, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_407)
{
    // 3E79 0041;	
    // (㹹) CJK UNIFIED IDEOGRAPH-3E79	[FB80 BE79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E79, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_408)
{
    // 3E79 0062;	
    // (㹹) CJK UNIFIED IDEOGRAPH-3E79	[FB80 BE79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E79, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_409)
{
    // 3E7A 0021;	
    // (㹺) CJK UNIFIED IDEOGRAPH-3E7A	[FB80 BE7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_410)
{
    // 3E7A 003F;	
    // (㹺) CJK UNIFIED IDEOGRAPH-3E7A	[FB80 BE7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_411)
{
    // 3E7A 0061;	
    // (㹺) CJK UNIFIED IDEOGRAPH-3E7A	[FB80 BE7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_412)
{
    // 3E7A 0041;	
    // (㹺) CJK UNIFIED IDEOGRAPH-3E7A	[FB80 BE7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_413)
{
    // 3E7A 0062;	
    // (㹺) CJK UNIFIED IDEOGRAPH-3E7A	[FB80 BE7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_414)
{
    // 3E7B 0021;	
    // (㹻) CJK UNIFIED IDEOGRAPH-3E7B	[FB80 BE7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_415)
{
    // 3E7B 003F;	
    // (㹻) CJK UNIFIED IDEOGRAPH-3E7B	[FB80 BE7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_416)
{
    // 3E7B 0061;	
    // (㹻) CJK UNIFIED IDEOGRAPH-3E7B	[FB80 BE7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_417)
{
    // 3E7B 0041;	
    // (㹻) CJK UNIFIED IDEOGRAPH-3E7B	[FB80 BE7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_418)
{
    // 3E7B 0062;	
    // (㹻) CJK UNIFIED IDEOGRAPH-3E7B	[FB80 BE7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_419)
{
    // 3E7C 0021;	
    // (㹼) CJK UNIFIED IDEOGRAPH-3E7C	[FB80 BE7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_420)
{
    // 3E7C 003F;	
    // (㹼) CJK UNIFIED IDEOGRAPH-3E7C	[FB80 BE7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_421)
{
    // 3E7C 0061;	
    // (㹼) CJK UNIFIED IDEOGRAPH-3E7C	[FB80 BE7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_422)
{
    // 3E7C 0041;	
    // (㹼) CJK UNIFIED IDEOGRAPH-3E7C	[FB80 BE7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_423)
{
    // 3E7C 0062;	
    // (㹼) CJK UNIFIED IDEOGRAPH-3E7C	[FB80 BE7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_424)
{
    // 3E7D 0021;	
    // (㹽) CJK UNIFIED IDEOGRAPH-3E7D	[FB80 BE7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_425)
{
    // 3E7D 003F;	
    // (㹽) CJK UNIFIED IDEOGRAPH-3E7D	[FB80 BE7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_426)
{
    // 3E7D 0061;	
    // (㹽) CJK UNIFIED IDEOGRAPH-3E7D	[FB80 BE7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_427)
{
    // 3E7D 0041;	
    // (㹽) CJK UNIFIED IDEOGRAPH-3E7D	[FB80 BE7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_428)
{
    // 3E7D 0062;	
    // (㹽) CJK UNIFIED IDEOGRAPH-3E7D	[FB80 BE7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_429)
{
    // 3E7E 0021;	
    // (㹾) CJK UNIFIED IDEOGRAPH-3E7E	[FB80 BE7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_430)
{
    // 3E7E 003F;	
    // (㹾) CJK UNIFIED IDEOGRAPH-3E7E	[FB80 BE7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_431)
{
    // 3E7E 0061;	
    // (㹾) CJK UNIFIED IDEOGRAPH-3E7E	[FB80 BE7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_432)
{
    // 3E7E 0041;	
    // (㹾) CJK UNIFIED IDEOGRAPH-3E7E	[FB80 BE7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_433)
{
    // 3E7E 0062;	
    // (㹾) CJK UNIFIED IDEOGRAPH-3E7E	[FB80 BE7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_434)
{
    // 3E7F 0021;	
    // (㹿) CJK UNIFIED IDEOGRAPH-3E7F	[FB80 BE7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_435)
{
    // 3E7F 003F;	
    // (㹿) CJK UNIFIED IDEOGRAPH-3E7F	[FB80 BE7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_436)
{
    // 3E7F 0061;	
    // (㹿) CJK UNIFIED IDEOGRAPH-3E7F	[FB80 BE7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_437)
{
    // 3E7F 0041;	
    // (㹿) CJK UNIFIED IDEOGRAPH-3E7F	[FB80 BE7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_438)
{
    // 3E7F 0062;	
    // (㹿) CJK UNIFIED IDEOGRAPH-3E7F	[FB80 BE7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_439)
{
    // 3E80 0021;	
    // (㺀) CJK UNIFIED IDEOGRAPH-3E80	[FB80 BE80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E80, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_440)
{
    // 3E80 003F;	
    // (㺀) CJK UNIFIED IDEOGRAPH-3E80	[FB80 BE80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E80, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_441)
{
    // 3E80 0061;	
    // (㺀) CJK UNIFIED IDEOGRAPH-3E80	[FB80 BE80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E80, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_442)
{
    // 3E80 0041;	
    // (㺀) CJK UNIFIED IDEOGRAPH-3E80	[FB80 BE80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E80, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_443)
{
    // 3E80 0062;	
    // (㺀) CJK UNIFIED IDEOGRAPH-3E80	[FB80 BE80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E80, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_444)
{
    // 3E81 0021;	
    // (㺁) CJK UNIFIED IDEOGRAPH-3E81	[FB80 BE81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E81, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_445)
{
    // 3E81 003F;	
    // (㺁) CJK UNIFIED IDEOGRAPH-3E81	[FB80 BE81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E81, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_446)
{
    // 3E81 0061;	
    // (㺁) CJK UNIFIED IDEOGRAPH-3E81	[FB80 BE81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E81, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_447)
{
    // 3E81 0041;	
    // (㺁) CJK UNIFIED IDEOGRAPH-3E81	[FB80 BE81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E81, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_448)
{
    // 3E81 0062;	
    // (㺁) CJK UNIFIED IDEOGRAPH-3E81	[FB80 BE81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E81, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_449)
{
    // 3E82 0021;	
    // (㺂) CJK UNIFIED IDEOGRAPH-3E82	[FB80 BE82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E82, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_450)
{
    // 3E82 003F;	
    // (㺂) CJK UNIFIED IDEOGRAPH-3E82	[FB80 BE82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E82, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_451)
{
    // 3E82 0061;	
    // (㺂) CJK UNIFIED IDEOGRAPH-3E82	[FB80 BE82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E82, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_452)
{
    // 3E82 0041;	
    // (㺂) CJK UNIFIED IDEOGRAPH-3E82	[FB80 BE82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E82, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_453)
{
    // 3E82 0062;	
    // (㺂) CJK UNIFIED IDEOGRAPH-3E82	[FB80 BE82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E82, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_454)
{
    // 3E83 0021;	
    // (㺃) CJK UNIFIED IDEOGRAPH-3E83	[FB80 BE83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E83, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_455)
{
    // 3E83 003F;	
    // (㺃) CJK UNIFIED IDEOGRAPH-3E83	[FB80 BE83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E83, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_456)
{
    // 3E83 0061;	
    // (㺃) CJK UNIFIED IDEOGRAPH-3E83	[FB80 BE83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E83, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_457)
{
    // 3E83 0041;	
    // (㺃) CJK UNIFIED IDEOGRAPH-3E83	[FB80 BE83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E83, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_458)
{
    // 3E83 0062;	
    // (㺃) CJK UNIFIED IDEOGRAPH-3E83	[FB80 BE83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E83, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_459)
{
    // 3E84 0021;	
    // (㺄) CJK UNIFIED IDEOGRAPH-3E84	[FB80 BE84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E84, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_460)
{
    // 3E84 003F;	
    // (㺄) CJK UNIFIED IDEOGRAPH-3E84	[FB80 BE84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E84, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_461)
{
    // 3E84 0061;	
    // (㺄) CJK UNIFIED IDEOGRAPH-3E84	[FB80 BE84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E84, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_462)
{
    // 3E84 0041;	
    // (㺄) CJK UNIFIED IDEOGRAPH-3E84	[FB80 BE84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E84, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_463)
{
    // 3E84 0062;	
    // (㺄) CJK UNIFIED IDEOGRAPH-3E84	[FB80 BE84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E84, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_464)
{
    // 3E85 0021;	
    // (㺅) CJK UNIFIED IDEOGRAPH-3E85	[FB80 BE85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E85, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_465)
{
    // 3E85 003F;	
    // (㺅) CJK UNIFIED IDEOGRAPH-3E85	[FB80 BE85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E85, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_466)
{
    // 3E85 0061;	
    // (㺅) CJK UNIFIED IDEOGRAPH-3E85	[FB80 BE85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E85, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_467)
{
    // 3E85 0041;	
    // (㺅) CJK UNIFIED IDEOGRAPH-3E85	[FB80 BE85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E85, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_468)
{
    // 3E85 0062;	
    // (㺅) CJK UNIFIED IDEOGRAPH-3E85	[FB80 BE85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E85, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_469)
{
    // 3E86 0021;	
    // (㺆) CJK UNIFIED IDEOGRAPH-3E86	[FB80 BE86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E86, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_470)
{
    // 3E86 003F;	
    // (㺆) CJK UNIFIED IDEOGRAPH-3E86	[FB80 BE86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E86, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_471)
{
    // 3E86 0061;	
    // (㺆) CJK UNIFIED IDEOGRAPH-3E86	[FB80 BE86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E86, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_472)
{
    // 3E86 0041;	
    // (㺆) CJK UNIFIED IDEOGRAPH-3E86	[FB80 BE86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E86, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_473)
{
    // 3E86 0062;	
    // (㺆) CJK UNIFIED IDEOGRAPH-3E86	[FB80 BE86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E86, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_474)
{
    // 3E87 0021;	
    // (㺇) CJK UNIFIED IDEOGRAPH-3E87	[FB80 BE87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E87, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_475)
{
    // 3E87 003F;	
    // (㺇) CJK UNIFIED IDEOGRAPH-3E87	[FB80 BE87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E87, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_476)
{
    // 3E87 0061;	
    // (㺇) CJK UNIFIED IDEOGRAPH-3E87	[FB80 BE87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E87, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_477)
{
    // 3E87 0041;	
    // (㺇) CJK UNIFIED IDEOGRAPH-3E87	[FB80 BE87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E87, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_478)
{
    // 3E87 0062;	
    // (㺇) CJK UNIFIED IDEOGRAPH-3E87	[FB80 BE87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E87, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_479)
{
    // 3E88 0021;	
    // (㺈) CJK UNIFIED IDEOGRAPH-3E88	[FB80 BE88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E88, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_480)
{
    // 3E88 003F;	
    // (㺈) CJK UNIFIED IDEOGRAPH-3E88	[FB80 BE88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E88, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_481)
{
    // 3E88 0061;	
    // (㺈) CJK UNIFIED IDEOGRAPH-3E88	[FB80 BE88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E88, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_482)
{
    // 3E88 0041;	
    // (㺈) CJK UNIFIED IDEOGRAPH-3E88	[FB80 BE88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E88, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_483)
{
    // 3E88 0062;	
    // (㺈) CJK UNIFIED IDEOGRAPH-3E88	[FB80 BE88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E88, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_484)
{
    // 3E89 0021;	
    // (㺉) CJK UNIFIED IDEOGRAPH-3E89	[FB80 BE89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E89, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_485)
{
    // 3E89 003F;	
    // (㺉) CJK UNIFIED IDEOGRAPH-3E89	[FB80 BE89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E89, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_486)
{
    // 3E89 0061;	
    // (㺉) CJK UNIFIED IDEOGRAPH-3E89	[FB80 BE89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E89, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_487)
{
    // 3E89 0041;	
    // (㺉) CJK UNIFIED IDEOGRAPH-3E89	[FB80 BE89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E89, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_488)
{
    // 3E89 0062;	
    // (㺉) CJK UNIFIED IDEOGRAPH-3E89	[FB80 BE89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E89, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_489)
{
    // 3E8A 0021;	
    // (㺊) CJK UNIFIED IDEOGRAPH-3E8A	[FB80 BE8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_490)
{
    // 3E8A 003F;	
    // (㺊) CJK UNIFIED IDEOGRAPH-3E8A	[FB80 BE8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_491)
{
    // 3E8A 0061;	
    // (㺊) CJK UNIFIED IDEOGRAPH-3E8A	[FB80 BE8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_492)
{
    // 3E8A 0041;	
    // (㺊) CJK UNIFIED IDEOGRAPH-3E8A	[FB80 BE8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E8A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_493)
{
    // 3E8A 0062;	
    // (㺊) CJK UNIFIED IDEOGRAPH-3E8A	[FB80 BE8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_494)
{
    // 3E8B 0021;	
    // (㺋) CJK UNIFIED IDEOGRAPH-3E8B	[FB80 BE8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_495)
{
    // 3E8B 003F;	
    // (㺋) CJK UNIFIED IDEOGRAPH-3E8B	[FB80 BE8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_496)
{
    // 3E8B 0061;	
    // (㺋) CJK UNIFIED IDEOGRAPH-3E8B	[FB80 BE8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_497)
{
    // 3E8B 0041;	
    // (㺋) CJK UNIFIED IDEOGRAPH-3E8B	[FB80 BE8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E8B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_498)
{
    // 3E8B 0062;	
    // (㺋) CJK UNIFIED IDEOGRAPH-3E8B	[FB80 BE8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_353_499)
{
    // 3E8C 0021;	
    // (㺌) CJK UNIFIED IDEOGRAPH-3E8C	[FB80 BE8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E8C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

