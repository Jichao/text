// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_238_000)
{
    // 1E813 0041;	
    // (‎‎𞠓‎‎) MENDE KIKAKUI SYLLABLE M139 WVE	[3C38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E813, 0x0041 };
    uint32_t const ces[9] = { 0x3C38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_001)
{
    // 1E813 0062;	
    // (‎‎𞠓‎‎) MENDE KIKAKUI SYLLABLE M139 WVE	[3C38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E813, 0x0062 };
    uint32_t const ces[9] = { 0x3C38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_002)
{
    // 1E814 0021;	
    // (‎‎𞠔‎‎) MENDE KIKAKUI SYLLABLE M007 MIN	[3C39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E814, 0x0021 };
    uint32_t const ces[9] = { 0x3C39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_003)
{
    // 1E814 003F;	
    // (‎‎𞠔‎‎) MENDE KIKAKUI SYLLABLE M007 MIN	[3C39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E814, 0x003F };
    uint32_t const ces[9] = { 0x3C39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_004)
{
    // 1E814 0061;	
    // (‎‎𞠔‎‎) MENDE KIKAKUI SYLLABLE M007 MIN	[3C39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E814, 0x0061 };
    uint32_t const ces[9] = { 0x3C39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_005)
{
    // 1E814 0041;	
    // (‎‎𞠔‎‎) MENDE KIKAKUI SYLLABLE M007 MIN	[3C39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E814, 0x0041 };
    uint32_t const ces[9] = { 0x3C39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_006)
{
    // 1E814 0062;	
    // (‎‎𞠔‎‎) MENDE KIKAKUI SYLLABLE M007 MIN	[3C39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E814, 0x0062 };
    uint32_t const ces[9] = { 0x3C39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_007)
{
    // 1E815 0021;	
    // (‎‎𞠕‎‎) MENDE KIKAKUI SYLLABLE M008 MAN	[3C3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E815, 0x0021 };
    uint32_t const ces[9] = { 0x3C3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_008)
{
    // 1E815 003F;	
    // (‎‎𞠕‎‎) MENDE KIKAKUI SYLLABLE M008 MAN	[3C3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E815, 0x003F };
    uint32_t const ces[9] = { 0x3C3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_009)
{
    // 1E815 0061;	
    // (‎‎𞠕‎‎) MENDE KIKAKUI SYLLABLE M008 MAN	[3C3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E815, 0x0061 };
    uint32_t const ces[9] = { 0x3C3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_010)
{
    // 1E815 0041;	
    // (‎‎𞠕‎‎) MENDE KIKAKUI SYLLABLE M008 MAN	[3C3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E815, 0x0041 };
    uint32_t const ces[9] = { 0x3C3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_011)
{
    // 1E815 0062;	
    // (‎‎𞠕‎‎) MENDE KIKAKUI SYLLABLE M008 MAN	[3C3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E815, 0x0062 };
    uint32_t const ces[9] = { 0x3C3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_012)
{
    // 1E816 0021;	
    // (‎‎𞠖‎‎) MENDE KIKAKUI SYLLABLE M009 MUN	[3C3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E816, 0x0021 };
    uint32_t const ces[9] = { 0x3C3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_013)
{
    // 1E816 003F;	
    // (‎‎𞠖‎‎) MENDE KIKAKUI SYLLABLE M009 MUN	[3C3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E816, 0x003F };
    uint32_t const ces[9] = { 0x3C3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_014)
{
    // 1E816 0061;	
    // (‎‎𞠖‎‎) MENDE KIKAKUI SYLLABLE M009 MUN	[3C3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E816, 0x0061 };
    uint32_t const ces[9] = { 0x3C3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_015)
{
    // 1E816 0041;	
    // (‎‎𞠖‎‎) MENDE KIKAKUI SYLLABLE M009 MUN	[3C3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E816, 0x0041 };
    uint32_t const ces[9] = { 0x3C3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_016)
{
    // 1E816 0062;	
    // (‎‎𞠖‎‎) MENDE KIKAKUI SYLLABLE M009 MUN	[3C3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E816, 0x0062 };
    uint32_t const ces[9] = { 0x3C3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_017)
{
    // 1E817 0021;	
    // (‎‎𞠗‎‎) MENDE KIKAKUI SYLLABLE M059 MEN	[3C3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E817, 0x0021 };
    uint32_t const ces[9] = { 0x3C3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_018)
{
    // 1E817 003F;	
    // (‎‎𞠗‎‎) MENDE KIKAKUI SYLLABLE M059 MEN	[3C3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E817, 0x003F };
    uint32_t const ces[9] = { 0x3C3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_019)
{
    // 1E817 0061;	
    // (‎‎𞠗‎‎) MENDE KIKAKUI SYLLABLE M059 MEN	[3C3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E817, 0x0061 };
    uint32_t const ces[9] = { 0x3C3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_020)
{
    // 1E817 0041;	
    // (‎‎𞠗‎‎) MENDE KIKAKUI SYLLABLE M059 MEN	[3C3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E817, 0x0041 };
    uint32_t const ces[9] = { 0x3C3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_021)
{
    // 1E817 0062;	
    // (‎‎𞠗‎‎) MENDE KIKAKUI SYLLABLE M059 MEN	[3C3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E817, 0x0062 };
    uint32_t const ces[9] = { 0x3C3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_022)
{
    // 1E818 0021;	
    // (‎‎𞠘‎‎) MENDE KIKAKUI SYLLABLE M094 MON	[3C3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E818, 0x0021 };
    uint32_t const ces[9] = { 0x3C3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_023)
{
    // 1E818 003F;	
    // (‎‎𞠘‎‎) MENDE KIKAKUI SYLLABLE M094 MON	[3C3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E818, 0x003F };
    uint32_t const ces[9] = { 0x3C3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_024)
{
    // 1E818 0061;	
    // (‎‎𞠘‎‎) MENDE KIKAKUI SYLLABLE M094 MON	[3C3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E818, 0x0061 };
    uint32_t const ces[9] = { 0x3C3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_025)
{
    // 1E818 0041;	
    // (‎‎𞠘‎‎) MENDE KIKAKUI SYLLABLE M094 MON	[3C3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E818, 0x0041 };
    uint32_t const ces[9] = { 0x3C3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_026)
{
    // 1E818 0062;	
    // (‎‎𞠘‎‎) MENDE KIKAKUI SYLLABLE M094 MON	[3C3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E818, 0x0062 };
    uint32_t const ces[9] = { 0x3C3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_027)
{
    // 1E819 0021;	
    // (‎‎𞠙‎‎) MENDE KIKAKUI SYLLABLE M154 MUAN	[3C3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E819, 0x0021 };
    uint32_t const ces[9] = { 0x3C3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_028)
{
    // 1E819 003F;	
    // (‎‎𞠙‎‎) MENDE KIKAKUI SYLLABLE M154 MUAN	[3C3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E819, 0x003F };
    uint32_t const ces[9] = { 0x3C3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_029)
{
    // 1E819 0061;	
    // (‎‎𞠙‎‎) MENDE KIKAKUI SYLLABLE M154 MUAN	[3C3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E819, 0x0061 };
    uint32_t const ces[9] = { 0x3C3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_030)
{
    // 1E819 0041;	
    // (‎‎𞠙‎‎) MENDE KIKAKUI SYLLABLE M154 MUAN	[3C3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E819, 0x0041 };
    uint32_t const ces[9] = { 0x3C3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_031)
{
    // 1E819 0062;	
    // (‎‎𞠙‎‎) MENDE KIKAKUI SYLLABLE M154 MUAN	[3C3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E819, 0x0062 };
    uint32_t const ces[9] = { 0x3C3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_032)
{
    // 1E81A 0021;	
    // (‎‎𞠚‎‎) MENDE KIKAKUI SYLLABLE M189 MUEN	[3C3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81A, 0x0021 };
    uint32_t const ces[9] = { 0x3C3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_033)
{
    // 1E81A 003F;	
    // (‎‎𞠚‎‎) MENDE KIKAKUI SYLLABLE M189 MUEN	[3C3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81A, 0x003F };
    uint32_t const ces[9] = { 0x3C3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_034)
{
    // 1E81A 0061;	
    // (‎‎𞠚‎‎) MENDE KIKAKUI SYLLABLE M189 MUEN	[3C3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81A, 0x0061 };
    uint32_t const ces[9] = { 0x3C3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_035)
{
    // 1E81A 0041;	
    // (‎‎𞠚‎‎) MENDE KIKAKUI SYLLABLE M189 MUEN	[3C3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E81A, 0x0041 };
    uint32_t const ces[9] = { 0x3C3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_036)
{
    // 1E81A 0062;	
    // (‎‎𞠚‎‎) MENDE KIKAKUI SYLLABLE M189 MUEN	[3C3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81A, 0x0062 };
    uint32_t const ces[9] = { 0x3C3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_037)
{
    // 1E81B 0021;	
    // (‎‎𞠛‎‎) MENDE KIKAKUI SYLLABLE M010 BI	[3C40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81B, 0x0021 };
    uint32_t const ces[9] = { 0x3C40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_038)
{
    // 1E81B 003F;	
    // (‎‎𞠛‎‎) MENDE KIKAKUI SYLLABLE M010 BI	[3C40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81B, 0x003F };
    uint32_t const ces[9] = { 0x3C40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_039)
{
    // 1E81B 0061;	
    // (‎‎𞠛‎‎) MENDE KIKAKUI SYLLABLE M010 BI	[3C40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81B, 0x0061 };
    uint32_t const ces[9] = { 0x3C40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_040)
{
    // 1E81B 0041;	
    // (‎‎𞠛‎‎) MENDE KIKAKUI SYLLABLE M010 BI	[3C40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E81B, 0x0041 };
    uint32_t const ces[9] = { 0x3C40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_041)
{
    // 1E81B 0062;	
    // (‎‎𞠛‎‎) MENDE KIKAKUI SYLLABLE M010 BI	[3C40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81B, 0x0062 };
    uint32_t const ces[9] = { 0x3C40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_042)
{
    // 1E81C 0021;	
    // (‎‎𞠜‎‎) MENDE KIKAKUI SYLLABLE M011 BA	[3C41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81C, 0x0021 };
    uint32_t const ces[9] = { 0x3C41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_043)
{
    // 1E81C 003F;	
    // (‎‎𞠜‎‎) MENDE KIKAKUI SYLLABLE M011 BA	[3C41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81C, 0x003F };
    uint32_t const ces[9] = { 0x3C41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_044)
{
    // 1E81C 0061;	
    // (‎‎𞠜‎‎) MENDE KIKAKUI SYLLABLE M011 BA	[3C41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81C, 0x0061 };
    uint32_t const ces[9] = { 0x3C41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_045)
{
    // 1E81C 0041;	
    // (‎‎𞠜‎‎) MENDE KIKAKUI SYLLABLE M011 BA	[3C41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E81C, 0x0041 };
    uint32_t const ces[9] = { 0x3C41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_046)
{
    // 1E81C 0062;	
    // (‎‎𞠜‎‎) MENDE KIKAKUI SYLLABLE M011 BA	[3C41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81C, 0x0062 };
    uint32_t const ces[9] = { 0x3C41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_047)
{
    // 1E81D 0021;	
    // (‎‎𞠝‎‎) MENDE KIKAKUI SYLLABLE M012 BU	[3C42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81D, 0x0021 };
    uint32_t const ces[9] = { 0x3C42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_048)
{
    // 1E81D 003F;	
    // (‎‎𞠝‎‎) MENDE KIKAKUI SYLLABLE M012 BU	[3C42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81D, 0x003F };
    uint32_t const ces[9] = { 0x3C42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_049)
{
    // 1E81D 0061;	
    // (‎‎𞠝‎‎) MENDE KIKAKUI SYLLABLE M012 BU	[3C42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81D, 0x0061 };
    uint32_t const ces[9] = { 0x3C42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_050)
{
    // 1E81D 0041;	
    // (‎‎𞠝‎‎) MENDE KIKAKUI SYLLABLE M012 BU	[3C42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E81D, 0x0041 };
    uint32_t const ces[9] = { 0x3C42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_051)
{
    // 1E81D 0062;	
    // (‎‎𞠝‎‎) MENDE KIKAKUI SYLLABLE M012 BU	[3C42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81D, 0x0062 };
    uint32_t const ces[9] = { 0x3C42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_052)
{
    // 1E81E 0021;	
    // (‎‎𞠞‎‎) MENDE KIKAKUI SYLLABLE M150 BEE	[3C43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81E, 0x0021 };
    uint32_t const ces[9] = { 0x3C43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_053)
{
    // 1E81E 003F;	
    // (‎‎𞠞‎‎) MENDE KIKAKUI SYLLABLE M150 BEE	[3C43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81E, 0x003F };
    uint32_t const ces[9] = { 0x3C43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_054)
{
    // 1E81E 0061;	
    // (‎‎𞠞‎‎) MENDE KIKAKUI SYLLABLE M150 BEE	[3C43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81E, 0x0061 };
    uint32_t const ces[9] = { 0x3C43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_055)
{
    // 1E81E 0041;	
    // (‎‎𞠞‎‎) MENDE KIKAKUI SYLLABLE M150 BEE	[3C43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E81E, 0x0041 };
    uint32_t const ces[9] = { 0x3C43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_056)
{
    // 1E81E 0062;	
    // (‎‎𞠞‎‎) MENDE KIKAKUI SYLLABLE M150 BEE	[3C43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81E, 0x0062 };
    uint32_t const ces[9] = { 0x3C43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_057)
{
    // 1E81F 0021;	
    // (‎‎𞠟‎‎) MENDE KIKAKUI SYLLABLE M097 BE	[3C44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81F, 0x0021 };
    uint32_t const ces[9] = { 0x3C44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_058)
{
    // 1E81F 003F;	
    // (‎‎𞠟‎‎) MENDE KIKAKUI SYLLABLE M097 BE	[3C44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81F, 0x003F };
    uint32_t const ces[9] = { 0x3C44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_059)
{
    // 1E81F 0061;	
    // (‎‎𞠟‎‎) MENDE KIKAKUI SYLLABLE M097 BE	[3C44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81F, 0x0061 };
    uint32_t const ces[9] = { 0x3C44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_060)
{
    // 1E81F 0041;	
    // (‎‎𞠟‎‎) MENDE KIKAKUI SYLLABLE M097 BE	[3C44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E81F, 0x0041 };
    uint32_t const ces[9] = { 0x3C44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_061)
{
    // 1E81F 0062;	
    // (‎‎𞠟‎‎) MENDE KIKAKUI SYLLABLE M097 BE	[3C44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E81F, 0x0062 };
    uint32_t const ces[9] = { 0x3C44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_062)
{
    // 1E820 0021;	
    // (‎‎𞠠‎‎) MENDE KIKAKUI SYLLABLE M103 BOO	[3C45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E820, 0x0021 };
    uint32_t const ces[9] = { 0x3C45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_063)
{
    // 1E820 003F;	
    // (‎‎𞠠‎‎) MENDE KIKAKUI SYLLABLE M103 BOO	[3C45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E820, 0x003F };
    uint32_t const ces[9] = { 0x3C45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_064)
{
    // 1E820 0061;	
    // (‎‎𞠠‎‎) MENDE KIKAKUI SYLLABLE M103 BOO	[3C45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E820, 0x0061 };
    uint32_t const ces[9] = { 0x3C45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_065)
{
    // 1E820 0041;	
    // (‎‎𞠠‎‎) MENDE KIKAKUI SYLLABLE M103 BOO	[3C45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E820, 0x0041 };
    uint32_t const ces[9] = { 0x3C45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_066)
{
    // 1E820 0062;	
    // (‎‎𞠠‎‎) MENDE KIKAKUI SYLLABLE M103 BOO	[3C45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E820, 0x0062 };
    uint32_t const ces[9] = { 0x3C45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_067)
{
    // 1E821 0021;	
    // (‎‎𞠡‎‎) MENDE KIKAKUI SYLLABLE M138 BO	[3C46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E821, 0x0021 };
    uint32_t const ces[9] = { 0x3C46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_068)
{
    // 1E821 003F;	
    // (‎‎𞠡‎‎) MENDE KIKAKUI SYLLABLE M138 BO	[3C46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E821, 0x003F };
    uint32_t const ces[9] = { 0x3C46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_069)
{
    // 1E821 0061;	
    // (‎‎𞠡‎‎) MENDE KIKAKUI SYLLABLE M138 BO	[3C46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E821, 0x0061 };
    uint32_t const ces[9] = { 0x3C46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_070)
{
    // 1E821 0041;	
    // (‎‎𞠡‎‎) MENDE KIKAKUI SYLLABLE M138 BO	[3C46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E821, 0x0041 };
    uint32_t const ces[9] = { 0x3C46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_071)
{
    // 1E821 0062;	
    // (‎‎𞠡‎‎) MENDE KIKAKUI SYLLABLE M138 BO	[3C46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E821, 0x0062 };
    uint32_t const ces[9] = { 0x3C46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_072)
{
    // 1E822 0021;	
    // (‎‎𞠢‎‎) MENDE KIKAKUI SYLLABLE M013 I	[3C47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E822, 0x0021 };
    uint32_t const ces[9] = { 0x3C47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_073)
{
    // 1E822 003F;	
    // (‎‎𞠢‎‎) MENDE KIKAKUI SYLLABLE M013 I	[3C47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E822, 0x003F };
    uint32_t const ces[9] = { 0x3C47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_074)
{
    // 1E822 0061;	
    // (‎‎𞠢‎‎) MENDE KIKAKUI SYLLABLE M013 I	[3C47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E822, 0x0061 };
    uint32_t const ces[9] = { 0x3C47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_075)
{
    // 1E822 0041;	
    // (‎‎𞠢‎‎) MENDE KIKAKUI SYLLABLE M013 I	[3C47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E822, 0x0041 };
    uint32_t const ces[9] = { 0x3C47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_076)
{
    // 1E822 0062;	
    // (‎‎𞠢‎‎) MENDE KIKAKUI SYLLABLE M013 I	[3C47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E822, 0x0062 };
    uint32_t const ces[9] = { 0x3C47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_077)
{
    // 1E823 0021;	
    // (‎‎𞠣‎‎) MENDE KIKAKUI SYLLABLE M014 A	[3C48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E823, 0x0021 };
    uint32_t const ces[9] = { 0x3C48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_078)
{
    // 1E823 003F;	
    // (‎‎𞠣‎‎) MENDE KIKAKUI SYLLABLE M014 A	[3C48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E823, 0x003F };
    uint32_t const ces[9] = { 0x3C48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_079)
{
    // 1E823 0061;	
    // (‎‎𞠣‎‎) MENDE KIKAKUI SYLLABLE M014 A	[3C48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E823, 0x0061 };
    uint32_t const ces[9] = { 0x3C48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_080)
{
    // 1E823 0041;	
    // (‎‎𞠣‎‎) MENDE KIKAKUI SYLLABLE M014 A	[3C48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E823, 0x0041 };
    uint32_t const ces[9] = { 0x3C48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_081)
{
    // 1E823 0062;	
    // (‎‎𞠣‎‎) MENDE KIKAKUI SYLLABLE M014 A	[3C48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E823, 0x0062 };
    uint32_t const ces[9] = { 0x3C48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_082)
{
    // 1E824 0021;	
    // (‎‎𞠤‎‎) MENDE KIKAKUI SYLLABLE M015 U	[3C49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E824, 0x0021 };
    uint32_t const ces[9] = { 0x3C49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_083)
{
    // 1E824 003F;	
    // (‎‎𞠤‎‎) MENDE KIKAKUI SYLLABLE M015 U	[3C49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E824, 0x003F };
    uint32_t const ces[9] = { 0x3C49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_084)
{
    // 1E824 0061;	
    // (‎‎𞠤‎‎) MENDE KIKAKUI SYLLABLE M015 U	[3C49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E824, 0x0061 };
    uint32_t const ces[9] = { 0x3C49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_085)
{
    // 1E824 0041;	
    // (‎‎𞠤‎‎) MENDE KIKAKUI SYLLABLE M015 U	[3C49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E824, 0x0041 };
    uint32_t const ces[9] = { 0x3C49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_086)
{
    // 1E824 0062;	
    // (‎‎𞠤‎‎) MENDE KIKAKUI SYLLABLE M015 U	[3C49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E824, 0x0062 };
    uint32_t const ces[9] = { 0x3C49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_087)
{
    // 1E825 0021;	
    // (‎‎𞠥‎‎) MENDE KIKAKUI SYLLABLE M163 EE	[3C4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E825, 0x0021 };
    uint32_t const ces[9] = { 0x3C4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_088)
{
    // 1E825 003F;	
    // (‎‎𞠥‎‎) MENDE KIKAKUI SYLLABLE M163 EE	[3C4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E825, 0x003F };
    uint32_t const ces[9] = { 0x3C4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_089)
{
    // 1E825 0061;	
    // (‎‎𞠥‎‎) MENDE KIKAKUI SYLLABLE M163 EE	[3C4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E825, 0x0061 };
    uint32_t const ces[9] = { 0x3C4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_090)
{
    // 1E825 0041;	
    // (‎‎𞠥‎‎) MENDE KIKAKUI SYLLABLE M163 EE	[3C4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E825, 0x0041 };
    uint32_t const ces[9] = { 0x3C4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_091)
{
    // 1E825 0062;	
    // (‎‎𞠥‎‎) MENDE KIKAKUI SYLLABLE M163 EE	[3C4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E825, 0x0062 };
    uint32_t const ces[9] = { 0x3C4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_092)
{
    // 1E826 0021;	
    // (‎‎𞠦‎‎) MENDE KIKAKUI SYLLABLE M100 E	[3C4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E826, 0x0021 };
    uint32_t const ces[9] = { 0x3C4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_093)
{
    // 1E826 003F;	
    // (‎‎𞠦‎‎) MENDE KIKAKUI SYLLABLE M100 E	[3C4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E826, 0x003F };
    uint32_t const ces[9] = { 0x3C4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_094)
{
    // 1E826 0061;	
    // (‎‎𞠦‎‎) MENDE KIKAKUI SYLLABLE M100 E	[3C4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E826, 0x0061 };
    uint32_t const ces[9] = { 0x3C4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_095)
{
    // 1E826 0041;	
    // (‎‎𞠦‎‎) MENDE KIKAKUI SYLLABLE M100 E	[3C4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E826, 0x0041 };
    uint32_t const ces[9] = { 0x3C4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_096)
{
    // 1E826 0062;	
    // (‎‎𞠦‎‎) MENDE KIKAKUI SYLLABLE M100 E	[3C4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E826, 0x0062 };
    uint32_t const ces[9] = { 0x3C4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_097)
{
    // 1E827 0021;	
    // (‎‎𞠧‎‎) MENDE KIKAKUI SYLLABLE M165 OO	[3C4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E827, 0x0021 };
    uint32_t const ces[9] = { 0x3C4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_098)
{
    // 1E827 003F;	
    // (‎‎𞠧‎‎) MENDE KIKAKUI SYLLABLE M165 OO	[3C4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E827, 0x003F };
    uint32_t const ces[9] = { 0x3C4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_099)
{
    // 1E827 0061;	
    // (‎‎𞠧‎‎) MENDE KIKAKUI SYLLABLE M165 OO	[3C4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E827, 0x0061 };
    uint32_t const ces[9] = { 0x3C4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_100)
{
    // 1E827 0041;	
    // (‎‎𞠧‎‎) MENDE KIKAKUI SYLLABLE M165 OO	[3C4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E827, 0x0041 };
    uint32_t const ces[9] = { 0x3C4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_101)
{
    // 1E827 0062;	
    // (‎‎𞠧‎‎) MENDE KIKAKUI SYLLABLE M165 OO	[3C4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E827, 0x0062 };
    uint32_t const ces[9] = { 0x3C4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_102)
{
    // 1E828 0021;	
    // (‎‎𞠨‎‎) MENDE KIKAKUI SYLLABLE M147 O	[3C4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E828, 0x0021 };
    uint32_t const ces[9] = { 0x3C4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_103)
{
    // 1E828 003F;	
    // (‎‎𞠨‎‎) MENDE KIKAKUI SYLLABLE M147 O	[3C4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E828, 0x003F };
    uint32_t const ces[9] = { 0x3C4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_104)
{
    // 1E828 0061;	
    // (‎‎𞠨‎‎) MENDE KIKAKUI SYLLABLE M147 O	[3C4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E828, 0x0061 };
    uint32_t const ces[9] = { 0x3C4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_105)
{
    // 1E828 0041;	
    // (‎‎𞠨‎‎) MENDE KIKAKUI SYLLABLE M147 O	[3C4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E828, 0x0041 };
    uint32_t const ces[9] = { 0x3C4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_106)
{
    // 1E828 0062;	
    // (‎‎𞠨‎‎) MENDE KIKAKUI SYLLABLE M147 O	[3C4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E828, 0x0062 };
    uint32_t const ces[9] = { 0x3C4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_107)
{
    // 1E829 0021;	
    // (‎‎𞠩‎‎) MENDE KIKAKUI SYLLABLE M137 EI	[3C4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E829, 0x0021 };
    uint32_t const ces[9] = { 0x3C4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_108)
{
    // 1E829 003F;	
    // (‎‎𞠩‎‎) MENDE KIKAKUI SYLLABLE M137 EI	[3C4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E829, 0x003F };
    uint32_t const ces[9] = { 0x3C4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_109)
{
    // 1E829 0061;	
    // (‎‎𞠩‎‎) MENDE KIKAKUI SYLLABLE M137 EI	[3C4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E829, 0x0061 };
    uint32_t const ces[9] = { 0x3C4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_110)
{
    // 1E829 0041;	
    // (‎‎𞠩‎‎) MENDE KIKAKUI SYLLABLE M137 EI	[3C4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E829, 0x0041 };
    uint32_t const ces[9] = { 0x3C4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_111)
{
    // 1E829 0062;	
    // (‎‎𞠩‎‎) MENDE KIKAKUI SYLLABLE M137 EI	[3C4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E829, 0x0062 };
    uint32_t const ces[9] = { 0x3C4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_112)
{
    // 1E82A 0021;	
    // (‎‎𞠪‎‎) MENDE KIKAKUI SYLLABLE M131 IN	[3C4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82A, 0x0021 };
    uint32_t const ces[9] = { 0x3C4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_113)
{
    // 1E82A 003F;	
    // (‎‎𞠪‎‎) MENDE KIKAKUI SYLLABLE M131 IN	[3C4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82A, 0x003F };
    uint32_t const ces[9] = { 0x3C4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_114)
{
    // 1E82A 0061;	
    // (‎‎𞠪‎‎) MENDE KIKAKUI SYLLABLE M131 IN	[3C4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82A, 0x0061 };
    uint32_t const ces[9] = { 0x3C4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_115)
{
    // 1E82A 0041;	
    // (‎‎𞠪‎‎) MENDE KIKAKUI SYLLABLE M131 IN	[3C4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E82A, 0x0041 };
    uint32_t const ces[9] = { 0x3C4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_116)
{
    // 1E82A 0062;	
    // (‎‎𞠪‎‎) MENDE KIKAKUI SYLLABLE M131 IN	[3C4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82A, 0x0062 };
    uint32_t const ces[9] = { 0x3C4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_117)
{
    // 1E82B 0021;	
    // (‎‎𞠫‎‎) MENDE KIKAKUI SYLLABLE M135 IN	[3C50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82B, 0x0021 };
    uint32_t const ces[9] = { 0x3C50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_118)
{
    // 1E82B 003F;	
    // (‎‎𞠫‎‎) MENDE KIKAKUI SYLLABLE M135 IN	[3C50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82B, 0x003F };
    uint32_t const ces[9] = { 0x3C50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_119)
{
    // 1E82B 0061;	
    // (‎‎𞠫‎‎) MENDE KIKAKUI SYLLABLE M135 IN	[3C50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82B, 0x0061 };
    uint32_t const ces[9] = { 0x3C50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_120)
{
    // 1E82B 0041;	
    // (‎‎𞠫‎‎) MENDE KIKAKUI SYLLABLE M135 IN	[3C50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E82B, 0x0041 };
    uint32_t const ces[9] = { 0x3C50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_121)
{
    // 1E82B 0062;	
    // (‎‎𞠫‎‎) MENDE KIKAKUI SYLLABLE M135 IN	[3C50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82B, 0x0062 };
    uint32_t const ces[9] = { 0x3C50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_122)
{
    // 1E82C 0021;	
    // (‎‎𞠬‎‎) MENDE KIKAKUI SYLLABLE M195 AN	[3C51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82C, 0x0021 };
    uint32_t const ces[9] = { 0x3C51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_123)
{
    // 1E82C 003F;	
    // (‎‎𞠬‎‎) MENDE KIKAKUI SYLLABLE M195 AN	[3C51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82C, 0x003F };
    uint32_t const ces[9] = { 0x3C51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_124)
{
    // 1E82C 0061;	
    // (‎‎𞠬‎‎) MENDE KIKAKUI SYLLABLE M195 AN	[3C51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82C, 0x0061 };
    uint32_t const ces[9] = { 0x3C51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_125)
{
    // 1E82C 0041;	
    // (‎‎𞠬‎‎) MENDE KIKAKUI SYLLABLE M195 AN	[3C51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E82C, 0x0041 };
    uint32_t const ces[9] = { 0x3C51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_126)
{
    // 1E82C 0062;	
    // (‎‎𞠬‎‎) MENDE KIKAKUI SYLLABLE M195 AN	[3C51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82C, 0x0062 };
    uint32_t const ces[9] = { 0x3C51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_127)
{
    // 1E82D 0021;	
    // (‎‎𞠭‎‎) MENDE KIKAKUI SYLLABLE M178 EN	[3C52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82D, 0x0021 };
    uint32_t const ces[9] = { 0x3C52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_128)
{
    // 1E82D 003F;	
    // (‎‎𞠭‎‎) MENDE KIKAKUI SYLLABLE M178 EN	[3C52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82D, 0x003F };
    uint32_t const ces[9] = { 0x3C52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_129)
{
    // 1E82D 0061;	
    // (‎‎𞠭‎‎) MENDE KIKAKUI SYLLABLE M178 EN	[3C52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82D, 0x0061 };
    uint32_t const ces[9] = { 0x3C52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_130)
{
    // 1E82D 0041;	
    // (‎‎𞠭‎‎) MENDE KIKAKUI SYLLABLE M178 EN	[3C52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E82D, 0x0041 };
    uint32_t const ces[9] = { 0x3C52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_131)
{
    // 1E82D 0062;	
    // (‎‎𞠭‎‎) MENDE KIKAKUI SYLLABLE M178 EN	[3C52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82D, 0x0062 };
    uint32_t const ces[9] = { 0x3C52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_132)
{
    // 1E82E 0021;	
    // (‎‎𞠮‎‎) MENDE KIKAKUI SYLLABLE M019 SI	[3C53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82E, 0x0021 };
    uint32_t const ces[9] = { 0x3C53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_133)
{
    // 1E82E 003F;	
    // (‎‎𞠮‎‎) MENDE KIKAKUI SYLLABLE M019 SI	[3C53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82E, 0x003F };
    uint32_t const ces[9] = { 0x3C53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_134)
{
    // 1E82E 0061;	
    // (‎‎𞠮‎‎) MENDE KIKAKUI SYLLABLE M019 SI	[3C53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82E, 0x0061 };
    uint32_t const ces[9] = { 0x3C53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_135)
{
    // 1E82E 0041;	
    // (‎‎𞠮‎‎) MENDE KIKAKUI SYLLABLE M019 SI	[3C53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E82E, 0x0041 };
    uint32_t const ces[9] = { 0x3C53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_136)
{
    // 1E82E 0062;	
    // (‎‎𞠮‎‎) MENDE KIKAKUI SYLLABLE M019 SI	[3C53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82E, 0x0062 };
    uint32_t const ces[9] = { 0x3C53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_137)
{
    // 1E82F 0021;	
    // (‎‎𞠯‎‎) MENDE KIKAKUI SYLLABLE M020 SA	[3C54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82F, 0x0021 };
    uint32_t const ces[9] = { 0x3C54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_138)
{
    // 1E82F 003F;	
    // (‎‎𞠯‎‎) MENDE KIKAKUI SYLLABLE M020 SA	[3C54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82F, 0x003F };
    uint32_t const ces[9] = { 0x3C54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_139)
{
    // 1E82F 0061;	
    // (‎‎𞠯‎‎) MENDE KIKAKUI SYLLABLE M020 SA	[3C54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82F, 0x0061 };
    uint32_t const ces[9] = { 0x3C54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_140)
{
    // 1E82F 0041;	
    // (‎‎𞠯‎‎) MENDE KIKAKUI SYLLABLE M020 SA	[3C54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E82F, 0x0041 };
    uint32_t const ces[9] = { 0x3C54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_141)
{
    // 1E82F 0062;	
    // (‎‎𞠯‎‎) MENDE KIKAKUI SYLLABLE M020 SA	[3C54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E82F, 0x0062 };
    uint32_t const ces[9] = { 0x3C54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_142)
{
    // 1E830 0021;	
    // (‎‎𞠰‎‎) MENDE KIKAKUI SYLLABLE M021 SU	[3C55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E830, 0x0021 };
    uint32_t const ces[9] = { 0x3C55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_143)
{
    // 1E830 003F;	
    // (‎‎𞠰‎‎) MENDE KIKAKUI SYLLABLE M021 SU	[3C55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E830, 0x003F };
    uint32_t const ces[9] = { 0x3C55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_144)
{
    // 1E830 0061;	
    // (‎‎𞠰‎‎) MENDE KIKAKUI SYLLABLE M021 SU	[3C55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E830, 0x0061 };
    uint32_t const ces[9] = { 0x3C55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_145)
{
    // 1E830 0041;	
    // (‎‎𞠰‎‎) MENDE KIKAKUI SYLLABLE M021 SU	[3C55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E830, 0x0041 };
    uint32_t const ces[9] = { 0x3C55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_146)
{
    // 1E830 0062;	
    // (‎‎𞠰‎‎) MENDE KIKAKUI SYLLABLE M021 SU	[3C55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E830, 0x0062 };
    uint32_t const ces[9] = { 0x3C55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_147)
{
    // 1E831 0021;	
    // (‎‎𞠱‎‎) MENDE KIKAKUI SYLLABLE M162 SEE	[3C56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E831, 0x0021 };
    uint32_t const ces[9] = { 0x3C56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_148)
{
    // 1E831 003F;	
    // (‎‎𞠱‎‎) MENDE KIKAKUI SYLLABLE M162 SEE	[3C56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E831, 0x003F };
    uint32_t const ces[9] = { 0x3C56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_149)
{
    // 1E831 0061;	
    // (‎‎𞠱‎‎) MENDE KIKAKUI SYLLABLE M162 SEE	[3C56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E831, 0x0061 };
    uint32_t const ces[9] = { 0x3C56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_150)
{
    // 1E831 0041;	
    // (‎‎𞠱‎‎) MENDE KIKAKUI SYLLABLE M162 SEE	[3C56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E831, 0x0041 };
    uint32_t const ces[9] = { 0x3C56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_151)
{
    // 1E831 0062;	
    // (‎‎𞠱‎‎) MENDE KIKAKUI SYLLABLE M162 SEE	[3C56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E831, 0x0062 };
    uint32_t const ces[9] = { 0x3C56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_152)
{
    // 1E832 0021;	
    // (‎‎𞠲‎‎) MENDE KIKAKUI SYLLABLE M116 SE	[3C57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E832, 0x0021 };
    uint32_t const ces[9] = { 0x3C57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_153)
{
    // 1E832 003F;	
    // (‎‎𞠲‎‎) MENDE KIKAKUI SYLLABLE M116 SE	[3C57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E832, 0x003F };
    uint32_t const ces[9] = { 0x3C57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_154)
{
    // 1E832 0061;	
    // (‎‎𞠲‎‎) MENDE KIKAKUI SYLLABLE M116 SE	[3C57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E832, 0x0061 };
    uint32_t const ces[9] = { 0x3C57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_155)
{
    // 1E832 0041;	
    // (‎‎𞠲‎‎) MENDE KIKAKUI SYLLABLE M116 SE	[3C57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E832, 0x0041 };
    uint32_t const ces[9] = { 0x3C57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_156)
{
    // 1E832 0062;	
    // (‎‎𞠲‎‎) MENDE KIKAKUI SYLLABLE M116 SE	[3C57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E832, 0x0062 };
    uint32_t const ces[9] = { 0x3C57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_157)
{
    // 1E833 0021;	
    // (‎‎𞠳‎‎) MENDE KIKAKUI SYLLABLE M136 SOO	[3C58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E833, 0x0021 };
    uint32_t const ces[9] = { 0x3C58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_158)
{
    // 1E833 003F;	
    // (‎‎𞠳‎‎) MENDE KIKAKUI SYLLABLE M136 SOO	[3C58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E833, 0x003F };
    uint32_t const ces[9] = { 0x3C58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_159)
{
    // 1E833 0061;	
    // (‎‎𞠳‎‎) MENDE KIKAKUI SYLLABLE M136 SOO	[3C58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E833, 0x0061 };
    uint32_t const ces[9] = { 0x3C58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_160)
{
    // 1E833 0041;	
    // (‎‎𞠳‎‎) MENDE KIKAKUI SYLLABLE M136 SOO	[3C58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E833, 0x0041 };
    uint32_t const ces[9] = { 0x3C58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_161)
{
    // 1E833 0062;	
    // (‎‎𞠳‎‎) MENDE KIKAKUI SYLLABLE M136 SOO	[3C58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E833, 0x0062 };
    uint32_t const ces[9] = { 0x3C58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_162)
{
    // 1E834 0021;	
    // (‎‎𞠴‎‎) MENDE KIKAKUI SYLLABLE M079 SO	[3C59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E834, 0x0021 };
    uint32_t const ces[9] = { 0x3C59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_163)
{
    // 1E834 003F;	
    // (‎‎𞠴‎‎) MENDE KIKAKUI SYLLABLE M079 SO	[3C59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E834, 0x003F };
    uint32_t const ces[9] = { 0x3C59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_164)
{
    // 1E834 0061;	
    // (‎‎𞠴‎‎) MENDE KIKAKUI SYLLABLE M079 SO	[3C59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E834, 0x0061 };
    uint32_t const ces[9] = { 0x3C59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_165)
{
    // 1E834 0041;	
    // (‎‎𞠴‎‎) MENDE KIKAKUI SYLLABLE M079 SO	[3C59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E834, 0x0041 };
    uint32_t const ces[9] = { 0x3C59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_166)
{
    // 1E834 0062;	
    // (‎‎𞠴‎‎) MENDE KIKAKUI SYLLABLE M079 SO	[3C59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E834, 0x0062 };
    uint32_t const ces[9] = { 0x3C59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_167)
{
    // 1E835 0021;	
    // (‎‎𞠵‎‎) MENDE KIKAKUI SYLLABLE M196 SIA	[3C5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E835, 0x0021 };
    uint32_t const ces[9] = { 0x3C5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_168)
{
    // 1E835 003F;	
    // (‎‎𞠵‎‎) MENDE KIKAKUI SYLLABLE M196 SIA	[3C5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E835, 0x003F };
    uint32_t const ces[9] = { 0x3C5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_169)
{
    // 1E835 0061;	
    // (‎‎𞠵‎‎) MENDE KIKAKUI SYLLABLE M196 SIA	[3C5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E835, 0x0061 };
    uint32_t const ces[9] = { 0x3C5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_170)
{
    // 1E835 0041;	
    // (‎‎𞠵‎‎) MENDE KIKAKUI SYLLABLE M196 SIA	[3C5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E835, 0x0041 };
    uint32_t const ces[9] = { 0x3C5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_171)
{
    // 1E835 0062;	
    // (‎‎𞠵‎‎) MENDE KIKAKUI SYLLABLE M196 SIA	[3C5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E835, 0x0062 };
    uint32_t const ces[9] = { 0x3C5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_172)
{
    // 1E836 0021;	
    // (‎‎𞠶‎‎) MENDE KIKAKUI SYLLABLE M025 LI	[3C5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E836, 0x0021 };
    uint32_t const ces[9] = { 0x3C5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_173)
{
    // 1E836 003F;	
    // (‎‎𞠶‎‎) MENDE KIKAKUI SYLLABLE M025 LI	[3C5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E836, 0x003F };
    uint32_t const ces[9] = { 0x3C5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_174)
{
    // 1E836 0061;	
    // (‎‎𞠶‎‎) MENDE KIKAKUI SYLLABLE M025 LI	[3C5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E836, 0x0061 };
    uint32_t const ces[9] = { 0x3C5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_175)
{
    // 1E836 0041;	
    // (‎‎𞠶‎‎) MENDE KIKAKUI SYLLABLE M025 LI	[3C5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E836, 0x0041 };
    uint32_t const ces[9] = { 0x3C5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_176)
{
    // 1E836 0062;	
    // (‎‎𞠶‎‎) MENDE KIKAKUI SYLLABLE M025 LI	[3C5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E836, 0x0062 };
    uint32_t const ces[9] = { 0x3C5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_177)
{
    // 1E837 0021;	
    // (‎‎𞠷‎‎) MENDE KIKAKUI SYLLABLE M026 LA	[3C5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E837, 0x0021 };
    uint32_t const ces[9] = { 0x3C5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_178)
{
    // 1E837 003F;	
    // (‎‎𞠷‎‎) MENDE KIKAKUI SYLLABLE M026 LA	[3C5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E837, 0x003F };
    uint32_t const ces[9] = { 0x3C5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_179)
{
    // 1E837 0061;	
    // (‎‎𞠷‎‎) MENDE KIKAKUI SYLLABLE M026 LA	[3C5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E837, 0x0061 };
    uint32_t const ces[9] = { 0x3C5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_180)
{
    // 1E837 0041;	
    // (‎‎𞠷‎‎) MENDE KIKAKUI SYLLABLE M026 LA	[3C5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E837, 0x0041 };
    uint32_t const ces[9] = { 0x3C5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_181)
{
    // 1E837 0062;	
    // (‎‎𞠷‎‎) MENDE KIKAKUI SYLLABLE M026 LA	[3C5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E837, 0x0062 };
    uint32_t const ces[9] = { 0x3C5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_182)
{
    // 1E838 0021;	
    // (‎‎𞠸‎‎) MENDE KIKAKUI SYLLABLE M027 LU	[3C5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E838, 0x0021 };
    uint32_t const ces[9] = { 0x3C5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_183)
{
    // 1E838 003F;	
    // (‎‎𞠸‎‎) MENDE KIKAKUI SYLLABLE M027 LU	[3C5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E838, 0x003F };
    uint32_t const ces[9] = { 0x3C5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_184)
{
    // 1E838 0061;	
    // (‎‎𞠸‎‎) MENDE KIKAKUI SYLLABLE M027 LU	[3C5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E838, 0x0061 };
    uint32_t const ces[9] = { 0x3C5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_185)
{
    // 1E838 0041;	
    // (‎‎𞠸‎‎) MENDE KIKAKUI SYLLABLE M027 LU	[3C5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E838, 0x0041 };
    uint32_t const ces[9] = { 0x3C5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_186)
{
    // 1E838 0062;	
    // (‎‎𞠸‎‎) MENDE KIKAKUI SYLLABLE M027 LU	[3C5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E838, 0x0062 };
    uint32_t const ces[9] = { 0x3C5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_187)
{
    // 1E839 0021;	
    // (‎‎𞠹‎‎) MENDE KIKAKUI SYLLABLE M084 LEE	[3C5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E839, 0x0021 };
    uint32_t const ces[9] = { 0x3C5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_188)
{
    // 1E839 003F;	
    // (‎‎𞠹‎‎) MENDE KIKAKUI SYLLABLE M084 LEE	[3C5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E839, 0x003F };
    uint32_t const ces[9] = { 0x3C5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_189)
{
    // 1E839 0061;	
    // (‎‎𞠹‎‎) MENDE KIKAKUI SYLLABLE M084 LEE	[3C5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E839, 0x0061 };
    uint32_t const ces[9] = { 0x3C5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_190)
{
    // 1E839 0041;	
    // (‎‎𞠹‎‎) MENDE KIKAKUI SYLLABLE M084 LEE	[3C5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E839, 0x0041 };
    uint32_t const ces[9] = { 0x3C5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_191)
{
    // 1E839 0062;	
    // (‎‎𞠹‎‎) MENDE KIKAKUI SYLLABLE M084 LEE	[3C5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E839, 0x0062 };
    uint32_t const ces[9] = { 0x3C5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_192)
{
    // 1E83A 0021;	
    // (‎‎𞠺‎‎) MENDE KIKAKUI SYLLABLE M073 LE	[3C5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83A, 0x0021 };
    uint32_t const ces[9] = { 0x3C5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_193)
{
    // 1E83A 003F;	
    // (‎‎𞠺‎‎) MENDE KIKAKUI SYLLABLE M073 LE	[3C5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83A, 0x003F };
    uint32_t const ces[9] = { 0x3C5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_194)
{
    // 1E83A 0061;	
    // (‎‎𞠺‎‎) MENDE KIKAKUI SYLLABLE M073 LE	[3C5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83A, 0x0061 };
    uint32_t const ces[9] = { 0x3C5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_195)
{
    // 1E83A 0041;	
    // (‎‎𞠺‎‎) MENDE KIKAKUI SYLLABLE M073 LE	[3C5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E83A, 0x0041 };
    uint32_t const ces[9] = { 0x3C5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_196)
{
    // 1E83A 0062;	
    // (‎‎𞠺‎‎) MENDE KIKAKUI SYLLABLE M073 LE	[3C5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83A, 0x0062 };
    uint32_t const ces[9] = { 0x3C5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_197)
{
    // 1E83B 0021;	
    // (‎‎𞠻‎‎) MENDE KIKAKUI SYLLABLE M054 LOO	[3C60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83B, 0x0021 };
    uint32_t const ces[9] = { 0x3C60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_198)
{
    // 1E83B 003F;	
    // (‎‎𞠻‎‎) MENDE KIKAKUI SYLLABLE M054 LOO	[3C60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83B, 0x003F };
    uint32_t const ces[9] = { 0x3C60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_199)
{
    // 1E83B 0061;	
    // (‎‎𞠻‎‎) MENDE KIKAKUI SYLLABLE M054 LOO	[3C60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83B, 0x0061 };
    uint32_t const ces[9] = { 0x3C60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_200)
{
    // 1E83B 0041;	
    // (‎‎𞠻‎‎) MENDE KIKAKUI SYLLABLE M054 LOO	[3C60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E83B, 0x0041 };
    uint32_t const ces[9] = { 0x3C60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_201)
{
    // 1E83B 0062;	
    // (‎‎𞠻‎‎) MENDE KIKAKUI SYLLABLE M054 LOO	[3C60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83B, 0x0062 };
    uint32_t const ces[9] = { 0x3C60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_202)
{
    // 1E83C 0021;	
    // (‎‎𞠼‎‎) MENDE KIKAKUI SYLLABLE M153 LO	[3C61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83C, 0x0021 };
    uint32_t const ces[9] = { 0x3C61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_203)
{
    // 1E83C 003F;	
    // (‎‎𞠼‎‎) MENDE KIKAKUI SYLLABLE M153 LO	[3C61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83C, 0x003F };
    uint32_t const ces[9] = { 0x3C61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_204)
{
    // 1E83C 0061;	
    // (‎‎𞠼‎‎) MENDE KIKAKUI SYLLABLE M153 LO	[3C61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83C, 0x0061 };
    uint32_t const ces[9] = { 0x3C61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_205)
{
    // 1E83C 0041;	
    // (‎‎𞠼‎‎) MENDE KIKAKUI SYLLABLE M153 LO	[3C61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E83C, 0x0041 };
    uint32_t const ces[9] = { 0x3C61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_206)
{
    // 1E83C 0062;	
    // (‎‎𞠼‎‎) MENDE KIKAKUI SYLLABLE M153 LO	[3C61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83C, 0x0062 };
    uint32_t const ces[9] = { 0x3C61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_207)
{
    // 1E83D 0021;	
    // (‎‎𞠽‎‎) MENDE KIKAKUI SYLLABLE M110 LONG LE	[3C62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83D, 0x0021 };
    uint32_t const ces[9] = { 0x3C62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_208)
{
    // 1E83D 003F;	
    // (‎‎𞠽‎‎) MENDE KIKAKUI SYLLABLE M110 LONG LE	[3C62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83D, 0x003F };
    uint32_t const ces[9] = { 0x3C62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_209)
{
    // 1E83D 0061;	
    // (‎‎𞠽‎‎) MENDE KIKAKUI SYLLABLE M110 LONG LE	[3C62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83D, 0x0061 };
    uint32_t const ces[9] = { 0x3C62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_210)
{
    // 1E83D 0041;	
    // (‎‎𞠽‎‎) MENDE KIKAKUI SYLLABLE M110 LONG LE	[3C62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E83D, 0x0041 };
    uint32_t const ces[9] = { 0x3C62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_211)
{
    // 1E83D 0062;	
    // (‎‎𞠽‎‎) MENDE KIKAKUI SYLLABLE M110 LONG LE	[3C62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83D, 0x0062 };
    uint32_t const ces[9] = { 0x3C62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_212)
{
    // 1E83E 0021;	
    // (‎‎𞠾‎‎) MENDE KIKAKUI SYLLABLE M016 DI	[3C63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83E, 0x0021 };
    uint32_t const ces[9] = { 0x3C63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_213)
{
    // 1E83E 003F;	
    // (‎‎𞠾‎‎) MENDE KIKAKUI SYLLABLE M016 DI	[3C63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83E, 0x003F };
    uint32_t const ces[9] = { 0x3C63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_214)
{
    // 1E83E 0061;	
    // (‎‎𞠾‎‎) MENDE KIKAKUI SYLLABLE M016 DI	[3C63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83E, 0x0061 };
    uint32_t const ces[9] = { 0x3C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_215)
{
    // 1E83E 0041;	
    // (‎‎𞠾‎‎) MENDE KIKAKUI SYLLABLE M016 DI	[3C63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E83E, 0x0041 };
    uint32_t const ces[9] = { 0x3C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_216)
{
    // 1E83E 0062;	
    // (‎‎𞠾‎‎) MENDE KIKAKUI SYLLABLE M016 DI	[3C63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83E, 0x0062 };
    uint32_t const ces[9] = { 0x3C63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_217)
{
    // 1E83F 0021;	
    // (‎‎𞠿‎‎) MENDE KIKAKUI SYLLABLE M017 DA	[3C64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83F, 0x0021 };
    uint32_t const ces[9] = { 0x3C64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_218)
{
    // 1E83F 003F;	
    // (‎‎𞠿‎‎) MENDE KIKAKUI SYLLABLE M017 DA	[3C64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83F, 0x003F };
    uint32_t const ces[9] = { 0x3C64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_219)
{
    // 1E83F 0061;	
    // (‎‎𞠿‎‎) MENDE KIKAKUI SYLLABLE M017 DA	[3C64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83F, 0x0061 };
    uint32_t const ces[9] = { 0x3C64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_220)
{
    // 1E83F 0041;	
    // (‎‎𞠿‎‎) MENDE KIKAKUI SYLLABLE M017 DA	[3C64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E83F, 0x0041 };
    uint32_t const ces[9] = { 0x3C64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_221)
{
    // 1E83F 0062;	
    // (‎‎𞠿‎‎) MENDE KIKAKUI SYLLABLE M017 DA	[3C64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E83F, 0x0062 };
    uint32_t const ces[9] = { 0x3C64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_222)
{
    // 1E840 0021;	
    // (‎‎𞡀‎‎) MENDE KIKAKUI SYLLABLE M018 DU	[3C65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E840, 0x0021 };
    uint32_t const ces[9] = { 0x3C65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_223)
{
    // 1E840 003F;	
    // (‎‎𞡀‎‎) MENDE KIKAKUI SYLLABLE M018 DU	[3C65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E840, 0x003F };
    uint32_t const ces[9] = { 0x3C65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_224)
{
    // 1E840 0061;	
    // (‎‎𞡀‎‎) MENDE KIKAKUI SYLLABLE M018 DU	[3C65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E840, 0x0061 };
    uint32_t const ces[9] = { 0x3C65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_225)
{
    // 1E840 0041;	
    // (‎‎𞡀‎‎) MENDE KIKAKUI SYLLABLE M018 DU	[3C65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E840, 0x0041 };
    uint32_t const ces[9] = { 0x3C65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_226)
{
    // 1E840 0062;	
    // (‎‎𞡀‎‎) MENDE KIKAKUI SYLLABLE M018 DU	[3C65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E840, 0x0062 };
    uint32_t const ces[9] = { 0x3C65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_227)
{
    // 1E841 0021;	
    // (‎‎𞡁‎‎) MENDE KIKAKUI SYLLABLE M089 DEE	[3C66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E841, 0x0021 };
    uint32_t const ces[9] = { 0x3C66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_228)
{
    // 1E841 003F;	
    // (‎‎𞡁‎‎) MENDE KIKAKUI SYLLABLE M089 DEE	[3C66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E841, 0x003F };
    uint32_t const ces[9] = { 0x3C66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_229)
{
    // 1E841 0061;	
    // (‎‎𞡁‎‎) MENDE KIKAKUI SYLLABLE M089 DEE	[3C66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E841, 0x0061 };
    uint32_t const ces[9] = { 0x3C66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_230)
{
    // 1E841 0041;	
    // (‎‎𞡁‎‎) MENDE KIKAKUI SYLLABLE M089 DEE	[3C66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E841, 0x0041 };
    uint32_t const ces[9] = { 0x3C66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_231)
{
    // 1E841 0062;	
    // (‎‎𞡁‎‎) MENDE KIKAKUI SYLLABLE M089 DEE	[3C66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E841, 0x0062 };
    uint32_t const ces[9] = { 0x3C66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_232)
{
    // 1E842 0021;	
    // (‎‎𞡂‎‎) MENDE KIKAKUI SYLLABLE M180 DOO	[3C67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E842, 0x0021 };
    uint32_t const ces[9] = { 0x3C67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_233)
{
    // 1E842 003F;	
    // (‎‎𞡂‎‎) MENDE KIKAKUI SYLLABLE M180 DOO	[3C67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E842, 0x003F };
    uint32_t const ces[9] = { 0x3C67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_234)
{
    // 1E842 0061;	
    // (‎‎𞡂‎‎) MENDE KIKAKUI SYLLABLE M180 DOO	[3C67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E842, 0x0061 };
    uint32_t const ces[9] = { 0x3C67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_235)
{
    // 1E842 0041;	
    // (‎‎𞡂‎‎) MENDE KIKAKUI SYLLABLE M180 DOO	[3C67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E842, 0x0041 };
    uint32_t const ces[9] = { 0x3C67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_236)
{
    // 1E842 0062;	
    // (‎‎𞡂‎‎) MENDE KIKAKUI SYLLABLE M180 DOO	[3C67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E842, 0x0062 };
    uint32_t const ces[9] = { 0x3C67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_237)
{
    // 1E843 0021;	
    // (‎‎𞡃‎‎) MENDE KIKAKUI SYLLABLE M181 DO	[3C68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E843, 0x0021 };
    uint32_t const ces[9] = { 0x3C68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_238)
{
    // 1E843 003F;	
    // (‎‎𞡃‎‎) MENDE KIKAKUI SYLLABLE M181 DO	[3C68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E843, 0x003F };
    uint32_t const ces[9] = { 0x3C68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_239)
{
    // 1E843 0061;	
    // (‎‎𞡃‎‎) MENDE KIKAKUI SYLLABLE M181 DO	[3C68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E843, 0x0061 };
    uint32_t const ces[9] = { 0x3C68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_240)
{
    // 1E843 0041;	
    // (‎‎𞡃‎‎) MENDE KIKAKUI SYLLABLE M181 DO	[3C68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E843, 0x0041 };
    uint32_t const ces[9] = { 0x3C68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_241)
{
    // 1E843 0062;	
    // (‎‎𞡃‎‎) MENDE KIKAKUI SYLLABLE M181 DO	[3C68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E843, 0x0062 };
    uint32_t const ces[9] = { 0x3C68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_242)
{
    // 1E844 0021;	
    // (‎‎𞡄‎‎) MENDE KIKAKUI SYLLABLE M022 TI	[3C69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E844, 0x0021 };
    uint32_t const ces[9] = { 0x3C69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_243)
{
    // 1E844 003F;	
    // (‎‎𞡄‎‎) MENDE KIKAKUI SYLLABLE M022 TI	[3C69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E844, 0x003F };
    uint32_t const ces[9] = { 0x3C69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_244)
{
    // 1E844 0061;	
    // (‎‎𞡄‎‎) MENDE KIKAKUI SYLLABLE M022 TI	[3C69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E844, 0x0061 };
    uint32_t const ces[9] = { 0x3C69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_245)
{
    // 1E844 0041;	
    // (‎‎𞡄‎‎) MENDE KIKAKUI SYLLABLE M022 TI	[3C69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E844, 0x0041 };
    uint32_t const ces[9] = { 0x3C69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_246)
{
    // 1E844 0062;	
    // (‎‎𞡄‎‎) MENDE KIKAKUI SYLLABLE M022 TI	[3C69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E844, 0x0062 };
    uint32_t const ces[9] = { 0x3C69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_247)
{
    // 1E845 0021;	
    // (‎‎𞡅‎‎) MENDE KIKAKUI SYLLABLE M023 TA	[3C6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E845, 0x0021 };
    uint32_t const ces[9] = { 0x3C6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_248)
{
    // 1E845 003F;	
    // (‎‎𞡅‎‎) MENDE KIKAKUI SYLLABLE M023 TA	[3C6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E845, 0x003F };
    uint32_t const ces[9] = { 0x3C6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_249)
{
    // 1E845 0061;	
    // (‎‎𞡅‎‎) MENDE KIKAKUI SYLLABLE M023 TA	[3C6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E845, 0x0061 };
    uint32_t const ces[9] = { 0x3C6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_250)
{
    // 1E845 0041;	
    // (‎‎𞡅‎‎) MENDE KIKAKUI SYLLABLE M023 TA	[3C6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E845, 0x0041 };
    uint32_t const ces[9] = { 0x3C6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_251)
{
    // 1E845 0062;	
    // (‎‎𞡅‎‎) MENDE KIKAKUI SYLLABLE M023 TA	[3C6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E845, 0x0062 };
    uint32_t const ces[9] = { 0x3C6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_252)
{
    // 1E846 0021;	
    // (‎‎𞡆‎‎) MENDE KIKAKUI SYLLABLE M024 TU	[3C6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E846, 0x0021 };
    uint32_t const ces[9] = { 0x3C6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_253)
{
    // 1E846 003F;	
    // (‎‎𞡆‎‎) MENDE KIKAKUI SYLLABLE M024 TU	[3C6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E846, 0x003F };
    uint32_t const ces[9] = { 0x3C6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_254)
{
    // 1E846 0061;	
    // (‎‎𞡆‎‎) MENDE KIKAKUI SYLLABLE M024 TU	[3C6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E846, 0x0061 };
    uint32_t const ces[9] = { 0x3C6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_255)
{
    // 1E846 0041;	
    // (‎‎𞡆‎‎) MENDE KIKAKUI SYLLABLE M024 TU	[3C6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E846, 0x0041 };
    uint32_t const ces[9] = { 0x3C6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_256)
{
    // 1E846 0062;	
    // (‎‎𞡆‎‎) MENDE KIKAKUI SYLLABLE M024 TU	[3C6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E846, 0x0062 };
    uint32_t const ces[9] = { 0x3C6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_257)
{
    // 1E847 0021;	
    // (‎‎𞡇‎‎) MENDE KIKAKUI SYLLABLE M091 TEE	[3C6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E847, 0x0021 };
    uint32_t const ces[9] = { 0x3C6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_258)
{
    // 1E847 003F;	
    // (‎‎𞡇‎‎) MENDE KIKAKUI SYLLABLE M091 TEE	[3C6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E847, 0x003F };
    uint32_t const ces[9] = { 0x3C6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_259)
{
    // 1E847 0061;	
    // (‎‎𞡇‎‎) MENDE KIKAKUI SYLLABLE M091 TEE	[3C6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E847, 0x0061 };
    uint32_t const ces[9] = { 0x3C6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_260)
{
    // 1E847 0041;	
    // (‎‎𞡇‎‎) MENDE KIKAKUI SYLLABLE M091 TEE	[3C6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E847, 0x0041 };
    uint32_t const ces[9] = { 0x3C6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_261)
{
    // 1E847 0062;	
    // (‎‎𞡇‎‎) MENDE KIKAKUI SYLLABLE M091 TEE	[3C6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E847, 0x0062 };
    uint32_t const ces[9] = { 0x3C6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_262)
{
    // 1E848 0021;	
    // (‎‎𞡈‎‎) MENDE KIKAKUI SYLLABLE M055 TE	[3C6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E848, 0x0021 };
    uint32_t const ces[9] = { 0x3C6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_263)
{
    // 1E848 003F;	
    // (‎‎𞡈‎‎) MENDE KIKAKUI SYLLABLE M055 TE	[3C6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E848, 0x003F };
    uint32_t const ces[9] = { 0x3C6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_264)
{
    // 1E848 0061;	
    // (‎‎𞡈‎‎) MENDE KIKAKUI SYLLABLE M055 TE	[3C6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E848, 0x0061 };
    uint32_t const ces[9] = { 0x3C6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_265)
{
    // 1E848 0041;	
    // (‎‎𞡈‎‎) MENDE KIKAKUI SYLLABLE M055 TE	[3C6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E848, 0x0041 };
    uint32_t const ces[9] = { 0x3C6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_266)
{
    // 1E848 0062;	
    // (‎‎𞡈‎‎) MENDE KIKAKUI SYLLABLE M055 TE	[3C6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E848, 0x0062 };
    uint32_t const ces[9] = { 0x3C6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_267)
{
    // 1E849 0021;	
    // (‎‎𞡉‎‎) MENDE KIKAKUI SYLLABLE M104 TOO	[3C6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E849, 0x0021 };
    uint32_t const ces[9] = { 0x3C6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_268)
{
    // 1E849 003F;	
    // (‎‎𞡉‎‎) MENDE KIKAKUI SYLLABLE M104 TOO	[3C6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E849, 0x003F };
    uint32_t const ces[9] = { 0x3C6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_269)
{
    // 1E849 0061;	
    // (‎‎𞡉‎‎) MENDE KIKAKUI SYLLABLE M104 TOO	[3C6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E849, 0x0061 };
    uint32_t const ces[9] = { 0x3C6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_270)
{
    // 1E849 0041;	
    // (‎‎𞡉‎‎) MENDE KIKAKUI SYLLABLE M104 TOO	[3C6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E849, 0x0041 };
    uint32_t const ces[9] = { 0x3C6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_271)
{
    // 1E849 0062;	
    // (‎‎𞡉‎‎) MENDE KIKAKUI SYLLABLE M104 TOO	[3C6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E849, 0x0062 };
    uint32_t const ces[9] = { 0x3C6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_272)
{
    // 1E84A 0021;	
    // (‎‎𞡊‎‎) MENDE KIKAKUI SYLLABLE M069 TO	[3C6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84A, 0x0021 };
    uint32_t const ces[9] = { 0x3C6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_273)
{
    // 1E84A 003F;	
    // (‎‎𞡊‎‎) MENDE KIKAKUI SYLLABLE M069 TO	[3C6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84A, 0x003F };
    uint32_t const ces[9] = { 0x3C6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_274)
{
    // 1E84A 0061;	
    // (‎‎𞡊‎‎) MENDE KIKAKUI SYLLABLE M069 TO	[3C6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84A, 0x0061 };
    uint32_t const ces[9] = { 0x3C6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_275)
{
    // 1E84A 0041;	
    // (‎‎𞡊‎‎) MENDE KIKAKUI SYLLABLE M069 TO	[3C6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E84A, 0x0041 };
    uint32_t const ces[9] = { 0x3C6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_276)
{
    // 1E84A 0062;	
    // (‎‎𞡊‎‎) MENDE KIKAKUI SYLLABLE M069 TO	[3C6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84A, 0x0062 };
    uint32_t const ces[9] = { 0x3C6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_277)
{
    // 1E84B 0021;	
    // (‎‎𞡋‎‎) MENDE KIKAKUI SYLLABLE M028 JI	[3C70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84B, 0x0021 };
    uint32_t const ces[9] = { 0x3C70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_278)
{
    // 1E84B 003F;	
    // (‎‎𞡋‎‎) MENDE KIKAKUI SYLLABLE M028 JI	[3C70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84B, 0x003F };
    uint32_t const ces[9] = { 0x3C70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_279)
{
    // 1E84B 0061;	
    // (‎‎𞡋‎‎) MENDE KIKAKUI SYLLABLE M028 JI	[3C70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84B, 0x0061 };
    uint32_t const ces[9] = { 0x3C70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_280)
{
    // 1E84B 0041;	
    // (‎‎𞡋‎‎) MENDE KIKAKUI SYLLABLE M028 JI	[3C70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E84B, 0x0041 };
    uint32_t const ces[9] = { 0x3C70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_281)
{
    // 1E84B 0062;	
    // (‎‎𞡋‎‎) MENDE KIKAKUI SYLLABLE M028 JI	[3C70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84B, 0x0062 };
    uint32_t const ces[9] = { 0x3C70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_282)
{
    // 1E84C 0021;	
    // (‎‎𞡌‎‎) MENDE KIKAKUI SYLLABLE M029 JA	[3C71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84C, 0x0021 };
    uint32_t const ces[9] = { 0x3C71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_283)
{
    // 1E84C 003F;	
    // (‎‎𞡌‎‎) MENDE KIKAKUI SYLLABLE M029 JA	[3C71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84C, 0x003F };
    uint32_t const ces[9] = { 0x3C71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_284)
{
    // 1E84C 0061;	
    // (‎‎𞡌‎‎) MENDE KIKAKUI SYLLABLE M029 JA	[3C71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84C, 0x0061 };
    uint32_t const ces[9] = { 0x3C71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_285)
{
    // 1E84C 0041;	
    // (‎‎𞡌‎‎) MENDE KIKAKUI SYLLABLE M029 JA	[3C71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E84C, 0x0041 };
    uint32_t const ces[9] = { 0x3C71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_286)
{
    // 1E84C 0062;	
    // (‎‎𞡌‎‎) MENDE KIKAKUI SYLLABLE M029 JA	[3C71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84C, 0x0062 };
    uint32_t const ces[9] = { 0x3C71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_287)
{
    // 1E84D 0021;	
    // (‎‎𞡍‎‎) MENDE KIKAKUI SYLLABLE M030 JU	[3C72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84D, 0x0021 };
    uint32_t const ces[9] = { 0x3C72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_288)
{
    // 1E84D 003F;	
    // (‎‎𞡍‎‎) MENDE KIKAKUI SYLLABLE M030 JU	[3C72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84D, 0x003F };
    uint32_t const ces[9] = { 0x3C72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_289)
{
    // 1E84D 0061;	
    // (‎‎𞡍‎‎) MENDE KIKAKUI SYLLABLE M030 JU	[3C72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84D, 0x0061 };
    uint32_t const ces[9] = { 0x3C72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_290)
{
    // 1E84D 0041;	
    // (‎‎𞡍‎‎) MENDE KIKAKUI SYLLABLE M030 JU	[3C72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E84D, 0x0041 };
    uint32_t const ces[9] = { 0x3C72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_291)
{
    // 1E84D 0062;	
    // (‎‎𞡍‎‎) MENDE KIKAKUI SYLLABLE M030 JU	[3C72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84D, 0x0062 };
    uint32_t const ces[9] = { 0x3C72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_292)
{
    // 1E84E 0021;	
    // (‎‎𞡎‎‎) MENDE KIKAKUI SYLLABLE M157 JEE	[3C73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84E, 0x0021 };
    uint32_t const ces[9] = { 0x3C73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_293)
{
    // 1E84E 003F;	
    // (‎‎𞡎‎‎) MENDE KIKAKUI SYLLABLE M157 JEE	[3C73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84E, 0x003F };
    uint32_t const ces[9] = { 0x3C73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_294)
{
    // 1E84E 0061;	
    // (‎‎𞡎‎‎) MENDE KIKAKUI SYLLABLE M157 JEE	[3C73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84E, 0x0061 };
    uint32_t const ces[9] = { 0x3C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_295)
{
    // 1E84E 0041;	
    // (‎‎𞡎‎‎) MENDE KIKAKUI SYLLABLE M157 JEE	[3C73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E84E, 0x0041 };
    uint32_t const ces[9] = { 0x3C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_296)
{
    // 1E84E 0062;	
    // (‎‎𞡎‎‎) MENDE KIKAKUI SYLLABLE M157 JEE	[3C73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84E, 0x0062 };
    uint32_t const ces[9] = { 0x3C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_297)
{
    // 1E84F 0021;	
    // (‎‎𞡏‎‎) MENDE KIKAKUI SYLLABLE M113 JE	[3C74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84F, 0x0021 };
    uint32_t const ces[9] = { 0x3C74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_298)
{
    // 1E84F 003F;	
    // (‎‎𞡏‎‎) MENDE KIKAKUI SYLLABLE M113 JE	[3C74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84F, 0x003F };
    uint32_t const ces[9] = { 0x3C74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_299)
{
    // 1E84F 0061;	
    // (‎‎𞡏‎‎) MENDE KIKAKUI SYLLABLE M113 JE	[3C74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84F, 0x0061 };
    uint32_t const ces[9] = { 0x3C74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_300)
{
    // 1E84F 0041;	
    // (‎‎𞡏‎‎) MENDE KIKAKUI SYLLABLE M113 JE	[3C74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E84F, 0x0041 };
    uint32_t const ces[9] = { 0x3C74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_301)
{
    // 1E84F 0062;	
    // (‎‎𞡏‎‎) MENDE KIKAKUI SYLLABLE M113 JE	[3C74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E84F, 0x0062 };
    uint32_t const ces[9] = { 0x3C74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_302)
{
    // 1E850 0021;	
    // (‎‎𞡐‎‎) MENDE KIKAKUI SYLLABLE M160 JOO	[3C75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E850, 0x0021 };
    uint32_t const ces[9] = { 0x3C75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_303)
{
    // 1E850 003F;	
    // (‎‎𞡐‎‎) MENDE KIKAKUI SYLLABLE M160 JOO	[3C75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E850, 0x003F };
    uint32_t const ces[9] = { 0x3C75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_304)
{
    // 1E850 0061;	
    // (‎‎𞡐‎‎) MENDE KIKAKUI SYLLABLE M160 JOO	[3C75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E850, 0x0061 };
    uint32_t const ces[9] = { 0x3C75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_305)
{
    // 1E850 0041;	
    // (‎‎𞡐‎‎) MENDE KIKAKUI SYLLABLE M160 JOO	[3C75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E850, 0x0041 };
    uint32_t const ces[9] = { 0x3C75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_306)
{
    // 1E850 0062;	
    // (‎‎𞡐‎‎) MENDE KIKAKUI SYLLABLE M160 JOO	[3C75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E850, 0x0062 };
    uint32_t const ces[9] = { 0x3C75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_307)
{
    // 1E851 0021;	
    // (‎‎𞡑‎‎) MENDE KIKAKUI SYLLABLE M063 JO	[3C76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E851, 0x0021 };
    uint32_t const ces[9] = { 0x3C76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_308)
{
    // 1E851 003F;	
    // (‎‎𞡑‎‎) MENDE KIKAKUI SYLLABLE M063 JO	[3C76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E851, 0x003F };
    uint32_t const ces[9] = { 0x3C76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_309)
{
    // 1E851 0061;	
    // (‎‎𞡑‎‎) MENDE KIKAKUI SYLLABLE M063 JO	[3C76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E851, 0x0061 };
    uint32_t const ces[9] = { 0x3C76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_310)
{
    // 1E851 0041;	
    // (‎‎𞡑‎‎) MENDE KIKAKUI SYLLABLE M063 JO	[3C76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E851, 0x0041 };
    uint32_t const ces[9] = { 0x3C76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_311)
{
    // 1E851 0062;	
    // (‎‎𞡑‎‎) MENDE KIKAKUI SYLLABLE M063 JO	[3C76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E851, 0x0062 };
    uint32_t const ces[9] = { 0x3C76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_312)
{
    // 1E852 0021;	
    // (‎‎𞡒‎‎) MENDE KIKAKUI SYLLABLE M175 LONG JO	[3C77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E852, 0x0021 };
    uint32_t const ces[9] = { 0x3C77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_313)
{
    // 1E852 003F;	
    // (‎‎𞡒‎‎) MENDE KIKAKUI SYLLABLE M175 LONG JO	[3C77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E852, 0x003F };
    uint32_t const ces[9] = { 0x3C77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_314)
{
    // 1E852 0061;	
    // (‎‎𞡒‎‎) MENDE KIKAKUI SYLLABLE M175 LONG JO	[3C77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E852, 0x0061 };
    uint32_t const ces[9] = { 0x3C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_315)
{
    // 1E852 0041;	
    // (‎‎𞡒‎‎) MENDE KIKAKUI SYLLABLE M175 LONG JO	[3C77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E852, 0x0041 };
    uint32_t const ces[9] = { 0x3C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_316)
{
    // 1E852 0062;	
    // (‎‎𞡒‎‎) MENDE KIKAKUI SYLLABLE M175 LONG JO	[3C77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E852, 0x0062 };
    uint32_t const ces[9] = { 0x3C77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_317)
{
    // 1E853 0021;	
    // (‎‎𞡓‎‎) MENDE KIKAKUI SYLLABLE M031 YI	[3C78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E853, 0x0021 };
    uint32_t const ces[9] = { 0x3C78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_318)
{
    // 1E853 003F;	
    // (‎‎𞡓‎‎) MENDE KIKAKUI SYLLABLE M031 YI	[3C78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E853, 0x003F };
    uint32_t const ces[9] = { 0x3C78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_319)
{
    // 1E853 0061;	
    // (‎‎𞡓‎‎) MENDE KIKAKUI SYLLABLE M031 YI	[3C78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E853, 0x0061 };
    uint32_t const ces[9] = { 0x3C78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_320)
{
    // 1E853 0041;	
    // (‎‎𞡓‎‎) MENDE KIKAKUI SYLLABLE M031 YI	[3C78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E853, 0x0041 };
    uint32_t const ces[9] = { 0x3C78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_321)
{
    // 1E853 0062;	
    // (‎‎𞡓‎‎) MENDE KIKAKUI SYLLABLE M031 YI	[3C78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E853, 0x0062 };
    uint32_t const ces[9] = { 0x3C78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_322)
{
    // 1E854 0021;	
    // (‎‎𞡔‎‎) MENDE KIKAKUI SYLLABLE M032 YA	[3C79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E854, 0x0021 };
    uint32_t const ces[9] = { 0x3C79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_323)
{
    // 1E854 003F;	
    // (‎‎𞡔‎‎) MENDE KIKAKUI SYLLABLE M032 YA	[3C79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E854, 0x003F };
    uint32_t const ces[9] = { 0x3C79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_324)
{
    // 1E854 0061;	
    // (‎‎𞡔‎‎) MENDE KIKAKUI SYLLABLE M032 YA	[3C79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E854, 0x0061 };
    uint32_t const ces[9] = { 0x3C79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_325)
{
    // 1E854 0041;	
    // (‎‎𞡔‎‎) MENDE KIKAKUI SYLLABLE M032 YA	[3C79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E854, 0x0041 };
    uint32_t const ces[9] = { 0x3C79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_326)
{
    // 1E854 0062;	
    // (‎‎𞡔‎‎) MENDE KIKAKUI SYLLABLE M032 YA	[3C79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E854, 0x0062 };
    uint32_t const ces[9] = { 0x3C79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_327)
{
    // 1E855 0021;	
    // (‎‎𞡕‎‎) MENDE KIKAKUI SYLLABLE M033 YU	[3C7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E855, 0x0021 };
    uint32_t const ces[9] = { 0x3C7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_328)
{
    // 1E855 003F;	
    // (‎‎𞡕‎‎) MENDE KIKAKUI SYLLABLE M033 YU	[3C7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E855, 0x003F };
    uint32_t const ces[9] = { 0x3C7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_329)
{
    // 1E855 0061;	
    // (‎‎𞡕‎‎) MENDE KIKAKUI SYLLABLE M033 YU	[3C7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E855, 0x0061 };
    uint32_t const ces[9] = { 0x3C7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_330)
{
    // 1E855 0041;	
    // (‎‎𞡕‎‎) MENDE KIKAKUI SYLLABLE M033 YU	[3C7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E855, 0x0041 };
    uint32_t const ces[9] = { 0x3C7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_331)
{
    // 1E855 0062;	
    // (‎‎𞡕‎‎) MENDE KIKAKUI SYLLABLE M033 YU	[3C7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E855, 0x0062 };
    uint32_t const ces[9] = { 0x3C7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_332)
{
    // 1E856 0021;	
    // (‎‎𞡖‎‎) MENDE KIKAKUI SYLLABLE M109 YEE	[3C7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E856, 0x0021 };
    uint32_t const ces[9] = { 0x3C7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_333)
{
    // 1E856 003F;	
    // (‎‎𞡖‎‎) MENDE KIKAKUI SYLLABLE M109 YEE	[3C7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E856, 0x003F };
    uint32_t const ces[9] = { 0x3C7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_334)
{
    // 1E856 0061;	
    // (‎‎𞡖‎‎) MENDE KIKAKUI SYLLABLE M109 YEE	[3C7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E856, 0x0061 };
    uint32_t const ces[9] = { 0x3C7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_335)
{
    // 1E856 0041;	
    // (‎‎𞡖‎‎) MENDE KIKAKUI SYLLABLE M109 YEE	[3C7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E856, 0x0041 };
    uint32_t const ces[9] = { 0x3C7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_336)
{
    // 1E856 0062;	
    // (‎‎𞡖‎‎) MENDE KIKAKUI SYLLABLE M109 YEE	[3C7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E856, 0x0062 };
    uint32_t const ces[9] = { 0x3C7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_337)
{
    // 1E857 0021;	
    // (‎‎𞡗‎‎) MENDE KIKAKUI SYLLABLE M080 YE	[3C7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E857, 0x0021 };
    uint32_t const ces[9] = { 0x3C7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_338)
{
    // 1E857 003F;	
    // (‎‎𞡗‎‎) MENDE KIKAKUI SYLLABLE M080 YE	[3C7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E857, 0x003F };
    uint32_t const ces[9] = { 0x3C7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_339)
{
    // 1E857 0061;	
    // (‎‎𞡗‎‎) MENDE KIKAKUI SYLLABLE M080 YE	[3C7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E857, 0x0061 };
    uint32_t const ces[9] = { 0x3C7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_340)
{
    // 1E857 0041;	
    // (‎‎𞡗‎‎) MENDE KIKAKUI SYLLABLE M080 YE	[3C7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E857, 0x0041 };
    uint32_t const ces[9] = { 0x3C7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_341)
{
    // 1E857 0062;	
    // (‎‎𞡗‎‎) MENDE KIKAKUI SYLLABLE M080 YE	[3C7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E857, 0x0062 };
    uint32_t const ces[9] = { 0x3C7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_342)
{
    // 1E858 0021;	
    // (‎‎𞡘‎‎) MENDE KIKAKUI SYLLABLE M141 YOO	[3C7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E858, 0x0021 };
    uint32_t const ces[9] = { 0x3C7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_343)
{
    // 1E858 003F;	
    // (‎‎𞡘‎‎) MENDE KIKAKUI SYLLABLE M141 YOO	[3C7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E858, 0x003F };
    uint32_t const ces[9] = { 0x3C7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_344)
{
    // 1E858 0061;	
    // (‎‎𞡘‎‎) MENDE KIKAKUI SYLLABLE M141 YOO	[3C7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E858, 0x0061 };
    uint32_t const ces[9] = { 0x3C7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_345)
{
    // 1E858 0041;	
    // (‎‎𞡘‎‎) MENDE KIKAKUI SYLLABLE M141 YOO	[3C7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E858, 0x0041 };
    uint32_t const ces[9] = { 0x3C7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_346)
{
    // 1E858 0062;	
    // (‎‎𞡘‎‎) MENDE KIKAKUI SYLLABLE M141 YOO	[3C7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E858, 0x0062 };
    uint32_t const ces[9] = { 0x3C7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_347)
{
    // 1E859 0021;	
    // (‎‎𞡙‎‎) MENDE KIKAKUI SYLLABLE M121 YO	[3C7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E859, 0x0021 };
    uint32_t const ces[9] = { 0x3C7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_348)
{
    // 1E859 003F;	
    // (‎‎𞡙‎‎) MENDE KIKAKUI SYLLABLE M121 YO	[3C7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E859, 0x003F };
    uint32_t const ces[9] = { 0x3C7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_349)
{
    // 1E859 0061;	
    // (‎‎𞡙‎‎) MENDE KIKAKUI SYLLABLE M121 YO	[3C7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E859, 0x0061 };
    uint32_t const ces[9] = { 0x3C7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_350)
{
    // 1E859 0041;	
    // (‎‎𞡙‎‎) MENDE KIKAKUI SYLLABLE M121 YO	[3C7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E859, 0x0041 };
    uint32_t const ces[9] = { 0x3C7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_351)
{
    // 1E859 0062;	
    // (‎‎𞡙‎‎) MENDE KIKAKUI SYLLABLE M121 YO	[3C7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E859, 0x0062 };
    uint32_t const ces[9] = { 0x3C7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_352)
{
    // 1E85A 0021;	
    // (‎‎𞡚‎‎) MENDE KIKAKUI SYLLABLE M034 FI	[3C7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85A, 0x0021 };
    uint32_t const ces[9] = { 0x3C7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_353)
{
    // 1E85A 003F;	
    // (‎‎𞡚‎‎) MENDE KIKAKUI SYLLABLE M034 FI	[3C7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85A, 0x003F };
    uint32_t const ces[9] = { 0x3C7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_354)
{
    // 1E85A 0061;	
    // (‎‎𞡚‎‎) MENDE KIKAKUI SYLLABLE M034 FI	[3C7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85A, 0x0061 };
    uint32_t const ces[9] = { 0x3C7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_355)
{
    // 1E85A 0041;	
    // (‎‎𞡚‎‎) MENDE KIKAKUI SYLLABLE M034 FI	[3C7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E85A, 0x0041 };
    uint32_t const ces[9] = { 0x3C7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_356)
{
    // 1E85A 0062;	
    // (‎‎𞡚‎‎) MENDE KIKAKUI SYLLABLE M034 FI	[3C7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85A, 0x0062 };
    uint32_t const ces[9] = { 0x3C7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_357)
{
    // 1E85B 0021;	
    // (‎‎𞡛‎‎) MENDE KIKAKUI SYLLABLE M035 FA	[3C80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85B, 0x0021 };
    uint32_t const ces[9] = { 0x3C80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_358)
{
    // 1E85B 003F;	
    // (‎‎𞡛‎‎) MENDE KIKAKUI SYLLABLE M035 FA	[3C80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85B, 0x003F };
    uint32_t const ces[9] = { 0x3C80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_359)
{
    // 1E85B 0061;	
    // (‎‎𞡛‎‎) MENDE KIKAKUI SYLLABLE M035 FA	[3C80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85B, 0x0061 };
    uint32_t const ces[9] = { 0x3C80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_360)
{
    // 1E85B 0041;	
    // (‎‎𞡛‎‎) MENDE KIKAKUI SYLLABLE M035 FA	[3C80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E85B, 0x0041 };
    uint32_t const ces[9] = { 0x3C80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_361)
{
    // 1E85B 0062;	
    // (‎‎𞡛‎‎) MENDE KIKAKUI SYLLABLE M035 FA	[3C80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85B, 0x0062 };
    uint32_t const ces[9] = { 0x3C80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_362)
{
    // 1E85C 0021;	
    // (‎‎𞡜‎‎) MENDE KIKAKUI SYLLABLE M036 FU	[3C81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85C, 0x0021 };
    uint32_t const ces[9] = { 0x3C81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_363)
{
    // 1E85C 003F;	
    // (‎‎𞡜‎‎) MENDE KIKAKUI SYLLABLE M036 FU	[3C81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85C, 0x003F };
    uint32_t const ces[9] = { 0x3C81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_364)
{
    // 1E85C 0061;	
    // (‎‎𞡜‎‎) MENDE KIKAKUI SYLLABLE M036 FU	[3C81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85C, 0x0061 };
    uint32_t const ces[9] = { 0x3C81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_365)
{
    // 1E85C 0041;	
    // (‎‎𞡜‎‎) MENDE KIKAKUI SYLLABLE M036 FU	[3C81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E85C, 0x0041 };
    uint32_t const ces[9] = { 0x3C81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_366)
{
    // 1E85C 0062;	
    // (‎‎𞡜‎‎) MENDE KIKAKUI SYLLABLE M036 FU	[3C81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85C, 0x0062 };
    uint32_t const ces[9] = { 0x3C81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_367)
{
    // 1E85D 0021;	
    // (‎‎𞡝‎‎) MENDE KIKAKUI SYLLABLE M078 FEE	[3C82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85D, 0x0021 };
    uint32_t const ces[9] = { 0x3C82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_368)
{
    // 1E85D 003F;	
    // (‎‎𞡝‎‎) MENDE KIKAKUI SYLLABLE M078 FEE	[3C82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85D, 0x003F };
    uint32_t const ces[9] = { 0x3C82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_369)
{
    // 1E85D 0061;	
    // (‎‎𞡝‎‎) MENDE KIKAKUI SYLLABLE M078 FEE	[3C82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85D, 0x0061 };
    uint32_t const ces[9] = { 0x3C82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_370)
{
    // 1E85D 0041;	
    // (‎‎𞡝‎‎) MENDE KIKAKUI SYLLABLE M078 FEE	[3C82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E85D, 0x0041 };
    uint32_t const ces[9] = { 0x3C82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_371)
{
    // 1E85D 0062;	
    // (‎‎𞡝‎‎) MENDE KIKAKUI SYLLABLE M078 FEE	[3C82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85D, 0x0062 };
    uint32_t const ces[9] = { 0x3C82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_372)
{
    // 1E85E 0021;	
    // (‎‎𞡞‎‎) MENDE KIKAKUI SYLLABLE M075 FE	[3C83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85E, 0x0021 };
    uint32_t const ces[9] = { 0x3C83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_373)
{
    // 1E85E 003F;	
    // (‎‎𞡞‎‎) MENDE KIKAKUI SYLLABLE M075 FE	[3C83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85E, 0x003F };
    uint32_t const ces[9] = { 0x3C83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_374)
{
    // 1E85E 0061;	
    // (‎‎𞡞‎‎) MENDE KIKAKUI SYLLABLE M075 FE	[3C83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85E, 0x0061 };
    uint32_t const ces[9] = { 0x3C83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_375)
{
    // 1E85E 0041;	
    // (‎‎𞡞‎‎) MENDE KIKAKUI SYLLABLE M075 FE	[3C83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E85E, 0x0041 };
    uint32_t const ces[9] = { 0x3C83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_376)
{
    // 1E85E 0062;	
    // (‎‎𞡞‎‎) MENDE KIKAKUI SYLLABLE M075 FE	[3C83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85E, 0x0062 };
    uint32_t const ces[9] = { 0x3C83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_377)
{
    // 1E85F 0021;	
    // (‎‎𞡟‎‎) MENDE KIKAKUI SYLLABLE M133 FOO	[3C84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85F, 0x0021 };
    uint32_t const ces[9] = { 0x3C84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_378)
{
    // 1E85F 003F;	
    // (‎‎𞡟‎‎) MENDE KIKAKUI SYLLABLE M133 FOO	[3C84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85F, 0x003F };
    uint32_t const ces[9] = { 0x3C84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_379)
{
    // 1E85F 0061;	
    // (‎‎𞡟‎‎) MENDE KIKAKUI SYLLABLE M133 FOO	[3C84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85F, 0x0061 };
    uint32_t const ces[9] = { 0x3C84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_380)
{
    // 1E85F 0041;	
    // (‎‎𞡟‎‎) MENDE KIKAKUI SYLLABLE M133 FOO	[3C84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E85F, 0x0041 };
    uint32_t const ces[9] = { 0x3C84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_381)
{
    // 1E85F 0062;	
    // (‎‎𞡟‎‎) MENDE KIKAKUI SYLLABLE M133 FOO	[3C84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E85F, 0x0062 };
    uint32_t const ces[9] = { 0x3C84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_382)
{
    // 1E860 0021;	
    // (‎‎𞡠‎‎) MENDE KIKAKUI SYLLABLE M088 FO	[3C85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E860, 0x0021 };
    uint32_t const ces[9] = { 0x3C85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_383)
{
    // 1E860 003F;	
    // (‎‎𞡠‎‎) MENDE KIKAKUI SYLLABLE M088 FO	[3C85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E860, 0x003F };
    uint32_t const ces[9] = { 0x3C85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_384)
{
    // 1E860 0061;	
    // (‎‎𞡠‎‎) MENDE KIKAKUI SYLLABLE M088 FO	[3C85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E860, 0x0061 };
    uint32_t const ces[9] = { 0x3C85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_385)
{
    // 1E860 0041;	
    // (‎‎𞡠‎‎) MENDE KIKAKUI SYLLABLE M088 FO	[3C85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E860, 0x0041 };
    uint32_t const ces[9] = { 0x3C85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_386)
{
    // 1E860 0062;	
    // (‎‎𞡠‎‎) MENDE KIKAKUI SYLLABLE M088 FO	[3C85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E860, 0x0062 };
    uint32_t const ces[9] = { 0x3C85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_387)
{
    // 1E861 0021;	
    // (‎‎𞡡‎‎) MENDE KIKAKUI SYLLABLE M197 FUA	[3C86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E861, 0x0021 };
    uint32_t const ces[9] = { 0x3C86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_388)
{
    // 1E861 003F;	
    // (‎‎𞡡‎‎) MENDE KIKAKUI SYLLABLE M197 FUA	[3C86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E861, 0x003F };
    uint32_t const ces[9] = { 0x3C86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_389)
{
    // 1E861 0061;	
    // (‎‎𞡡‎‎) MENDE KIKAKUI SYLLABLE M197 FUA	[3C86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E861, 0x0061 };
    uint32_t const ces[9] = { 0x3C86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_390)
{
    // 1E861 0041;	
    // (‎‎𞡡‎‎) MENDE KIKAKUI SYLLABLE M197 FUA	[3C86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E861, 0x0041 };
    uint32_t const ces[9] = { 0x3C86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_391)
{
    // 1E861 0062;	
    // (‎‎𞡡‎‎) MENDE KIKAKUI SYLLABLE M197 FUA	[3C86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E861, 0x0062 };
    uint32_t const ces[9] = { 0x3C86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_392)
{
    // 1E862 0021;	
    // (‎‎𞡢‎‎) MENDE KIKAKUI SYLLABLE M101 FAN	[3C87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E862, 0x0021 };
    uint32_t const ces[9] = { 0x3C87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_393)
{
    // 1E862 003F;	
    // (‎‎𞡢‎‎) MENDE KIKAKUI SYLLABLE M101 FAN	[3C87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E862, 0x003F };
    uint32_t const ces[9] = { 0x3C87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_394)
{
    // 1E862 0061;	
    // (‎‎𞡢‎‎) MENDE KIKAKUI SYLLABLE M101 FAN	[3C87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E862, 0x0061 };
    uint32_t const ces[9] = { 0x3C87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_395)
{
    // 1E862 0041;	
    // (‎‎𞡢‎‎) MENDE KIKAKUI SYLLABLE M101 FAN	[3C87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E862, 0x0041 };
    uint32_t const ces[9] = { 0x3C87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_396)
{
    // 1E862 0062;	
    // (‎‎𞡢‎‎) MENDE KIKAKUI SYLLABLE M101 FAN	[3C87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E862, 0x0062 };
    uint32_t const ces[9] = { 0x3C87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_397)
{
    // 1E863 0021;	
    // (‎‎𞡣‎‎) MENDE KIKAKUI SYLLABLE M037 NIN	[3C88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E863, 0x0021 };
    uint32_t const ces[9] = { 0x3C88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_398)
{
    // 1E863 003F;	
    // (‎‎𞡣‎‎) MENDE KIKAKUI SYLLABLE M037 NIN	[3C88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E863, 0x003F };
    uint32_t const ces[9] = { 0x3C88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_399)
{
    // 1E863 0061;	
    // (‎‎𞡣‎‎) MENDE KIKAKUI SYLLABLE M037 NIN	[3C88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E863, 0x0061 };
    uint32_t const ces[9] = { 0x3C88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_400)
{
    // 1E863 0041;	
    // (‎‎𞡣‎‎) MENDE KIKAKUI SYLLABLE M037 NIN	[3C88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E863, 0x0041 };
    uint32_t const ces[9] = { 0x3C88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_401)
{
    // 1E863 0062;	
    // (‎‎𞡣‎‎) MENDE KIKAKUI SYLLABLE M037 NIN	[3C88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E863, 0x0062 };
    uint32_t const ces[9] = { 0x3C88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_402)
{
    // 1E864 0021;	
    // (‎‎𞡤‎‎) MENDE KIKAKUI SYLLABLE M038 NAN	[3C89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E864, 0x0021 };
    uint32_t const ces[9] = { 0x3C89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_403)
{
    // 1E864 003F;	
    // (‎‎𞡤‎‎) MENDE KIKAKUI SYLLABLE M038 NAN	[3C89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E864, 0x003F };
    uint32_t const ces[9] = { 0x3C89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_404)
{
    // 1E864 0061;	
    // (‎‎𞡤‎‎) MENDE KIKAKUI SYLLABLE M038 NAN	[3C89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E864, 0x0061 };
    uint32_t const ces[9] = { 0x3C89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_405)
{
    // 1E864 0041;	
    // (‎‎𞡤‎‎) MENDE KIKAKUI SYLLABLE M038 NAN	[3C89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E864, 0x0041 };
    uint32_t const ces[9] = { 0x3C89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_406)
{
    // 1E864 0062;	
    // (‎‎𞡤‎‎) MENDE KIKAKUI SYLLABLE M038 NAN	[3C89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E864, 0x0062 };
    uint32_t const ces[9] = { 0x3C89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_407)
{
    // 1E865 0021;	
    // (‎‎𞡥‎‎) MENDE KIKAKUI SYLLABLE M039 NUN	[3C8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E865, 0x0021 };
    uint32_t const ces[9] = { 0x3C8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_408)
{
    // 1E865 003F;	
    // (‎‎𞡥‎‎) MENDE KIKAKUI SYLLABLE M039 NUN	[3C8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E865, 0x003F };
    uint32_t const ces[9] = { 0x3C8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_409)
{
    // 1E865 0061;	
    // (‎‎𞡥‎‎) MENDE KIKAKUI SYLLABLE M039 NUN	[3C8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E865, 0x0061 };
    uint32_t const ces[9] = { 0x3C8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_410)
{
    // 1E865 0041;	
    // (‎‎𞡥‎‎) MENDE KIKAKUI SYLLABLE M039 NUN	[3C8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E865, 0x0041 };
    uint32_t const ces[9] = { 0x3C8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_411)
{
    // 1E865 0062;	
    // (‎‎𞡥‎‎) MENDE KIKAKUI SYLLABLE M039 NUN	[3C8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E865, 0x0062 };
    uint32_t const ces[9] = { 0x3C8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_412)
{
    // 1E866 0021;	
    // (‎‎𞡦‎‎) MENDE KIKAKUI SYLLABLE M117 NEN	[3C8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E866, 0x0021 };
    uint32_t const ces[9] = { 0x3C8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_413)
{
    // 1E866 003F;	
    // (‎‎𞡦‎‎) MENDE KIKAKUI SYLLABLE M117 NEN	[3C8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E866, 0x003F };
    uint32_t const ces[9] = { 0x3C8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_414)
{
    // 1E866 0061;	
    // (‎‎𞡦‎‎) MENDE KIKAKUI SYLLABLE M117 NEN	[3C8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E866, 0x0061 };
    uint32_t const ces[9] = { 0x3C8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_415)
{
    // 1E866 0041;	
    // (‎‎𞡦‎‎) MENDE KIKAKUI SYLLABLE M117 NEN	[3C8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E866, 0x0041 };
    uint32_t const ces[9] = { 0x3C8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_416)
{
    // 1E866 0062;	
    // (‎‎𞡦‎‎) MENDE KIKAKUI SYLLABLE M117 NEN	[3C8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E866, 0x0062 };
    uint32_t const ces[9] = { 0x3C8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_417)
{
    // 1E867 0021;	
    // (‎‎𞡧‎‎) MENDE KIKAKUI SYLLABLE M169 NON	[3C8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E867, 0x0021 };
    uint32_t const ces[9] = { 0x3C8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_418)
{
    // 1E867 003F;	
    // (‎‎𞡧‎‎) MENDE KIKAKUI SYLLABLE M169 NON	[3C8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E867, 0x003F };
    uint32_t const ces[9] = { 0x3C8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_419)
{
    // 1E867 0061;	
    // (‎‎𞡧‎‎) MENDE KIKAKUI SYLLABLE M169 NON	[3C8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E867, 0x0061 };
    uint32_t const ces[9] = { 0x3C8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_420)
{
    // 1E867 0041;	
    // (‎‎𞡧‎‎) MENDE KIKAKUI SYLLABLE M169 NON	[3C8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E867, 0x0041 };
    uint32_t const ces[9] = { 0x3C8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_421)
{
    // 1E867 0062;	
    // (‎‎𞡧‎‎) MENDE KIKAKUI SYLLABLE M169 NON	[3C8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E867, 0x0062 };
    uint32_t const ces[9] = { 0x3C8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_422)
{
    // 1E868 0021;	
    // (‎‎𞡨‎‎) MENDE KIKAKUI SYLLABLE M176 HI	[3C8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E868, 0x0021 };
    uint32_t const ces[9] = { 0x3C8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_423)
{
    // 1E868 003F;	
    // (‎‎𞡨‎‎) MENDE KIKAKUI SYLLABLE M176 HI	[3C8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E868, 0x003F };
    uint32_t const ces[9] = { 0x3C8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_424)
{
    // 1E868 0061;	
    // (‎‎𞡨‎‎) MENDE KIKAKUI SYLLABLE M176 HI	[3C8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E868, 0x0061 };
    uint32_t const ces[9] = { 0x3C8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_425)
{
    // 1E868 0041;	
    // (‎‎𞡨‎‎) MENDE KIKAKUI SYLLABLE M176 HI	[3C8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E868, 0x0041 };
    uint32_t const ces[9] = { 0x3C8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_426)
{
    // 1E868 0062;	
    // (‎‎𞡨‎‎) MENDE KIKAKUI SYLLABLE M176 HI	[3C8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E868, 0x0062 };
    uint32_t const ces[9] = { 0x3C8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_427)
{
    // 1E869 0021;	
    // (‎‎𞡩‎‎) MENDE KIKAKUI SYLLABLE M041 HA	[3C8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E869, 0x0021 };
    uint32_t const ces[9] = { 0x3C8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_428)
{
    // 1E869 003F;	
    // (‎‎𞡩‎‎) MENDE KIKAKUI SYLLABLE M041 HA	[3C8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E869, 0x003F };
    uint32_t const ces[9] = { 0x3C8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_429)
{
    // 1E869 0061;	
    // (‎‎𞡩‎‎) MENDE KIKAKUI SYLLABLE M041 HA	[3C8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E869, 0x0061 };
    uint32_t const ces[9] = { 0x3C8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_430)
{
    // 1E869 0041;	
    // (‎‎𞡩‎‎) MENDE KIKAKUI SYLLABLE M041 HA	[3C8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E869, 0x0041 };
    uint32_t const ces[9] = { 0x3C8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_431)
{
    // 1E869 0062;	
    // (‎‎𞡩‎‎) MENDE KIKAKUI SYLLABLE M041 HA	[3C8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E869, 0x0062 };
    uint32_t const ces[9] = { 0x3C8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_432)
{
    // 1E86A 0021;	
    // (‎‎𞡪‎‎) MENDE KIKAKUI SYLLABLE M186 HU	[3C8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86A, 0x0021 };
    uint32_t const ces[9] = { 0x3C8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_433)
{
    // 1E86A 003F;	
    // (‎‎𞡪‎‎) MENDE KIKAKUI SYLLABLE M186 HU	[3C8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86A, 0x003F };
    uint32_t const ces[9] = { 0x3C8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_434)
{
    // 1E86A 0061;	
    // (‎‎𞡪‎‎) MENDE KIKAKUI SYLLABLE M186 HU	[3C8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86A, 0x0061 };
    uint32_t const ces[9] = { 0x3C8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_435)
{
    // 1E86A 0041;	
    // (‎‎𞡪‎‎) MENDE KIKAKUI SYLLABLE M186 HU	[3C8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E86A, 0x0041 };
    uint32_t const ces[9] = { 0x3C8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_436)
{
    // 1E86A 0062;	
    // (‎‎𞡪‎‎) MENDE KIKAKUI SYLLABLE M186 HU	[3C8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86A, 0x0062 };
    uint32_t const ces[9] = { 0x3C8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_437)
{
    // 1E86B 0021;	
    // (‎‎𞡫‎‎) MENDE KIKAKUI SYLLABLE M040 HEE	[3C90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86B, 0x0021 };
    uint32_t const ces[9] = { 0x3C90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_438)
{
    // 1E86B 003F;	
    // (‎‎𞡫‎‎) MENDE KIKAKUI SYLLABLE M040 HEE	[3C90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86B, 0x003F };
    uint32_t const ces[9] = { 0x3C90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_439)
{
    // 1E86B 0061;	
    // (‎‎𞡫‎‎) MENDE KIKAKUI SYLLABLE M040 HEE	[3C90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86B, 0x0061 };
    uint32_t const ces[9] = { 0x3C90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_440)
{
    // 1E86B 0041;	
    // (‎‎𞡫‎‎) MENDE KIKAKUI SYLLABLE M040 HEE	[3C90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E86B, 0x0041 };
    uint32_t const ces[9] = { 0x3C90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_441)
{
    // 1E86B 0062;	
    // (‎‎𞡫‎‎) MENDE KIKAKUI SYLLABLE M040 HEE	[3C90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86B, 0x0062 };
    uint32_t const ces[9] = { 0x3C90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_442)
{
    // 1E86C 0021;	
    // (‎‎𞡬‎‎) MENDE KIKAKUI SYLLABLE M096 HE	[3C91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86C, 0x0021 };
    uint32_t const ces[9] = { 0x3C91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_443)
{
    // 1E86C 003F;	
    // (‎‎𞡬‎‎) MENDE KIKAKUI SYLLABLE M096 HE	[3C91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86C, 0x003F };
    uint32_t const ces[9] = { 0x3C91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_444)
{
    // 1E86C 0061;	
    // (‎‎𞡬‎‎) MENDE KIKAKUI SYLLABLE M096 HE	[3C91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86C, 0x0061 };
    uint32_t const ces[9] = { 0x3C91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_445)
{
    // 1E86C 0041;	
    // (‎‎𞡬‎‎) MENDE KIKAKUI SYLLABLE M096 HE	[3C91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E86C, 0x0041 };
    uint32_t const ces[9] = { 0x3C91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_446)
{
    // 1E86C 0062;	
    // (‎‎𞡬‎‎) MENDE KIKAKUI SYLLABLE M096 HE	[3C91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86C, 0x0062 };
    uint32_t const ces[9] = { 0x3C91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_447)
{
    // 1E86D 0021;	
    // (‎‎𞡭‎‎) MENDE KIKAKUI SYLLABLE M042 HOO	[3C92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86D, 0x0021 };
    uint32_t const ces[9] = { 0x3C92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_448)
{
    // 1E86D 003F;	
    // (‎‎𞡭‎‎) MENDE KIKAKUI SYLLABLE M042 HOO	[3C92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86D, 0x003F };
    uint32_t const ces[9] = { 0x3C92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_449)
{
    // 1E86D 0061;	
    // (‎‎𞡭‎‎) MENDE KIKAKUI SYLLABLE M042 HOO	[3C92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86D, 0x0061 };
    uint32_t const ces[9] = { 0x3C92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_450)
{
    // 1E86D 0041;	
    // (‎‎𞡭‎‎) MENDE KIKAKUI SYLLABLE M042 HOO	[3C92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E86D, 0x0041 };
    uint32_t const ces[9] = { 0x3C92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_451)
{
    // 1E86D 0062;	
    // (‎‎𞡭‎‎) MENDE KIKAKUI SYLLABLE M042 HOO	[3C92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86D, 0x0062 };
    uint32_t const ces[9] = { 0x3C92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_452)
{
    // 1E86E 0021;	
    // (‎‎𞡮‎‎) MENDE KIKAKUI SYLLABLE M140 HO	[3C93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86E, 0x0021 };
    uint32_t const ces[9] = { 0x3C93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_453)
{
    // 1E86E 003F;	
    // (‎‎𞡮‎‎) MENDE KIKAKUI SYLLABLE M140 HO	[3C93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86E, 0x003F };
    uint32_t const ces[9] = { 0x3C93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_454)
{
    // 1E86E 0061;	
    // (‎‎𞡮‎‎) MENDE KIKAKUI SYLLABLE M140 HO	[3C93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86E, 0x0061 };
    uint32_t const ces[9] = { 0x3C93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_455)
{
    // 1E86E 0041;	
    // (‎‎𞡮‎‎) MENDE KIKAKUI SYLLABLE M140 HO	[3C93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E86E, 0x0041 };
    uint32_t const ces[9] = { 0x3C93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_456)
{
    // 1E86E 0062;	
    // (‎‎𞡮‎‎) MENDE KIKAKUI SYLLABLE M140 HO	[3C93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86E, 0x0062 };
    uint32_t const ces[9] = { 0x3C93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_457)
{
    // 1E86F 0021;	
    // (‎‎𞡯‎‎) MENDE KIKAKUI SYLLABLE M083 HEEI	[3C94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86F, 0x0021 };
    uint32_t const ces[9] = { 0x3C94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_458)
{
    // 1E86F 003F;	
    // (‎‎𞡯‎‎) MENDE KIKAKUI SYLLABLE M083 HEEI	[3C94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86F, 0x003F };
    uint32_t const ces[9] = { 0x3C94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_459)
{
    // 1E86F 0061;	
    // (‎‎𞡯‎‎) MENDE KIKAKUI SYLLABLE M083 HEEI	[3C94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86F, 0x0061 };
    uint32_t const ces[9] = { 0x3C94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_460)
{
    // 1E86F 0041;	
    // (‎‎𞡯‎‎) MENDE KIKAKUI SYLLABLE M083 HEEI	[3C94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E86F, 0x0041 };
    uint32_t const ces[9] = { 0x3C94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_461)
{
    // 1E86F 0062;	
    // (‎‎𞡯‎‎) MENDE KIKAKUI SYLLABLE M083 HEEI	[3C94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E86F, 0x0062 };
    uint32_t const ces[9] = { 0x3C94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_462)
{
    // 1E870 0021;	
    // (‎‎𞡰‎‎) MENDE KIKAKUI SYLLABLE M128 HOOU	[3C95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E870, 0x0021 };
    uint32_t const ces[9] = { 0x3C95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_463)
{
    // 1E870 003F;	
    // (‎‎𞡰‎‎) MENDE KIKAKUI SYLLABLE M128 HOOU	[3C95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E870, 0x003F };
    uint32_t const ces[9] = { 0x3C95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_464)
{
    // 1E870 0061;	
    // (‎‎𞡰‎‎) MENDE KIKAKUI SYLLABLE M128 HOOU	[3C95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E870, 0x0061 };
    uint32_t const ces[9] = { 0x3C95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_465)
{
    // 1E870 0041;	
    // (‎‎𞡰‎‎) MENDE KIKAKUI SYLLABLE M128 HOOU	[3C95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E870, 0x0041 };
    uint32_t const ces[9] = { 0x3C95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_466)
{
    // 1E870 0062;	
    // (‎‎𞡰‎‎) MENDE KIKAKUI SYLLABLE M128 HOOU	[3C95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E870, 0x0062 };
    uint32_t const ces[9] = { 0x3C95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_467)
{
    // 1E871 0021;	
    // (‎‎𞡱‎‎) MENDE KIKAKUI SYLLABLE M053 HIN	[3C96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E871, 0x0021 };
    uint32_t const ces[9] = { 0x3C96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_468)
{
    // 1E871 003F;	
    // (‎‎𞡱‎‎) MENDE KIKAKUI SYLLABLE M053 HIN	[3C96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E871, 0x003F };
    uint32_t const ces[9] = { 0x3C96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_469)
{
    // 1E871 0061;	
    // (‎‎𞡱‎‎) MENDE KIKAKUI SYLLABLE M053 HIN	[3C96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E871, 0x0061 };
    uint32_t const ces[9] = { 0x3C96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_470)
{
    // 1E871 0041;	
    // (‎‎𞡱‎‎) MENDE KIKAKUI SYLLABLE M053 HIN	[3C96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E871, 0x0041 };
    uint32_t const ces[9] = { 0x3C96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_471)
{
    // 1E871 0062;	
    // (‎‎𞡱‎‎) MENDE KIKAKUI SYLLABLE M053 HIN	[3C96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E871, 0x0062 };
    uint32_t const ces[9] = { 0x3C96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_472)
{
    // 1E872 0021;	
    // (‎‎𞡲‎‎) MENDE KIKAKUI SYLLABLE M130 HAN	[3C97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E872, 0x0021 };
    uint32_t const ces[9] = { 0x3C97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_473)
{
    // 1E872 003F;	
    // (‎‎𞡲‎‎) MENDE KIKAKUI SYLLABLE M130 HAN	[3C97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E872, 0x003F };
    uint32_t const ces[9] = { 0x3C97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_474)
{
    // 1E872 0061;	
    // (‎‎𞡲‎‎) MENDE KIKAKUI SYLLABLE M130 HAN	[3C97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E872, 0x0061 };
    uint32_t const ces[9] = { 0x3C97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_475)
{
    // 1E872 0041;	
    // (‎‎𞡲‎‎) MENDE KIKAKUI SYLLABLE M130 HAN	[3C97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E872, 0x0041 };
    uint32_t const ces[9] = { 0x3C97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_476)
{
    // 1E872 0062;	
    // (‎‎𞡲‎‎) MENDE KIKAKUI SYLLABLE M130 HAN	[3C97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E872, 0x0062 };
    uint32_t const ces[9] = { 0x3C97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_477)
{
    // 1E873 0021;	
    // (‎‎𞡳‎‎) MENDE KIKAKUI SYLLABLE M087 HUN	[3C98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E873, 0x0021 };
    uint32_t const ces[9] = { 0x3C98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_478)
{
    // 1E873 003F;	
    // (‎‎𞡳‎‎) MENDE KIKAKUI SYLLABLE M087 HUN	[3C98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E873, 0x003F };
    uint32_t const ces[9] = { 0x3C98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_479)
{
    // 1E873 0061;	
    // (‎‎𞡳‎‎) MENDE KIKAKUI SYLLABLE M087 HUN	[3C98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E873, 0x0061 };
    uint32_t const ces[9] = { 0x3C98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_480)
{
    // 1E873 0041;	
    // (‎‎𞡳‎‎) MENDE KIKAKUI SYLLABLE M087 HUN	[3C98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E873, 0x0041 };
    uint32_t const ces[9] = { 0x3C98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_481)
{
    // 1E873 0062;	
    // (‎‎𞡳‎‎) MENDE KIKAKUI SYLLABLE M087 HUN	[3C98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E873, 0x0062 };
    uint32_t const ces[9] = { 0x3C98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_482)
{
    // 1E874 0021;	
    // (‎‎𞡴‎‎) MENDE KIKAKUI SYLLABLE M052 HEN	[3C99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E874, 0x0021 };
    uint32_t const ces[9] = { 0x3C99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_483)
{
    // 1E874 003F;	
    // (‎‎𞡴‎‎) MENDE KIKAKUI SYLLABLE M052 HEN	[3C99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E874, 0x003F };
    uint32_t const ces[9] = { 0x3C99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_484)
{
    // 1E874 0061;	
    // (‎‎𞡴‎‎) MENDE KIKAKUI SYLLABLE M052 HEN	[3C99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E874, 0x0061 };
    uint32_t const ces[9] = { 0x3C99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_485)
{
    // 1E874 0041;	
    // (‎‎𞡴‎‎) MENDE KIKAKUI SYLLABLE M052 HEN	[3C99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E874, 0x0041 };
    uint32_t const ces[9] = { 0x3C99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_486)
{
    // 1E874 0062;	
    // (‎‎𞡴‎‎) MENDE KIKAKUI SYLLABLE M052 HEN	[3C99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E874, 0x0062 };
    uint32_t const ces[9] = { 0x3C99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_487)
{
    // 1E875 0021;	
    // (‎‎𞡵‎‎) MENDE KIKAKUI SYLLABLE M193 HON	[3C9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E875, 0x0021 };
    uint32_t const ces[9] = { 0x3C9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_488)
{
    // 1E875 003F;	
    // (‎‎𞡵‎‎) MENDE KIKAKUI SYLLABLE M193 HON	[3C9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E875, 0x003F };
    uint32_t const ces[9] = { 0x3C9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_489)
{
    // 1E875 0061;	
    // (‎‎𞡵‎‎) MENDE KIKAKUI SYLLABLE M193 HON	[3C9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E875, 0x0061 };
    uint32_t const ces[9] = { 0x3C9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_490)
{
    // 1E875 0041;	
    // (‎‎𞡵‎‎) MENDE KIKAKUI SYLLABLE M193 HON	[3C9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E875, 0x0041 };
    uint32_t const ces[9] = { 0x3C9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_491)
{
    // 1E875 0062;	
    // (‎‎𞡵‎‎) MENDE KIKAKUI SYLLABLE M193 HON	[3C9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E875, 0x0062 };
    uint32_t const ces[9] = { 0x3C9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_492)
{
    // 1E876 0021;	
    // (‎‎𞡶‎‎) MENDE KIKAKUI SYLLABLE M046 HUAN	[3C9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E876, 0x0021 };
    uint32_t const ces[9] = { 0x3C9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_493)
{
    // 1E876 003F;	
    // (‎‎𞡶‎‎) MENDE KIKAKUI SYLLABLE M046 HUAN	[3C9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E876, 0x003F };
    uint32_t const ces[9] = { 0x3C9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_494)
{
    // 1E876 0061;	
    // (‎‎𞡶‎‎) MENDE KIKAKUI SYLLABLE M046 HUAN	[3C9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E876, 0x0061 };
    uint32_t const ces[9] = { 0x3C9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_495)
{
    // 1E876 0041;	
    // (‎‎𞡶‎‎) MENDE KIKAKUI SYLLABLE M046 HUAN	[3C9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E876, 0x0041 };
    uint32_t const ces[9] = { 0x3C9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_496)
{
    // 1E876 0062;	
    // (‎‎𞡶‎‎) MENDE KIKAKUI SYLLABLE M046 HUAN	[3C9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E876, 0x0062 };
    uint32_t const ces[9] = { 0x3C9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_497)
{
    // 1E877 0021;	
    // (‎‎𞡷‎‎) MENDE KIKAKUI SYLLABLE M090 NGGI	[3C9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E877, 0x0021 };
    uint32_t const ces[9] = { 0x3C9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_498)
{
    // 1E877 003F;	
    // (‎‎𞡷‎‎) MENDE KIKAKUI SYLLABLE M090 NGGI	[3C9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E877, 0x003F };
    uint32_t const ces[9] = { 0x3C9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_238_499)
{
    // 1E877 0061;	
    // (‎‎𞡷‎‎) MENDE KIKAKUI SYLLABLE M090 NGGI	[3C9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E877, 0x0061 };
    uint32_t const ces[9] = { 0x3C9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

