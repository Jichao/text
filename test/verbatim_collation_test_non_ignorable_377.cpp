// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_377_000)
{
    // 4768 003F;	
    // (䝨) CJK UNIFIED IDEOGRAPH-4768	[FB80 C768 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4768, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC768, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_001)
{
    // 4768 0061;	
    // (䝨) CJK UNIFIED IDEOGRAPH-4768	[FB80 C768 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4768, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC768, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_002)
{
    // 4768 0041;	
    // (䝨) CJK UNIFIED IDEOGRAPH-4768	[FB80 C768 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4768, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC768, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_003)
{
    // 4768 0062;	
    // (䝨) CJK UNIFIED IDEOGRAPH-4768	[FB80 C768 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4768, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC768, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_004)
{
    // 4769 0021;	
    // (䝩) CJK UNIFIED IDEOGRAPH-4769	[FB80 C769 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4769, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC769, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_005)
{
    // 4769 003F;	
    // (䝩) CJK UNIFIED IDEOGRAPH-4769	[FB80 C769 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4769, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC769, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_006)
{
    // 4769 0061;	
    // (䝩) CJK UNIFIED IDEOGRAPH-4769	[FB80 C769 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4769, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC769, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_007)
{
    // 4769 0041;	
    // (䝩) CJK UNIFIED IDEOGRAPH-4769	[FB80 C769 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4769, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC769, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_008)
{
    // 4769 0062;	
    // (䝩) CJK UNIFIED IDEOGRAPH-4769	[FB80 C769 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4769, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC769, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_009)
{
    // 476A 0021;	
    // (䝪) CJK UNIFIED IDEOGRAPH-476A	[FB80 C76A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC76A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_010)
{
    // 476A 003F;	
    // (䝪) CJK UNIFIED IDEOGRAPH-476A	[FB80 C76A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC76A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_011)
{
    // 476A 0061;	
    // (䝪) CJK UNIFIED IDEOGRAPH-476A	[FB80 C76A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC76A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_012)
{
    // 476A 0041;	
    // (䝪) CJK UNIFIED IDEOGRAPH-476A	[FB80 C76A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x476A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC76A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_013)
{
    // 476A 0062;	
    // (䝪) CJK UNIFIED IDEOGRAPH-476A	[FB80 C76A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC76A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_014)
{
    // 476B 0021;	
    // (䝫) CJK UNIFIED IDEOGRAPH-476B	[FB80 C76B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC76B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_015)
{
    // 476B 003F;	
    // (䝫) CJK UNIFIED IDEOGRAPH-476B	[FB80 C76B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC76B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_016)
{
    // 476B 0061;	
    // (䝫) CJK UNIFIED IDEOGRAPH-476B	[FB80 C76B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC76B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_017)
{
    // 476B 0041;	
    // (䝫) CJK UNIFIED IDEOGRAPH-476B	[FB80 C76B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x476B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC76B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_018)
{
    // 476B 0062;	
    // (䝫) CJK UNIFIED IDEOGRAPH-476B	[FB80 C76B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC76B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_019)
{
    // 476C 0021;	
    // (䝬) CJK UNIFIED IDEOGRAPH-476C	[FB80 C76C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC76C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_020)
{
    // 476C 003F;	
    // (䝬) CJK UNIFIED IDEOGRAPH-476C	[FB80 C76C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC76C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_021)
{
    // 476C 0061;	
    // (䝬) CJK UNIFIED IDEOGRAPH-476C	[FB80 C76C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC76C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_022)
{
    // 476C 0041;	
    // (䝬) CJK UNIFIED IDEOGRAPH-476C	[FB80 C76C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x476C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC76C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_023)
{
    // 476C 0062;	
    // (䝬) CJK UNIFIED IDEOGRAPH-476C	[FB80 C76C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC76C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_024)
{
    // 476D 0021;	
    // (䝭) CJK UNIFIED IDEOGRAPH-476D	[FB80 C76D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC76D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_025)
{
    // 476D 003F;	
    // (䝭) CJK UNIFIED IDEOGRAPH-476D	[FB80 C76D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC76D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_026)
{
    // 476D 0061;	
    // (䝭) CJK UNIFIED IDEOGRAPH-476D	[FB80 C76D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC76D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_027)
{
    // 476D 0041;	
    // (䝭) CJK UNIFIED IDEOGRAPH-476D	[FB80 C76D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x476D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC76D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_028)
{
    // 476D 0062;	
    // (䝭) CJK UNIFIED IDEOGRAPH-476D	[FB80 C76D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC76D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_029)
{
    // 476E 0021;	
    // (䝮) CJK UNIFIED IDEOGRAPH-476E	[FB80 C76E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC76E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_030)
{
    // 476E 003F;	
    // (䝮) CJK UNIFIED IDEOGRAPH-476E	[FB80 C76E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC76E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_031)
{
    // 476E 0061;	
    // (䝮) CJK UNIFIED IDEOGRAPH-476E	[FB80 C76E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC76E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_032)
{
    // 476E 0041;	
    // (䝮) CJK UNIFIED IDEOGRAPH-476E	[FB80 C76E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x476E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC76E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_033)
{
    // 476E 0062;	
    // (䝮) CJK UNIFIED IDEOGRAPH-476E	[FB80 C76E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC76E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_034)
{
    // 476F 0021;	
    // (䝯) CJK UNIFIED IDEOGRAPH-476F	[FB80 C76F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC76F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_035)
{
    // 476F 003F;	
    // (䝯) CJK UNIFIED IDEOGRAPH-476F	[FB80 C76F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC76F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_036)
{
    // 476F 0061;	
    // (䝯) CJK UNIFIED IDEOGRAPH-476F	[FB80 C76F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC76F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_037)
{
    // 476F 0041;	
    // (䝯) CJK UNIFIED IDEOGRAPH-476F	[FB80 C76F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x476F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC76F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_038)
{
    // 476F 0062;	
    // (䝯) CJK UNIFIED IDEOGRAPH-476F	[FB80 C76F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x476F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC76F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_039)
{
    // 4770 0021;	
    // (䝰) CJK UNIFIED IDEOGRAPH-4770	[FB80 C770 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4770, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC770, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_040)
{
    // 4770 003F;	
    // (䝰) CJK UNIFIED IDEOGRAPH-4770	[FB80 C770 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4770, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC770, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_041)
{
    // 4770 0061;	
    // (䝰) CJK UNIFIED IDEOGRAPH-4770	[FB80 C770 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4770, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC770, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_042)
{
    // 4770 0041;	
    // (䝰) CJK UNIFIED IDEOGRAPH-4770	[FB80 C770 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4770, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC770, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_043)
{
    // 4770 0062;	
    // (䝰) CJK UNIFIED IDEOGRAPH-4770	[FB80 C770 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4770, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC770, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_044)
{
    // 4771 0021;	
    // (䝱) CJK UNIFIED IDEOGRAPH-4771	[FB80 C771 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4771, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC771, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_045)
{
    // 4771 003F;	
    // (䝱) CJK UNIFIED IDEOGRAPH-4771	[FB80 C771 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4771, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC771, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_046)
{
    // 4771 0061;	
    // (䝱) CJK UNIFIED IDEOGRAPH-4771	[FB80 C771 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4771, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC771, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_047)
{
    // 4771 0041;	
    // (䝱) CJK UNIFIED IDEOGRAPH-4771	[FB80 C771 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4771, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC771, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_048)
{
    // 4771 0062;	
    // (䝱) CJK UNIFIED IDEOGRAPH-4771	[FB80 C771 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4771, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC771, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_049)
{
    // 4772 0021;	
    // (䝲) CJK UNIFIED IDEOGRAPH-4772	[FB80 C772 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4772, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC772, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_050)
{
    // 4772 003F;	
    // (䝲) CJK UNIFIED IDEOGRAPH-4772	[FB80 C772 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4772, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC772, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_051)
{
    // 4772 0061;	
    // (䝲) CJK UNIFIED IDEOGRAPH-4772	[FB80 C772 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4772, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC772, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_052)
{
    // 4772 0041;	
    // (䝲) CJK UNIFIED IDEOGRAPH-4772	[FB80 C772 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4772, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC772, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_053)
{
    // 4772 0062;	
    // (䝲) CJK UNIFIED IDEOGRAPH-4772	[FB80 C772 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4772, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC772, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_054)
{
    // 4773 0021;	
    // (䝳) CJK UNIFIED IDEOGRAPH-4773	[FB80 C773 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4773, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC773, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_055)
{
    // 4773 003F;	
    // (䝳) CJK UNIFIED IDEOGRAPH-4773	[FB80 C773 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4773, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC773, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_056)
{
    // 4773 0061;	
    // (䝳) CJK UNIFIED IDEOGRAPH-4773	[FB80 C773 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4773, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC773, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_057)
{
    // 4773 0041;	
    // (䝳) CJK UNIFIED IDEOGRAPH-4773	[FB80 C773 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4773, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC773, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_058)
{
    // 4773 0062;	
    // (䝳) CJK UNIFIED IDEOGRAPH-4773	[FB80 C773 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4773, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC773, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_059)
{
    // 4774 0021;	
    // (䝴) CJK UNIFIED IDEOGRAPH-4774	[FB80 C774 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4774, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC774, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_060)
{
    // 4774 003F;	
    // (䝴) CJK UNIFIED IDEOGRAPH-4774	[FB80 C774 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4774, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC774, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_061)
{
    // 4774 0061;	
    // (䝴) CJK UNIFIED IDEOGRAPH-4774	[FB80 C774 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4774, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC774, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_062)
{
    // 4774 0041;	
    // (䝴) CJK UNIFIED IDEOGRAPH-4774	[FB80 C774 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4774, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC774, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_063)
{
    // 4774 0062;	
    // (䝴) CJK UNIFIED IDEOGRAPH-4774	[FB80 C774 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4774, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC774, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_064)
{
    // 4775 0021;	
    // (䝵) CJK UNIFIED IDEOGRAPH-4775	[FB80 C775 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4775, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC775, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_065)
{
    // 4775 003F;	
    // (䝵) CJK UNIFIED IDEOGRAPH-4775	[FB80 C775 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4775, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC775, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_066)
{
    // 4775 0061;	
    // (䝵) CJK UNIFIED IDEOGRAPH-4775	[FB80 C775 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4775, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC775, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_067)
{
    // 4775 0041;	
    // (䝵) CJK UNIFIED IDEOGRAPH-4775	[FB80 C775 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4775, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC775, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_068)
{
    // 4775 0062;	
    // (䝵) CJK UNIFIED IDEOGRAPH-4775	[FB80 C775 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4775, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC775, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_069)
{
    // 4776 0021;	
    // (䝶) CJK UNIFIED IDEOGRAPH-4776	[FB80 C776 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4776, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC776, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_070)
{
    // 4776 003F;	
    // (䝶) CJK UNIFIED IDEOGRAPH-4776	[FB80 C776 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4776, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC776, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_071)
{
    // 4776 0061;	
    // (䝶) CJK UNIFIED IDEOGRAPH-4776	[FB80 C776 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4776, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_072)
{
    // 4776 0041;	
    // (䝶) CJK UNIFIED IDEOGRAPH-4776	[FB80 C776 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4776, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_073)
{
    // 4776 0062;	
    // (䝶) CJK UNIFIED IDEOGRAPH-4776	[FB80 C776 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4776, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC776, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_074)
{
    // 4777 0021;	
    // (䝷) CJK UNIFIED IDEOGRAPH-4777	[FB80 C777 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4777, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC777, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_075)
{
    // 4777 003F;	
    // (䝷) CJK UNIFIED IDEOGRAPH-4777	[FB80 C777 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4777, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC777, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_076)
{
    // 4777 0061;	
    // (䝷) CJK UNIFIED IDEOGRAPH-4777	[FB80 C777 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4777, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_077)
{
    // 4777 0041;	
    // (䝷) CJK UNIFIED IDEOGRAPH-4777	[FB80 C777 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4777, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_078)
{
    // 4777 0062;	
    // (䝷) CJK UNIFIED IDEOGRAPH-4777	[FB80 C777 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4777, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC777, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_079)
{
    // 4778 0021;	
    // (䝸) CJK UNIFIED IDEOGRAPH-4778	[FB80 C778 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4778, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC778, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_080)
{
    // 4778 003F;	
    // (䝸) CJK UNIFIED IDEOGRAPH-4778	[FB80 C778 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4778, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC778, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_081)
{
    // 4778 0061;	
    // (䝸) CJK UNIFIED IDEOGRAPH-4778	[FB80 C778 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4778, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_082)
{
    // 4778 0041;	
    // (䝸) CJK UNIFIED IDEOGRAPH-4778	[FB80 C778 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4778, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_083)
{
    // 4778 0062;	
    // (䝸) CJK UNIFIED IDEOGRAPH-4778	[FB80 C778 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4778, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC778, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_084)
{
    // 4779 0021;	
    // (䝹) CJK UNIFIED IDEOGRAPH-4779	[FB80 C779 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4779, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC779, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_085)
{
    // 4779 003F;	
    // (䝹) CJK UNIFIED IDEOGRAPH-4779	[FB80 C779 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4779, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC779, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_086)
{
    // 4779 0061;	
    // (䝹) CJK UNIFIED IDEOGRAPH-4779	[FB80 C779 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4779, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_087)
{
    // 4779 0041;	
    // (䝹) CJK UNIFIED IDEOGRAPH-4779	[FB80 C779 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4779, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_088)
{
    // 4779 0062;	
    // (䝹) CJK UNIFIED IDEOGRAPH-4779	[FB80 C779 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4779, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC779, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_089)
{
    // 477A 0021;	
    // (䝺) CJK UNIFIED IDEOGRAPH-477A	[FB80 C77A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC77A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_090)
{
    // 477A 003F;	
    // (䝺) CJK UNIFIED IDEOGRAPH-477A	[FB80 C77A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC77A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_091)
{
    // 477A 0061;	
    // (䝺) CJK UNIFIED IDEOGRAPH-477A	[FB80 C77A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC77A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_092)
{
    // 477A 0041;	
    // (䝺) CJK UNIFIED IDEOGRAPH-477A	[FB80 C77A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x477A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC77A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_093)
{
    // 477A 0062;	
    // (䝺) CJK UNIFIED IDEOGRAPH-477A	[FB80 C77A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC77A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_094)
{
    // 477B 0021;	
    // (䝻) CJK UNIFIED IDEOGRAPH-477B	[FB80 C77B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC77B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_095)
{
    // 477B 003F;	
    // (䝻) CJK UNIFIED IDEOGRAPH-477B	[FB80 C77B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC77B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_096)
{
    // 477B 0061;	
    // (䝻) CJK UNIFIED IDEOGRAPH-477B	[FB80 C77B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC77B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_097)
{
    // 477B 0041;	
    // (䝻) CJK UNIFIED IDEOGRAPH-477B	[FB80 C77B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x477B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC77B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_098)
{
    // 477B 0062;	
    // (䝻) CJK UNIFIED IDEOGRAPH-477B	[FB80 C77B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC77B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_099)
{
    // 477C 0021;	
    // (䝼) CJK UNIFIED IDEOGRAPH-477C	[FB80 C77C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC77C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_100)
{
    // 477C 003F;	
    // (䝼) CJK UNIFIED IDEOGRAPH-477C	[FB80 C77C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC77C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_101)
{
    // 477C 0061;	
    // (䝼) CJK UNIFIED IDEOGRAPH-477C	[FB80 C77C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC77C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_102)
{
    // 477C 0041;	
    // (䝼) CJK UNIFIED IDEOGRAPH-477C	[FB80 C77C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x477C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC77C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_103)
{
    // 477C 0062;	
    // (䝼) CJK UNIFIED IDEOGRAPH-477C	[FB80 C77C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC77C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_104)
{
    // 477D 0021;	
    // (䝽) CJK UNIFIED IDEOGRAPH-477D	[FB80 C77D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC77D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_105)
{
    // 477D 003F;	
    // (䝽) CJK UNIFIED IDEOGRAPH-477D	[FB80 C77D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC77D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_106)
{
    // 477D 0061;	
    // (䝽) CJK UNIFIED IDEOGRAPH-477D	[FB80 C77D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC77D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_107)
{
    // 477D 0041;	
    // (䝽) CJK UNIFIED IDEOGRAPH-477D	[FB80 C77D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x477D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC77D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_108)
{
    // 477D 0062;	
    // (䝽) CJK UNIFIED IDEOGRAPH-477D	[FB80 C77D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC77D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_109)
{
    // 477E 0021;	
    // (䝾) CJK UNIFIED IDEOGRAPH-477E	[FB80 C77E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC77E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_110)
{
    // 477E 003F;	
    // (䝾) CJK UNIFIED IDEOGRAPH-477E	[FB80 C77E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC77E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_111)
{
    // 477E 0061;	
    // (䝾) CJK UNIFIED IDEOGRAPH-477E	[FB80 C77E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC77E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_112)
{
    // 477E 0041;	
    // (䝾) CJK UNIFIED IDEOGRAPH-477E	[FB80 C77E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x477E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC77E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_113)
{
    // 477E 0062;	
    // (䝾) CJK UNIFIED IDEOGRAPH-477E	[FB80 C77E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC77E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_114)
{
    // 477F 0021;	
    // (䝿) CJK UNIFIED IDEOGRAPH-477F	[FB80 C77F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC77F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_115)
{
    // 477F 003F;	
    // (䝿) CJK UNIFIED IDEOGRAPH-477F	[FB80 C77F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC77F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_116)
{
    // 477F 0061;	
    // (䝿) CJK UNIFIED IDEOGRAPH-477F	[FB80 C77F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC77F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_117)
{
    // 477F 0041;	
    // (䝿) CJK UNIFIED IDEOGRAPH-477F	[FB80 C77F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x477F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC77F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_118)
{
    // 477F 0062;	
    // (䝿) CJK UNIFIED IDEOGRAPH-477F	[FB80 C77F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x477F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC77F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_119)
{
    // 4780 0021;	
    // (䞀) CJK UNIFIED IDEOGRAPH-4780	[FB80 C780 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4780, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC780, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_120)
{
    // 4780 003F;	
    // (䞀) CJK UNIFIED IDEOGRAPH-4780	[FB80 C780 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4780, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC780, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_121)
{
    // 4780 0061;	
    // (䞀) CJK UNIFIED IDEOGRAPH-4780	[FB80 C780 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4780, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_122)
{
    // 4780 0041;	
    // (䞀) CJK UNIFIED IDEOGRAPH-4780	[FB80 C780 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4780, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_123)
{
    // 4780 0062;	
    // (䞀) CJK UNIFIED IDEOGRAPH-4780	[FB80 C780 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4780, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC780, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_124)
{
    // 4781 0021;	
    // (䞁) CJK UNIFIED IDEOGRAPH-4781	[FB80 C781 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4781, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC781, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_125)
{
    // 4781 003F;	
    // (䞁) CJK UNIFIED IDEOGRAPH-4781	[FB80 C781 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4781, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC781, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_126)
{
    // 4781 0061;	
    // (䞁) CJK UNIFIED IDEOGRAPH-4781	[FB80 C781 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4781, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_127)
{
    // 4781 0041;	
    // (䞁) CJK UNIFIED IDEOGRAPH-4781	[FB80 C781 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4781, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_128)
{
    // 4781 0062;	
    // (䞁) CJK UNIFIED IDEOGRAPH-4781	[FB80 C781 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4781, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC781, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_129)
{
    // 4782 0021;	
    // (䞂) CJK UNIFIED IDEOGRAPH-4782	[FB80 C782 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4782, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC782, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_130)
{
    // 4782 003F;	
    // (䞂) CJK UNIFIED IDEOGRAPH-4782	[FB80 C782 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4782, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC782, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_131)
{
    // 4782 0061;	
    // (䞂) CJK UNIFIED IDEOGRAPH-4782	[FB80 C782 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4782, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_132)
{
    // 4782 0041;	
    // (䞂) CJK UNIFIED IDEOGRAPH-4782	[FB80 C782 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4782, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_133)
{
    // 4782 0062;	
    // (䞂) CJK UNIFIED IDEOGRAPH-4782	[FB80 C782 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4782, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC782, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_134)
{
    // 4783 0021;	
    // (䞃) CJK UNIFIED IDEOGRAPH-4783	[FB80 C783 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4783, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC783, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_135)
{
    // 4783 003F;	
    // (䞃) CJK UNIFIED IDEOGRAPH-4783	[FB80 C783 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4783, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC783, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_136)
{
    // 4783 0061;	
    // (䞃) CJK UNIFIED IDEOGRAPH-4783	[FB80 C783 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4783, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_137)
{
    // 4783 0041;	
    // (䞃) CJK UNIFIED IDEOGRAPH-4783	[FB80 C783 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4783, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_138)
{
    // 4783 0062;	
    // (䞃) CJK UNIFIED IDEOGRAPH-4783	[FB80 C783 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4783, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC783, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_139)
{
    // 4784 0021;	
    // (䞄) CJK UNIFIED IDEOGRAPH-4784	[FB80 C784 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4784, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC784, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_140)
{
    // 4784 003F;	
    // (䞄) CJK UNIFIED IDEOGRAPH-4784	[FB80 C784 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4784, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC784, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_141)
{
    // 4784 0061;	
    // (䞄) CJK UNIFIED IDEOGRAPH-4784	[FB80 C784 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4784, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_142)
{
    // 4784 0041;	
    // (䞄) CJK UNIFIED IDEOGRAPH-4784	[FB80 C784 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4784, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_143)
{
    // 4784 0062;	
    // (䞄) CJK UNIFIED IDEOGRAPH-4784	[FB80 C784 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4784, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC784, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_144)
{
    // 4785 0021;	
    // (䞅) CJK UNIFIED IDEOGRAPH-4785	[FB80 C785 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4785, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC785, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_145)
{
    // 4785 003F;	
    // (䞅) CJK UNIFIED IDEOGRAPH-4785	[FB80 C785 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4785, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC785, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_146)
{
    // 4785 0061;	
    // (䞅) CJK UNIFIED IDEOGRAPH-4785	[FB80 C785 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4785, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_147)
{
    // 4785 0041;	
    // (䞅) CJK UNIFIED IDEOGRAPH-4785	[FB80 C785 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4785, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_148)
{
    // 4785 0062;	
    // (䞅) CJK UNIFIED IDEOGRAPH-4785	[FB80 C785 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4785, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC785, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_149)
{
    // 4786 0021;	
    // (䞆) CJK UNIFIED IDEOGRAPH-4786	[FB80 C786 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4786, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC786, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_150)
{
    // 4786 003F;	
    // (䞆) CJK UNIFIED IDEOGRAPH-4786	[FB80 C786 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4786, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC786, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_151)
{
    // 4786 0061;	
    // (䞆) CJK UNIFIED IDEOGRAPH-4786	[FB80 C786 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4786, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_152)
{
    // 4786 0041;	
    // (䞆) CJK UNIFIED IDEOGRAPH-4786	[FB80 C786 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4786, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_153)
{
    // 4786 0062;	
    // (䞆) CJK UNIFIED IDEOGRAPH-4786	[FB80 C786 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4786, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC786, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_154)
{
    // 4787 0021;	
    // (䞇) CJK UNIFIED IDEOGRAPH-4787	[FB80 C787 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4787, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC787, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_155)
{
    // 4787 003F;	
    // (䞇) CJK UNIFIED IDEOGRAPH-4787	[FB80 C787 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4787, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC787, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_156)
{
    // 4787 0061;	
    // (䞇) CJK UNIFIED IDEOGRAPH-4787	[FB80 C787 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4787, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_157)
{
    // 4787 0041;	
    // (䞇) CJK UNIFIED IDEOGRAPH-4787	[FB80 C787 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4787, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_158)
{
    // 4787 0062;	
    // (䞇) CJK UNIFIED IDEOGRAPH-4787	[FB80 C787 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4787, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC787, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_159)
{
    // 4788 0021;	
    // (䞈) CJK UNIFIED IDEOGRAPH-4788	[FB80 C788 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4788, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC788, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_160)
{
    // 4788 003F;	
    // (䞈) CJK UNIFIED IDEOGRAPH-4788	[FB80 C788 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4788, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC788, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_161)
{
    // 4788 0061;	
    // (䞈) CJK UNIFIED IDEOGRAPH-4788	[FB80 C788 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4788, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_162)
{
    // 4788 0041;	
    // (䞈) CJK UNIFIED IDEOGRAPH-4788	[FB80 C788 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4788, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_163)
{
    // 4788 0062;	
    // (䞈) CJK UNIFIED IDEOGRAPH-4788	[FB80 C788 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4788, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC788, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_164)
{
    // 4789 0021;	
    // (䞉) CJK UNIFIED IDEOGRAPH-4789	[FB80 C789 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4789, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC789, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_165)
{
    // 4789 003F;	
    // (䞉) CJK UNIFIED IDEOGRAPH-4789	[FB80 C789 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4789, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC789, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_166)
{
    // 4789 0061;	
    // (䞉) CJK UNIFIED IDEOGRAPH-4789	[FB80 C789 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4789, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_167)
{
    // 4789 0041;	
    // (䞉) CJK UNIFIED IDEOGRAPH-4789	[FB80 C789 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4789, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_168)
{
    // 4789 0062;	
    // (䞉) CJK UNIFIED IDEOGRAPH-4789	[FB80 C789 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4789, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC789, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_169)
{
    // 478A 0021;	
    // (䞊) CJK UNIFIED IDEOGRAPH-478A	[FB80 C78A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC78A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_170)
{
    // 478A 003F;	
    // (䞊) CJK UNIFIED IDEOGRAPH-478A	[FB80 C78A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC78A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_171)
{
    // 478A 0061;	
    // (䞊) CJK UNIFIED IDEOGRAPH-478A	[FB80 C78A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC78A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_172)
{
    // 478A 0041;	
    // (䞊) CJK UNIFIED IDEOGRAPH-478A	[FB80 C78A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x478A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC78A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_173)
{
    // 478A 0062;	
    // (䞊) CJK UNIFIED IDEOGRAPH-478A	[FB80 C78A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC78A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_174)
{
    // 478B 0021;	
    // (䞋) CJK UNIFIED IDEOGRAPH-478B	[FB80 C78B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC78B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_175)
{
    // 478B 003F;	
    // (䞋) CJK UNIFIED IDEOGRAPH-478B	[FB80 C78B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC78B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_176)
{
    // 478B 0061;	
    // (䞋) CJK UNIFIED IDEOGRAPH-478B	[FB80 C78B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC78B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_177)
{
    // 478B 0041;	
    // (䞋) CJK UNIFIED IDEOGRAPH-478B	[FB80 C78B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x478B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC78B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_178)
{
    // 478B 0062;	
    // (䞋) CJK UNIFIED IDEOGRAPH-478B	[FB80 C78B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC78B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_179)
{
    // 478C 0021;	
    // (䞌) CJK UNIFIED IDEOGRAPH-478C	[FB80 C78C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC78C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_180)
{
    // 478C 003F;	
    // (䞌) CJK UNIFIED IDEOGRAPH-478C	[FB80 C78C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC78C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_181)
{
    // 478C 0061;	
    // (䞌) CJK UNIFIED IDEOGRAPH-478C	[FB80 C78C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC78C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_182)
{
    // 478C 0041;	
    // (䞌) CJK UNIFIED IDEOGRAPH-478C	[FB80 C78C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x478C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC78C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_183)
{
    // 478C 0062;	
    // (䞌) CJK UNIFIED IDEOGRAPH-478C	[FB80 C78C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC78C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_184)
{
    // 478D 0021;	
    // (䞍) CJK UNIFIED IDEOGRAPH-478D	[FB80 C78D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC78D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_185)
{
    // 478D 003F;	
    // (䞍) CJK UNIFIED IDEOGRAPH-478D	[FB80 C78D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC78D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_186)
{
    // 478D 0061;	
    // (䞍) CJK UNIFIED IDEOGRAPH-478D	[FB80 C78D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC78D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_187)
{
    // 478D 0041;	
    // (䞍) CJK UNIFIED IDEOGRAPH-478D	[FB80 C78D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x478D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC78D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_188)
{
    // 478D 0062;	
    // (䞍) CJK UNIFIED IDEOGRAPH-478D	[FB80 C78D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC78D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_189)
{
    // 478E 0021;	
    // (䞎) CJK UNIFIED IDEOGRAPH-478E	[FB80 C78E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC78E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_190)
{
    // 478E 003F;	
    // (䞎) CJK UNIFIED IDEOGRAPH-478E	[FB80 C78E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC78E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_191)
{
    // 478E 0061;	
    // (䞎) CJK UNIFIED IDEOGRAPH-478E	[FB80 C78E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC78E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_192)
{
    // 478E 0041;	
    // (䞎) CJK UNIFIED IDEOGRAPH-478E	[FB80 C78E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x478E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC78E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_193)
{
    // 478E 0062;	
    // (䞎) CJK UNIFIED IDEOGRAPH-478E	[FB80 C78E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC78E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_194)
{
    // 478F 0021;	
    // (䞏) CJK UNIFIED IDEOGRAPH-478F	[FB80 C78F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC78F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_195)
{
    // 478F 003F;	
    // (䞏) CJK UNIFIED IDEOGRAPH-478F	[FB80 C78F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC78F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_196)
{
    // 478F 0061;	
    // (䞏) CJK UNIFIED IDEOGRAPH-478F	[FB80 C78F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC78F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_197)
{
    // 478F 0041;	
    // (䞏) CJK UNIFIED IDEOGRAPH-478F	[FB80 C78F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x478F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC78F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_198)
{
    // 478F 0062;	
    // (䞏) CJK UNIFIED IDEOGRAPH-478F	[FB80 C78F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x478F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC78F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_199)
{
    // 4790 0021;	
    // (䞐) CJK UNIFIED IDEOGRAPH-4790	[FB80 C790 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4790, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC790, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_200)
{
    // 4790 003F;	
    // (䞐) CJK UNIFIED IDEOGRAPH-4790	[FB80 C790 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4790, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC790, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_201)
{
    // 4790 0061;	
    // (䞐) CJK UNIFIED IDEOGRAPH-4790	[FB80 C790 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4790, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_202)
{
    // 4790 0041;	
    // (䞐) CJK UNIFIED IDEOGRAPH-4790	[FB80 C790 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4790, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_203)
{
    // 4790 0062;	
    // (䞐) CJK UNIFIED IDEOGRAPH-4790	[FB80 C790 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4790, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC790, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_204)
{
    // 4791 0021;	
    // (䞑) CJK UNIFIED IDEOGRAPH-4791	[FB80 C791 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4791, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC791, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_205)
{
    // 4791 003F;	
    // (䞑) CJK UNIFIED IDEOGRAPH-4791	[FB80 C791 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4791, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC791, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_206)
{
    // 4791 0061;	
    // (䞑) CJK UNIFIED IDEOGRAPH-4791	[FB80 C791 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4791, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_207)
{
    // 4791 0041;	
    // (䞑) CJK UNIFIED IDEOGRAPH-4791	[FB80 C791 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4791, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_208)
{
    // 4791 0062;	
    // (䞑) CJK UNIFIED IDEOGRAPH-4791	[FB80 C791 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4791, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC791, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_209)
{
    // 4792 0021;	
    // (䞒) CJK UNIFIED IDEOGRAPH-4792	[FB80 C792 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4792, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC792, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_210)
{
    // 4792 003F;	
    // (䞒) CJK UNIFIED IDEOGRAPH-4792	[FB80 C792 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4792, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC792, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_211)
{
    // 4792 0061;	
    // (䞒) CJK UNIFIED IDEOGRAPH-4792	[FB80 C792 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4792, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_212)
{
    // 4792 0041;	
    // (䞒) CJK UNIFIED IDEOGRAPH-4792	[FB80 C792 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4792, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_213)
{
    // 4792 0062;	
    // (䞒) CJK UNIFIED IDEOGRAPH-4792	[FB80 C792 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4792, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC792, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_214)
{
    // 4793 0021;	
    // (䞓) CJK UNIFIED IDEOGRAPH-4793	[FB80 C793 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4793, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC793, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_215)
{
    // 4793 003F;	
    // (䞓) CJK UNIFIED IDEOGRAPH-4793	[FB80 C793 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4793, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC793, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_216)
{
    // 4793 0061;	
    // (䞓) CJK UNIFIED IDEOGRAPH-4793	[FB80 C793 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4793, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_217)
{
    // 4793 0041;	
    // (䞓) CJK UNIFIED IDEOGRAPH-4793	[FB80 C793 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4793, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_218)
{
    // 4793 0062;	
    // (䞓) CJK UNIFIED IDEOGRAPH-4793	[FB80 C793 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4793, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC793, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_219)
{
    // 4794 0021;	
    // (䞔) CJK UNIFIED IDEOGRAPH-4794	[FB80 C794 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4794, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC794, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_220)
{
    // 4794 003F;	
    // (䞔) CJK UNIFIED IDEOGRAPH-4794	[FB80 C794 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4794, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC794, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_221)
{
    // 4794 0061;	
    // (䞔) CJK UNIFIED IDEOGRAPH-4794	[FB80 C794 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4794, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_222)
{
    // 4794 0041;	
    // (䞔) CJK UNIFIED IDEOGRAPH-4794	[FB80 C794 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4794, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_223)
{
    // 4794 0062;	
    // (䞔) CJK UNIFIED IDEOGRAPH-4794	[FB80 C794 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4794, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC794, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_224)
{
    // 4795 0021;	
    // (䞕) CJK UNIFIED IDEOGRAPH-4795	[FB80 C795 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4795, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC795, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_225)
{
    // 4795 003F;	
    // (䞕) CJK UNIFIED IDEOGRAPH-4795	[FB80 C795 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4795, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC795, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_226)
{
    // 4795 0061;	
    // (䞕) CJK UNIFIED IDEOGRAPH-4795	[FB80 C795 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4795, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_227)
{
    // 4795 0041;	
    // (䞕) CJK UNIFIED IDEOGRAPH-4795	[FB80 C795 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4795, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_228)
{
    // 4795 0062;	
    // (䞕) CJK UNIFIED IDEOGRAPH-4795	[FB80 C795 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4795, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC795, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_229)
{
    // 4796 0021;	
    // (䞖) CJK UNIFIED IDEOGRAPH-4796	[FB80 C796 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4796, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC796, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_230)
{
    // 4796 003F;	
    // (䞖) CJK UNIFIED IDEOGRAPH-4796	[FB80 C796 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4796, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC796, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_231)
{
    // 4796 0061;	
    // (䞖) CJK UNIFIED IDEOGRAPH-4796	[FB80 C796 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4796, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_232)
{
    // 4796 0041;	
    // (䞖) CJK UNIFIED IDEOGRAPH-4796	[FB80 C796 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4796, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_233)
{
    // 4796 0062;	
    // (䞖) CJK UNIFIED IDEOGRAPH-4796	[FB80 C796 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4796, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC796, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_234)
{
    // 4797 0021;	
    // (䞗) CJK UNIFIED IDEOGRAPH-4797	[FB80 C797 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4797, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC797, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_235)
{
    // 4797 003F;	
    // (䞗) CJK UNIFIED IDEOGRAPH-4797	[FB80 C797 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4797, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC797, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_236)
{
    // 4797 0061;	
    // (䞗) CJK UNIFIED IDEOGRAPH-4797	[FB80 C797 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4797, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_237)
{
    // 4797 0041;	
    // (䞗) CJK UNIFIED IDEOGRAPH-4797	[FB80 C797 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4797, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_238)
{
    // 4797 0062;	
    // (䞗) CJK UNIFIED IDEOGRAPH-4797	[FB80 C797 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4797, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC797, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_239)
{
    // 4798 0021;	
    // (䞘) CJK UNIFIED IDEOGRAPH-4798	[FB80 C798 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4798, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC798, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_240)
{
    // 4798 003F;	
    // (䞘) CJK UNIFIED IDEOGRAPH-4798	[FB80 C798 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4798, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC798, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_241)
{
    // 4798 0061;	
    // (䞘) CJK UNIFIED IDEOGRAPH-4798	[FB80 C798 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4798, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_242)
{
    // 4798 0041;	
    // (䞘) CJK UNIFIED IDEOGRAPH-4798	[FB80 C798 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4798, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_243)
{
    // 4798 0062;	
    // (䞘) CJK UNIFIED IDEOGRAPH-4798	[FB80 C798 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4798, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC798, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_244)
{
    // 4799 0021;	
    // (䞙) CJK UNIFIED IDEOGRAPH-4799	[FB80 C799 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4799, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC799, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_245)
{
    // 4799 003F;	
    // (䞙) CJK UNIFIED IDEOGRAPH-4799	[FB80 C799 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4799, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC799, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_246)
{
    // 4799 0061;	
    // (䞙) CJK UNIFIED IDEOGRAPH-4799	[FB80 C799 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4799, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_247)
{
    // 4799 0041;	
    // (䞙) CJK UNIFIED IDEOGRAPH-4799	[FB80 C799 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4799, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_248)
{
    // 4799 0062;	
    // (䞙) CJK UNIFIED IDEOGRAPH-4799	[FB80 C799 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4799, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC799, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_249)
{
    // 479A 0021;	
    // (䞚) CJK UNIFIED IDEOGRAPH-479A	[FB80 C79A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC79A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_250)
{
    // 479A 003F;	
    // (䞚) CJK UNIFIED IDEOGRAPH-479A	[FB80 C79A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC79A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_251)
{
    // 479A 0061;	
    // (䞚) CJK UNIFIED IDEOGRAPH-479A	[FB80 C79A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC79A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_252)
{
    // 479A 0041;	
    // (䞚) CJK UNIFIED IDEOGRAPH-479A	[FB80 C79A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x479A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC79A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_253)
{
    // 479A 0062;	
    // (䞚) CJK UNIFIED IDEOGRAPH-479A	[FB80 C79A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC79A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_254)
{
    // 479B 0021;	
    // (䞛) CJK UNIFIED IDEOGRAPH-479B	[FB80 C79B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC79B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_255)
{
    // 479B 003F;	
    // (䞛) CJK UNIFIED IDEOGRAPH-479B	[FB80 C79B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC79B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_256)
{
    // 479B 0061;	
    // (䞛) CJK UNIFIED IDEOGRAPH-479B	[FB80 C79B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC79B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_257)
{
    // 479B 0041;	
    // (䞛) CJK UNIFIED IDEOGRAPH-479B	[FB80 C79B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x479B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC79B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_258)
{
    // 479B 0062;	
    // (䞛) CJK UNIFIED IDEOGRAPH-479B	[FB80 C79B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC79B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_259)
{
    // 479C 0021;	
    // (䞜) CJK UNIFIED IDEOGRAPH-479C	[FB80 C79C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC79C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_260)
{
    // 479C 003F;	
    // (䞜) CJK UNIFIED IDEOGRAPH-479C	[FB80 C79C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC79C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_261)
{
    // 479C 0061;	
    // (䞜) CJK UNIFIED IDEOGRAPH-479C	[FB80 C79C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC79C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_262)
{
    // 479C 0041;	
    // (䞜) CJK UNIFIED IDEOGRAPH-479C	[FB80 C79C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x479C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC79C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_263)
{
    // 479C 0062;	
    // (䞜) CJK UNIFIED IDEOGRAPH-479C	[FB80 C79C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC79C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_264)
{
    // 479D 0021;	
    // (䞝) CJK UNIFIED IDEOGRAPH-479D	[FB80 C79D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC79D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_265)
{
    // 479D 003F;	
    // (䞝) CJK UNIFIED IDEOGRAPH-479D	[FB80 C79D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC79D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_266)
{
    // 479D 0061;	
    // (䞝) CJK UNIFIED IDEOGRAPH-479D	[FB80 C79D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC79D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_267)
{
    // 479D 0041;	
    // (䞝) CJK UNIFIED IDEOGRAPH-479D	[FB80 C79D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x479D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC79D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_268)
{
    // 479D 0062;	
    // (䞝) CJK UNIFIED IDEOGRAPH-479D	[FB80 C79D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC79D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_269)
{
    // 479E 0021;	
    // (䞞) CJK UNIFIED IDEOGRAPH-479E	[FB80 C79E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC79E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_270)
{
    // 479E 003F;	
    // (䞞) CJK UNIFIED IDEOGRAPH-479E	[FB80 C79E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC79E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_271)
{
    // 479E 0061;	
    // (䞞) CJK UNIFIED IDEOGRAPH-479E	[FB80 C79E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC79E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_272)
{
    // 479E 0041;	
    // (䞞) CJK UNIFIED IDEOGRAPH-479E	[FB80 C79E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x479E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC79E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_273)
{
    // 479E 0062;	
    // (䞞) CJK UNIFIED IDEOGRAPH-479E	[FB80 C79E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC79E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_274)
{
    // 479F 0021;	
    // (䞟) CJK UNIFIED IDEOGRAPH-479F	[FB80 C79F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC79F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_275)
{
    // 479F 003F;	
    // (䞟) CJK UNIFIED IDEOGRAPH-479F	[FB80 C79F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC79F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_276)
{
    // 479F 0061;	
    // (䞟) CJK UNIFIED IDEOGRAPH-479F	[FB80 C79F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC79F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_277)
{
    // 479F 0041;	
    // (䞟) CJK UNIFIED IDEOGRAPH-479F	[FB80 C79F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x479F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC79F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_278)
{
    // 479F 0062;	
    // (䞟) CJK UNIFIED IDEOGRAPH-479F	[FB80 C79F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x479F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC79F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_279)
{
    // 47A0 0021;	
    // (䞠) CJK UNIFIED IDEOGRAPH-47A0	[FB80 C7A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_280)
{
    // 47A0 003F;	
    // (䞠) CJK UNIFIED IDEOGRAPH-47A0	[FB80 C7A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_281)
{
    // 47A0 0061;	
    // (䞠) CJK UNIFIED IDEOGRAPH-47A0	[FB80 C7A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_282)
{
    // 47A0 0041;	
    // (䞠) CJK UNIFIED IDEOGRAPH-47A0	[FB80 C7A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_283)
{
    // 47A0 0062;	
    // (䞠) CJK UNIFIED IDEOGRAPH-47A0	[FB80 C7A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_284)
{
    // 47A1 0021;	
    // (䞡) CJK UNIFIED IDEOGRAPH-47A1	[FB80 C7A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_285)
{
    // 47A1 003F;	
    // (䞡) CJK UNIFIED IDEOGRAPH-47A1	[FB80 C7A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_286)
{
    // 47A1 0061;	
    // (䞡) CJK UNIFIED IDEOGRAPH-47A1	[FB80 C7A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_287)
{
    // 47A1 0041;	
    // (䞡) CJK UNIFIED IDEOGRAPH-47A1	[FB80 C7A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_288)
{
    // 47A1 0062;	
    // (䞡) CJK UNIFIED IDEOGRAPH-47A1	[FB80 C7A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_289)
{
    // 47A2 0021;	
    // (䞢) CJK UNIFIED IDEOGRAPH-47A2	[FB80 C7A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_290)
{
    // 47A2 003F;	
    // (䞢) CJK UNIFIED IDEOGRAPH-47A2	[FB80 C7A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_291)
{
    // 47A2 0061;	
    // (䞢) CJK UNIFIED IDEOGRAPH-47A2	[FB80 C7A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_292)
{
    // 47A2 0041;	
    // (䞢) CJK UNIFIED IDEOGRAPH-47A2	[FB80 C7A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_293)
{
    // 47A2 0062;	
    // (䞢) CJK UNIFIED IDEOGRAPH-47A2	[FB80 C7A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_294)
{
    // 47A3 0021;	
    // (䞣) CJK UNIFIED IDEOGRAPH-47A3	[FB80 C7A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_295)
{
    // 47A3 003F;	
    // (䞣) CJK UNIFIED IDEOGRAPH-47A3	[FB80 C7A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_296)
{
    // 47A3 0061;	
    // (䞣) CJK UNIFIED IDEOGRAPH-47A3	[FB80 C7A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_297)
{
    // 47A3 0041;	
    // (䞣) CJK UNIFIED IDEOGRAPH-47A3	[FB80 C7A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_298)
{
    // 47A3 0062;	
    // (䞣) CJK UNIFIED IDEOGRAPH-47A3	[FB80 C7A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_299)
{
    // 47A4 0021;	
    // (䞤) CJK UNIFIED IDEOGRAPH-47A4	[FB80 C7A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_300)
{
    // 47A4 003F;	
    // (䞤) CJK UNIFIED IDEOGRAPH-47A4	[FB80 C7A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_301)
{
    // 47A4 0061;	
    // (䞤) CJK UNIFIED IDEOGRAPH-47A4	[FB80 C7A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_302)
{
    // 47A4 0041;	
    // (䞤) CJK UNIFIED IDEOGRAPH-47A4	[FB80 C7A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_303)
{
    // 47A4 0062;	
    // (䞤) CJK UNIFIED IDEOGRAPH-47A4	[FB80 C7A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_304)
{
    // 47A5 0021;	
    // (䞥) CJK UNIFIED IDEOGRAPH-47A5	[FB80 C7A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_305)
{
    // 47A5 003F;	
    // (䞥) CJK UNIFIED IDEOGRAPH-47A5	[FB80 C7A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_306)
{
    // 47A5 0061;	
    // (䞥) CJK UNIFIED IDEOGRAPH-47A5	[FB80 C7A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_307)
{
    // 47A5 0041;	
    // (䞥) CJK UNIFIED IDEOGRAPH-47A5	[FB80 C7A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_308)
{
    // 47A5 0062;	
    // (䞥) CJK UNIFIED IDEOGRAPH-47A5	[FB80 C7A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_309)
{
    // 47A6 0021;	
    // (䞦) CJK UNIFIED IDEOGRAPH-47A6	[FB80 C7A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_310)
{
    // 47A6 003F;	
    // (䞦) CJK UNIFIED IDEOGRAPH-47A6	[FB80 C7A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_311)
{
    // 47A6 0061;	
    // (䞦) CJK UNIFIED IDEOGRAPH-47A6	[FB80 C7A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_312)
{
    // 47A6 0041;	
    // (䞦) CJK UNIFIED IDEOGRAPH-47A6	[FB80 C7A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_313)
{
    // 47A6 0062;	
    // (䞦) CJK UNIFIED IDEOGRAPH-47A6	[FB80 C7A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_314)
{
    // 47A7 0021;	
    // (䞧) CJK UNIFIED IDEOGRAPH-47A7	[FB80 C7A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_315)
{
    // 47A7 003F;	
    // (䞧) CJK UNIFIED IDEOGRAPH-47A7	[FB80 C7A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_316)
{
    // 47A7 0061;	
    // (䞧) CJK UNIFIED IDEOGRAPH-47A7	[FB80 C7A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_317)
{
    // 47A7 0041;	
    // (䞧) CJK UNIFIED IDEOGRAPH-47A7	[FB80 C7A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_318)
{
    // 47A7 0062;	
    // (䞧) CJK UNIFIED IDEOGRAPH-47A7	[FB80 C7A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_319)
{
    // 47A8 0021;	
    // (䞨) CJK UNIFIED IDEOGRAPH-47A8	[FB80 C7A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_320)
{
    // 47A8 003F;	
    // (䞨) CJK UNIFIED IDEOGRAPH-47A8	[FB80 C7A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_321)
{
    // 47A8 0061;	
    // (䞨) CJK UNIFIED IDEOGRAPH-47A8	[FB80 C7A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_322)
{
    // 47A8 0041;	
    // (䞨) CJK UNIFIED IDEOGRAPH-47A8	[FB80 C7A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_323)
{
    // 47A8 0062;	
    // (䞨) CJK UNIFIED IDEOGRAPH-47A8	[FB80 C7A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_324)
{
    // 47A9 0021;	
    // (䞩) CJK UNIFIED IDEOGRAPH-47A9	[FB80 C7A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_325)
{
    // 47A9 003F;	
    // (䞩) CJK UNIFIED IDEOGRAPH-47A9	[FB80 C7A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_326)
{
    // 47A9 0061;	
    // (䞩) CJK UNIFIED IDEOGRAPH-47A9	[FB80 C7A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_327)
{
    // 47A9 0041;	
    // (䞩) CJK UNIFIED IDEOGRAPH-47A9	[FB80 C7A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_328)
{
    // 47A9 0062;	
    // (䞩) CJK UNIFIED IDEOGRAPH-47A9	[FB80 C7A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_329)
{
    // 47AA 0021;	
    // (䞪) CJK UNIFIED IDEOGRAPH-47AA	[FB80 C7AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_330)
{
    // 47AA 003F;	
    // (䞪) CJK UNIFIED IDEOGRAPH-47AA	[FB80 C7AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_331)
{
    // 47AA 0061;	
    // (䞪) CJK UNIFIED IDEOGRAPH-47AA	[FB80 C7AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_332)
{
    // 47AA 0041;	
    // (䞪) CJK UNIFIED IDEOGRAPH-47AA	[FB80 C7AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_333)
{
    // 47AA 0062;	
    // (䞪) CJK UNIFIED IDEOGRAPH-47AA	[FB80 C7AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_334)
{
    // 47AB 0021;	
    // (䞫) CJK UNIFIED IDEOGRAPH-47AB	[FB80 C7AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_335)
{
    // 47AB 003F;	
    // (䞫) CJK UNIFIED IDEOGRAPH-47AB	[FB80 C7AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_336)
{
    // 47AB 0061;	
    // (䞫) CJK UNIFIED IDEOGRAPH-47AB	[FB80 C7AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_337)
{
    // 47AB 0041;	
    // (䞫) CJK UNIFIED IDEOGRAPH-47AB	[FB80 C7AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_338)
{
    // 47AB 0062;	
    // (䞫) CJK UNIFIED IDEOGRAPH-47AB	[FB80 C7AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_339)
{
    // 47AC 0021;	
    // (䞬) CJK UNIFIED IDEOGRAPH-47AC	[FB80 C7AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_340)
{
    // 47AC 003F;	
    // (䞬) CJK UNIFIED IDEOGRAPH-47AC	[FB80 C7AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_341)
{
    // 47AC 0061;	
    // (䞬) CJK UNIFIED IDEOGRAPH-47AC	[FB80 C7AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_342)
{
    // 47AC 0041;	
    // (䞬) CJK UNIFIED IDEOGRAPH-47AC	[FB80 C7AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_343)
{
    // 47AC 0062;	
    // (䞬) CJK UNIFIED IDEOGRAPH-47AC	[FB80 C7AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_344)
{
    // 47AD 0021;	
    // (䞭) CJK UNIFIED IDEOGRAPH-47AD	[FB80 C7AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_345)
{
    // 47AD 003F;	
    // (䞭) CJK UNIFIED IDEOGRAPH-47AD	[FB80 C7AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_346)
{
    // 47AD 0061;	
    // (䞭) CJK UNIFIED IDEOGRAPH-47AD	[FB80 C7AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_347)
{
    // 47AD 0041;	
    // (䞭) CJK UNIFIED IDEOGRAPH-47AD	[FB80 C7AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_348)
{
    // 47AD 0062;	
    // (䞭) CJK UNIFIED IDEOGRAPH-47AD	[FB80 C7AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_349)
{
    // 47AE 0021;	
    // (䞮) CJK UNIFIED IDEOGRAPH-47AE	[FB80 C7AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_350)
{
    // 47AE 003F;	
    // (䞮) CJK UNIFIED IDEOGRAPH-47AE	[FB80 C7AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_351)
{
    // 47AE 0061;	
    // (䞮) CJK UNIFIED IDEOGRAPH-47AE	[FB80 C7AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_352)
{
    // 47AE 0041;	
    // (䞮) CJK UNIFIED IDEOGRAPH-47AE	[FB80 C7AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_353)
{
    // 47AE 0062;	
    // (䞮) CJK UNIFIED IDEOGRAPH-47AE	[FB80 C7AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_354)
{
    // 47AF 0021;	
    // (䞯) CJK UNIFIED IDEOGRAPH-47AF	[FB80 C7AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_355)
{
    // 47AF 003F;	
    // (䞯) CJK UNIFIED IDEOGRAPH-47AF	[FB80 C7AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_356)
{
    // 47AF 0061;	
    // (䞯) CJK UNIFIED IDEOGRAPH-47AF	[FB80 C7AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_357)
{
    // 47AF 0041;	
    // (䞯) CJK UNIFIED IDEOGRAPH-47AF	[FB80 C7AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_358)
{
    // 47AF 0062;	
    // (䞯) CJK UNIFIED IDEOGRAPH-47AF	[FB80 C7AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_359)
{
    // 47B0 0021;	
    // (䞰) CJK UNIFIED IDEOGRAPH-47B0	[FB80 C7B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_360)
{
    // 47B0 003F;	
    // (䞰) CJK UNIFIED IDEOGRAPH-47B0	[FB80 C7B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_361)
{
    // 47B0 0061;	
    // (䞰) CJK UNIFIED IDEOGRAPH-47B0	[FB80 C7B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_362)
{
    // 47B0 0041;	
    // (䞰) CJK UNIFIED IDEOGRAPH-47B0	[FB80 C7B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_363)
{
    // 47B0 0062;	
    // (䞰) CJK UNIFIED IDEOGRAPH-47B0	[FB80 C7B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_364)
{
    // 47B1 0021;	
    // (䞱) CJK UNIFIED IDEOGRAPH-47B1	[FB80 C7B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_365)
{
    // 47B1 003F;	
    // (䞱) CJK UNIFIED IDEOGRAPH-47B1	[FB80 C7B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_366)
{
    // 47B1 0061;	
    // (䞱) CJK UNIFIED IDEOGRAPH-47B1	[FB80 C7B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_367)
{
    // 47B1 0041;	
    // (䞱) CJK UNIFIED IDEOGRAPH-47B1	[FB80 C7B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_368)
{
    // 47B1 0062;	
    // (䞱) CJK UNIFIED IDEOGRAPH-47B1	[FB80 C7B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_369)
{
    // 47B2 0021;	
    // (䞲) CJK UNIFIED IDEOGRAPH-47B2	[FB80 C7B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_370)
{
    // 47B2 003F;	
    // (䞲) CJK UNIFIED IDEOGRAPH-47B2	[FB80 C7B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_371)
{
    // 47B2 0061;	
    // (䞲) CJK UNIFIED IDEOGRAPH-47B2	[FB80 C7B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_372)
{
    // 47B2 0041;	
    // (䞲) CJK UNIFIED IDEOGRAPH-47B2	[FB80 C7B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_373)
{
    // 47B2 0062;	
    // (䞲) CJK UNIFIED IDEOGRAPH-47B2	[FB80 C7B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_374)
{
    // 47B3 0021;	
    // (䞳) CJK UNIFIED IDEOGRAPH-47B3	[FB80 C7B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_375)
{
    // 47B3 003F;	
    // (䞳) CJK UNIFIED IDEOGRAPH-47B3	[FB80 C7B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_376)
{
    // 47B3 0061;	
    // (䞳) CJK UNIFIED IDEOGRAPH-47B3	[FB80 C7B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_377)
{
    // 47B3 0041;	
    // (䞳) CJK UNIFIED IDEOGRAPH-47B3	[FB80 C7B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_378)
{
    // 47B3 0062;	
    // (䞳) CJK UNIFIED IDEOGRAPH-47B3	[FB80 C7B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_379)
{
    // 47B4 0021;	
    // (䞴) CJK UNIFIED IDEOGRAPH-47B4	[FB80 C7B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_380)
{
    // 47B4 003F;	
    // (䞴) CJK UNIFIED IDEOGRAPH-47B4	[FB80 C7B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_381)
{
    // 47B4 0061;	
    // (䞴) CJK UNIFIED IDEOGRAPH-47B4	[FB80 C7B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_382)
{
    // 47B4 0041;	
    // (䞴) CJK UNIFIED IDEOGRAPH-47B4	[FB80 C7B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_383)
{
    // 47B4 0062;	
    // (䞴) CJK UNIFIED IDEOGRAPH-47B4	[FB80 C7B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_384)
{
    // 47B5 0021;	
    // (䞵) CJK UNIFIED IDEOGRAPH-47B5	[FB80 C7B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_385)
{
    // 47B5 003F;	
    // (䞵) CJK UNIFIED IDEOGRAPH-47B5	[FB80 C7B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_386)
{
    // 47B5 0061;	
    // (䞵) CJK UNIFIED IDEOGRAPH-47B5	[FB80 C7B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_387)
{
    // 47B5 0041;	
    // (䞵) CJK UNIFIED IDEOGRAPH-47B5	[FB80 C7B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_388)
{
    // 47B5 0062;	
    // (䞵) CJK UNIFIED IDEOGRAPH-47B5	[FB80 C7B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_389)
{
    // 47B6 0021;	
    // (䞶) CJK UNIFIED IDEOGRAPH-47B6	[FB80 C7B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_390)
{
    // 47B6 003F;	
    // (䞶) CJK UNIFIED IDEOGRAPH-47B6	[FB80 C7B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_391)
{
    // 47B6 0061;	
    // (䞶) CJK UNIFIED IDEOGRAPH-47B6	[FB80 C7B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_392)
{
    // 47B6 0041;	
    // (䞶) CJK UNIFIED IDEOGRAPH-47B6	[FB80 C7B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_393)
{
    // 47B6 0062;	
    // (䞶) CJK UNIFIED IDEOGRAPH-47B6	[FB80 C7B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_394)
{
    // 47B7 0021;	
    // (䞷) CJK UNIFIED IDEOGRAPH-47B7	[FB80 C7B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_395)
{
    // 47B7 003F;	
    // (䞷) CJK UNIFIED IDEOGRAPH-47B7	[FB80 C7B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_396)
{
    // 47B7 0061;	
    // (䞷) CJK UNIFIED IDEOGRAPH-47B7	[FB80 C7B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_397)
{
    // 47B7 0041;	
    // (䞷) CJK UNIFIED IDEOGRAPH-47B7	[FB80 C7B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_398)
{
    // 47B7 0062;	
    // (䞷) CJK UNIFIED IDEOGRAPH-47B7	[FB80 C7B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_399)
{
    // 47B8 0021;	
    // (䞸) CJK UNIFIED IDEOGRAPH-47B8	[FB80 C7B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_400)
{
    // 47B8 003F;	
    // (䞸) CJK UNIFIED IDEOGRAPH-47B8	[FB80 C7B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_401)
{
    // 47B8 0061;	
    // (䞸) CJK UNIFIED IDEOGRAPH-47B8	[FB80 C7B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_402)
{
    // 47B8 0041;	
    // (䞸) CJK UNIFIED IDEOGRAPH-47B8	[FB80 C7B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_403)
{
    // 47B8 0062;	
    // (䞸) CJK UNIFIED IDEOGRAPH-47B8	[FB80 C7B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_404)
{
    // 47B9 0021;	
    // (䞹) CJK UNIFIED IDEOGRAPH-47B9	[FB80 C7B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_405)
{
    // 47B9 003F;	
    // (䞹) CJK UNIFIED IDEOGRAPH-47B9	[FB80 C7B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_406)
{
    // 47B9 0061;	
    // (䞹) CJK UNIFIED IDEOGRAPH-47B9	[FB80 C7B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_407)
{
    // 47B9 0041;	
    // (䞹) CJK UNIFIED IDEOGRAPH-47B9	[FB80 C7B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_408)
{
    // 47B9 0062;	
    // (䞹) CJK UNIFIED IDEOGRAPH-47B9	[FB80 C7B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_409)
{
    // 47BA 0021;	
    // (䞺) CJK UNIFIED IDEOGRAPH-47BA	[FB80 C7BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_410)
{
    // 47BA 003F;	
    // (䞺) CJK UNIFIED IDEOGRAPH-47BA	[FB80 C7BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_411)
{
    // 47BA 0061;	
    // (䞺) CJK UNIFIED IDEOGRAPH-47BA	[FB80 C7BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_412)
{
    // 47BA 0041;	
    // (䞺) CJK UNIFIED IDEOGRAPH-47BA	[FB80 C7BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_413)
{
    // 47BA 0062;	
    // (䞺) CJK UNIFIED IDEOGRAPH-47BA	[FB80 C7BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_414)
{
    // 47BB 0021;	
    // (䞻) CJK UNIFIED IDEOGRAPH-47BB	[FB80 C7BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_415)
{
    // 47BB 003F;	
    // (䞻) CJK UNIFIED IDEOGRAPH-47BB	[FB80 C7BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_416)
{
    // 47BB 0061;	
    // (䞻) CJK UNIFIED IDEOGRAPH-47BB	[FB80 C7BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_417)
{
    // 47BB 0041;	
    // (䞻) CJK UNIFIED IDEOGRAPH-47BB	[FB80 C7BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_418)
{
    // 47BB 0062;	
    // (䞻) CJK UNIFIED IDEOGRAPH-47BB	[FB80 C7BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_419)
{
    // 47BC 0021;	
    // (䞼) CJK UNIFIED IDEOGRAPH-47BC	[FB80 C7BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_420)
{
    // 47BC 003F;	
    // (䞼) CJK UNIFIED IDEOGRAPH-47BC	[FB80 C7BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_421)
{
    // 47BC 0061;	
    // (䞼) CJK UNIFIED IDEOGRAPH-47BC	[FB80 C7BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_422)
{
    // 47BC 0041;	
    // (䞼) CJK UNIFIED IDEOGRAPH-47BC	[FB80 C7BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_423)
{
    // 47BC 0062;	
    // (䞼) CJK UNIFIED IDEOGRAPH-47BC	[FB80 C7BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_424)
{
    // 47BD 0021;	
    // (䞽) CJK UNIFIED IDEOGRAPH-47BD	[FB80 C7BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_425)
{
    // 47BD 003F;	
    // (䞽) CJK UNIFIED IDEOGRAPH-47BD	[FB80 C7BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_426)
{
    // 47BD 0061;	
    // (䞽) CJK UNIFIED IDEOGRAPH-47BD	[FB80 C7BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_427)
{
    // 47BD 0041;	
    // (䞽) CJK UNIFIED IDEOGRAPH-47BD	[FB80 C7BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_428)
{
    // 47BD 0062;	
    // (䞽) CJK UNIFIED IDEOGRAPH-47BD	[FB80 C7BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_429)
{
    // 47BE 0021;	
    // (䞾) CJK UNIFIED IDEOGRAPH-47BE	[FB80 C7BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_430)
{
    // 47BE 003F;	
    // (䞾) CJK UNIFIED IDEOGRAPH-47BE	[FB80 C7BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_431)
{
    // 47BE 0061;	
    // (䞾) CJK UNIFIED IDEOGRAPH-47BE	[FB80 C7BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_432)
{
    // 47BE 0041;	
    // (䞾) CJK UNIFIED IDEOGRAPH-47BE	[FB80 C7BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_433)
{
    // 47BE 0062;	
    // (䞾) CJK UNIFIED IDEOGRAPH-47BE	[FB80 C7BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_434)
{
    // 47BF 0021;	
    // (䞿) CJK UNIFIED IDEOGRAPH-47BF	[FB80 C7BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_435)
{
    // 47BF 003F;	
    // (䞿) CJK UNIFIED IDEOGRAPH-47BF	[FB80 C7BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_436)
{
    // 47BF 0061;	
    // (䞿) CJK UNIFIED IDEOGRAPH-47BF	[FB80 C7BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_437)
{
    // 47BF 0041;	
    // (䞿) CJK UNIFIED IDEOGRAPH-47BF	[FB80 C7BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_438)
{
    // 47BF 0062;	
    // (䞿) CJK UNIFIED IDEOGRAPH-47BF	[FB80 C7BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_439)
{
    // 47C0 0021;	
    // (䟀) CJK UNIFIED IDEOGRAPH-47C0	[FB80 C7C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_440)
{
    // 47C0 003F;	
    // (䟀) CJK UNIFIED IDEOGRAPH-47C0	[FB80 C7C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_441)
{
    // 47C0 0061;	
    // (䟀) CJK UNIFIED IDEOGRAPH-47C0	[FB80 C7C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_442)
{
    // 47C0 0041;	
    // (䟀) CJK UNIFIED IDEOGRAPH-47C0	[FB80 C7C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_443)
{
    // 47C0 0062;	
    // (䟀) CJK UNIFIED IDEOGRAPH-47C0	[FB80 C7C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_444)
{
    // 47C1 0021;	
    // (䟁) CJK UNIFIED IDEOGRAPH-47C1	[FB80 C7C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_445)
{
    // 47C1 003F;	
    // (䟁) CJK UNIFIED IDEOGRAPH-47C1	[FB80 C7C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_446)
{
    // 47C1 0061;	
    // (䟁) CJK UNIFIED IDEOGRAPH-47C1	[FB80 C7C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_447)
{
    // 47C1 0041;	
    // (䟁) CJK UNIFIED IDEOGRAPH-47C1	[FB80 C7C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_448)
{
    // 47C1 0062;	
    // (䟁) CJK UNIFIED IDEOGRAPH-47C1	[FB80 C7C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_449)
{
    // 47C2 0021;	
    // (䟂) CJK UNIFIED IDEOGRAPH-47C2	[FB80 C7C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_450)
{
    // 47C2 003F;	
    // (䟂) CJK UNIFIED IDEOGRAPH-47C2	[FB80 C7C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_451)
{
    // 47C2 0061;	
    // (䟂) CJK UNIFIED IDEOGRAPH-47C2	[FB80 C7C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_452)
{
    // 47C2 0041;	
    // (䟂) CJK UNIFIED IDEOGRAPH-47C2	[FB80 C7C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_453)
{
    // 47C2 0062;	
    // (䟂) CJK UNIFIED IDEOGRAPH-47C2	[FB80 C7C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_454)
{
    // 47C3 0021;	
    // (䟃) CJK UNIFIED IDEOGRAPH-47C3	[FB80 C7C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_455)
{
    // 47C3 003F;	
    // (䟃) CJK UNIFIED IDEOGRAPH-47C3	[FB80 C7C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_456)
{
    // 47C3 0061;	
    // (䟃) CJK UNIFIED IDEOGRAPH-47C3	[FB80 C7C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_457)
{
    // 47C3 0041;	
    // (䟃) CJK UNIFIED IDEOGRAPH-47C3	[FB80 C7C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_458)
{
    // 47C3 0062;	
    // (䟃) CJK UNIFIED IDEOGRAPH-47C3	[FB80 C7C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_459)
{
    // 47C4 0021;	
    // (䟄) CJK UNIFIED IDEOGRAPH-47C4	[FB80 C7C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_460)
{
    // 47C4 003F;	
    // (䟄) CJK UNIFIED IDEOGRAPH-47C4	[FB80 C7C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_461)
{
    // 47C4 0061;	
    // (䟄) CJK UNIFIED IDEOGRAPH-47C4	[FB80 C7C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_462)
{
    // 47C4 0041;	
    // (䟄) CJK UNIFIED IDEOGRAPH-47C4	[FB80 C7C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_463)
{
    // 47C4 0062;	
    // (䟄) CJK UNIFIED IDEOGRAPH-47C4	[FB80 C7C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_464)
{
    // 47C5 0021;	
    // (䟅) CJK UNIFIED IDEOGRAPH-47C5	[FB80 C7C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_465)
{
    // 47C5 003F;	
    // (䟅) CJK UNIFIED IDEOGRAPH-47C5	[FB80 C7C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_466)
{
    // 47C5 0061;	
    // (䟅) CJK UNIFIED IDEOGRAPH-47C5	[FB80 C7C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_467)
{
    // 47C5 0041;	
    // (䟅) CJK UNIFIED IDEOGRAPH-47C5	[FB80 C7C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_468)
{
    // 47C5 0062;	
    // (䟅) CJK UNIFIED IDEOGRAPH-47C5	[FB80 C7C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_469)
{
    // 47C6 0021;	
    // (䟆) CJK UNIFIED IDEOGRAPH-47C6	[FB80 C7C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_470)
{
    // 47C6 003F;	
    // (䟆) CJK UNIFIED IDEOGRAPH-47C6	[FB80 C7C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_471)
{
    // 47C6 0061;	
    // (䟆) CJK UNIFIED IDEOGRAPH-47C6	[FB80 C7C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_472)
{
    // 47C6 0041;	
    // (䟆) CJK UNIFIED IDEOGRAPH-47C6	[FB80 C7C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_473)
{
    // 47C6 0062;	
    // (䟆) CJK UNIFIED IDEOGRAPH-47C6	[FB80 C7C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_474)
{
    // 47C7 0021;	
    // (䟇) CJK UNIFIED IDEOGRAPH-47C7	[FB80 C7C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_475)
{
    // 47C7 003F;	
    // (䟇) CJK UNIFIED IDEOGRAPH-47C7	[FB80 C7C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_476)
{
    // 47C7 0061;	
    // (䟇) CJK UNIFIED IDEOGRAPH-47C7	[FB80 C7C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_477)
{
    // 47C7 0041;	
    // (䟇) CJK UNIFIED IDEOGRAPH-47C7	[FB80 C7C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_478)
{
    // 47C7 0062;	
    // (䟇) CJK UNIFIED IDEOGRAPH-47C7	[FB80 C7C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_479)
{
    // 47C8 0021;	
    // (䟈) CJK UNIFIED IDEOGRAPH-47C8	[FB80 C7C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_480)
{
    // 47C8 003F;	
    // (䟈) CJK UNIFIED IDEOGRAPH-47C8	[FB80 C7C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_481)
{
    // 47C8 0061;	
    // (䟈) CJK UNIFIED IDEOGRAPH-47C8	[FB80 C7C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_482)
{
    // 47C8 0041;	
    // (䟈) CJK UNIFIED IDEOGRAPH-47C8	[FB80 C7C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_483)
{
    // 47C8 0062;	
    // (䟈) CJK UNIFIED IDEOGRAPH-47C8	[FB80 C7C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_484)
{
    // 47C9 0021;	
    // (䟉) CJK UNIFIED IDEOGRAPH-47C9	[FB80 C7C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_485)
{
    // 47C9 003F;	
    // (䟉) CJK UNIFIED IDEOGRAPH-47C9	[FB80 C7C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_486)
{
    // 47C9 0061;	
    // (䟉) CJK UNIFIED IDEOGRAPH-47C9	[FB80 C7C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_487)
{
    // 47C9 0041;	
    // (䟉) CJK UNIFIED IDEOGRAPH-47C9	[FB80 C7C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_488)
{
    // 47C9 0062;	
    // (䟉) CJK UNIFIED IDEOGRAPH-47C9	[FB80 C7C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_489)
{
    // 47CA 0021;	
    // (䟊) CJK UNIFIED IDEOGRAPH-47CA	[FB80 C7CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_490)
{
    // 47CA 003F;	
    // (䟊) CJK UNIFIED IDEOGRAPH-47CA	[FB80 C7CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_491)
{
    // 47CA 0061;	
    // (䟊) CJK UNIFIED IDEOGRAPH-47CA	[FB80 C7CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_492)
{
    // 47CA 0041;	
    // (䟊) CJK UNIFIED IDEOGRAPH-47CA	[FB80 C7CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_493)
{
    // 47CA 0062;	
    // (䟊) CJK UNIFIED IDEOGRAPH-47CA	[FB80 C7CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_494)
{
    // 47CB 0021;	
    // (䟋) CJK UNIFIED IDEOGRAPH-47CB	[FB80 C7CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_495)
{
    // 47CB 003F;	
    // (䟋) CJK UNIFIED IDEOGRAPH-47CB	[FB80 C7CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_496)
{
    // 47CB 0061;	
    // (䟋) CJK UNIFIED IDEOGRAPH-47CB	[FB80 C7CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_497)
{
    // 47CB 0041;	
    // (䟋) CJK UNIFIED IDEOGRAPH-47CB	[FB80 C7CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_498)
{
    // 47CB 0062;	
    // (䟋) CJK UNIFIED IDEOGRAPH-47CB	[FB80 C7CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_377_499)
{
    // 47CC 0021;	
    // (䟌) CJK UNIFIED IDEOGRAPH-47CC	[FB80 C7CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

