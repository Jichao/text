// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_088_000)
{
    // 1010B 0062;	
    // (êÑã) AEGEAN NUMBER FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_001)
{
    // 10143 0062;	
    // (êÖÉ) GREEK ACROPHONIC ATTIC FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10143, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_002)
{
    // 10148 0062;	
    // (êÖà) GREEK ACROPHONIC ATTIC FIVE TALENTS	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10148, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_003)
{
    // 1014F 0062;	
    // (êÖè) GREEK ACROPHONIC ATTIC FIVE STATERS	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014F, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_004)
{
    // 1015F 0062;	
    // (êÖü) GREEK ACROPHONIC TROEZENIAN FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1015F, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_005)
{
    // 10173 0062;	
    // (êÖ≥) GREEK ACROPHONIC DELPHIC FIVE MNAS	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10173, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_006)
{
    // 102E5 0062;	
    // (êã•) COPTIC EPACT DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_007)
{
    // 10321 0062;	
    // (êå°) OLD ITALIC NUMERAL FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10321, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_008)
{
    // 104A5 0062;	
    // (êí•) OSMANYA DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_009)
{
    // 1087D 0062;	
    // (‚Äé‚Äéê°Ω‚Äé‚Äé) PALMYRENE NUMBER FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087D, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_010)
{
    // 108AC 0062;	
    // (‚Äé‚Äéê¢¨‚Äé‚Äé) NABATAEAN NUMBER FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108AC, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_011)
{
    // 108FC 0062;	
    // (‚Äé‚Äéê£º‚Äé‚Äé) HATRAN NUMBER FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108FC, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_012)
{
    // 109C4 0062;	
    // (‚Äé‚ÄéêßÑ‚Äé‚Äé) MEROITIC CURSIVE NUMBER FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C4, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_013)
{
    // 10AEC 0062;	
    // (‚Äé‚Äéê´¨‚Äé‚Äé) MANICHAEAN NUMBER FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AEC, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_014)
{
    // 10CFB 0062;	
    // (‚Äé‚Äéê≥ª‚Äé‚Äé) OLD HUNGARIAN NUMBER FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFB, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_015)
{
    // 10E64 0062;	
    // (‚Äéêπ§‚Äé) RUMI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E64, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_016)
{
    // 11056 0062;	
    // (ëÅñ) BRAHMI NUMBER FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11056, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_017)
{
    // 1106B 0062;	
    // (ëÅ´) BRAHMI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_018)
{
    // 110F5 0062;	
    // (ëÉµ) SORA SOMPENG DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_019)
{
    // 1113B 0062;	
    // (ëÑª) CHAKMA DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_020)
{
    // 111D5 0062;	
    // (ëáï) SHARADA DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_021)
{
    // 111E5 0062;	
    // (ëá•) SINHALA ARCHAIC DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_022)
{
    // 112F5 0062;	
    // (ëãµ) KHUDAWADI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_023)
{
    // 11455 0062;	
    // (ëëï) NEWA DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11455, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_024)
{
    // 114D5 0062;	
    // (ëìï) TIRHUTA DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_025)
{
    // 11655 0062;	
    // (ëôï) MODI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11655, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_026)
{
    // 116C5 0062;	
    // (ëõÖ) TAKRI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_027)
{
    // 11735 0062;	
    // (ëúµ) AHOM DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11735, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_028)
{
    // 118E5 0062;	
    // (ë£•) WARANG CITI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_029)
{
    // 11C55 0062;	
    // (ë±ï) BHAIKSUKI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C55, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_030)
{
    // 11C5E 0062;	
    // (ë±û) BHAIKSUKI NUMBER FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5E, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_031)
{
    // 11D55 0062;	
    // (ëµï) MASARAM GONDI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D55, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_032)
{
    // 12403 0062;	
    // (íêÉ) CUNEIFORM NUMERIC SIGN FIVE ASH	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12403, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_033)
{
    // 1240A 0062;	
    // (íêä) CUNEIFORM NUMERIC SIGN FIVE DISH	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_034)
{
    // 12410 0062;	
    // (íêê) CUNEIFORM NUMERIC SIGN FIVE U	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12410, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_035)
{
    // 12419 0062;	
    // (íêô) CUNEIFORM NUMERIC SIGN FIVE GESH2	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12419, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_036)
{
    // 12422 0062;	
    // (íê¢) CUNEIFORM NUMERIC SIGN FIVE GESHU	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12422, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_037)
{
    // 12427 0062;	
    // (íêß) CUNEIFORM NUMERIC SIGN FIVE SHAR2	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12427, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_038)
{
    // 12431 0062;	
    // (íê±) CUNEIFORM NUMERIC SIGN FIVE SHARU	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12431, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_039)
{
    // 12439 0062;	
    // (íêπ) CUNEIFORM NUMERIC SIGN FIVE BURU	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12439, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_040)
{
    // 1244D 0062;	
    // (íëç) CUNEIFORM NUMERIC SIGN FIVE ASH TENU	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244D, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_041)
{
    // 12454 0062;	
    // (íëî) CUNEIFORM NUMERIC SIGN FIVE BAN2	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12454, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_042)
{
    // 12455 0062;	
    // (íëï) CUNEIFORM NUMERIC SIGN FIVE BAN2 VARIANT FORM	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12455, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_043)
{
    // 1246A 0062;	
    // (íë™) CUNEIFORM NUMERIC SIGN FIVE U VARIANT FORM	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_044)
{
    // 16A65 0062;	
    // (ñ©•) MRO DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A65, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_045)
{
    // 16B55 0062;	
    // (ñ≠ï) PAHAWH HMONG DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B55, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_046)
{
    // 1D364 0062;	
    // (ùç§) COUNTING ROD UNIT DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D364, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_047)
{
    // 1E8CB 0062;	
    // (‚Äé‚Äéû£ã‚Äé‚Äé) MENDE KIKAKUI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CB, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_048)
{
    // 1E955 0062;	
    // (‚Äé‚Äéû•ï‚Äé‚Äé) ADLAM DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E955, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_049)
{
    // FF15 0062;	
    // (Ôºï) FULLWIDTH DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF15, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_050)
{
    // 0F2E 0062;	
    // (‡ºÆ) TIBETAN DIGIT HALF FIVE	[1CA8 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2E, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_051)
{
    // 1D7D3 0062;	
    // (ùüì) MATHEMATICAL BOLD DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_052)
{
    // 1D7DD 0062;	
    // (ùüù) MATHEMATICAL DOUBLE-STRUCK DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DD, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_053)
{
    // 1D7E7 0062;	
    // (ùüß) MATHEMATICAL SANS-SERIF DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E7, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_054)
{
    // 1D7F1 0062;	
    // (ùü±) MATHEMATICAL SANS-SERIF BOLD DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F1, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_055)
{
    // 1D7FB 0062;	
    // (ùüª) MATHEMATICAL MONOSPACE DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FB, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_056)
{
    // 2464 0062;	
    // (‚ë§) CIRCLED DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2464, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_057)
{
    // 24F9 0062;	
    // (‚ìπ) DOUBLE CIRCLED DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24F9, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_058)
{
    // 277A 0062;	
    // (‚ù∫) DINGBAT NEGATIVE CIRCLED DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_059)
{
    // 2784 0062;	
    // (‚ûÑ) DINGBAT CIRCLED SANS-SERIF DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2784, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_060)
{
    // 278E 0062;	
    // (‚ûé) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278E, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_061)
{
    // 2075 0062;	
    // (‚Åµ) SUPERSCRIPT FIVE	[1CA8 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2075, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_062)
{
    // 2085 0062;	
    // (‚ÇÖ) SUBSCRIPT FIVE	[1CA8 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2085, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_063)
{
    // 33E4 0021;	
    // („è§) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FIVE	[1CA8 FB40 E5E5 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E4, 0x0021 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_064)
{
    // 33E4 003F;	
    // („è§) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FIVE	[1CA8 FB40 E5E5 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E4, 0x003F };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_065)
{
    // 33E4 0061;	
    // („è§) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FIVE	[1CA8 FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E4, 0x0061 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_066)
{
    // 33E4 0041;	
    // („è§) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FIVE	[1CA8 FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x33E4, 0x0041 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_067)
{
    // 33E4 0062;	
    // („è§) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FIVE	[1CA8 FB40 E5E5 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E4, 0x0062 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_068)
{
    // 32C4 0021;	
    // („ãÑ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MAY	[1CA8 FB40 E708 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C4, 0x0021 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_069)
{
    // 32C4 003F;	
    // („ãÑ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MAY	[1CA8 FB40 E708 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C4, 0x003F };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_070)
{
    // 32C4 0061;	
    // („ãÑ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MAY	[1CA8 FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C4, 0x0061 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_071)
{
    // 32C4 0041;	
    // („ãÑ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MAY	[1CA8 FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x32C4, 0x0041 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_072)
{
    // 32C4 0062;	
    // („ãÑ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MAY	[1CA8 FB40 E708 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C4, 0x0062 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_073)
{
    // 335D 0021;	
    // („çù) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FIVE	[1CA8 FB40 F0B9 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335D, 0x0021 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xF0B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_074)
{
    // 335D 003F;	
    // („çù) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FIVE	[1CA8 FB40 F0B9 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335D, 0x003F };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xF0B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_075)
{
    // 335D 0061;	
    // („çù) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FIVE	[1CA8 FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335D, 0x0061 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_076)
{
    // 335D 0041;	
    // („çù) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FIVE	[1CA8 FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x335D, 0x0041 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_077)
{
    // 335D 0062;	
    // („çù) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FIVE	[1CA8 FB40 F0B9 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335D, 0x0062 };
    uint32_t const ces[13] = { 0x1CA8, 0xFB40, 0xF0B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_078)
{
    // 1F107 0021;	
    // (üÑá) DIGIT SIX COMMA	[1CA9 0222 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F107, 0x0021 };
    uint32_t const ces[12] = { 0x1CA9, 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_079)
{
    // 1F107 003F;	
    // (üÑá) DIGIT SIX COMMA	[1CA9 0222 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F107, 0x003F };
    uint32_t const ces[12] = { 0x1CA9, 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_080)
{
    // 1F107 0061;	
    // (üÑá) DIGIT SIX COMMA	[1CA9 0222 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F107, 0x0061 };
    uint32_t const ces[12] = { 0x1CA9, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_081)
{
    // 1F107 0041;	
    // (üÑá) DIGIT SIX COMMA	[1CA9 0222 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F107, 0x0041 };
    uint32_t const ces[12] = { 0x1CA9, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_082)
{
    // 1F107 0062;	
    // (üÑá) DIGIT SIX COMMA	[1CA9 0222 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F107, 0x0062 };
    uint32_t const ces[12] = { 0x1CA9, 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_083)
{
    // 0036 0021;	
    // (6) DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0036, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_084)
{
    // 0666 0021;	
    // (‚ÄéŸ¶‚Äé) ARABIC-INDIC DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0666, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_085)
{
    // 06F6 0021;	
    // (€∂) EXTENDED ARABIC-INDIC DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_086)
{
    // 07C6 0021;	
    // (‚Äé‚ÄéﬂÜ‚Äé‚Äé) NKO DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_087)
{
    // 096C 0021;	
    // (‡•¨) DEVANAGARI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_088)
{
    // 09EC 0021;	
    // (‡ß¨) BENGALI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_089)
{
    // 0A6C 0021;	
    // (‡©¨) GURMUKHI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_090)
{
    // 0AEC 0021;	
    // (‡´¨) GUJARATI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_091)
{
    // 0B6C 0021;	
    // (‡≠¨) ORIYA DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_092)
{
    // 0BEC 0021;	
    // (‡Ø¨) TAMIL DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_093)
{
    // 0C6C 0021;	
    // (‡±¨) TELUGU DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_094)
{
    // 0CEC 0021;	
    // (‡≥¨) KANNADA DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_095)
{
    // 0D6C 0021;	
    // (‡µ¨) MALAYALAM DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_096)
{
    // 0DEC 0021;	
    // (‡∑¨) SINHALA LITH DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_097)
{
    // 0E56 0021;	
    // (‡πñ) THAI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E56, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_098)
{
    // 0ED6 0021;	
    // (‡ªñ) LAO DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_099)
{
    // 0F26 0021;	
    // (‡º¶) TIBETAN DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F26, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_100)
{
    // 1046 0021;	
    // (·ÅÜ) MYANMAR DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1046, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_101)
{
    // 1096 0021;	
    // (·Çñ) MYANMAR SHAN DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1096, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_102)
{
    // 136E 0021;	
    // (·çÆ) ETHIOPIC DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136E, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_103)
{
    // 17E6 0021;	
    // (·ü¶) KHMER DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_104)
{
    // 17F6 0021;	
    // (·ü∂) KHMER SYMBOL LEK ATTAK PRAM-MUOY	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_105)
{
    // 1816 0021;	
    // (·†ñ) MONGOLIAN DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1816, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_106)
{
    // 194C 0021;	
    // (·•å) LIMBU DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_107)
{
    // 19D6 0021;	
    // (·ßñ) NEW TAI LUE DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_108)
{
    // 1A86 0021;	
    // (·™Ü) TAI THAM HORA DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A86, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_109)
{
    // 1A96 0021;	
    // (·™ñ) TAI THAM THAM DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A96, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_110)
{
    // 1B56 0021;	
    // (·≠ñ) BALINESE DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B56, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_111)
{
    // 1BB6 0021;	
    // (·Æ∂) SUNDANESE DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_112)
{
    // 1C46 0021;	
    // (·±Ü) LEPCHA DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C46, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_113)
{
    // 1C56 0021;	
    // (·±ñ) OL CHIKI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C56, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_114)
{
    // 2185 0021;	
    // (‚ÜÖ) ROMAN NUMERAL SIX LATE FORM	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2185, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_115)
{
    // 3026 0021;	
    // („Ä¶) HANGZHOU NUMERAL SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3026, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_116)
{
    // A626 0021;	
    // (Íò¶) VAI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA626, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_117)
{
    // A8D6 0021;	
    // (Í£ñ) SAURASHTRA DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_118)
{
    // A906 0021;	
    // (Í§Ü) KAYAH LI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA906, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_119)
{
    // A9D6 0021;	
    // (Íßñ) JAVANESE DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_120)
{
    // A9F6 0021;	
    // (Íß∂) MYANMAR TAI LAING DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_121)
{
    // AA56 0021;	
    // (Í©ñ) CHAM DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA56, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_122)
{
    // ABF6 0021;	
    // (ÍØ∂) MEETEI MAYEK DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_123)
{
    // 1010C 0021;	
    // (êÑå) AEGEAN NUMBER SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_124)
{
    // 102E6 0021;	
    // (êã¶) COPTIC EPACT DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_125)
{
    // 104A6 0021;	
    // (êí¶) OSMANYA DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_126)
{
    // 109C5 0021;	
    // (‚Äé‚ÄéêßÖ‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_127)
{
    // 10E65 0021;	
    // (‚Äéêπ•‚Äé) RUMI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E65, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_128)
{
    // 11057 0021;	
    // (ëÅó) BRAHMI NUMBER SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11057, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_129)
{
    // 1106C 0021;	
    // (ëÅ¨) BRAHMI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_130)
{
    // 110F6 0021;	
    // (ëÉ∂) SORA SOMPENG DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_131)
{
    // 1113C 0021;	
    // (ëÑº) CHAKMA DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_132)
{
    // 111D6 0021;	
    // (ëáñ) SHARADA DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_133)
{
    // 111E6 0021;	
    // (ëá¶) SINHALA ARCHAIC DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_134)
{
    // 112F6 0021;	
    // (ëã∂) KHUDAWADI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_135)
{
    // 11456 0021;	
    // (ëëñ) NEWA DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11456, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_136)
{
    // 114D6 0021;	
    // (ëìñ) TIRHUTA DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_137)
{
    // 11656 0021;	
    // (ëôñ) MODI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11656, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_138)
{
    // 116C6 0021;	
    // (ëõÜ) TAKRI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_139)
{
    // 11736 0021;	
    // (ëú∂) AHOM DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11736, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_140)
{
    // 118E6 0021;	
    // (ë£¶) WARANG CITI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_141)
{
    // 11C56 0021;	
    // (ë±ñ) BHAIKSUKI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C56, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_142)
{
    // 11C5F 0021;	
    // (ë±ü) BHAIKSUKI NUMBER SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5F, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_143)
{
    // 11D56 0021;	
    // (ëµñ) MASARAM GONDI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D56, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_144)
{
    // 12404 0021;	
    // (íêÑ) CUNEIFORM NUMERIC SIGN SIX ASH	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12404, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_145)
{
    // 1240B 0021;	
    // (íêã) CUNEIFORM NUMERIC SIGN SIX DISH	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_146)
{
    // 12411 0021;	
    // (íêë) CUNEIFORM NUMERIC SIGN SIX U	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12411, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_147)
{
    // 1241A 0021;	
    // (íêö) CUNEIFORM NUMERIC SIGN SIX GESH2	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_148)
{
    // 12428 0021;	
    // (íê®) CUNEIFORM NUMERIC SIGN SIX SHAR2	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12428, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_149)
{
    // 12440 0021;	
    // (íëÄ) CUNEIFORM NUMERIC SIGN SIX VARIANT FORM ASH9	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12440, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_150)
{
    // 1244E 0021;	
    // (íëé) CUNEIFORM NUMERIC SIGN SIX ASH TENU	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244E, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_151)
{
    // 1246B 0021;	
    // (íë´) CUNEIFORM NUMERIC SIGN SIX U VARIANT FORM	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_152)
{
    // 16A66 0021;	
    // (ñ©¶) MRO DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A66, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_153)
{
    // 16B56 0021;	
    // (ñ≠ñ) PAHAWH HMONG DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B56, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_154)
{
    // 1D365 0021;	
    // (ùç•) COUNTING ROD UNIT DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D365, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_155)
{
    // 1E8CC 0021;	
    // (‚Äé‚Äéû£å‚Äé‚Äé) MENDE KIKAKUI DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_156)
{
    // 1E956 0021;	
    // (‚Äé‚Äéû•ñ‚Äé‚Äé) ADLAM DIGIT SIX	[1CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E956, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_157)
{
    // FF16 0021;	
    // (Ôºñ) FULLWIDTH DIGIT SIX	[1CA9 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF16, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_158)
{
    // 0F2F 0021;	
    // (‡ºØ) TIBETAN DIGIT HALF SIX	[1CA9 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2F, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_159)
{
    // 1D7D4 0021;	
    // (ùüî) MATHEMATICAL BOLD DIGIT SIX	[1CA9 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_160)
{
    // 1D7DE 0021;	
    // (ùüû) MATHEMATICAL DOUBLE-STRUCK DIGIT SIX	[1CA9 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DE, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_161)
{
    // 1D7E8 0021;	
    // (ùü®) MATHEMATICAL SANS-SERIF DIGIT SIX	[1CA9 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E8, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_162)
{
    // 1D7F2 0021;	
    // (ùü≤) MATHEMATICAL SANS-SERIF BOLD DIGIT SIX	[1CA9 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F2, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_163)
{
    // 1D7FC 0021;	
    // (ùüº) MATHEMATICAL MONOSPACE DIGIT SIX	[1CA9 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_164)
{
    // 2465 0021;	
    // (‚ë•) CIRCLED DIGIT SIX	[1CA9 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2465, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_165)
{
    // 24FA 0021;	
    // (‚ì∫) DOUBLE CIRCLED DIGIT SIX	[1CA9 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FA, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_166)
{
    // 277B 0021;	
    // (‚ùª) DINGBAT NEGATIVE CIRCLED DIGIT SIX	[1CA9 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_167)
{
    // 2785 0021;	
    // (‚ûÖ) DINGBAT CIRCLED SANS-SERIF DIGIT SIX	[1CA9 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2785, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_168)
{
    // 278F 0021;	
    // (‚ûè) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SIX	[1CA9 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278F, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_169)
{
    // 2076 0021;	
    // (‚Å∂) SUPERSCRIPT SIX	[1CA9 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2076, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_170)
{
    // 2086 0021;	
    // (‚ÇÜ) SUBSCRIPT SIX	[1CA9 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2086, 0x0021 };
    uint32_t const ces[9] = { 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_171)
{
    // 0036 003F;	
    // (6) DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0036, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_172)
{
    // 0666 003F;	
    // (‚ÄéŸ¶‚Äé) ARABIC-INDIC DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0666, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_173)
{
    // 06F6 003F;	
    // (€∂) EXTENDED ARABIC-INDIC DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_174)
{
    // 07C6 003F;	
    // (‚Äé‚ÄéﬂÜ‚Äé‚Äé) NKO DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_175)
{
    // 096C 003F;	
    // (‡•¨) DEVANAGARI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096C, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_176)
{
    // 09EC 003F;	
    // (‡ß¨) BENGALI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EC, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_177)
{
    // 0A6C 003F;	
    // (‡©¨) GURMUKHI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6C, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_178)
{
    // 0AEC 003F;	
    // (‡´¨) GUJARATI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEC, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_179)
{
    // 0B6C 003F;	
    // (‡≠¨) ORIYA DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6C, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_180)
{
    // 0BEC 003F;	
    // (‡Ø¨) TAMIL DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEC, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_181)
{
    // 0C6C 003F;	
    // (‡±¨) TELUGU DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6C, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_182)
{
    // 0CEC 003F;	
    // (‡≥¨) KANNADA DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEC, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_183)
{
    // 0D6C 003F;	
    // (‡µ¨) MALAYALAM DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6C, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_184)
{
    // 0DEC 003F;	
    // (‡∑¨) SINHALA LITH DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEC, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_185)
{
    // 0E56 003F;	
    // (‡πñ) THAI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E56, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_186)
{
    // 0ED6 003F;	
    // (‡ªñ) LAO DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_187)
{
    // 0F26 003F;	
    // (‡º¶) TIBETAN DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F26, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_188)
{
    // 1046 003F;	
    // (·ÅÜ) MYANMAR DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1046, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_189)
{
    // 1096 003F;	
    // (·Çñ) MYANMAR SHAN DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1096, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_190)
{
    // 136E 003F;	
    // (·çÆ) ETHIOPIC DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136E, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_191)
{
    // 17E6 003F;	
    // (·ü¶) KHMER DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_192)
{
    // 17F6 003F;	
    // (·ü∂) KHMER SYMBOL LEK ATTAK PRAM-MUOY	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_193)
{
    // 1816 003F;	
    // (·†ñ) MONGOLIAN DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1816, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_194)
{
    // 194C 003F;	
    // (·•å) LIMBU DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194C, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_195)
{
    // 19D6 003F;	
    // (·ßñ) NEW TAI LUE DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_196)
{
    // 1A86 003F;	
    // (·™Ü) TAI THAM HORA DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A86, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_197)
{
    // 1A96 003F;	
    // (·™ñ) TAI THAM THAM DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A96, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_198)
{
    // 1B56 003F;	
    // (·≠ñ) BALINESE DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B56, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_199)
{
    // 1BB6 003F;	
    // (·Æ∂) SUNDANESE DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_200)
{
    // 1C46 003F;	
    // (·±Ü) LEPCHA DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C46, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_201)
{
    // 1C56 003F;	
    // (·±ñ) OL CHIKI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C56, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_202)
{
    // 2185 003F;	
    // (‚ÜÖ) ROMAN NUMERAL SIX LATE FORM	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2185, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_203)
{
    // 3026 003F;	
    // („Ä¶) HANGZHOU NUMERAL SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3026, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_204)
{
    // A626 003F;	
    // (Íò¶) VAI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA626, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_205)
{
    // A8D6 003F;	
    // (Í£ñ) SAURASHTRA DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_206)
{
    // A906 003F;	
    // (Í§Ü) KAYAH LI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA906, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_207)
{
    // A9D6 003F;	
    // (Íßñ) JAVANESE DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_208)
{
    // A9F6 003F;	
    // (Íß∂) MYANMAR TAI LAING DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_209)
{
    // AA56 003F;	
    // (Í©ñ) CHAM DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA56, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_210)
{
    // ABF6 003F;	
    // (ÍØ∂) MEETEI MAYEK DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_211)
{
    // 1010C 003F;	
    // (êÑå) AEGEAN NUMBER SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010C, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_212)
{
    // 102E6 003F;	
    // (êã¶) COPTIC EPACT DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_213)
{
    // 104A6 003F;	
    // (êí¶) OSMANYA DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_214)
{
    // 109C5 003F;	
    // (‚Äé‚ÄéêßÖ‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C5, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_215)
{
    // 10E65 003F;	
    // (‚Äéêπ•‚Äé) RUMI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E65, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_216)
{
    // 11057 003F;	
    // (ëÅó) BRAHMI NUMBER SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11057, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_217)
{
    // 1106C 003F;	
    // (ëÅ¨) BRAHMI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106C, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_218)
{
    // 110F6 003F;	
    // (ëÉ∂) SORA SOMPENG DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_219)
{
    // 1113C 003F;	
    // (ëÑº) CHAKMA DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113C, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_220)
{
    // 111D6 003F;	
    // (ëáñ) SHARADA DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_221)
{
    // 111E6 003F;	
    // (ëá¶) SINHALA ARCHAIC DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_222)
{
    // 112F6 003F;	
    // (ëã∂) KHUDAWADI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_223)
{
    // 11456 003F;	
    // (ëëñ) NEWA DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11456, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_224)
{
    // 114D6 003F;	
    // (ëìñ) TIRHUTA DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_225)
{
    // 11656 003F;	
    // (ëôñ) MODI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11656, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_226)
{
    // 116C6 003F;	
    // (ëõÜ) TAKRI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_227)
{
    // 11736 003F;	
    // (ëú∂) AHOM DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11736, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_228)
{
    // 118E6 003F;	
    // (ë£¶) WARANG CITI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E6, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_229)
{
    // 11C56 003F;	
    // (ë±ñ) BHAIKSUKI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C56, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_230)
{
    // 11C5F 003F;	
    // (ë±ü) BHAIKSUKI NUMBER SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5F, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_231)
{
    // 11D56 003F;	
    // (ëµñ) MASARAM GONDI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D56, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_232)
{
    // 12404 003F;	
    // (íêÑ) CUNEIFORM NUMERIC SIGN SIX ASH	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12404, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_233)
{
    // 1240B 003F;	
    // (íêã) CUNEIFORM NUMERIC SIGN SIX DISH	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240B, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_234)
{
    // 12411 003F;	
    // (íêë) CUNEIFORM NUMERIC SIGN SIX U	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12411, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_235)
{
    // 1241A 003F;	
    // (íêö) CUNEIFORM NUMERIC SIGN SIX GESH2	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241A, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_236)
{
    // 12428 003F;	
    // (íê®) CUNEIFORM NUMERIC SIGN SIX SHAR2	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12428, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_237)
{
    // 12440 003F;	
    // (íëÄ) CUNEIFORM NUMERIC SIGN SIX VARIANT FORM ASH9	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12440, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_238)
{
    // 1244E 003F;	
    // (íëé) CUNEIFORM NUMERIC SIGN SIX ASH TENU	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244E, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_239)
{
    // 1246B 003F;	
    // (íë´) CUNEIFORM NUMERIC SIGN SIX U VARIANT FORM	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246B, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_240)
{
    // 16A66 003F;	
    // (ñ©¶) MRO DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A66, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_241)
{
    // 16B56 003F;	
    // (ñ≠ñ) PAHAWH HMONG DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B56, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_242)
{
    // 1D365 003F;	
    // (ùç•) COUNTING ROD UNIT DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D365, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_243)
{
    // 1E8CC 003F;	
    // (‚Äé‚Äéû£å‚Äé‚Äé) MENDE KIKAKUI DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CC, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_244)
{
    // 1E956 003F;	
    // (‚Äé‚Äéû•ñ‚Äé‚Äé) ADLAM DIGIT SIX	[1CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E956, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_245)
{
    // FF16 003F;	
    // (Ôºñ) FULLWIDTH DIGIT SIX	[1CA9 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF16, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_246)
{
    // 0F2F 003F;	
    // (‡ºØ) TIBETAN DIGIT HALF SIX	[1CA9 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2F, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_247)
{
    // 1D7D4 003F;	
    // (ùüî) MATHEMATICAL BOLD DIGIT SIX	[1CA9 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D4, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_248)
{
    // 1D7DE 003F;	
    // (ùüû) MATHEMATICAL DOUBLE-STRUCK DIGIT SIX	[1CA9 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DE, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_249)
{
    // 1D7E8 003F;	
    // (ùü®) MATHEMATICAL SANS-SERIF DIGIT SIX	[1CA9 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E8, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_250)
{
    // 1D7F2 003F;	
    // (ùü≤) MATHEMATICAL SANS-SERIF BOLD DIGIT SIX	[1CA9 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F2, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_251)
{
    // 1D7FC 003F;	
    // (ùüº) MATHEMATICAL MONOSPACE DIGIT SIX	[1CA9 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FC, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_252)
{
    // 2465 003F;	
    // (‚ë•) CIRCLED DIGIT SIX	[1CA9 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2465, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_253)
{
    // 24FA 003F;	
    // (‚ì∫) DOUBLE CIRCLED DIGIT SIX	[1CA9 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FA, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_254)
{
    // 277B 003F;	
    // (‚ùª) DINGBAT NEGATIVE CIRCLED DIGIT SIX	[1CA9 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277B, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_255)
{
    // 2785 003F;	
    // (‚ûÖ) DINGBAT CIRCLED SANS-SERIF DIGIT SIX	[1CA9 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2785, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_256)
{
    // 278F 003F;	
    // (‚ûè) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SIX	[1CA9 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278F, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_257)
{
    // 2076 003F;	
    // (‚Å∂) SUPERSCRIPT SIX	[1CA9 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2076, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_258)
{
    // 2086 003F;	
    // (‚ÇÜ) SUBSCRIPT SIX	[1CA9 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2086, 0x003F };
    uint32_t const ces[9] = { 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_259)
{
    // 248D 0021;	
    // (‚íç) DIGIT SIX FULL STOP	[1CA9 0278 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248D, 0x0021 };
    uint32_t const ces[12] = { 0x1CA9, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_260)
{
    // 248D 003F;	
    // (‚íç) DIGIT SIX FULL STOP	[1CA9 0278 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248D, 0x003F };
    uint32_t const ces[12] = { 0x1CA9, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_261)
{
    // 248D 0061;	
    // (‚íç) DIGIT SIX FULL STOP	[1CA9 0278 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248D, 0x0061 };
    uint32_t const ces[12] = { 0x1CA9, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_262)
{
    // 248D 0041;	
    // (‚íç) DIGIT SIX FULL STOP	[1CA9 0278 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x248D, 0x0041 };
    uint32_t const ces[12] = { 0x1CA9, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_263)
{
    // 248D 0062;	
    // (‚íç) DIGIT SIX FULL STOP	[1CA9 0278 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248D, 0x0062 };
    uint32_t const ces[12] = { 0x1CA9, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_264)
{
    // 324D 0021;	
    // („âç) CIRCLED NUMBER SIXTY ON BLACK SQUARE	[1CA9 1CA3 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324D, 0x0021 };
    uint32_t const ces[12] = { 0x1CA9, 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_265)
{
    // 324D 003F;	
    // („âç) CIRCLED NUMBER SIXTY ON BLACK SQUARE	[1CA9 1CA3 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324D, 0x003F };
    uint32_t const ces[12] = { 0x1CA9, 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_266)
{
    // 324D 0061;	
    // („âç) CIRCLED NUMBER SIXTY ON BLACK SQUARE	[1CA9 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324D, 0x0061 };
    uint32_t const ces[12] = { 0x1CA9, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_267)
{
    // 324D 0041;	
    // („âç) CIRCLED NUMBER SIXTY ON BLACK SQUARE	[1CA9 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x324D, 0x0041 };
    uint32_t const ces[12] = { 0x1CA9, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_268)
{
    // 324D 0062;	
    // („âç) CIRCLED NUMBER SIXTY ON BLACK SQUARE	[1CA9 1CA3 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324D, 0x0062 };
    uint32_t const ces[12] = { 0x1CA9, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_269)
{
    // 1F1A3 0021;	
    // (üÜ£) SQUARED SIXTY P	[1CA9 1CA3 1E72 0261 | 0020 0020 0020 0020 | 001C 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F1A3, 0x0021 };
    uint32_t const ces[15] = { 0x1CA9, 0x1CA3, 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_270)
{
    // 1F1A3 003F;	
    // (üÜ£) SQUARED SIXTY P	[1CA9 1CA3 1E72 0267 | 0020 0020 0020 0020 | 001C 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F1A3, 0x003F };
    uint32_t const ces[15] = { 0x1CA9, 0x1CA3, 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_271)
{
    // 1F1A3 0061;	
    // (üÜ£) SQUARED SIXTY P	[1CA9 1CA3 1E72 1CAD | 0020 0020 0020 0020 | 001C 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F1A3, 0x0061 };
    uint32_t const ces[15] = { 0x1CA9, 0x1CA3, 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_272)
{
    // 1F1A3 0041;	
    // (üÜ£) SQUARED SIXTY P	[1CA9 1CA3 1E72 1CAD | 0020 0020 0020 0020 | 001C 001C 001D 0008 |]

    uint32_t cps[2] = { 0x1F1A3, 0x0041 };
    uint32_t const ces[15] = { 0x1CA9, 0x1CA3, 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_273)
{
    // 1F1A3 0062;	
    // (üÜ£) SQUARED SIXTY P	[1CA9 1CA3 1E72 1CC6 | 0020 0020 0020 0020 | 001C 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F1A3, 0x0062 };
    uint32_t const ces[15] = { 0x1CA9, 0x1CA3, 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_274)
{
    // 0036 0061;	
    // (6) DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0036, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_275)
{
    // 0666 0061;	
    // (‚ÄéŸ¶‚Äé) ARABIC-INDIC DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0666, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_276)
{
    // 06F6 0061;	
    // (€∂) EXTENDED ARABIC-INDIC DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_277)
{
    // 07C6 0061;	
    // (‚Äé‚ÄéﬂÜ‚Äé‚Äé) NKO DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_278)
{
    // 096C 0061;	
    // (‡•¨) DEVANAGARI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_279)
{
    // 09EC 0061;	
    // (‡ß¨) BENGALI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EC, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_280)
{
    // 0A6C 0061;	
    // (‡©¨) GURMUKHI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_281)
{
    // 0AEC 0061;	
    // (‡´¨) GUJARATI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEC, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_282)
{
    // 0B6C 0061;	
    // (‡≠¨) ORIYA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_283)
{
    // 0BEC 0061;	
    // (‡Ø¨) TAMIL DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEC, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_284)
{
    // 0C6C 0061;	
    // (‡±¨) TELUGU DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_285)
{
    // 0CEC 0061;	
    // (‡≥¨) KANNADA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEC, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_286)
{
    // 0D6C 0061;	
    // (‡µ¨) MALAYALAM DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_287)
{
    // 0DEC 0061;	
    // (‡∑¨) SINHALA LITH DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEC, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_288)
{
    // 0E56 0061;	
    // (‡πñ) THAI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E56, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_289)
{
    // 0ED6 0061;	
    // (‡ªñ) LAO DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_290)
{
    // 0F26 0061;	
    // (‡º¶) TIBETAN DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F26, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_291)
{
    // 1046 0061;	
    // (·ÅÜ) MYANMAR DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1046, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_292)
{
    // 1096 0061;	
    // (·Çñ) MYANMAR SHAN DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1096, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_293)
{
    // 136E 0061;	
    // (·çÆ) ETHIOPIC DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136E, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_294)
{
    // 17E6 0061;	
    // (·ü¶) KHMER DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_295)
{
    // 17F6 0061;	
    // (·ü∂) KHMER SYMBOL LEK ATTAK PRAM-MUOY	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_296)
{
    // 1816 0061;	
    // (·†ñ) MONGOLIAN DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1816, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_297)
{
    // 194C 0061;	
    // (·•å) LIMBU DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_298)
{
    // 19D6 0061;	
    // (·ßñ) NEW TAI LUE DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_299)
{
    // 1A86 0061;	
    // (·™Ü) TAI THAM HORA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A86, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_300)
{
    // 1A96 0061;	
    // (·™ñ) TAI THAM THAM DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A96, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_301)
{
    // 1B56 0061;	
    // (·≠ñ) BALINESE DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B56, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_302)
{
    // 1BB6 0061;	
    // (·Æ∂) SUNDANESE DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_303)
{
    // 1C46 0061;	
    // (·±Ü) LEPCHA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C46, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_304)
{
    // 1C56 0061;	
    // (·±ñ) OL CHIKI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C56, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_305)
{
    // 2185 0061;	
    // (‚ÜÖ) ROMAN NUMERAL SIX LATE FORM	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2185, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_306)
{
    // 3026 0061;	
    // („Ä¶) HANGZHOU NUMERAL SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3026, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_307)
{
    // A626 0061;	
    // (Íò¶) VAI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA626, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_308)
{
    // A8D6 0061;	
    // (Í£ñ) SAURASHTRA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_309)
{
    // A906 0061;	
    // (Í§Ü) KAYAH LI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA906, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_310)
{
    // A9D6 0061;	
    // (Íßñ) JAVANESE DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_311)
{
    // A9F6 0061;	
    // (Íß∂) MYANMAR TAI LAING DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_312)
{
    // AA56 0061;	
    // (Í©ñ) CHAM DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA56, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_313)
{
    // ABF6 0061;	
    // (ÍØ∂) MEETEI MAYEK DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_314)
{
    // 1010C 0061;	
    // (êÑå) AEGEAN NUMBER SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_315)
{
    // 102E6 0061;	
    // (êã¶) COPTIC EPACT DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_316)
{
    // 104A6 0061;	
    // (êí¶) OSMANYA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_317)
{
    // 109C5 0061;	
    // (‚Äé‚ÄéêßÖ‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_318)
{
    // 10E65 0061;	
    // (‚Äéêπ•‚Äé) RUMI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E65, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_319)
{
    // 11057 0061;	
    // (ëÅó) BRAHMI NUMBER SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11057, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_320)
{
    // 1106C 0061;	
    // (ëÅ¨) BRAHMI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_321)
{
    // 110F6 0061;	
    // (ëÉ∂) SORA SOMPENG DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_322)
{
    // 1113C 0061;	
    // (ëÑº) CHAKMA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_323)
{
    // 111D6 0061;	
    // (ëáñ) SHARADA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_324)
{
    // 111E6 0061;	
    // (ëá¶) SINHALA ARCHAIC DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_325)
{
    // 112F6 0061;	
    // (ëã∂) KHUDAWADI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_326)
{
    // 11456 0061;	
    // (ëëñ) NEWA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11456, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_327)
{
    // 114D6 0061;	
    // (ëìñ) TIRHUTA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_328)
{
    // 11656 0061;	
    // (ëôñ) MODI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11656, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_329)
{
    // 116C6 0061;	
    // (ëõÜ) TAKRI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_330)
{
    // 11736 0061;	
    // (ëú∂) AHOM DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11736, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_331)
{
    // 118E6 0061;	
    // (ë£¶) WARANG CITI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_332)
{
    // 11C56 0061;	
    // (ë±ñ) BHAIKSUKI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C56, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_333)
{
    // 11C5F 0061;	
    // (ë±ü) BHAIKSUKI NUMBER SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5F, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_334)
{
    // 11D56 0061;	
    // (ëµñ) MASARAM GONDI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D56, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_335)
{
    // 12404 0061;	
    // (íêÑ) CUNEIFORM NUMERIC SIGN SIX ASH	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12404, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_336)
{
    // 1240B 0061;	
    // (íêã) CUNEIFORM NUMERIC SIGN SIX DISH	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_337)
{
    // 12411 0061;	
    // (íêë) CUNEIFORM NUMERIC SIGN SIX U	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12411, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_338)
{
    // 1241A 0061;	
    // (íêö) CUNEIFORM NUMERIC SIGN SIX GESH2	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241A, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_339)
{
    // 12428 0061;	
    // (íê®) CUNEIFORM NUMERIC SIGN SIX SHAR2	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12428, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_340)
{
    // 12440 0061;	
    // (íëÄ) CUNEIFORM NUMERIC SIGN SIX VARIANT FORM ASH9	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12440, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_341)
{
    // 1244E 0061;	
    // (íëé) CUNEIFORM NUMERIC SIGN SIX ASH TENU	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244E, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_342)
{
    // 1246B 0061;	
    // (íë´) CUNEIFORM NUMERIC SIGN SIX U VARIANT FORM	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_343)
{
    // 16A66 0061;	
    // (ñ©¶) MRO DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A66, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_344)
{
    // 16B56 0061;	
    // (ñ≠ñ) PAHAWH HMONG DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B56, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_345)
{
    // 1D365 0061;	
    // (ùç•) COUNTING ROD UNIT DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D365, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_346)
{
    // 1E8CC 0061;	
    // (‚Äé‚Äéû£å‚Äé‚Äé) MENDE KIKAKUI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CC, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_347)
{
    // 1E956 0061;	
    // (‚Äé‚Äéû•ñ‚Äé‚Äé) ADLAM DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E956, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_348)
{
    // 0036 0041;	
    // (6) DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0036, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_349)
{
    // 0666 0041;	
    // (‚ÄéŸ¶‚Äé) ARABIC-INDIC DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0666, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_350)
{
    // 06F6 0041;	
    // (€∂) EXTENDED ARABIC-INDIC DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06F6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_351)
{
    // 07C6 0041;	
    // (‚Äé‚ÄéﬂÜ‚Äé‚Äé) NKO DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x07C6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_352)
{
    // 096C 0041;	
    // (‡•¨) DEVANAGARI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x096C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_353)
{
    // 09EC 0041;	
    // (‡ß¨) BENGALI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09EC, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_354)
{
    // 0A6C 0041;	
    // (‡©¨) GURMUKHI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A6C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_355)
{
    // 0AEC 0041;	
    // (‡´¨) GUJARATI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AEC, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_356)
{
    // 0B6C 0041;	
    // (‡≠¨) ORIYA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B6C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_357)
{
    // 0BEC 0041;	
    // (‡Ø¨) TAMIL DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BEC, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_358)
{
    // 0C6C 0041;	
    // (‡±¨) TELUGU DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C6C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_359)
{
    // 0CEC 0041;	
    // (‡≥¨) KANNADA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CEC, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_360)
{
    // 0D6C 0041;	
    // (‡µ¨) MALAYALAM DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D6C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_361)
{
    // 0DEC 0041;	
    // (‡∑¨) SINHALA LITH DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DEC, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_362)
{
    // 0E56 0041;	
    // (‡πñ) THAI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E56, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_363)
{
    // 0ED6 0041;	
    // (‡ªñ) LAO DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ED6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_364)
{
    // 0F26 0041;	
    // (‡º¶) TIBETAN DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F26, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_365)
{
    // 1046 0041;	
    // (·ÅÜ) MYANMAR DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1046, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_366)
{
    // 1096 0041;	
    // (·Çñ) MYANMAR SHAN DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1096, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_367)
{
    // 136E 0041;	
    // (·çÆ) ETHIOPIC DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x136E, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_368)
{
    // 17E6 0041;	
    // (·ü¶) KHMER DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17E6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_369)
{
    // 17F6 0041;	
    // (·ü∂) KHMER SYMBOL LEK ATTAK PRAM-MUOY	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17F6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_370)
{
    // 1816 0041;	
    // (·†ñ) MONGOLIAN DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1816, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_371)
{
    // 194C 0041;	
    // (·•å) LIMBU DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x194C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_372)
{
    // 19D6 0041;	
    // (·ßñ) NEW TAI LUE DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19D6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_373)
{
    // 1A86 0041;	
    // (·™Ü) TAI THAM HORA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A86, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_374)
{
    // 1A96 0041;	
    // (·™ñ) TAI THAM THAM DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A96, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_375)
{
    // 1B56 0041;	
    // (·≠ñ) BALINESE DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B56, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_376)
{
    // 1BB6 0041;	
    // (·Æ∂) SUNDANESE DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BB6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_377)
{
    // 1C46 0041;	
    // (·±Ü) LEPCHA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C46, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_378)
{
    // 1C56 0041;	
    // (·±ñ) OL CHIKI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C56, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_379)
{
    // 2185 0041;	
    // (‚ÜÖ) ROMAN NUMERAL SIX LATE FORM	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2185, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_380)
{
    // 3026 0041;	
    // („Ä¶) HANGZHOU NUMERAL SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3026, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_381)
{
    // A626 0041;	
    // (Íò¶) VAI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA626, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_382)
{
    // A8D6 0041;	
    // (Í£ñ) SAURASHTRA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8D6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_383)
{
    // A906 0041;	
    // (Í§Ü) KAYAH LI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA906, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_384)
{
    // A9D6 0041;	
    // (Íßñ) JAVANESE DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9D6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_385)
{
    // A9F6 0041;	
    // (Íß∂) MYANMAR TAI LAING DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9F6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_386)
{
    // AA56 0041;	
    // (Í©ñ) CHAM DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA56, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_387)
{
    // ABF6 0041;	
    // (ÍØ∂) MEETEI MAYEK DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABF6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_388)
{
    // 1010C 0041;	
    // (êÑå) AEGEAN NUMBER SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1010C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_389)
{
    // 102E6 0041;	
    // (êã¶) COPTIC EPACT DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102E6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_390)
{
    // 104A6 0041;	
    // (êí¶) OSMANYA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104A6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_391)
{
    // 109C5 0041;	
    // (‚Äé‚ÄéêßÖ‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109C5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_392)
{
    // 10E65 0041;	
    // (‚Äéêπ•‚Äé) RUMI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E65, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_393)
{
    // 11057 0041;	
    // (ëÅó) BRAHMI NUMBER SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11057, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_394)
{
    // 1106C 0041;	
    // (ëÅ¨) BRAHMI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1106C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_395)
{
    // 110F6 0041;	
    // (ëÉ∂) SORA SOMPENG DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110F6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_396)
{
    // 1113C 0041;	
    // (ëÑº) CHAKMA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1113C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_397)
{
    // 111D6 0041;	
    // (ëáñ) SHARADA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111D6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_398)
{
    // 111E6 0041;	
    // (ëá¶) SINHALA ARCHAIC DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111E6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_399)
{
    // 112F6 0041;	
    // (ëã∂) KHUDAWADI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112F6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_400)
{
    // 11456 0041;	
    // (ëëñ) NEWA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11456, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_401)
{
    // 114D6 0041;	
    // (ëìñ) TIRHUTA DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114D6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_402)
{
    // 11656 0041;	
    // (ëôñ) MODI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11656, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_403)
{
    // 116C6 0041;	
    // (ëõÜ) TAKRI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116C6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_404)
{
    // 11736 0041;	
    // (ëú∂) AHOM DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11736, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_405)
{
    // 118E6 0041;	
    // (ë£¶) WARANG CITI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x118E6, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_406)
{
    // 11C56 0041;	
    // (ë±ñ) BHAIKSUKI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C56, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_407)
{
    // 11C5F 0041;	
    // (ë±ü) BHAIKSUKI NUMBER SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C5F, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_408)
{
    // 11D56 0041;	
    // (ëµñ) MASARAM GONDI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D56, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_409)
{
    // 12404 0041;	
    // (íêÑ) CUNEIFORM NUMERIC SIGN SIX ASH	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12404, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_410)
{
    // 1240B 0041;	
    // (íêã) CUNEIFORM NUMERIC SIGN SIX DISH	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1240B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_411)
{
    // 12411 0041;	
    // (íêë) CUNEIFORM NUMERIC SIGN SIX U	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12411, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_412)
{
    // 1241A 0041;	
    // (íêö) CUNEIFORM NUMERIC SIGN SIX GESH2	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1241A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_413)
{
    // 12428 0041;	
    // (íê®) CUNEIFORM NUMERIC SIGN SIX SHAR2	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12428, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_414)
{
    // 12440 0041;	
    // (íëÄ) CUNEIFORM NUMERIC SIGN SIX VARIANT FORM ASH9	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12440, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_415)
{
    // 1244E 0041;	
    // (íëé) CUNEIFORM NUMERIC SIGN SIX ASH TENU	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1244E, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_416)
{
    // 1246B 0041;	
    // (íë´) CUNEIFORM NUMERIC SIGN SIX U VARIANT FORM	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1246B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_417)
{
    // 16A66 0041;	
    // (ñ©¶) MRO DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A66, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_418)
{
    // 16B56 0041;	
    // (ñ≠ñ) PAHAWH HMONG DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B56, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_419)
{
    // 1D365 0041;	
    // (ùç•) COUNTING ROD UNIT DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D365, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_420)
{
    // 1E8CC 0041;	
    // (‚Äé‚Äéû£å‚Äé‚Äé) MENDE KIKAKUI DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E8CC, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_421)
{
    // 1E956 0041;	
    // (‚Äé‚Äéû•ñ‚Äé‚Äé) ADLAM DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E956, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_422)
{
    // FF16 0061;	
    // (Ôºñ) FULLWIDTH DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF16, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_423)
{
    // FF16 0041;	
    // (Ôºñ) FULLWIDTH DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF16, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_424)
{
    // 0F2F 0061;	
    // (‡ºØ) TIBETAN DIGIT HALF SIX	[1CA9 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2F, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_425)
{
    // 0F2F 0041;	
    // (‡ºØ) TIBETAN DIGIT HALF SIX	[1CA9 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0F2F, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_426)
{
    // 1D7D4 0061;	
    // (ùüî) MATHEMATICAL BOLD DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D4, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_427)
{
    // 1D7DE 0061;	
    // (ùüû) MATHEMATICAL DOUBLE-STRUCK DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DE, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_428)
{
    // 1D7E8 0061;	
    // (ùü®) MATHEMATICAL SANS-SERIF DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E8, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_429)
{
    // 1D7F2 0061;	
    // (ùü≤) MATHEMATICAL SANS-SERIF BOLD DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F2, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_430)
{
    // 1D7FC 0061;	
    // (ùüº) MATHEMATICAL MONOSPACE DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FC, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_431)
{
    // 1D7D4 0041;	
    // (ùüî) MATHEMATICAL BOLD DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7D4, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_432)
{
    // 1D7DE 0041;	
    // (ùüû) MATHEMATICAL DOUBLE-STRUCK DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7DE, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_433)
{
    // 1D7E8 0041;	
    // (ùü®) MATHEMATICAL SANS-SERIF DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7E8, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_434)
{
    // 1D7F2 0041;	
    // (ùü≤) MATHEMATICAL SANS-SERIF BOLD DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7F2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_435)
{
    // 1D7FC 0041;	
    // (ùüº) MATHEMATICAL MONOSPACE DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7FC, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_436)
{
    // 2465 0061;	
    // (‚ë•) CIRCLED DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2465, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_437)
{
    // 24FA 0061;	
    // (‚ì∫) DOUBLE CIRCLED DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FA, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_438)
{
    // 277B 0061;	
    // (‚ùª) DINGBAT NEGATIVE CIRCLED DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_439)
{
    // 2785 0061;	
    // (‚ûÖ) DINGBAT CIRCLED SANS-SERIF DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2785, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_440)
{
    // 278F 0061;	
    // (‚ûè) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278F, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_441)
{
    // 2465 0041;	
    // (‚ë•) CIRCLED DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2465, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_442)
{
    // 24FA 0041;	
    // (‚ì∫) DOUBLE CIRCLED DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24FA, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_443)
{
    // 277B 0041;	
    // (‚ùª) DINGBAT NEGATIVE CIRCLED DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x277B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_444)
{
    // 2785 0041;	
    // (‚ûÖ) DINGBAT CIRCLED SANS-SERIF DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2785, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_445)
{
    // 278F 0041;	
    // (‚ûè) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x278F, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_446)
{
    // 2076 0061;	
    // (‚Å∂) SUPERSCRIPT SIX	[1CA9 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2076, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_447)
{
    // 2076 0041;	
    // (‚Å∂) SUPERSCRIPT SIX	[1CA9 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x2076, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_448)
{
    // 2086 0061;	
    // (‚ÇÜ) SUBSCRIPT SIX	[1CA9 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2086, 0x0061 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_449)
{
    // 2086 0041;	
    // (‚ÇÜ) SUBSCRIPT SIX	[1CA9 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2086, 0x0041 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_450)
{
    // 0036 0062;	
    // (6) DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0036, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_451)
{
    // 0666 0062;	
    // (‚ÄéŸ¶‚Äé) ARABIC-INDIC DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0666, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_452)
{
    // 06F6 0062;	
    // (€∂) EXTENDED ARABIC-INDIC DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_453)
{
    // 07C6 0062;	
    // (‚Äé‚ÄéﬂÜ‚Äé‚Äé) NKO DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_454)
{
    // 096C 0062;	
    // (‡•¨) DEVANAGARI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_455)
{
    // 09EC 0062;	
    // (‡ß¨) BENGALI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EC, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_456)
{
    // 0A6C 0062;	
    // (‡©¨) GURMUKHI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_457)
{
    // 0AEC 0062;	
    // (‡´¨) GUJARATI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEC, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_458)
{
    // 0B6C 0062;	
    // (‡≠¨) ORIYA DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_459)
{
    // 0BEC 0062;	
    // (‡Ø¨) TAMIL DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEC, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_460)
{
    // 0C6C 0062;	
    // (‡±¨) TELUGU DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_461)
{
    // 0CEC 0062;	
    // (‡≥¨) KANNADA DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEC, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_462)
{
    // 0D6C 0062;	
    // (‡µ¨) MALAYALAM DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_463)
{
    // 0DEC 0062;	
    // (‡∑¨) SINHALA LITH DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEC, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_464)
{
    // 0E56 0062;	
    // (‡πñ) THAI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E56, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_465)
{
    // 0ED6 0062;	
    // (‡ªñ) LAO DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_466)
{
    // 0F26 0062;	
    // (‡º¶) TIBETAN DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F26, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_467)
{
    // 1046 0062;	
    // (·ÅÜ) MYANMAR DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1046, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_468)
{
    // 1096 0062;	
    // (·Çñ) MYANMAR SHAN DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1096, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_469)
{
    // 136E 0062;	
    // (·çÆ) ETHIOPIC DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136E, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_470)
{
    // 17E6 0062;	
    // (·ü¶) KHMER DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_471)
{
    // 17F6 0062;	
    // (·ü∂) KHMER SYMBOL LEK ATTAK PRAM-MUOY	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_472)
{
    // 1816 0062;	
    // (·†ñ) MONGOLIAN DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1816, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_473)
{
    // 194C 0062;	
    // (·•å) LIMBU DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_474)
{
    // 19D6 0062;	
    // (·ßñ) NEW TAI LUE DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_475)
{
    // 1A86 0062;	
    // (·™Ü) TAI THAM HORA DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A86, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_476)
{
    // 1A96 0062;	
    // (·™ñ) TAI THAM THAM DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A96, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_477)
{
    // 1B56 0062;	
    // (·≠ñ) BALINESE DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B56, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_478)
{
    // 1BB6 0062;	
    // (·Æ∂) SUNDANESE DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_479)
{
    // 1C46 0062;	
    // (·±Ü) LEPCHA DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C46, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_480)
{
    // 1C56 0062;	
    // (·±ñ) OL CHIKI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C56, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_481)
{
    // 2185 0062;	
    // (‚ÜÖ) ROMAN NUMERAL SIX LATE FORM	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2185, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_482)
{
    // 3026 0062;	
    // („Ä¶) HANGZHOU NUMERAL SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3026, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_483)
{
    // A626 0062;	
    // (Íò¶) VAI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA626, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_484)
{
    // A8D6 0062;	
    // (Í£ñ) SAURASHTRA DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_485)
{
    // A906 0062;	
    // (Í§Ü) KAYAH LI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA906, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_486)
{
    // A9D6 0062;	
    // (Íßñ) JAVANESE DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_487)
{
    // A9F6 0062;	
    // (Íß∂) MYANMAR TAI LAING DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_488)
{
    // AA56 0062;	
    // (Í©ñ) CHAM DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA56, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_489)
{
    // ABF6 0062;	
    // (ÍØ∂) MEETEI MAYEK DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_490)
{
    // 1010C 0062;	
    // (êÑå) AEGEAN NUMBER SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_491)
{
    // 102E6 0062;	
    // (êã¶) COPTIC EPACT DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_492)
{
    // 104A6 0062;	
    // (êí¶) OSMANYA DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_493)
{
    // 109C5 0062;	
    // (‚Äé‚ÄéêßÖ‚Äé‚Äé) MEROITIC CURSIVE NUMBER SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_494)
{
    // 10E65 0062;	
    // (‚Äéêπ•‚Äé) RUMI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E65, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_495)
{
    // 11057 0062;	
    // (ëÅó) BRAHMI NUMBER SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11057, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_496)
{
    // 1106C 0062;	
    // (ëÅ¨) BRAHMI DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_497)
{
    // 110F6 0062;	
    // (ëÉ∂) SORA SOMPENG DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_498)
{
    // 1113C 0062;	
    // (ëÑº) CHAKMA DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_088_499)
{
    // 111D6 0062;	
    // (ëáñ) SHARADA DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D6, 0x0062 };
    uint32_t const ces[9] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

