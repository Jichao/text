// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_001_000)
{
    // 030D 0334;	
    // (̍) COMBINING VERTICAL LINE ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x030D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_001)
{
    // 0334 030D;	
    // (̍) COMBINING VERTICAL LINE ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x030D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_002)
{
    // 030E 0334;	
    // (̎) COMBINING DOUBLE VERTICAL LINE ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x030E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_003)
{
    // 0334 030E;	
    // (̎) COMBINING DOUBLE VERTICAL LINE ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x030E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_004)
{
    // 0312 0334;	
    // (̒) COMBINING TURNED COMMA ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0312, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_005)
{
    // 0334 0312;	
    // (̒) COMBINING TURNED COMMA ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0312 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_006)
{
    // 0315 0334;	
    // (̕) COMBINING COMMA ABOVE RIGHT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0315, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_007)
{
    // 0334 0315;	
    // (̕) COMBINING COMMA ABOVE RIGHT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0315 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_008)
{
    // 031A 0334;	
    // (̚) COMBINING LEFT ANGLE ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x031A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_009)
{
    // 0334 031A;	
    // (̚) COMBINING LEFT ANGLE ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x031A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_010)
{
    // 0334 033D;	
    // (̽) COMBINING X ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x033D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_011)
{
    // 033D 0334;	
    // (̽) COMBINING X ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x033D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_012)
{
    // 0334 033E;	
    // (̾) COMBINING VERTICAL TILDE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x033E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_013)
{
    // 033E 0334;	
    // (̾) COMBINING VERTICAL TILDE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x033E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_014)
{
    // 0334 033F;	
    // (̿) COMBINING DOUBLE OVERLINE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x033F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_015)
{
    // 033F 0334;	
    // (̿) COMBINING DOUBLE OVERLINE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x033F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_016)
{
    // 0334 0346;	
    // (͆) COMBINING BRIDGE ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0346 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_017)
{
    // 0346 0334;	
    // (͆) COMBINING BRIDGE ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0346, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_018)
{
    // 0334 034A;	
    // (͊) COMBINING NOT TILDE ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x034A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_019)
{
    // 034A 0334;	
    // (͊) COMBINING NOT TILDE ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x034A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_020)
{
    // 0334 034B;	
    // (͋) COMBINING HOMOTHETIC ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x034B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_021)
{
    // 034B 0334;	
    // (͋) COMBINING HOMOTHETIC ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x034B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_022)
{
    // 0334 034C;	
    // (͌) COMBINING ALMOST EQUAL TO ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x034C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_023)
{
    // 034C 0334;	
    // (͌) COMBINING ALMOST EQUAL TO ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x034C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_024)
{
    // 0334 0350;	
    // (͐) COMBINING RIGHT ARROWHEAD ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0350 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_025)
{
    // 0350 0334;	
    // (͐) COMBINING RIGHT ARROWHEAD ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0350, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_026)
{
    // 0334 0351;	
    // (͑) COMBINING LEFT HALF RING ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0351 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_027)
{
    // 0351 0334;	
    // (͑) COMBINING LEFT HALF RING ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0351, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_028)
{
    // 0334 0352;	
    // (͒) COMBINING FERMATA	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0352 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_029)
{
    // 0352 0334;	
    // (͒) COMBINING FERMATA	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0352, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_030)
{
    // 0334 0357;	
    // (͗) COMBINING RIGHT HALF RING ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0357 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_031)
{
    // 0357 0334;	
    // (͗) COMBINING RIGHT HALF RING ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0357, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_032)
{
    // 0334 035B;	
    // (͛) COMBINING ZIGZAG ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x035B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_033)
{
    // 035B 0334;	
    // (͛) COMBINING ZIGZAG ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x035B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_034)
{
    // 0334 035D;	
    // (͝) COMBINING DOUBLE BREVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x035D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_035)
{
    // 035D 0334;	
    // (͝) COMBINING DOUBLE BREVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x035D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_036)
{
    // 0334 035E;	
    // (͞) COMBINING DOUBLE MACRON	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x035E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_037)
{
    // 035E 0334;	
    // (͞) COMBINING DOUBLE MACRON	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x035E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_038)
{
    // 0334 0484;	
    // (҄) COMBINING CYRILLIC PALATALIZATION	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0484 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_039)
{
    // 0484 0334;	
    // (҄) COMBINING CYRILLIC PALATALIZATION	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0484, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_040)
{
    // 0334 0487;	
    // (҇) COMBINING CYRILLIC POKRYTIE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0487 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_041)
{
    // 0487 0334;	
    // (҇) COMBINING CYRILLIC POKRYTIE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0487, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_042)
{
    // 0334 0741;	
    // (݁) SYRIAC QUSHSHAYA	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0741 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_043)
{
    // 0741 0334;	
    // (݁) SYRIAC QUSHSHAYA	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0741, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_044)
{
    // 0334 0745;	
    // (݅) SYRIAC THREE DOTS ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0745 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_045)
{
    // 0745 0334;	
    // (݅) SYRIAC THREE DOTS ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0745, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_046)
{
    // 0334 17DD;	
    // (៝) KHMER SIGN ATTHACAN	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x17DD };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_047)
{
    // 17DD 0334;	
    // (៝) KHMER SIGN ATTHACAN	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DD, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_048)
{
    // 0334 1AB0;	
    // (᪰) COMBINING DOUBLED CIRCUMFLEX ACCENT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1AB0 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_049)
{
    // 1AB0 0334;	
    // (᪰) COMBINING DOUBLED CIRCUMFLEX ACCENT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_050)
{
    // 0334 1AB1;	
    // (᪱) COMBINING DIAERESIS-RING	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1AB1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_051)
{
    // 1AB1 0334;	
    // (᪱) COMBINING DIAERESIS-RING	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_052)
{
    // 0334 1AB2;	
    // (᪲) COMBINING INFINITY	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1AB2 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_053)
{
    // 1AB2 0334;	
    // (᪲) COMBINING INFINITY	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB2, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_054)
{
    // 0334 1AB3;	
    // (᪳) COMBINING DOWNWARDS ARROW	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1AB3 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_055)
{
    // 1AB3 0334;	
    // (᪳) COMBINING DOWNWARDS ARROW	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB3, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_056)
{
    // 0334 1AB4;	
    // (᪴) COMBINING TRIPLE DOT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1AB4 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_057)
{
    // 1AB4 0334;	
    // (᪴) COMBINING TRIPLE DOT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB4, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_058)
{
    // 0334 1ABB;	
    // (᪻) COMBINING PARENTHESES ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1ABB };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_059)
{
    // 1ABB 0334;	
    // (᪻) COMBINING PARENTHESES ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABB, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_060)
{
    // 0334 1ABC;	
    // (᪼) COMBINING DOUBLE PARENTHESES ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1ABC };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_061)
{
    // 1ABC 0334;	
    // (᪼) COMBINING DOUBLE PARENTHESES ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABC, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_062)
{
    // 0334 1DC0;	
    // (᷀) COMBINING DOTTED GRAVE ACCENT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DC0 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_063)
{
    // 1DC0 0334;	
    // (᷀) COMBINING DOTTED GRAVE ACCENT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_064)
{
    // 0334 1DC1;	
    // (᷁) COMBINING DOTTED ACUTE ACCENT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DC1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_065)
{
    // 1DC1 0334;	
    // (᷁) COMBINING DOTTED ACUTE ACCENT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_066)
{
    // 0334 1DC3;	
    // (᷃) COMBINING SUSPENSION MARK	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DC3 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_067)
{
    // 1DC3 0334;	
    // (᷃) COMBINING SUSPENSION MARK	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC3, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_068)
{
    // 0334 1DC4;	
    // (᷄) COMBINING MACRON-ACUTE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DC4 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_069)
{
    // 1DC4 0334;	
    // (᷄) COMBINING MACRON-ACUTE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC4, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_070)
{
    // 0334 1DC5;	
    // (᷅) COMBINING GRAVE-MACRON	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DC5 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_071)
{
    // 1DC5 0334;	
    // (᷅) COMBINING GRAVE-MACRON	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC5, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_072)
{
    // 0334 1DC6;	
    // (᷆) COMBINING MACRON-GRAVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DC6 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_073)
{
    // 1DC6 0334;	
    // (᷆) COMBINING MACRON-GRAVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC6, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_074)
{
    // 0334 1DC7;	
    // (᷇) COMBINING ACUTE-MACRON	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DC7 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_075)
{
    // 1DC7 0334;	
    // (᷇) COMBINING ACUTE-MACRON	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC7, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_076)
{
    // 0334 1DC8;	
    // (᷈) COMBINING GRAVE-ACUTE-GRAVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DC8 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_077)
{
    // 1DC8 0334;	
    // (᷈) COMBINING GRAVE-ACUTE-GRAVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC8, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_078)
{
    // 0334 1DC9;	
    // (᷉) COMBINING ACUTE-GRAVE-ACUTE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DC9 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_079)
{
    // 1DC9 0334;	
    // (᷉) COMBINING ACUTE-GRAVE-ACUTE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC9, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_080)
{
    // 0334 1DCB;	
    // (᷋) COMBINING BREVE-MACRON	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DCB };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_081)
{
    // 1DCB 0334;	
    // (᷋) COMBINING BREVE-MACRON	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCB, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_082)
{
    // 0334 1DCC;	
    // (᷌) COMBINING MACRON-BREVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DCC };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_083)
{
    // 1DCC 0334;	
    // (᷌) COMBINING MACRON-BREVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCC, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_084)
{
    // 0334 1DCD;	
    // (᷍) COMBINING DOUBLE CIRCUMFLEX ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DCD };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_085)
{
    // 1DCD 0334;	
    // (᷍) COMBINING DOUBLE CIRCUMFLEX ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCD, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_086)
{
    // 0334 1DCE;	
    // (᷎) COMBINING OGONEK ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DCE };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_087)
{
    // 1DCE 0334;	
    // (᷎) COMBINING OGONEK ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCE, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_088)
{
    // 0334 1DD1;	
    // (᷑) COMBINING UR ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DD1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_089)
{
    // 1DD1 0334;	
    // (᷑) COMBINING UR ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DD1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_090)
{
    // 0334 1DF5;	
    // (᷵) COMBINING UP TACK ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DF5 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_091)
{
    // 1DF5 0334;	
    // (᷵) COMBINING UP TACK ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF5, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_092)
{
    // 0334 1DF6;	
    // (᷶) COMBINING KAVYKA ABOVE RIGHT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DF6 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_093)
{
    // 1DF6 0334;	
    // (᷶) COMBINING KAVYKA ABOVE RIGHT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF6, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_094)
{
    // 0334 1DF7;	
    // (᷷) COMBINING KAVYKA ABOVE LEFT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DF7 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_095)
{
    // 1DF7 0334;	
    // (᷷) COMBINING KAVYKA ABOVE LEFT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF7, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_096)
{
    // 0334 1DF8;	
    // (᷸) COMBINING DOT ABOVE LEFT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DF8 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_097)
{
    // 1DF8 0334;	
    // (᷸) COMBINING DOT ABOVE LEFT	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF8, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_098)
{
    // 0334 1DFB;	
    // (᷻) COMBINING DELETION MARK	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DFB };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_099)
{
    // 1DFB 0334;	
    // (᷻) COMBINING DELETION MARK	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFB, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_100)
{
    // 0334 1DFE;	
    // (᷾) COMBINING LEFT ARROWHEAD ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DFE };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_101)
{
    // 1DFE 0334;	
    // (᷾) COMBINING LEFT ARROWHEAD ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFE, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_102)
{
    // 0334 20F0;	
    // (⃰) COMBINING ASTERISK ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20F0 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_103)
{
    // 20F0 0334;	
    // (⃰) COMBINING ASTERISK ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x20F0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_104)
{
    // 0334 2CEF;	
    // (⳯) COPTIC COMBINING NI ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x2CEF };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_105)
{
    // 2CEF 0334;	
    // (⳯) COPTIC COMBINING NI ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEF, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_106)
{
    // 0334 A67C;	
    // (꙼) COMBINING CYRILLIC KAVYKA	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA67C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_107)
{
    // A67C 0334;	
    // (꙼) COMBINING CYRILLIC KAVYKA	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_108)
{
    // 0334 A67D;	
    // (꙽) COMBINING CYRILLIC PAYEROK	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA67D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_109)
{
    // A67D 0334;	
    // (꙽) COMBINING CYRILLIC PAYEROK	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_110)
{
    // 0334 10AE5;	
    // (𐫥) MANICHAEAN ABBREVIATION MARK ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x10AE5 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_111)
{
    // 10AE5 0334;	
    // (𐫥) MANICHAEAN ABBREVIATION MARK ABOVE	[| 004A 0033 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE5, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0033, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_112)
{
    // 0316 0334;	
    // (̖) COMBINING GRAVE ACCENT BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0316, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_113)
{
    // 0334 0316;	
    // (̖) COMBINING GRAVE ACCENT BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0316 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_114)
{
    // 0317 0334;	
    // (̗) COMBINING ACUTE ACCENT BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0317, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_115)
{
    // 0334 0317;	
    // (̗) COMBINING ACUTE ACCENT BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0317 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_116)
{
    // 0318 0334;	
    // (̘) COMBINING LEFT TACK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0318, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_117)
{
    // 0334 0318;	
    // (̘) COMBINING LEFT TACK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0318 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_118)
{
    // 0319 0334;	
    // (̙) COMBINING RIGHT TACK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0319, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_119)
{
    // 0334 0319;	
    // (̙) COMBINING RIGHT TACK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0319 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_120)
{
    // 031C 0334;	
    // (̜) COMBINING LEFT HALF RING BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x031C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_121)
{
    // 0334 031C;	
    // (̜) COMBINING LEFT HALF RING BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x031C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_122)
{
    // 031D 0334;	
    // (̝) COMBINING UP TACK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x031D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_123)
{
    // 0334 031D;	
    // (̝) COMBINING UP TACK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x031D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_124)
{
    // 031E 0334;	
    // (̞) COMBINING DOWN TACK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x031E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_125)
{
    // 0334 031E;	
    // (̞) COMBINING DOWN TACK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x031E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_126)
{
    // 031F 0334;	
    // (̟) COMBINING PLUS SIGN BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x031F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_127)
{
    // 0334 031F;	
    // (̟) COMBINING PLUS SIGN BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x031F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_128)
{
    // 0320 0334;	
    // (̠) COMBINING MINUS SIGN BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0320, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_129)
{
    // 0334 0320;	
    // (̠) COMBINING MINUS SIGN BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0320 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_130)
{
    // 0329 0334;	
    // (̩) COMBINING VERTICAL LINE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0329, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_131)
{
    // 0334 0329;	
    // (̩) COMBINING VERTICAL LINE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0329 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_132)
{
    // 032A 0334;	
    // (̪) COMBINING BRIDGE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x032A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_133)
{
    // 0334 032A;	
    // (̪) COMBINING BRIDGE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x032A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_134)
{
    // 032B 0334;	
    // (̫) COMBINING INVERTED DOUBLE ARCH BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x032B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_135)
{
    // 0334 032B;	
    // (̫) COMBINING INVERTED DOUBLE ARCH BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x032B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_136)
{
    // 032C 0334;	
    // (̬) COMBINING CARON BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x032C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_137)
{
    // 0334 032C;	
    // (̬) COMBINING CARON BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x032C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_138)
{
    // 032F 0334;	
    // (̯) COMBINING INVERTED BREVE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x032F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_139)
{
    // 0334 032F;	
    // (̯) COMBINING INVERTED BREVE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x032F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_140)
{
    // 0333 0334;	
    // (̳) COMBINING DOUBLE LOW LINE	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0333, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_141)
{
    // 0334 0333;	
    // (̳) COMBINING DOUBLE LOW LINE	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0333 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_142)
{
    // 0334 033A;	
    // (̺) COMBINING INVERTED BRIDGE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x033A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_143)
{
    // 033A 0334;	
    // (̺) COMBINING INVERTED BRIDGE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x033A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_144)
{
    // 0334 033B;	
    // (̻) COMBINING SQUARE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x033B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_145)
{
    // 033B 0334;	
    // (̻) COMBINING SQUARE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x033B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_146)
{
    // 0334 033C;	
    // (̼) COMBINING SEAGULL BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x033C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_147)
{
    // 033C 0334;	
    // (̼) COMBINING SEAGULL BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x033C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_148)
{
    // 0334 0347;	
    // (͇) COMBINING EQUALS SIGN BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0347 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_149)
{
    // 0347 0334;	
    // (͇) COMBINING EQUALS SIGN BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0347, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_150)
{
    // 0334 0348;	
    // (͈) COMBINING DOUBLE VERTICAL LINE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0348 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_151)
{
    // 0348 0334;	
    // (͈) COMBINING DOUBLE VERTICAL LINE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0348, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_152)
{
    // 0334 0349;	
    // (͉) COMBINING LEFT ANGLE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0349 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_153)
{
    // 0349 0334;	
    // (͉) COMBINING LEFT ANGLE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0349, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_154)
{
    // 0334 034D;	
    // (͍) COMBINING LEFT RIGHT ARROW BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x034D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_155)
{
    // 034D 0334;	
    // (͍) COMBINING LEFT RIGHT ARROW BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x034D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_156)
{
    // 0334 034E;	
    // (͎) COMBINING UPWARDS ARROW BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x034E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_157)
{
    // 034E 0334;	
    // (͎) COMBINING UPWARDS ARROW BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x034E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_158)
{
    // 0334 0353;	
    // (͓) COMBINING X BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0353 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_159)
{
    // 0353 0334;	
    // (͓) COMBINING X BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0353, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_160)
{
    // 0334 0354;	
    // (͔) COMBINING LEFT ARROWHEAD BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0354 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_161)
{
    // 0354 0334;	
    // (͔) COMBINING LEFT ARROWHEAD BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0354, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_162)
{
    // 0334 0355;	
    // (͕) COMBINING RIGHT ARROWHEAD BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0355 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_163)
{
    // 0355 0334;	
    // (͕) COMBINING RIGHT ARROWHEAD BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0355, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_164)
{
    // 0334 0356;	
    // (͖) COMBINING RIGHT ARROWHEAD AND UP ARROWHEAD BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0356 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_165)
{
    // 0356 0334;	
    // (͖) COMBINING RIGHT ARROWHEAD AND UP ARROWHEAD BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0356, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_166)
{
    // 0334 0359;	
    // (͙) COMBINING ASTERISK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0359 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_167)
{
    // 0359 0334;	
    // (͙) COMBINING ASTERISK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0359, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_168)
{
    // 0334 035A;	
    // (͚) COMBINING DOUBLE RING BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x035A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_169)
{
    // 035A 0334;	
    // (͚) COMBINING DOUBLE RING BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x035A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_170)
{
    // 0334 035C;	
    // (͜) COMBINING DOUBLE BREVE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x035C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_171)
{
    // 035C 0334;	
    // (͜) COMBINING DOUBLE BREVE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x035C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_172)
{
    // 0334 035F;	
    // (͟) COMBINING DOUBLE MACRON BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x035F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_173)
{
    // 035F 0334;	
    // (͟) COMBINING DOUBLE MACRON BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x035F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_174)
{
    // 0334 0362;	
    // (͢) COMBINING DOUBLE RIGHTWARDS ARROW BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0362 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_175)
{
    // 0362 0334;	
    // (͢) COMBINING DOUBLE RIGHTWARDS ARROW BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0362, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_176)
{
    // 0334 0742;	
    // (݂) SYRIAC RUKKAKHA	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0742 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_177)
{
    // 0742 0334;	
    // (݂) SYRIAC RUKKAKHA	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0742, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_178)
{
    // 0334 0746;	
    // (݆) SYRIAC THREE DOTS BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0746 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_179)
{
    // 0746 0334;	
    // (݆) SYRIAC THREE DOTS BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0746, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_180)
{
    // 0334 0859;	
    // (࡙) MANDAIC AFFRICATION MARK	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0859 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_181)
{
    // 0859 0334;	
    // (࡙) MANDAIC AFFRICATION MARK	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0859, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_182)
{
    // 0334 085A;	
    // (࡚) MANDAIC VOCALIZATION MARK	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x085A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_183)
{
    // 085A 0334;	
    // (࡚) MANDAIC VOCALIZATION MARK	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x085A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_184)
{
    // 0334 085B;	
    // (࡛) MANDAIC GEMINATION MARK	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x085B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_185)
{
    // 085B 0334;	
    // (࡛) MANDAIC GEMINATION MARK	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x085B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_186)
{
    // 0334 1AB5;	
    // (᪵) COMBINING X-X BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1AB5 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_187)
{
    // 1AB5 0334;	
    // (᪵) COMBINING X-X BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB5, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_188)
{
    // 0334 1AB6;	
    // (᪶) COMBINING WIGGLY LINE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1AB6 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_189)
{
    // 1AB6 0334;	
    // (᪶) COMBINING WIGGLY LINE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB6, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_190)
{
    // 0334 1AB7;	
    // (᪷) COMBINING OPEN MARK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1AB7 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_191)
{
    // 1AB7 0334;	
    // (᪷) COMBINING OPEN MARK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB7, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_192)
{
    // 0334 1AB8;	
    // (᪸) COMBINING DOUBLE OPEN MARK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1AB8 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_193)
{
    // 1AB8 0334;	
    // (᪸) COMBINING DOUBLE OPEN MARK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB8, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_194)
{
    // 0334 1AB9;	
    // (᪹) COMBINING LIGHT CENTRALIZATION STROKE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1AB9 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_195)
{
    // 1AB9 0334;	
    // (᪹) COMBINING LIGHT CENTRALIZATION STROKE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB9, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_196)
{
    // 0334 1ABA;	
    // (᪺) COMBINING STRONG CENTRALIZATION STROKE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1ABA };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_197)
{
    // 1ABA 0334;	
    // (᪺) COMBINING STRONG CENTRALIZATION STROKE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABA, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_198)
{
    // 0334 1ABD;	
    // (᪽) COMBINING PARENTHESES BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1ABD };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_199)
{
    // 1ABD 0334;	
    // (᪽) COMBINING PARENTHESES BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABD, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_200)
{
    // 0334 1DC2;	
    // (᷂) COMBINING SNAKE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DC2 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_201)
{
    // 1DC2 0334;	
    // (᷂) COMBINING SNAKE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC2, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_202)
{
    // 0334 1DCF;	
    // (᷏) COMBINING ZIGZAG BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DCF };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_203)
{
    // 1DCF 0334;	
    // (᷏) COMBINING ZIGZAG BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCF, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_204)
{
    // 0334 1DD0;	
    // (᷐) COMBINING IS BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DD0 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_205)
{
    // 1DD0 0334;	
    // (᷐) COMBINING IS BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DD0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_206)
{
    // 0334 1DF9;	
    // (᷹) COMBINING WIDE INVERTED BRIDGE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DF9 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_207)
{
    // 1DF9 0334;	
    // (᷹) COMBINING WIDE INVERTED BRIDGE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF9, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_208)
{
    // 0334 1DFC;	
    // (᷼) COMBINING DOUBLE INVERTED BREVE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DFC };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_209)
{
    // 1DFC 0334;	
    // (᷼) COMBINING DOUBLE INVERTED BREVE BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFC, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_210)
{
    // 0334 1DFD;	
    // (᷽) COMBINING ALMOST EQUAL TO BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DFD };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_211)
{
    // 1DFD 0334;	
    // (᷽) COMBINING ALMOST EQUAL TO BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFD, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_212)
{
    // 0334 1DFF;	
    // (᷿) COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1DFF };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_213)
{
    // 1DFF 0334;	
    // (᷿) COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFF, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_214)
{
    // 0334 20EC;	
    // (⃬) COMBINING RIGHTWARDS HARPOON WITH BARB DOWNWARDS	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20EC };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_215)
{
    // 20EC 0334;	
    // (⃬) COMBINING RIGHTWARDS HARPOON WITH BARB DOWNWARDS	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EC, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_216)
{
    // 0334 20ED;	
    // (⃭) COMBINING LEFTWARDS HARPOON WITH BARB DOWNWARDS	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20ED };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_217)
{
    // 20ED 0334;	
    // (⃭) COMBINING LEFTWARDS HARPOON WITH BARB DOWNWARDS	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x20ED, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_218)
{
    // 0334 20EE;	
    // (⃮) COMBINING LEFT ARROW BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20EE };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_219)
{
    // 20EE 0334;	
    // (⃮) COMBINING LEFT ARROW BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EE, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_220)
{
    // 0334 20EF;	
    // (⃯) COMBINING RIGHT ARROW BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20EF };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_221)
{
    // 20EF 0334;	
    // (⃯) COMBINING RIGHT ARROW BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EF, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_222)
{
    // 0334 FE27;	
    // (︧) COMBINING LIGATURE LEFT HALF BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE27 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_223)
{
    // FE27 0334;	
    // (︧) COMBINING LIGATURE LEFT HALF BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE27, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_224)
{
    // 0334 10A0D;	
    // (𐨍) KHAROSHTHI SIGN DOUBLE RING BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x10A0D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_225)
{
    // 10A0D 0334;	
    // (𐨍) KHAROSHTHI SIGN DOUBLE RING BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_226)
{
    // 0334 10AE6;	
    // (𐫦) MANICHAEAN ABBREVIATION MARK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x10AE6 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_227)
{
    // 10AE6 0334;	
    // (𐫦) MANICHAEAN ABBREVIATION MARK BELOW	[| 004A 0034 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE6, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0034, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_228)
{
    // 0334 3099;	
    // (゙) COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[| 004A 0037 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x3099 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0037, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_229)
{
    // 3099 0334;	
    // (゙) COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[| 004A 0037 | 0002 0002 |]

    uint32_t cps[2] = { 0x3099, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0037, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_230)
{
    // 0334 309A;	
    // (゚) COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[| 004A 0038 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x309A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0038, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_231)
{
    // 309A 0334;	
    // (゚) COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[| 004A 0038 | 0002 0002 |]

    uint32_t cps[2] = { 0x309A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0038, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_232)
{
    // 0305 0334;	
    // (̅) COMBINING OVERLINE	[| 004A 003A | 0002 0002 |]

    uint32_t cps[2] = { 0x0305, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_233)
{
    // 0334 0305;	
    // (̅) COMBINING OVERLINE	[| 004A 003A | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0305 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_234)
{
    // 0309 0334;	
    // (̉) COMBINING HOOK ABOVE	[| 004A 003B | 0002 0002 |]

    uint32_t cps[2] = { 0x0309, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_235)
{
    // 0334 0309;	
    // (̉) COMBINING HOOK ABOVE	[| 004A 003B | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0309 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_236)
{
    // 030F 0334;	
    // (̏) COMBINING DOUBLE GRAVE ACCENT	[| 004A 003C | 0002 0002 |]

    uint32_t cps[2] = { 0x030F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_237)
{
    // 0334 030F;	
    // (̏) COMBINING DOUBLE GRAVE ACCENT	[| 004A 003C | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x030F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_238)
{
    // 0310 0334;	
    // (̐) COMBINING CANDRABINDU	[| 004A 003D | 0002 0002 |]

    uint32_t cps[2] = { 0x0310, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_239)
{
    // 0334 0310;	
    // (̐) COMBINING CANDRABINDU	[| 004A 003D | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0310 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_240)
{
    // 0311 0334;	
    // (̑) COMBINING INVERTED BREVE	[| 004A 003E | 0002 0002 |]

    uint32_t cps[2] = { 0x0311, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_241)
{
    // 0334 0311;	
    // (̑) COMBINING INVERTED BREVE	[| 004A 003E | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0311 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_242)
{
    // 031B 0334;	
    // (̛) COMBINING HORN	[| 004A 003F | 0002 0002 |]

    uint32_t cps[2] = { 0x031B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_243)
{
    // 0334 031B;	
    // (̛) COMBINING HORN	[| 004A 003F | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x031B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x003F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_244)
{
    // 0321 0334;	
    // (̡) COMBINING PALATALIZED HOOK BELOW	[| 004A 0040 | 0002 0002 |]

    uint32_t cps[2] = { 0x0321, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0040, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_245)
{
    // 0334 0321;	
    // (̡) COMBINING PALATALIZED HOOK BELOW	[| 004A 0040 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0321 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0040, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_246)
{
    // 0322 0334;	
    // (̢) COMBINING RETROFLEX HOOK BELOW	[| 004A 0041 | 0002 0002 |]

    uint32_t cps[2] = { 0x0322, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0041, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_247)
{
    // 0334 0322;	
    // (̢) COMBINING RETROFLEX HOOK BELOW	[| 004A 0041 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0322 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0041, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_248)
{
    // 0323 0334;	
    // (̣) COMBINING DOT BELOW	[| 004A 0042 | 0002 0002 |]

    uint32_t cps[2] = { 0x0323, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_249)
{
    // 0334 0323;	
    // (̣) COMBINING DOT BELOW	[| 004A 0042 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0323 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_250)
{
    // 0324 0334;	
    // (̤) COMBINING DIAERESIS BELOW	[| 004A 0043 | 0002 0002 |]

    uint32_t cps[2] = { 0x0324, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0043, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_251)
{
    // 0334 0324;	
    // (̤) COMBINING DIAERESIS BELOW	[| 004A 0043 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0324 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0043, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_252)
{
    // 0325 0334;	
    // (̥) COMBINING RING BELOW	[| 004A 0044 | 0002 0002 |]

    uint32_t cps[2] = { 0x0325, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0044, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_253)
{
    // 0334 0325;	
    // (̥) COMBINING RING BELOW	[| 004A 0044 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0325 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0044, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_254)
{
    // 0326 0334;	
    // (̦) COMBINING COMMA BELOW	[| 004A 0045 | 0002 0002 |]

    uint32_t cps[2] = { 0x0326, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0045, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_255)
{
    // 0334 0326;	
    // (̦) COMBINING COMMA BELOW	[| 004A 0045 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0326 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0045, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_256)
{
    // 032D 0334;	
    // (̭) COMBINING CIRCUMFLEX ACCENT BELOW	[| 004A 0046 | 0002 0002 |]

    uint32_t cps[2] = { 0x032D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0046, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_257)
{
    // 0334 032D;	
    // (̭) COMBINING CIRCUMFLEX ACCENT BELOW	[| 004A 0046 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x032D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0046, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_258)
{
    // 032E 0334;	
    // (̮) COMBINING BREVE BELOW	[| 004A 0047 | 0002 0002 |]

    uint32_t cps[2] = { 0x032E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0047, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_259)
{
    // 0334 032E;	
    // (̮) COMBINING BREVE BELOW	[| 004A 0047 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x032E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0047, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_260)
{
    // 0330 0334;	
    // (̰) COMBINING TILDE BELOW	[| 004A 0048 | 0002 0002 |]

    uint32_t cps[2] = { 0x0330, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0048, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_261)
{
    // 0334 0330;	
    // (̰) COMBINING TILDE BELOW	[| 004A 0048 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0330 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0048, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_262)
{
    // 0331 0334;	
    // (̱) COMBINING MACRON BELOW	[| 004A 0049 | 0002 0002 |]

    uint32_t cps[2] = { 0x0331, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0049, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_263)
{
    // 0334 0331;	
    // (̱) COMBINING MACRON BELOW	[| 004A 0049 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0331 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0049, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_264)
{
    // 0334 0334;	
    // (̴) COMBINING TILDE OVERLAY	[| 004A 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_265)
{
    // 0334 0339;	
    // (̹) COMBINING RIGHT HALF RING BELOW	[| 004A 004B | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0339 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_266)
{
    // 0339 0334;	
    // (̹) COMBINING RIGHT HALF RING BELOW	[| 004A 004B | 0002 0002 |]

    uint32_t cps[2] = { 0x0339, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_267)
{
    // 0334 0345;	
    // (ͅ) COMBINING GREEK YPOGEGRAMMENI	[| 004A 004C | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0345 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_268)
{
    // 0345 0334;	
    // (ͅ) COMBINING GREEK YPOGEGRAMMENI	[| 004A 004C | 0002 0002 |]

    uint32_t cps[2] = { 0x0345, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_269)
{
    // 0334 0358;	
    // (͘) COMBINING DOT ABOVE RIGHT	[| 004A 004D | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0358 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_270)
{
    // 0358 0334;	
    // (͘) COMBINING DOT ABOVE RIGHT	[| 004A 004D | 0002 0002 |]

    uint32_t cps[2] = { 0x0358, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_271)
{
    // 0334 0360;	
    // (͠) COMBINING DOUBLE TILDE	[| 004A 004E | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0360 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_272)
{
    // 0360 0334;	
    // (͠) COMBINING DOUBLE TILDE	[| 004A 004E | 0002 0002 |]

    uint32_t cps[2] = { 0x0360, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_273)
{
    // 0334 FE22;	
    // (︢) COMBINING DOUBLE TILDE LEFT HALF	[| 004A 004E | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE22 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_274)
{
    // FE22 0334;	
    // (︢) COMBINING DOUBLE TILDE LEFT HALF	[| 004A 004E | 0002 0002 |]

    uint32_t cps[2] = { 0xFE22, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_275)
{
    // 0334 FE29;	
    // (︩) COMBINING TILDE LEFT HALF BELOW	[| 004A 004E | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE29 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_276)
{
    // FE29 0334;	
    // (︩) COMBINING TILDE LEFT HALF BELOW	[| 004A 004E | 0002 0002 |]

    uint32_t cps[2] = { 0xFE29, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_277)
{
    // 0334 0361;	
    // (͡) COMBINING DOUBLE INVERTED BREVE	[| 004A 004F | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0361 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_278)
{
    // 0361 0334;	
    // (͡) COMBINING DOUBLE INVERTED BREVE	[| 004A 004F | 0002 0002 |]

    uint32_t cps[2] = { 0x0361, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_279)
{
    // 0334 FE20;	
    // (︠) COMBINING LIGATURE LEFT HALF	[| 004A 004F | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE20 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_280)
{
    // FE20 0334;	
    // (︠) COMBINING LIGATURE LEFT HALF	[| 004A 004F | 0002 0002 |]

    uint32_t cps[2] = { 0xFE20, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x004F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_281)
{
    // 0334 0483;	
    // (҃) COMBINING CYRILLIC TITLO	[| 004A 0050 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0483 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0050, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_282)
{
    // 0483 0334;	
    // (҃) COMBINING CYRILLIC TITLO	[| 004A 0050 | 0002 0002 |]

    uint32_t cps[2] = { 0x0483, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0050, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_283)
{
    // 0334 FE2E;	
    // (︮) COMBINING CYRILLIC TITLO LEFT HALF	[| 004A 0050 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFE2E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0050, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_284)
{
    // FE2E 0334;	
    // (︮) COMBINING CYRILLIC TITLO LEFT HALF	[| 004A 0050 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE2E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0050, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_285)
{
    // 0334 A66F;	
    // (꙯) COMBINING CYRILLIC VZMET	[| 004A 0051 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA66F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0051, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_286)
{
    // A66F 0334;	
    // (꙯) COMBINING CYRILLIC VZMET	[| 004A 0051 | 0002 0002 |]

    uint32_t cps[2] = { 0xA66F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0051, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_287)
{
    // 0334 05B0;	
    // (ְ) HEBREW POINT SHEVA	[| 004A 0052 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05B0 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0052, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_288)
{
    // 05B0 0334;	
    // (ְ) HEBREW POINT SHEVA	[| 004A 0052 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0052, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_289)
{
    // 0334 05B1;	
    // (ֱ) HEBREW POINT HATAF SEGOL	[| 004A 0053 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05B1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0053, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_290)
{
    // 05B1 0334;	
    // (ֱ) HEBREW POINT HATAF SEGOL	[| 004A 0053 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0053, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_291)
{
    // 0334 05B2;	
    // (ֲ) HEBREW POINT HATAF PATAH	[| 004A 0054 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05B2 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0054, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_292)
{
    // 05B2 0334;	
    // (ֲ) HEBREW POINT HATAF PATAH	[| 004A 0054 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B2, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0054, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_293)
{
    // 0334 05B3;	
    // (ֳ) HEBREW POINT HATAF QAMATS	[| 004A 0055 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05B3 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0055, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_294)
{
    // 05B3 0334;	
    // (ֳ) HEBREW POINT HATAF QAMATS	[| 004A 0055 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B3, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0055, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_295)
{
    // 0334 05B4;	
    // (ִ) HEBREW POINT HIRIQ	[| 004A 0056 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05B4 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0056, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_296)
{
    // 05B4 0334;	
    // (ִ) HEBREW POINT HIRIQ	[| 004A 0056 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B4, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0056, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_297)
{
    // 0334 05B5;	
    // (ֵ) HEBREW POINT TSERE	[| 004A 0057 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05B5 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0057, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_298)
{
    // 05B5 0334;	
    // (ֵ) HEBREW POINT TSERE	[| 004A 0057 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B5, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0057, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_299)
{
    // 0334 05B6;	
    // (ֶ) HEBREW POINT SEGOL	[| 004A 0058 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05B6 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0058, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_300)
{
    // 05B6 0334;	
    // (ֶ) HEBREW POINT SEGOL	[| 004A 0058 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B6, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0058, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_301)
{
    // 0334 05B7;	
    // (ַ) HEBREW POINT PATAH	[| 004A 0059 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05B7 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0059, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_302)
{
    // 05B7 0334;	
    // (ַ) HEBREW POINT PATAH	[| 004A 0059 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B7, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0059, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_303)
{
    // 0334 05B8;	
    // (ָ) HEBREW POINT QAMATS	[| 004A 005A | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05B8 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_304)
{
    // 05B8 0334;	
    // (ָ) HEBREW POINT QAMATS	[| 004A 005A | 0002 0002 |]

    uint32_t cps[2] = { 0x05B8, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_305)
{
    // 0334 05C7;	
    // (ׇ) HEBREW POINT QAMATS QATAN	[| 004A 005A | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05C7 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_306)
{
    // 05C7 0334;	
    // (ׇ) HEBREW POINT QAMATS QATAN	[| 004A 005A | 0002 0002 |]

    uint32_t cps[2] = { 0x05C7, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_307)
{
    // 0334 05B9;	
    // (ֹ) HEBREW POINT HOLAM	[| 004A 005B | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05B9 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_308)
{
    // 05B9 0334;	
    // (ֹ) HEBREW POINT HOLAM	[| 004A 005B | 0002 0002 |]

    uint32_t cps[2] = { 0x05B9, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_309)
{
    // 0334 05BA;	
    // (ֺ) HEBREW POINT HOLAM HASER FOR VAV	[| 004A 005B | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05BA };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_310)
{
    // 05BA 0334;	
    // (ֺ) HEBREW POINT HOLAM HASER FOR VAV	[| 004A 005B | 0002 0002 |]

    uint32_t cps[2] = { 0x05BA, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_311)
{
    // 0334 05BB;	
    // (ֻ) HEBREW POINT QUBUTS	[| 004A 005C | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05BB };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_312)
{
    // 05BB 0334;	
    // (ֻ) HEBREW POINT QUBUTS	[| 004A 005C | 0002 0002 |]

    uint32_t cps[2] = { 0x05BB, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_313)
{
    // 0334 05C2;	
    // (ׂ) HEBREW POINT SIN DOT	[| 004A 005D | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05C2 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_314)
{
    // 05C2 0334;	
    // (ׂ) HEBREW POINT SIN DOT	[| 004A 005D | 0002 0002 |]

    uint32_t cps[2] = { 0x05C2, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_315)
{
    // 0334 05C1;	
    // (ׁ) HEBREW POINT SHIN DOT	[| 004A 005E | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05C1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_316)
{
    // 05C1 0334;	
    // (ׁ) HEBREW POINT SHIN DOT	[| 004A 005E | 0002 0002 |]

    uint32_t cps[2] = { 0x05C1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_317)
{
    // 0334 05BC;	
    // (ּ) HEBREW POINT DAGESH OR MAPIQ	[| 004A 005F | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05BC };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_318)
{
    // 05BC 0334;	
    // (ּ) HEBREW POINT DAGESH OR MAPIQ	[| 004A 005F | 0002 0002 |]

    uint32_t cps[2] = { 0x05BC, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_319)
{
    // 0334 05BF;	
    // (ֿ) HEBREW POINT RAFE	[| 004A 0060 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x05BF };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0060, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_320)
{
    // 05BF 0334;	
    // (ֿ) HEBREW POINT RAFE	[| 004A 0060 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BF, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0060, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_321)
{
    // 0334 FB1E;	
    // (ﬞ) HEBREW POINT JUDEO-SPANISH VARIKA	[| 004A 0061 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xFB1E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0061, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_322)
{
    // FB1E 0334;	
    // (ﬞ) HEBREW POINT JUDEO-SPANISH VARIKA	[| 004A 0061 | 0002 0002 |]

    uint32_t cps[2] = { 0xFB1E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0061, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_323)
{
    // 0334 081C;	
    // (ࠜ) SAMARITAN VOWEL SIGN LONG E	[| 004A 0062 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x081C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0062, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_324)
{
    // 081C 0334;	
    // (ࠜ) SAMARITAN VOWEL SIGN LONG E	[| 004A 0062 | 0002 0002 |]

    uint32_t cps[2] = { 0x081C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0062, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_325)
{
    // 0334 081D;	
    // (ࠝ) SAMARITAN VOWEL SIGN E	[| 004A 0062 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x081D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0062, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_326)
{
    // 081D 0334;	
    // (ࠝ) SAMARITAN VOWEL SIGN E	[| 004A 0062 | 0002 0002 |]

    uint32_t cps[2] = { 0x081D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0062, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_327)
{
    // 0334 081E;	
    // (ࠞ) SAMARITAN VOWEL SIGN OVERLONG AA	[| 004A 0063 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x081E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0063, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_328)
{
    // 081E 0334;	
    // (ࠞ) SAMARITAN VOWEL SIGN OVERLONG AA	[| 004A 0063 | 0002 0002 |]

    uint32_t cps[2] = { 0x081E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0063, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_329)
{
    // 0334 081F;	
    // (ࠟ) SAMARITAN VOWEL SIGN LONG AA	[| 004A 0063 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x081F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0063, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_330)
{
    // 081F 0334;	
    // (ࠟ) SAMARITAN VOWEL SIGN LONG AA	[| 004A 0063 | 0002 0002 |]

    uint32_t cps[2] = { 0x081F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0063, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_331)
{
    // 0334 0820;	
    // (ࠠ) SAMARITAN VOWEL SIGN AA	[| 004A 0063 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0820 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0063, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_332)
{
    // 0820 0334;	
    // (ࠠ) SAMARITAN VOWEL SIGN AA	[| 004A 0063 | 0002 0002 |]

    uint32_t cps[2] = { 0x0820, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0063, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_333)
{
    // 0334 0821;	
    // (ࠡ) SAMARITAN VOWEL SIGN OVERLONG A	[| 004A 0064 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0821 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0064, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_334)
{
    // 0821 0334;	
    // (ࠡ) SAMARITAN VOWEL SIGN OVERLONG A	[| 004A 0064 | 0002 0002 |]

    uint32_t cps[2] = { 0x0821, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0064, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_335)
{
    // 0334 0822;	
    // (ࠢ) SAMARITAN VOWEL SIGN LONG A	[| 004A 0064 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0822 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0064, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_336)
{
    // 0822 0334;	
    // (ࠢ) SAMARITAN VOWEL SIGN LONG A	[| 004A 0064 | 0002 0002 |]

    uint32_t cps[2] = { 0x0822, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0064, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_337)
{
    // 0334 0823;	
    // (ࠣ) SAMARITAN VOWEL SIGN A	[| 004A 0064 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0823 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0064, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_338)
{
    // 0823 0334;	
    // (ࠣ) SAMARITAN VOWEL SIGN A	[| 004A 0064 | 0002 0002 |]

    uint32_t cps[2] = { 0x0823, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0064, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_339)
{
    // 0334 0825;	
    // (ࠥ) SAMARITAN VOWEL SIGN SHORT A	[| 004A 0065 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0825 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0065, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_340)
{
    // 0825 0334;	
    // (ࠥ) SAMARITAN VOWEL SIGN SHORT A	[| 004A 0065 | 0002 0002 |]

    uint32_t cps[2] = { 0x0825, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0065, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_341)
{
    // 0334 0826;	
    // (ࠦ) SAMARITAN VOWEL SIGN LONG U	[| 004A 0066 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0826 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0066, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_342)
{
    // 0826 0334;	
    // (ࠦ) SAMARITAN VOWEL SIGN LONG U	[| 004A 0066 | 0002 0002 |]

    uint32_t cps[2] = { 0x0826, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0066, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_343)
{
    // 0334 0827;	
    // (ࠧ) SAMARITAN VOWEL SIGN U	[| 004A 0066 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0827 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0066, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_344)
{
    // 0827 0334;	
    // (ࠧ) SAMARITAN VOWEL SIGN U	[| 004A 0066 | 0002 0002 |]

    uint32_t cps[2] = { 0x0827, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0066, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_345)
{
    // 0334 0829;	
    // (ࠩ) SAMARITAN VOWEL SIGN LONG I	[| 004A 0067 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0829 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0067, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_346)
{
    // 0829 0334;	
    // (ࠩ) SAMARITAN VOWEL SIGN LONG I	[| 004A 0067 | 0002 0002 |]

    uint32_t cps[2] = { 0x0829, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0067, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_347)
{
    // 0334 082A;	
    // (ࠪ) SAMARITAN VOWEL SIGN I	[| 004A 0067 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x082A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0067, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_348)
{
    // 082A 0334;	
    // (ࠪ) SAMARITAN VOWEL SIGN I	[| 004A 0067 | 0002 0002 |]

    uint32_t cps[2] = { 0x082A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0067, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_349)
{
    // 0334 082B;	
    // (ࠫ) SAMARITAN VOWEL SIGN O	[| 004A 0068 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x082B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0068, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_350)
{
    // 082B 0334;	
    // (ࠫ) SAMARITAN VOWEL SIGN O	[| 004A 0068 | 0002 0002 |]

    uint32_t cps[2] = { 0x082B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0068, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_351)
{
    // 0334 082C;	
    // (ࠬ) SAMARITAN VOWEL SIGN SUKUN	[| 004A 0069 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x082C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0069, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_352)
{
    // 082C 0334;	
    // (ࠬ) SAMARITAN VOWEL SIGN SUKUN	[| 004A 0069 | 0002 0002 |]

    uint32_t cps[2] = { 0x082C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0069, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_353)
{
    // 0334 0818;	
    // (࠘) SAMARITAN MARK OCCLUSION	[| 004A 006A | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0818 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_354)
{
    // 0818 0334;	
    // (࠘) SAMARITAN MARK OCCLUSION	[| 004A 006A | 0002 0002 |]

    uint32_t cps[2] = { 0x0818, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_355)
{
    // 0334 0819;	
    // (࠙) SAMARITAN MARK DAGESH	[| 004A 006B | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0819 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_356)
{
    // 0819 0334;	
    // (࠙) SAMARITAN MARK DAGESH	[| 004A 006B | 0002 0002 |]

    uint32_t cps[2] = { 0x0819, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_357)
{
    // 0334 082D;	
    // (࠭) SAMARITAN MARK NEQUDAA	[| 004A 006C | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x082D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_358)
{
    // 082D 0334;	
    // (࠭) SAMARITAN MARK NEQUDAA	[| 004A 006C | 0002 0002 |]

    uint32_t cps[2] = { 0x082D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_359)
{
    // 0334 064B;	
    // (ً) ARABIC FATHATAN	[| 004A 006D | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x064B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_360)
{
    // 064B 0334;	
    // (ً) ARABIC FATHATAN	[| 004A 006D | 0002 0002 |]

    uint32_t cps[2] = { 0x064B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_361)
{
    // 0334 08F0;	
    // (ࣰ) ARABIC OPEN FATHATAN	[| 004A 006E | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08F0 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_362)
{
    // 08F0 0334;	
    // (ࣰ) ARABIC OPEN FATHATAN	[| 004A 006E | 0002 0002 |]

    uint32_t cps[2] = { 0x08F0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_363)
{
    // 0334 08E7;	
    // (ࣧ) ARABIC CURLY FATHATAN	[| 004A 006F | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08E7 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_364)
{
    // 08E7 0334;	
    // (ࣧ) ARABIC CURLY FATHATAN	[| 004A 006F | 0002 0002 |]

    uint32_t cps[2] = { 0x08E7, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x006F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_365)
{
    // 0334 064C;	
    // (ٌ) ARABIC DAMMATAN	[| 004A 0070 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x064C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0070, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_366)
{
    // 064C 0334;	
    // (ٌ) ARABIC DAMMATAN	[| 004A 0070 | 0002 0002 |]

    uint32_t cps[2] = { 0x064C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0070, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_367)
{
    // 0334 08F1;	
    // (ࣱ) ARABIC OPEN DAMMATAN	[| 004A 0071 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08F1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0071, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_368)
{
    // 08F1 0334;	
    // (ࣱ) ARABIC OPEN DAMMATAN	[| 004A 0071 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0071, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_369)
{
    // 0334 08E8;	
    // (ࣨ) ARABIC CURLY DAMMATAN	[| 004A 0072 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08E8 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0072, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_370)
{
    // 08E8 0334;	
    // (ࣨ) ARABIC CURLY DAMMATAN	[| 004A 0072 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E8, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0072, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_371)
{
    // 0334 064D;	
    // (ٍ) ARABIC KASRATAN	[| 004A 0073 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x064D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0073, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_372)
{
    // 064D 0334;	
    // (ٍ) ARABIC KASRATAN	[| 004A 0073 | 0002 0002 |]

    uint32_t cps[2] = { 0x064D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0073, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_373)
{
    // 0334 08F2;	
    // (ࣲ) ARABIC OPEN KASRATAN	[| 004A 0074 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08F2 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0074, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_374)
{
    // 08F2 0334;	
    // (ࣲ) ARABIC OPEN KASRATAN	[| 004A 0074 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F2, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0074, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_375)
{
    // 0334 08E9;	
    // (ࣩ) ARABIC CURLY KASRATAN	[| 004A 0075 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08E9 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0075, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_376)
{
    // 08E9 0334;	
    // (ࣩ) ARABIC CURLY KASRATAN	[| 004A 0075 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E9, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0075, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_377)
{
    // 0334 064E;	
    // (َ) ARABIC FATHA	[| 004A 0076 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x064E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0076, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_378)
{
    // 064E 0334;	
    // (َ) ARABIC FATHA	[| 004A 0076 | 0002 0002 |]

    uint32_t cps[2] = { 0x064E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0076, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_379)
{
    // 0334 08E4;	
    // (ࣤ) ARABIC CURLY FATHA	[| 004A 0077 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08E4 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0077, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_380)
{
    // 08E4 0334;	
    // (ࣤ) ARABIC CURLY FATHA	[| 004A 0077 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E4, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0077, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_381)
{
    // 0334 08F4;	
    // (ࣴ) ARABIC FATHA WITH RING	[| 004A 0078 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08F4 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0078, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_382)
{
    // 08F4 0334;	
    // (ࣴ) ARABIC FATHA WITH RING	[| 004A 0078 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F4, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0078, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_383)
{
    // 0334 08F5;	
    // (ࣵ) ARABIC FATHA WITH DOT ABOVE	[| 004A 0079 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08F5 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0079, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_384)
{
    // 08F5 0334;	
    // (ࣵ) ARABIC FATHA WITH DOT ABOVE	[| 004A 0079 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F5, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0079, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_385)
{
    // 0334 064F;	
    // (ُ) ARABIC DAMMA	[| 004A 007A | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x064F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_386)
{
    // 064F 0334;	
    // (ُ) ARABIC DAMMA	[| 004A 007A | 0002 0002 |]

    uint32_t cps[2] = { 0x064F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_387)
{
    // 0334 08E5;	
    // (ࣥ) ARABIC CURLY DAMMA	[| 004A 007B | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08E5 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_388)
{
    // 08E5 0334;	
    // (ࣥ) ARABIC CURLY DAMMA	[| 004A 007B | 0002 0002 |]

    uint32_t cps[2] = { 0x08E5, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_389)
{
    // 0334 08FE;	
    // (ࣾ) ARABIC DAMMA WITH DOT	[| 004A 007C | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08FE };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_390)
{
    // 08FE 0334;	
    // (ࣾ) ARABIC DAMMA WITH DOT	[| 004A 007C | 0002 0002 |]

    uint32_t cps[2] = { 0x08FE, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_391)
{
    // 0334 0650;	
    // (ِ) ARABIC KASRA	[| 004A 007D | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0650 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_392)
{
    // 0650 0334;	
    // (ِ) ARABIC KASRA	[| 004A 007D | 0002 0002 |]

    uint32_t cps[2] = { 0x0650, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_393)
{
    // 0334 08E6;	
    // (ࣦ) ARABIC CURLY KASRA	[| 004A 007E | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08E6 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_394)
{
    // 08E6 0334;	
    // (ࣦ) ARABIC CURLY KASRA	[| 004A 007E | 0002 0002 |]

    uint32_t cps[2] = { 0x08E6, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_395)
{
    // 0334 08F6;	
    // (ࣶ) ARABIC KASRA WITH DOT BELOW	[| 004A 007F | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08F6 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_396)
{
    // 08F6 0334;	
    // (ࣶ) ARABIC KASRA WITH DOT BELOW	[| 004A 007F | 0002 0002 |]

    uint32_t cps[2] = { 0x08F6, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x007F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_397)
{
    // 0334 0651;	
    // (ّ) ARABIC SHADDA	[| 004A 0080 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0651 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0080, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_398)
{
    // 0651 0334;	
    // (ّ) ARABIC SHADDA	[| 004A 0080 | 0002 0002 |]

    uint32_t cps[2] = { 0x0651, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0080, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_399)
{
    // 0334 0652;	
    // (ْ) ARABIC SUKUN	[| 004A 0081 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0652 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0081, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_400)
{
    // 0652 0334;	
    // (ْ) ARABIC SUKUN	[| 004A 0081 | 0002 0002 |]

    uint32_t cps[2] = { 0x0652, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0081, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_401)
{
    // 0334 0653;	
    // (ٓ) ARABIC MADDAH ABOVE	[| 004A 0082 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0653 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0082, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_402)
{
    // 0653 0334;	
    // (ٓ) ARABIC MADDAH ABOVE	[| 004A 0082 | 0002 0002 |]

    uint32_t cps[2] = { 0x0653, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0082, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_403)
{
    // 0334 0654;	
    // (ٔ) ARABIC HAMZA ABOVE	[| 004A 0083 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0654 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0083, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_404)
{
    // 0654 0334;	
    // (ٔ) ARABIC HAMZA ABOVE	[| 004A 0083 | 0002 0002 |]

    uint32_t cps[2] = { 0x0654, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0083, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_405)
{
    // 0334 0655;	
    // (ٕ) ARABIC HAMZA BELOW	[| 004A 0084 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0655 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0084, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_406)
{
    // 0655 0334;	
    // (ٕ) ARABIC HAMZA BELOW	[| 004A 0084 | 0002 0002 |]

    uint32_t cps[2] = { 0x0655, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0084, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_407)
{
    // 0334 065F;	
    // (ٟ) ARABIC WAVY HAMZA BELOW	[| 004A 0085 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x065F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0085, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_408)
{
    // 065F 0334;	
    // (ٟ) ARABIC WAVY HAMZA BELOW	[| 004A 0085 | 0002 0002 |]

    uint32_t cps[2] = { 0x065F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0085, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_409)
{
    // 0334 0656;	
    // (ٖ) ARABIC SUBSCRIPT ALEF	[| 004A 0086 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0656 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0086, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_410)
{
    // 0656 0334;	
    // (ٖ) ARABIC SUBSCRIPT ALEF	[| 004A 0086 | 0002 0002 |]

    uint32_t cps[2] = { 0x0656, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0086, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_411)
{
    // 0334 0657;	
    // (ٗ) ARABIC INVERTED DAMMA	[| 004A 0087 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0657 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0087, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_412)
{
    // 0657 0334;	
    // (ٗ) ARABIC INVERTED DAMMA	[| 004A 0087 | 0002 0002 |]

    uint32_t cps[2] = { 0x0657, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0087, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_413)
{
    // 0334 0658;	
    // (٘) ARABIC MARK NOON GHUNNA	[| 004A 0088 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0658 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0088, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_414)
{
    // 0658 0334;	
    // (٘) ARABIC MARK NOON GHUNNA	[| 004A 0088 | 0002 0002 |]

    uint32_t cps[2] = { 0x0658, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0088, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_415)
{
    // 0334 08FF;	
    // (ࣿ) ARABIC MARK SIDEWAYS NOON GHUNNA	[| 004A 0089 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08FF };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0089, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_416)
{
    // 08FF 0334;	
    // (ࣿ) ARABIC MARK SIDEWAYS NOON GHUNNA	[| 004A 0089 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FF, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0089, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_417)
{
    // 0334 0659;	
    // (ٙ) ARABIC ZWARAKAY	[| 004A 008A | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0659 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_418)
{
    // 0659 0334;	
    // (ٙ) ARABIC ZWARAKAY	[| 004A 008A | 0002 0002 |]

    uint32_t cps[2] = { 0x0659, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_419)
{
    // 0334 065A;	
    // (ٚ) ARABIC VOWEL SIGN SMALL V ABOVE	[| 004A 008B | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x065A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_420)
{
    // 065A 0334;	
    // (ٚ) ARABIC VOWEL SIGN SMALL V ABOVE	[| 004A 008B | 0002 0002 |]

    uint32_t cps[2] = { 0x065A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_421)
{
    // 0334 065B;	
    // (ٛ) ARABIC VOWEL SIGN INVERTED SMALL V ABOVE	[| 004A 008C | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x065B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_422)
{
    // 065B 0334;	
    // (ٛ) ARABIC VOWEL SIGN INVERTED SMALL V ABOVE	[| 004A 008C | 0002 0002 |]

    uint32_t cps[2] = { 0x065B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_423)
{
    // 0334 065C;	
    // (ٜ) ARABIC VOWEL SIGN DOT BELOW	[| 004A 008D | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x065C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_424)
{
    // 065C 0334;	
    // (ٜ) ARABIC VOWEL SIGN DOT BELOW	[| 004A 008D | 0002 0002 |]

    uint32_t cps[2] = { 0x065C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_425)
{
    // 0334 065D;	
    // (ٝ) ARABIC REVERSED DAMMA	[| 004A 008E | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x065D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_426)
{
    // 065D 0334;	
    // (ٝ) ARABIC REVERSED DAMMA	[| 004A 008E | 0002 0002 |]

    uint32_t cps[2] = { 0x065D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_427)
{
    // 0334 065E;	
    // (ٞ) ARABIC FATHA WITH TWO DOTS	[| 004A 008F | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x065E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_428)
{
    // 065E 0334;	
    // (ٞ) ARABIC FATHA WITH TWO DOTS	[| 004A 008F | 0002 0002 |]

    uint32_t cps[2] = { 0x065E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x008F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_429)
{
    // 0334 08E3;	
    // (ࣣ) ARABIC TURNED DAMMA BELOW	[| 004A 0090 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08E3 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0090, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_430)
{
    // 08E3 0334;	
    // (ࣣ) ARABIC TURNED DAMMA BELOW	[| 004A 0090 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E3, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0090, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_431)
{
    // 0334 08F7;	
    // (ࣷ) ARABIC LEFT ARROWHEAD ABOVE	[| 004A 0091 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08F7 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0091, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_432)
{
    // 08F7 0334;	
    // (ࣷ) ARABIC LEFT ARROWHEAD ABOVE	[| 004A 0091 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F7, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0091, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_433)
{
    // 0334 08F8;	
    // (ࣸ) ARABIC RIGHT ARROWHEAD ABOVE	[| 004A 0092 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08F8 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0092, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_434)
{
    // 08F8 0334;	
    // (ࣸ) ARABIC RIGHT ARROWHEAD ABOVE	[| 004A 0092 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F8, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0092, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_435)
{
    // 0334 08FD;	
    // (ࣽ) ARABIC RIGHT ARROWHEAD ABOVE WITH DOT	[| 004A 0093 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08FD };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0093, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_436)
{
    // 08FD 0334;	
    // (ࣽ) ARABIC RIGHT ARROWHEAD ABOVE WITH DOT	[| 004A 0093 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FD, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0093, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_437)
{
    // 0334 08FB;	
    // (ࣻ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE	[| 004A 0094 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08FB };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0094, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_438)
{
    // 08FB 0334;	
    // (ࣻ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE	[| 004A 0094 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FB, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0094, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_439)
{
    // 0334 08FC;	
    // (ࣼ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT	[| 004A 0095 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08FC };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0095, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_440)
{
    // 08FC 0334;	
    // (ࣼ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT	[| 004A 0095 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FC, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0095, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_441)
{
    // 0334 08F9;	
    // (ࣹ) ARABIC LEFT ARROWHEAD BELOW	[| 004A 0096 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08F9 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0096, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_442)
{
    // 08F9 0334;	
    // (ࣹ) ARABIC LEFT ARROWHEAD BELOW	[| 004A 0096 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F9, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0096, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_443)
{
    // 0334 08FA;	
    // (ࣺ) ARABIC RIGHT ARROWHEAD BELOW	[| 004A 0097 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x08FA };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0097, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_444)
{
    // 08FA 0334;	
    // (ࣺ) ARABIC RIGHT ARROWHEAD BELOW	[| 004A 0097 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FA, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0097, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_445)
{
    // 0334 0670;	
    // (ٰ) ARABIC LETTER SUPERSCRIPT ALEF	[| 004A 0098 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0670 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0098, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_446)
{
    // 0670 0334;	
    // (ٰ) ARABIC LETTER SUPERSCRIPT ALEF	[| 004A 0098 | 0002 0002 |]

    uint32_t cps[2] = { 0x0670, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0098, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_447)
{
    // 0334 0711;	
    // (ܑ) SYRIAC LETTER SUPERSCRIPT ALAPH	[| 004A 0099 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0711 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0099, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_448)
{
    // 0711 0334;	
    // (ܑ) SYRIAC LETTER SUPERSCRIPT ALAPH	[| 004A 0099 | 0002 0002 |]

    uint32_t cps[2] = { 0x0711, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0099, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_449)
{
    // 0334 0730;	
    // (ܰ) SYRIAC PTHAHA ABOVE	[| 004A 009A | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0730 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_450)
{
    // 0730 0334;	
    // (ܰ) SYRIAC PTHAHA ABOVE	[| 004A 009A | 0002 0002 |]

    uint32_t cps[2] = { 0x0730, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_451)
{
    // 0334 0731;	
    // (ܱ) SYRIAC PTHAHA BELOW	[| 004A 009B | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0731 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_452)
{
    // 0731 0334;	
    // (ܱ) SYRIAC PTHAHA BELOW	[| 004A 009B | 0002 0002 |]

    uint32_t cps[2] = { 0x0731, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_453)
{
    // 0334 0732;	
    // (ܲ) SYRIAC PTHAHA DOTTED	[| 004A 009C | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0732 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_454)
{
    // 0732 0334;	
    // (ܲ) SYRIAC PTHAHA DOTTED	[| 004A 009C | 0002 0002 |]

    uint32_t cps[2] = { 0x0732, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009C, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_455)
{
    // 0334 0733;	
    // (ܳ) SYRIAC ZQAPHA ABOVE	[| 004A 009D | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0733 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_456)
{
    // 0733 0334;	
    // (ܳ) SYRIAC ZQAPHA ABOVE	[| 004A 009D | 0002 0002 |]

    uint32_t cps[2] = { 0x0733, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_457)
{
    // 0334 0734;	
    // (ܴ) SYRIAC ZQAPHA BELOW	[| 004A 009E | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0734 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_458)
{
    // 0734 0334;	
    // (ܴ) SYRIAC ZQAPHA BELOW	[| 004A 009E | 0002 0002 |]

    uint32_t cps[2] = { 0x0734, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_459)
{
    // 0334 0735;	
    // (ܵ) SYRIAC ZQAPHA DOTTED	[| 004A 009F | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0735 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_460)
{
    // 0735 0334;	
    // (ܵ) SYRIAC ZQAPHA DOTTED	[| 004A 009F | 0002 0002 |]

    uint32_t cps[2] = { 0x0735, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x009F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_461)
{
    // 0334 0736;	
    // (ܶ) SYRIAC RBASA ABOVE	[| 004A 00A0 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0736 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A0, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_462)
{
    // 0736 0334;	
    // (ܶ) SYRIAC RBASA ABOVE	[| 004A 00A0 | 0002 0002 |]

    uint32_t cps[2] = { 0x0736, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A0, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_463)
{
    // 0334 0737;	
    // (ܷ) SYRIAC RBASA BELOW	[| 004A 00A1 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0737 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A1, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_464)
{
    // 0737 0334;	
    // (ܷ) SYRIAC RBASA BELOW	[| 004A 00A1 | 0002 0002 |]

    uint32_t cps[2] = { 0x0737, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A1, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_465)
{
    // 0334 0738;	
    // (ܸ) SYRIAC DOTTED ZLAMA HORIZONTAL	[| 004A 00A2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0738 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_466)
{
    // 0738 0334;	
    // (ܸ) SYRIAC DOTTED ZLAMA HORIZONTAL	[| 004A 00A2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0738, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_467)
{
    // 0334 0739;	
    // (ܹ) SYRIAC DOTTED ZLAMA ANGULAR	[| 004A 00A3 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0739 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A3, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_468)
{
    // 0739 0334;	
    // (ܹ) SYRIAC DOTTED ZLAMA ANGULAR	[| 004A 00A3 | 0002 0002 |]

    uint32_t cps[2] = { 0x0739, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A3, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_469)
{
    // 0334 073A;	
    // (ܺ) SYRIAC HBASA ABOVE	[| 004A 00A4 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x073A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_470)
{
    // 073A 0334;	
    // (ܺ) SYRIAC HBASA ABOVE	[| 004A 00A4 | 0002 0002 |]

    uint32_t cps[2] = { 0x073A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_471)
{
    // 0334 073B;	
    // (ܻ) SYRIAC HBASA BELOW	[| 004A 00A5 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x073B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_472)
{
    // 073B 0334;	
    // (ܻ) SYRIAC HBASA BELOW	[| 004A 00A5 | 0002 0002 |]

    uint32_t cps[2] = { 0x073B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_473)
{
    // 0334 073C;	
    // (ܼ) SYRIAC HBASA-ESASA DOTTED	[| 004A 00A6 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x073C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A6, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_474)
{
    // 073C 0334;	
    // (ܼ) SYRIAC HBASA-ESASA DOTTED	[| 004A 00A6 | 0002 0002 |]

    uint32_t cps[2] = { 0x073C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A6, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_475)
{
    // 0334 073D;	
    // (ܽ) SYRIAC ESASA ABOVE	[| 004A 00A7 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x073D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A7, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_476)
{
    // 073D 0334;	
    // (ܽ) SYRIAC ESASA ABOVE	[| 004A 00A7 | 0002 0002 |]

    uint32_t cps[2] = { 0x073D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A7, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_477)
{
    // 0334 073E;	
    // (ܾ) SYRIAC ESASA BELOW	[| 004A 00A8 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x073E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A8, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_478)
{
    // 073E 0334;	
    // (ܾ) SYRIAC ESASA BELOW	[| 004A 00A8 | 0002 0002 |]

    uint32_t cps[2] = { 0x073E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A8, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_479)
{
    // 0334 073F;	
    // (ܿ) SYRIAC RWAHA	[| 004A 00A9 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x073F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A9, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_480)
{
    // 073F 0334;	
    // (ܿ) SYRIAC RWAHA	[| 004A 00A9 | 0002 0002 |]

    uint32_t cps[2] = { 0x073F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00A9, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_481)
{
    // 0334 07EB;	
    // (߫) NKO COMBINING SHORT HIGH TONE	[| 004A 00AA | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x07EB };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AA, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_482)
{
    // 07EB 0334;	
    // (߫) NKO COMBINING SHORT HIGH TONE	[| 004A 00AA | 0002 0002 |]

    uint32_t cps[2] = { 0x07EB, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AA, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_483)
{
    // 0334 07EC;	
    // (߬) NKO COMBINING SHORT LOW TONE	[| 004A 00AB | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x07EC };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AB, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_484)
{
    // 07EC 0334;	
    // (߬) NKO COMBINING SHORT LOW TONE	[| 004A 00AB | 0002 0002 |]

    uint32_t cps[2] = { 0x07EC, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AB, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_485)
{
    // 0334 07ED;	
    // (߭) NKO COMBINING SHORT RISING TONE	[| 004A 00AC | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x07ED };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AC, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_486)
{
    // 07ED 0334;	
    // (߭) NKO COMBINING SHORT RISING TONE	[| 004A 00AC | 0002 0002 |]

    uint32_t cps[2] = { 0x07ED, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AC, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_487)
{
    // 0334 07EE;	
    // (߮) NKO COMBINING LONG DESCENDING TONE	[| 004A 00AD | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x07EE };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_488)
{
    // 07EE 0334;	
    // (߮) NKO COMBINING LONG DESCENDING TONE	[| 004A 00AD | 0002 0002 |]

    uint32_t cps[2] = { 0x07EE, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_489)
{
    // 0334 07EF;	
    // (߯) NKO COMBINING LONG HIGH TONE	[| 004A 00AE | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x07EF };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AE, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_490)
{
    // 07EF 0334;	
    // (߯) NKO COMBINING LONG HIGH TONE	[| 004A 00AE | 0002 0002 |]

    uint32_t cps[2] = { 0x07EF, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AE, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_491)
{
    // 0334 07F0;	
    // (߰) NKO COMBINING LONG LOW TONE	[| 004A 00AF | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x07F0 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AF, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_492)
{
    // 07F0 0334;	
    // (߰) NKO COMBINING LONG LOW TONE	[| 004A 00AF | 0002 0002 |]

    uint32_t cps[2] = { 0x07F0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00AF, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_493)
{
    // 0334 07F1;	
    // (߱) NKO COMBINING LONG RISING TONE	[| 004A 00B0 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x07F1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B0, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_494)
{
    // 07F1 0334;	
    // (߱) NKO COMBINING LONG RISING TONE	[| 004A 00B0 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B0, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_495)
{
    // 0334 07F2;	
    // (߲) NKO COMBINING NASALIZATION MARK	[| 004A 00B1 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x07F2 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B1, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_496)
{
    // 07F2 0334;	
    // (߲) NKO COMBINING NASALIZATION MARK	[| 004A 00B1 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F2, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B1, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_497)
{
    // 0334 07F3;	
    // (߳) NKO COMBINING DOUBLE DOT ABOVE	[| 004A 00B2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x07F3 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_498)
{
    // 07F3 0334;	
    // (߳) NKO COMBINING DOUBLE DOT ABOVE	[| 004A 00B2 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F3, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_001_499)
{
    // 0334 135F;	
    // (፟) ETHIOPIC COMBINING GEMINATION MARK	[| 004A 00B3 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x135F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B3, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

