// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_349_000)
{
    // 3C9A 003F;	
    // (㲚) CJK UNIFIED IDEOGRAPH-3C9A	[FB80 BC9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_001)
{
    // 3C9A 0061;	
    // (㲚) CJK UNIFIED IDEOGRAPH-3C9A	[FB80 BC9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_002)
{
    // 3C9A 0041;	
    // (㲚) CJK UNIFIED IDEOGRAPH-3C9A	[FB80 BC9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C9A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_003)
{
    // 3C9A 0062;	
    // (㲚) CJK UNIFIED IDEOGRAPH-3C9A	[FB80 BC9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_004)
{
    // 3C9B 0021;	
    // (㲛) CJK UNIFIED IDEOGRAPH-3C9B	[FB80 BC9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_005)
{
    // 3C9B 003F;	
    // (㲛) CJK UNIFIED IDEOGRAPH-3C9B	[FB80 BC9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_006)
{
    // 3C9B 0061;	
    // (㲛) CJK UNIFIED IDEOGRAPH-3C9B	[FB80 BC9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_007)
{
    // 3C9B 0041;	
    // (㲛) CJK UNIFIED IDEOGRAPH-3C9B	[FB80 BC9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C9B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_008)
{
    // 3C9B 0062;	
    // (㲛) CJK UNIFIED IDEOGRAPH-3C9B	[FB80 BC9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_009)
{
    // 3C9C 0021;	
    // (㲜) CJK UNIFIED IDEOGRAPH-3C9C	[FB80 BC9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_010)
{
    // 3C9C 003F;	
    // (㲜) CJK UNIFIED IDEOGRAPH-3C9C	[FB80 BC9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_011)
{
    // 3C9C 0061;	
    // (㲜) CJK UNIFIED IDEOGRAPH-3C9C	[FB80 BC9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_012)
{
    // 3C9C 0041;	
    // (㲜) CJK UNIFIED IDEOGRAPH-3C9C	[FB80 BC9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C9C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_013)
{
    // 3C9C 0062;	
    // (㲜) CJK UNIFIED IDEOGRAPH-3C9C	[FB80 BC9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_014)
{
    // 3C9D 0021;	
    // (㲝) CJK UNIFIED IDEOGRAPH-3C9D	[FB80 BC9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_015)
{
    // 3C9D 003F;	
    // (㲝) CJK UNIFIED IDEOGRAPH-3C9D	[FB80 BC9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_016)
{
    // 3C9D 0061;	
    // (㲝) CJK UNIFIED IDEOGRAPH-3C9D	[FB80 BC9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_017)
{
    // 3C9D 0041;	
    // (㲝) CJK UNIFIED IDEOGRAPH-3C9D	[FB80 BC9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C9D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_018)
{
    // 3C9D 0062;	
    // (㲝) CJK UNIFIED IDEOGRAPH-3C9D	[FB80 BC9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_019)
{
    // 3C9E 0021;	
    // (㲞) CJK UNIFIED IDEOGRAPH-3C9E	[FB80 BC9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_020)
{
    // 3C9E 003F;	
    // (㲞) CJK UNIFIED IDEOGRAPH-3C9E	[FB80 BC9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_021)
{
    // 3C9E 0061;	
    // (㲞) CJK UNIFIED IDEOGRAPH-3C9E	[FB80 BC9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_022)
{
    // 3C9E 0041;	
    // (㲞) CJK UNIFIED IDEOGRAPH-3C9E	[FB80 BC9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C9E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_023)
{
    // 3C9E 0062;	
    // (㲞) CJK UNIFIED IDEOGRAPH-3C9E	[FB80 BC9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_024)
{
    // 3C9F 0021;	
    // (㲟) CJK UNIFIED IDEOGRAPH-3C9F	[FB80 BC9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_025)
{
    // 3C9F 003F;	
    // (㲟) CJK UNIFIED IDEOGRAPH-3C9F	[FB80 BC9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_026)
{
    // 3C9F 0061;	
    // (㲟) CJK UNIFIED IDEOGRAPH-3C9F	[FB80 BC9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_027)
{
    // 3C9F 0041;	
    // (㲟) CJK UNIFIED IDEOGRAPH-3C9F	[FB80 BC9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C9F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_028)
{
    // 3C9F 0062;	
    // (㲟) CJK UNIFIED IDEOGRAPH-3C9F	[FB80 BC9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_029)
{
    // 3CA0 0021;	
    // (㲠) CJK UNIFIED IDEOGRAPH-3CA0	[FB80 BCA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_030)
{
    // 3CA0 003F;	
    // (㲠) CJK UNIFIED IDEOGRAPH-3CA0	[FB80 BCA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_031)
{
    // 3CA0 0061;	
    // (㲠) CJK UNIFIED IDEOGRAPH-3CA0	[FB80 BCA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_032)
{
    // 3CA0 0041;	
    // (㲠) CJK UNIFIED IDEOGRAPH-3CA0	[FB80 BCA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CA0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_033)
{
    // 3CA0 0062;	
    // (㲠) CJK UNIFIED IDEOGRAPH-3CA0	[FB80 BCA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_034)
{
    // 3CA1 0021;	
    // (㲡) CJK UNIFIED IDEOGRAPH-3CA1	[FB80 BCA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_035)
{
    // 3CA1 003F;	
    // (㲡) CJK UNIFIED IDEOGRAPH-3CA1	[FB80 BCA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_036)
{
    // 3CA1 0061;	
    // (㲡) CJK UNIFIED IDEOGRAPH-3CA1	[FB80 BCA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_037)
{
    // 3CA1 0041;	
    // (㲡) CJK UNIFIED IDEOGRAPH-3CA1	[FB80 BCA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CA1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_038)
{
    // 3CA1 0062;	
    // (㲡) CJK UNIFIED IDEOGRAPH-3CA1	[FB80 BCA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_039)
{
    // 3CA2 0021;	
    // (㲢) CJK UNIFIED IDEOGRAPH-3CA2	[FB80 BCA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_040)
{
    // 3CA2 003F;	
    // (㲢) CJK UNIFIED IDEOGRAPH-3CA2	[FB80 BCA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_041)
{
    // 3CA2 0061;	
    // (㲢) CJK UNIFIED IDEOGRAPH-3CA2	[FB80 BCA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_042)
{
    // 3CA2 0041;	
    // (㲢) CJK UNIFIED IDEOGRAPH-3CA2	[FB80 BCA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CA2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_043)
{
    // 3CA2 0062;	
    // (㲢) CJK UNIFIED IDEOGRAPH-3CA2	[FB80 BCA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_044)
{
    // 3CA3 0021;	
    // (㲣) CJK UNIFIED IDEOGRAPH-3CA3	[FB80 BCA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_045)
{
    // 3CA3 003F;	
    // (㲣) CJK UNIFIED IDEOGRAPH-3CA3	[FB80 BCA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_046)
{
    // 3CA3 0061;	
    // (㲣) CJK UNIFIED IDEOGRAPH-3CA3	[FB80 BCA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_047)
{
    // 3CA3 0041;	
    // (㲣) CJK UNIFIED IDEOGRAPH-3CA3	[FB80 BCA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CA3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_048)
{
    // 3CA3 0062;	
    // (㲣) CJK UNIFIED IDEOGRAPH-3CA3	[FB80 BCA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_049)
{
    // 3CA4 0021;	
    // (㲤) CJK UNIFIED IDEOGRAPH-3CA4	[FB80 BCA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_050)
{
    // 3CA4 003F;	
    // (㲤) CJK UNIFIED IDEOGRAPH-3CA4	[FB80 BCA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_051)
{
    // 3CA4 0061;	
    // (㲤) CJK UNIFIED IDEOGRAPH-3CA4	[FB80 BCA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_052)
{
    // 3CA4 0041;	
    // (㲤) CJK UNIFIED IDEOGRAPH-3CA4	[FB80 BCA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CA4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_053)
{
    // 3CA4 0062;	
    // (㲤) CJK UNIFIED IDEOGRAPH-3CA4	[FB80 BCA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_054)
{
    // 3CA5 0021;	
    // (㲥) CJK UNIFIED IDEOGRAPH-3CA5	[FB80 BCA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_055)
{
    // 3CA5 003F;	
    // (㲥) CJK UNIFIED IDEOGRAPH-3CA5	[FB80 BCA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_056)
{
    // 3CA5 0061;	
    // (㲥) CJK UNIFIED IDEOGRAPH-3CA5	[FB80 BCA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_057)
{
    // 3CA5 0041;	
    // (㲥) CJK UNIFIED IDEOGRAPH-3CA5	[FB80 BCA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CA5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_058)
{
    // 3CA5 0062;	
    // (㲥) CJK UNIFIED IDEOGRAPH-3CA5	[FB80 BCA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_059)
{
    // 3CA6 0021;	
    // (㲦) CJK UNIFIED IDEOGRAPH-3CA6	[FB80 BCA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_060)
{
    // 3CA6 003F;	
    // (㲦) CJK UNIFIED IDEOGRAPH-3CA6	[FB80 BCA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_061)
{
    // 3CA6 0061;	
    // (㲦) CJK UNIFIED IDEOGRAPH-3CA6	[FB80 BCA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_062)
{
    // 3CA6 0041;	
    // (㲦) CJK UNIFIED IDEOGRAPH-3CA6	[FB80 BCA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CA6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_063)
{
    // 3CA6 0062;	
    // (㲦) CJK UNIFIED IDEOGRAPH-3CA6	[FB80 BCA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_064)
{
    // 3CA7 0021;	
    // (㲧) CJK UNIFIED IDEOGRAPH-3CA7	[FB80 BCA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_065)
{
    // 3CA7 003F;	
    // (㲧) CJK UNIFIED IDEOGRAPH-3CA7	[FB80 BCA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_066)
{
    // 3CA7 0061;	
    // (㲧) CJK UNIFIED IDEOGRAPH-3CA7	[FB80 BCA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_067)
{
    // 3CA7 0041;	
    // (㲧) CJK UNIFIED IDEOGRAPH-3CA7	[FB80 BCA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CA7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_068)
{
    // 3CA7 0062;	
    // (㲧) CJK UNIFIED IDEOGRAPH-3CA7	[FB80 BCA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_069)
{
    // 3CA8 0021;	
    // (㲨) CJK UNIFIED IDEOGRAPH-3CA8	[FB80 BCA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_070)
{
    // 3CA8 003F;	
    // (㲨) CJK UNIFIED IDEOGRAPH-3CA8	[FB80 BCA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_071)
{
    // 3CA8 0061;	
    // (㲨) CJK UNIFIED IDEOGRAPH-3CA8	[FB80 BCA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_072)
{
    // 3CA8 0041;	
    // (㲨) CJK UNIFIED IDEOGRAPH-3CA8	[FB80 BCA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CA8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_073)
{
    // 3CA8 0062;	
    // (㲨) CJK UNIFIED IDEOGRAPH-3CA8	[FB80 BCA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_074)
{
    // 3CA9 0021;	
    // (㲩) CJK UNIFIED IDEOGRAPH-3CA9	[FB80 BCA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_075)
{
    // 3CA9 003F;	
    // (㲩) CJK UNIFIED IDEOGRAPH-3CA9	[FB80 BCA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_076)
{
    // 3CA9 0061;	
    // (㲩) CJK UNIFIED IDEOGRAPH-3CA9	[FB80 BCA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_077)
{
    // 3CA9 0041;	
    // (㲩) CJK UNIFIED IDEOGRAPH-3CA9	[FB80 BCA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CA9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_078)
{
    // 3CA9 0062;	
    // (㲩) CJK UNIFIED IDEOGRAPH-3CA9	[FB80 BCA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CA9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_079)
{
    // 3CAA 0021;	
    // (㲪) CJK UNIFIED IDEOGRAPH-3CAA	[FB80 BCAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_080)
{
    // 3CAA 003F;	
    // (㲪) CJK UNIFIED IDEOGRAPH-3CAA	[FB80 BCAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_081)
{
    // 3CAA 0061;	
    // (㲪) CJK UNIFIED IDEOGRAPH-3CAA	[FB80 BCAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_082)
{
    // 3CAA 0041;	
    // (㲪) CJK UNIFIED IDEOGRAPH-3CAA	[FB80 BCAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CAA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_083)
{
    // 3CAA 0062;	
    // (㲪) CJK UNIFIED IDEOGRAPH-3CAA	[FB80 BCAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_084)
{
    // 3CAB 0021;	
    // (㲫) CJK UNIFIED IDEOGRAPH-3CAB	[FB80 BCAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_085)
{
    // 3CAB 003F;	
    // (㲫) CJK UNIFIED IDEOGRAPH-3CAB	[FB80 BCAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_086)
{
    // 3CAB 0061;	
    // (㲫) CJK UNIFIED IDEOGRAPH-3CAB	[FB80 BCAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_087)
{
    // 3CAB 0041;	
    // (㲫) CJK UNIFIED IDEOGRAPH-3CAB	[FB80 BCAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CAB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_088)
{
    // 3CAB 0062;	
    // (㲫) CJK UNIFIED IDEOGRAPH-3CAB	[FB80 BCAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_089)
{
    // 3CAC 0021;	
    // (㲬) CJK UNIFIED IDEOGRAPH-3CAC	[FB80 BCAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_090)
{
    // 3CAC 003F;	
    // (㲬) CJK UNIFIED IDEOGRAPH-3CAC	[FB80 BCAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_091)
{
    // 3CAC 0061;	
    // (㲬) CJK UNIFIED IDEOGRAPH-3CAC	[FB80 BCAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_092)
{
    // 3CAC 0041;	
    // (㲬) CJK UNIFIED IDEOGRAPH-3CAC	[FB80 BCAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CAC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_093)
{
    // 3CAC 0062;	
    // (㲬) CJK UNIFIED IDEOGRAPH-3CAC	[FB80 BCAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_094)
{
    // 3CAD 0021;	
    // (㲭) CJK UNIFIED IDEOGRAPH-3CAD	[FB80 BCAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_095)
{
    // 3CAD 003F;	
    // (㲭) CJK UNIFIED IDEOGRAPH-3CAD	[FB80 BCAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_096)
{
    // 3CAD 0061;	
    // (㲭) CJK UNIFIED IDEOGRAPH-3CAD	[FB80 BCAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_097)
{
    // 3CAD 0041;	
    // (㲭) CJK UNIFIED IDEOGRAPH-3CAD	[FB80 BCAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CAD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_098)
{
    // 3CAD 0062;	
    // (㲭) CJK UNIFIED IDEOGRAPH-3CAD	[FB80 BCAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_099)
{
    // 3CAE 0021;	
    // (㲮) CJK UNIFIED IDEOGRAPH-3CAE	[FB80 BCAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_100)
{
    // 3CAE 003F;	
    // (㲮) CJK UNIFIED IDEOGRAPH-3CAE	[FB80 BCAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_101)
{
    // 3CAE 0061;	
    // (㲮) CJK UNIFIED IDEOGRAPH-3CAE	[FB80 BCAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_102)
{
    // 3CAE 0041;	
    // (㲮) CJK UNIFIED IDEOGRAPH-3CAE	[FB80 BCAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CAE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_103)
{
    // 3CAE 0062;	
    // (㲮) CJK UNIFIED IDEOGRAPH-3CAE	[FB80 BCAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_104)
{
    // 3CAF 0021;	
    // (㲯) CJK UNIFIED IDEOGRAPH-3CAF	[FB80 BCAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_105)
{
    // 3CAF 003F;	
    // (㲯) CJK UNIFIED IDEOGRAPH-3CAF	[FB80 BCAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_106)
{
    // 3CAF 0061;	
    // (㲯) CJK UNIFIED IDEOGRAPH-3CAF	[FB80 BCAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_107)
{
    // 3CAF 0041;	
    // (㲯) CJK UNIFIED IDEOGRAPH-3CAF	[FB80 BCAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CAF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_108)
{
    // 3CAF 0062;	
    // (㲯) CJK UNIFIED IDEOGRAPH-3CAF	[FB80 BCAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CAF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_109)
{
    // 3CB0 0021;	
    // (㲰) CJK UNIFIED IDEOGRAPH-3CB0	[FB80 BCB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_110)
{
    // 3CB0 003F;	
    // (㲰) CJK UNIFIED IDEOGRAPH-3CB0	[FB80 BCB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_111)
{
    // 3CB0 0061;	
    // (㲰) CJK UNIFIED IDEOGRAPH-3CB0	[FB80 BCB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_112)
{
    // 3CB0 0041;	
    // (㲰) CJK UNIFIED IDEOGRAPH-3CB0	[FB80 BCB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CB0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_113)
{
    // 3CB0 0062;	
    // (㲰) CJK UNIFIED IDEOGRAPH-3CB0	[FB80 BCB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_114)
{
    // 3CB1 0021;	
    // (㲱) CJK UNIFIED IDEOGRAPH-3CB1	[FB80 BCB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_115)
{
    // 3CB1 003F;	
    // (㲱) CJK UNIFIED IDEOGRAPH-3CB1	[FB80 BCB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_116)
{
    // 3CB1 0061;	
    // (㲱) CJK UNIFIED IDEOGRAPH-3CB1	[FB80 BCB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_117)
{
    // 3CB1 0041;	
    // (㲱) CJK UNIFIED IDEOGRAPH-3CB1	[FB80 BCB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CB1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_118)
{
    // 3CB1 0062;	
    // (㲱) CJK UNIFIED IDEOGRAPH-3CB1	[FB80 BCB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_119)
{
    // 3CB2 0021;	
    // (㲲) CJK UNIFIED IDEOGRAPH-3CB2	[FB80 BCB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_120)
{
    // 3CB2 003F;	
    // (㲲) CJK UNIFIED IDEOGRAPH-3CB2	[FB80 BCB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_121)
{
    // 3CB2 0061;	
    // (㲲) CJK UNIFIED IDEOGRAPH-3CB2	[FB80 BCB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_122)
{
    // 3CB2 0041;	
    // (㲲) CJK UNIFIED IDEOGRAPH-3CB2	[FB80 BCB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CB2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_123)
{
    // 3CB2 0062;	
    // (㲲) CJK UNIFIED IDEOGRAPH-3CB2	[FB80 BCB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_124)
{
    // 3CB3 0021;	
    // (㲳) CJK UNIFIED IDEOGRAPH-3CB3	[FB80 BCB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_125)
{
    // 3CB3 003F;	
    // (㲳) CJK UNIFIED IDEOGRAPH-3CB3	[FB80 BCB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_126)
{
    // 3CB3 0061;	
    // (㲳) CJK UNIFIED IDEOGRAPH-3CB3	[FB80 BCB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_127)
{
    // 3CB3 0041;	
    // (㲳) CJK UNIFIED IDEOGRAPH-3CB3	[FB80 BCB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CB3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_128)
{
    // 3CB3 0062;	
    // (㲳) CJK UNIFIED IDEOGRAPH-3CB3	[FB80 BCB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_129)
{
    // 3CB4 0021;	
    // (㲴) CJK UNIFIED IDEOGRAPH-3CB4	[FB80 BCB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_130)
{
    // 3CB4 003F;	
    // (㲴) CJK UNIFIED IDEOGRAPH-3CB4	[FB80 BCB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_131)
{
    // 3CB4 0061;	
    // (㲴) CJK UNIFIED IDEOGRAPH-3CB4	[FB80 BCB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_132)
{
    // 3CB4 0041;	
    // (㲴) CJK UNIFIED IDEOGRAPH-3CB4	[FB80 BCB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CB4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_133)
{
    // 3CB4 0062;	
    // (㲴) CJK UNIFIED IDEOGRAPH-3CB4	[FB80 BCB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_134)
{
    // 3CB5 0021;	
    // (㲵) CJK UNIFIED IDEOGRAPH-3CB5	[FB80 BCB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_135)
{
    // 3CB5 003F;	
    // (㲵) CJK UNIFIED IDEOGRAPH-3CB5	[FB80 BCB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_136)
{
    // 3CB5 0061;	
    // (㲵) CJK UNIFIED IDEOGRAPH-3CB5	[FB80 BCB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_137)
{
    // 3CB5 0041;	
    // (㲵) CJK UNIFIED IDEOGRAPH-3CB5	[FB80 BCB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CB5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_138)
{
    // 3CB5 0062;	
    // (㲵) CJK UNIFIED IDEOGRAPH-3CB5	[FB80 BCB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_139)
{
    // 3CB6 0021;	
    // (㲶) CJK UNIFIED IDEOGRAPH-3CB6	[FB80 BCB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_140)
{
    // 3CB6 003F;	
    // (㲶) CJK UNIFIED IDEOGRAPH-3CB6	[FB80 BCB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_141)
{
    // 3CB6 0061;	
    // (㲶) CJK UNIFIED IDEOGRAPH-3CB6	[FB80 BCB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_142)
{
    // 3CB6 0041;	
    // (㲶) CJK UNIFIED IDEOGRAPH-3CB6	[FB80 BCB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CB6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_143)
{
    // 3CB6 0062;	
    // (㲶) CJK UNIFIED IDEOGRAPH-3CB6	[FB80 BCB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_144)
{
    // 3CB7 0021;	
    // (㲷) CJK UNIFIED IDEOGRAPH-3CB7	[FB80 BCB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_145)
{
    // 3CB7 003F;	
    // (㲷) CJK UNIFIED IDEOGRAPH-3CB7	[FB80 BCB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_146)
{
    // 3CB7 0061;	
    // (㲷) CJK UNIFIED IDEOGRAPH-3CB7	[FB80 BCB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_147)
{
    // 3CB7 0041;	
    // (㲷) CJK UNIFIED IDEOGRAPH-3CB7	[FB80 BCB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CB7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_148)
{
    // 3CB7 0062;	
    // (㲷) CJK UNIFIED IDEOGRAPH-3CB7	[FB80 BCB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_149)
{
    // 3CB8 0021;	
    // (㲸) CJK UNIFIED IDEOGRAPH-3CB8	[FB80 BCB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_150)
{
    // 3CB8 003F;	
    // (㲸) CJK UNIFIED IDEOGRAPH-3CB8	[FB80 BCB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_151)
{
    // 3CB8 0061;	
    // (㲸) CJK UNIFIED IDEOGRAPH-3CB8	[FB80 BCB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_152)
{
    // 3CB8 0041;	
    // (㲸) CJK UNIFIED IDEOGRAPH-3CB8	[FB80 BCB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CB8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_153)
{
    // 3CB8 0062;	
    // (㲸) CJK UNIFIED IDEOGRAPH-3CB8	[FB80 BCB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_154)
{
    // 3CB9 0021;	
    // (㲹) CJK UNIFIED IDEOGRAPH-3CB9	[FB80 BCB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_155)
{
    // 3CB9 003F;	
    // (㲹) CJK UNIFIED IDEOGRAPH-3CB9	[FB80 BCB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_156)
{
    // 3CB9 0061;	
    // (㲹) CJK UNIFIED IDEOGRAPH-3CB9	[FB80 BCB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_157)
{
    // 3CB9 0041;	
    // (㲹) CJK UNIFIED IDEOGRAPH-3CB9	[FB80 BCB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CB9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_158)
{
    // 3CB9 0062;	
    // (㲹) CJK UNIFIED IDEOGRAPH-3CB9	[FB80 BCB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CB9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_159)
{
    // 3CBA 0021;	
    // (㲺) CJK UNIFIED IDEOGRAPH-3CBA	[FB80 BCBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_160)
{
    // 3CBA 003F;	
    // (㲺) CJK UNIFIED IDEOGRAPH-3CBA	[FB80 BCBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_161)
{
    // 3CBA 0061;	
    // (㲺) CJK UNIFIED IDEOGRAPH-3CBA	[FB80 BCBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_162)
{
    // 3CBA 0041;	
    // (㲺) CJK UNIFIED IDEOGRAPH-3CBA	[FB80 BCBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CBA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_163)
{
    // 3CBA 0062;	
    // (㲺) CJK UNIFIED IDEOGRAPH-3CBA	[FB80 BCBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_164)
{
    // 3CBB 0021;	
    // (㲻) CJK UNIFIED IDEOGRAPH-3CBB	[FB80 BCBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_165)
{
    // 3CBB 003F;	
    // (㲻) CJK UNIFIED IDEOGRAPH-3CBB	[FB80 BCBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_166)
{
    // 3CBB 0061;	
    // (㲻) CJK UNIFIED IDEOGRAPH-3CBB	[FB80 BCBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_167)
{
    // 3CBB 0041;	
    // (㲻) CJK UNIFIED IDEOGRAPH-3CBB	[FB80 BCBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CBB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_168)
{
    // 3CBB 0062;	
    // (㲻) CJK UNIFIED IDEOGRAPH-3CBB	[FB80 BCBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_169)
{
    // 3CBC 0021;	
    // (㲼) CJK UNIFIED IDEOGRAPH-3CBC	[FB80 BCBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_170)
{
    // 3CBC 003F;	
    // (㲼) CJK UNIFIED IDEOGRAPH-3CBC	[FB80 BCBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_171)
{
    // 3CBC 0061;	
    // (㲼) CJK UNIFIED IDEOGRAPH-3CBC	[FB80 BCBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_172)
{
    // 3CBC 0041;	
    // (㲼) CJK UNIFIED IDEOGRAPH-3CBC	[FB80 BCBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CBC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_173)
{
    // 3CBC 0062;	
    // (㲼) CJK UNIFIED IDEOGRAPH-3CBC	[FB80 BCBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_174)
{
    // 3CBD 0021;	
    // (㲽) CJK UNIFIED IDEOGRAPH-3CBD	[FB80 BCBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_175)
{
    // 3CBD 003F;	
    // (㲽) CJK UNIFIED IDEOGRAPH-3CBD	[FB80 BCBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_176)
{
    // 3CBD 0061;	
    // (㲽) CJK UNIFIED IDEOGRAPH-3CBD	[FB80 BCBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_177)
{
    // 3CBD 0041;	
    // (㲽) CJK UNIFIED IDEOGRAPH-3CBD	[FB80 BCBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CBD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_178)
{
    // 3CBD 0062;	
    // (㲽) CJK UNIFIED IDEOGRAPH-3CBD	[FB80 BCBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_179)
{
    // 3CBE 0021;	
    // (㲾) CJK UNIFIED IDEOGRAPH-3CBE	[FB80 BCBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_180)
{
    // 3CBE 003F;	
    // (㲾) CJK UNIFIED IDEOGRAPH-3CBE	[FB80 BCBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_181)
{
    // 3CBE 0061;	
    // (㲾) CJK UNIFIED IDEOGRAPH-3CBE	[FB80 BCBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_182)
{
    // 3CBE 0041;	
    // (㲾) CJK UNIFIED IDEOGRAPH-3CBE	[FB80 BCBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CBE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_183)
{
    // 3CBE 0062;	
    // (㲾) CJK UNIFIED IDEOGRAPH-3CBE	[FB80 BCBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_184)
{
    // 3CBF 0021;	
    // (㲿) CJK UNIFIED IDEOGRAPH-3CBF	[FB80 BCBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_185)
{
    // 3CBF 003F;	
    // (㲿) CJK UNIFIED IDEOGRAPH-3CBF	[FB80 BCBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_186)
{
    // 3CBF 0061;	
    // (㲿) CJK UNIFIED IDEOGRAPH-3CBF	[FB80 BCBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_187)
{
    // 3CBF 0041;	
    // (㲿) CJK UNIFIED IDEOGRAPH-3CBF	[FB80 BCBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CBF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_188)
{
    // 3CBF 0062;	
    // (㲿) CJK UNIFIED IDEOGRAPH-3CBF	[FB80 BCBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CBF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_189)
{
    // 3CC0 0021;	
    // (㳀) CJK UNIFIED IDEOGRAPH-3CC0	[FB80 BCC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_190)
{
    // 3CC0 003F;	
    // (㳀) CJK UNIFIED IDEOGRAPH-3CC0	[FB80 BCC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_191)
{
    // 3CC0 0061;	
    // (㳀) CJK UNIFIED IDEOGRAPH-3CC0	[FB80 BCC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_192)
{
    // 3CC0 0041;	
    // (㳀) CJK UNIFIED IDEOGRAPH-3CC0	[FB80 BCC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CC0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_193)
{
    // 3CC0 0062;	
    // (㳀) CJK UNIFIED IDEOGRAPH-3CC0	[FB80 BCC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_194)
{
    // 3CC1 0021;	
    // (㳁) CJK UNIFIED IDEOGRAPH-3CC1	[FB80 BCC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_195)
{
    // 3CC1 003F;	
    // (㳁) CJK UNIFIED IDEOGRAPH-3CC1	[FB80 BCC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_196)
{
    // 3CC1 0061;	
    // (㳁) CJK UNIFIED IDEOGRAPH-3CC1	[FB80 BCC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_197)
{
    // 3CC1 0041;	
    // (㳁) CJK UNIFIED IDEOGRAPH-3CC1	[FB80 BCC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CC1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_198)
{
    // 3CC1 0062;	
    // (㳁) CJK UNIFIED IDEOGRAPH-3CC1	[FB80 BCC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_199)
{
    // 3CC2 0021;	
    // (㳂) CJK UNIFIED IDEOGRAPH-3CC2	[FB80 BCC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_200)
{
    // 3CC2 003F;	
    // (㳂) CJK UNIFIED IDEOGRAPH-3CC2	[FB80 BCC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_201)
{
    // 3CC2 0061;	
    // (㳂) CJK UNIFIED IDEOGRAPH-3CC2	[FB80 BCC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_202)
{
    // 3CC2 0041;	
    // (㳂) CJK UNIFIED IDEOGRAPH-3CC2	[FB80 BCC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CC2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_203)
{
    // 3CC2 0062;	
    // (㳂) CJK UNIFIED IDEOGRAPH-3CC2	[FB80 BCC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_204)
{
    // 3CC3 0021;	
    // (㳃) CJK UNIFIED IDEOGRAPH-3CC3	[FB80 BCC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_205)
{
    // 3CC3 003F;	
    // (㳃) CJK UNIFIED IDEOGRAPH-3CC3	[FB80 BCC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_206)
{
    // 3CC3 0061;	
    // (㳃) CJK UNIFIED IDEOGRAPH-3CC3	[FB80 BCC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_207)
{
    // 3CC3 0041;	
    // (㳃) CJK UNIFIED IDEOGRAPH-3CC3	[FB80 BCC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CC3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_208)
{
    // 3CC3 0062;	
    // (㳃) CJK UNIFIED IDEOGRAPH-3CC3	[FB80 BCC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_209)
{
    // 3CC4 0021;	
    // (㳄) CJK UNIFIED IDEOGRAPH-3CC4	[FB80 BCC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_210)
{
    // 3CC4 003F;	
    // (㳄) CJK UNIFIED IDEOGRAPH-3CC4	[FB80 BCC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_211)
{
    // 3CC4 0061;	
    // (㳄) CJK UNIFIED IDEOGRAPH-3CC4	[FB80 BCC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_212)
{
    // 3CC4 0041;	
    // (㳄) CJK UNIFIED IDEOGRAPH-3CC4	[FB80 BCC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CC4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_213)
{
    // 3CC4 0062;	
    // (㳄) CJK UNIFIED IDEOGRAPH-3CC4	[FB80 BCC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_214)
{
    // 3CC5 0021;	
    // (㳅) CJK UNIFIED IDEOGRAPH-3CC5	[FB80 BCC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_215)
{
    // 3CC5 003F;	
    // (㳅) CJK UNIFIED IDEOGRAPH-3CC5	[FB80 BCC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_216)
{
    // 3CC5 0061;	
    // (㳅) CJK UNIFIED IDEOGRAPH-3CC5	[FB80 BCC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_217)
{
    // 3CC5 0041;	
    // (㳅) CJK UNIFIED IDEOGRAPH-3CC5	[FB80 BCC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CC5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_218)
{
    // 3CC5 0062;	
    // (㳅) CJK UNIFIED IDEOGRAPH-3CC5	[FB80 BCC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_219)
{
    // 3CC6 0021;	
    // (㳆) CJK UNIFIED IDEOGRAPH-3CC6	[FB80 BCC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_220)
{
    // 3CC6 003F;	
    // (㳆) CJK UNIFIED IDEOGRAPH-3CC6	[FB80 BCC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_221)
{
    // 3CC6 0061;	
    // (㳆) CJK UNIFIED IDEOGRAPH-3CC6	[FB80 BCC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_222)
{
    // 3CC6 0041;	
    // (㳆) CJK UNIFIED IDEOGRAPH-3CC6	[FB80 BCC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CC6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_223)
{
    // 3CC6 0062;	
    // (㳆) CJK UNIFIED IDEOGRAPH-3CC6	[FB80 BCC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_224)
{
    // 3CC7 0021;	
    // (㳇) CJK UNIFIED IDEOGRAPH-3CC7	[FB80 BCC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_225)
{
    // 3CC7 003F;	
    // (㳇) CJK UNIFIED IDEOGRAPH-3CC7	[FB80 BCC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_226)
{
    // 3CC7 0061;	
    // (㳇) CJK UNIFIED IDEOGRAPH-3CC7	[FB80 BCC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_227)
{
    // 3CC7 0041;	
    // (㳇) CJK UNIFIED IDEOGRAPH-3CC7	[FB80 BCC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CC7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_228)
{
    // 3CC7 0062;	
    // (㳇) CJK UNIFIED IDEOGRAPH-3CC7	[FB80 BCC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_229)
{
    // 3CC8 0021;	
    // (㳈) CJK UNIFIED IDEOGRAPH-3CC8	[FB80 BCC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_230)
{
    // 3CC8 003F;	
    // (㳈) CJK UNIFIED IDEOGRAPH-3CC8	[FB80 BCC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_231)
{
    // 3CC8 0061;	
    // (㳈) CJK UNIFIED IDEOGRAPH-3CC8	[FB80 BCC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_232)
{
    // 3CC8 0041;	
    // (㳈) CJK UNIFIED IDEOGRAPH-3CC8	[FB80 BCC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CC8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_233)
{
    // 3CC8 0062;	
    // (㳈) CJK UNIFIED IDEOGRAPH-3CC8	[FB80 BCC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_234)
{
    // 3CC9 0021;	
    // (㳉) CJK UNIFIED IDEOGRAPH-3CC9	[FB80 BCC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_235)
{
    // 3CC9 003F;	
    // (㳉) CJK UNIFIED IDEOGRAPH-3CC9	[FB80 BCC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_236)
{
    // 3CC9 0061;	
    // (㳉) CJK UNIFIED IDEOGRAPH-3CC9	[FB80 BCC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_237)
{
    // 3CC9 0041;	
    // (㳉) CJK UNIFIED IDEOGRAPH-3CC9	[FB80 BCC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CC9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_238)
{
    // 3CC9 0062;	
    // (㳉) CJK UNIFIED IDEOGRAPH-3CC9	[FB80 BCC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CC9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_239)
{
    // 3CCA 0021;	
    // (㳊) CJK UNIFIED IDEOGRAPH-3CCA	[FB80 BCCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_240)
{
    // 3CCA 003F;	
    // (㳊) CJK UNIFIED IDEOGRAPH-3CCA	[FB80 BCCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_241)
{
    // 3CCA 0061;	
    // (㳊) CJK UNIFIED IDEOGRAPH-3CCA	[FB80 BCCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_242)
{
    // 3CCA 0041;	
    // (㳊) CJK UNIFIED IDEOGRAPH-3CCA	[FB80 BCCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CCA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_243)
{
    // 3CCA 0062;	
    // (㳊) CJK UNIFIED IDEOGRAPH-3CCA	[FB80 BCCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_244)
{
    // 3CCB 0021;	
    // (㳋) CJK UNIFIED IDEOGRAPH-3CCB	[FB80 BCCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_245)
{
    // 3CCB 003F;	
    // (㳋) CJK UNIFIED IDEOGRAPH-3CCB	[FB80 BCCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_246)
{
    // 3CCB 0061;	
    // (㳋) CJK UNIFIED IDEOGRAPH-3CCB	[FB80 BCCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_247)
{
    // 3CCB 0041;	
    // (㳋) CJK UNIFIED IDEOGRAPH-3CCB	[FB80 BCCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CCB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_248)
{
    // 3CCB 0062;	
    // (㳋) CJK UNIFIED IDEOGRAPH-3CCB	[FB80 BCCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_249)
{
    // 3CCC 0021;	
    // (㳌) CJK UNIFIED IDEOGRAPH-3CCC	[FB80 BCCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_250)
{
    // 3CCC 003F;	
    // (㳌) CJK UNIFIED IDEOGRAPH-3CCC	[FB80 BCCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_251)
{
    // 3CCC 0061;	
    // (㳌) CJK UNIFIED IDEOGRAPH-3CCC	[FB80 BCCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_252)
{
    // 3CCC 0041;	
    // (㳌) CJK UNIFIED IDEOGRAPH-3CCC	[FB80 BCCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CCC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_253)
{
    // 3CCC 0062;	
    // (㳌) CJK UNIFIED IDEOGRAPH-3CCC	[FB80 BCCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_254)
{
    // 3CCD 0021;	
    // (㳍) CJK UNIFIED IDEOGRAPH-3CCD	[FB80 BCCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_255)
{
    // 3CCD 003F;	
    // (㳍) CJK UNIFIED IDEOGRAPH-3CCD	[FB80 BCCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_256)
{
    // 3CCD 0061;	
    // (㳍) CJK UNIFIED IDEOGRAPH-3CCD	[FB80 BCCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_257)
{
    // 3CCD 0041;	
    // (㳍) CJK UNIFIED IDEOGRAPH-3CCD	[FB80 BCCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CCD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_258)
{
    // 3CCD 0062;	
    // (㳍) CJK UNIFIED IDEOGRAPH-3CCD	[FB80 BCCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_259)
{
    // 3CCE 0021;	
    // (㳎) CJK UNIFIED IDEOGRAPH-3CCE	[FB80 BCCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_260)
{
    // 3CCE 003F;	
    // (㳎) CJK UNIFIED IDEOGRAPH-3CCE	[FB80 BCCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_261)
{
    // 3CCE 0061;	
    // (㳎) CJK UNIFIED IDEOGRAPH-3CCE	[FB80 BCCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_262)
{
    // 3CCE 0041;	
    // (㳎) CJK UNIFIED IDEOGRAPH-3CCE	[FB80 BCCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CCE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_263)
{
    // 3CCE 0062;	
    // (㳎) CJK UNIFIED IDEOGRAPH-3CCE	[FB80 BCCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_264)
{
    // 3CCF 0021;	
    // (㳏) CJK UNIFIED IDEOGRAPH-3CCF	[FB80 BCCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_265)
{
    // 3CCF 003F;	
    // (㳏) CJK UNIFIED IDEOGRAPH-3CCF	[FB80 BCCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_266)
{
    // 3CCF 0061;	
    // (㳏) CJK UNIFIED IDEOGRAPH-3CCF	[FB80 BCCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_267)
{
    // 3CCF 0041;	
    // (㳏) CJK UNIFIED IDEOGRAPH-3CCF	[FB80 BCCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CCF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_268)
{
    // 3CCF 0062;	
    // (㳏) CJK UNIFIED IDEOGRAPH-3CCF	[FB80 BCCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CCF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_269)
{
    // 3CD0 0021;	
    // (㳐) CJK UNIFIED IDEOGRAPH-3CD0	[FB80 BCD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_270)
{
    // 3CD0 003F;	
    // (㳐) CJK UNIFIED IDEOGRAPH-3CD0	[FB80 BCD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_271)
{
    // 3CD0 0061;	
    // (㳐) CJK UNIFIED IDEOGRAPH-3CD0	[FB80 BCD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_272)
{
    // 3CD0 0041;	
    // (㳐) CJK UNIFIED IDEOGRAPH-3CD0	[FB80 BCD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CD0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_273)
{
    // 3CD0 0062;	
    // (㳐) CJK UNIFIED IDEOGRAPH-3CD0	[FB80 BCD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_274)
{
    // 3CD1 0021;	
    // (㳑) CJK UNIFIED IDEOGRAPH-3CD1	[FB80 BCD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_275)
{
    // 3CD1 003F;	
    // (㳑) CJK UNIFIED IDEOGRAPH-3CD1	[FB80 BCD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_276)
{
    // 3CD1 0061;	
    // (㳑) CJK UNIFIED IDEOGRAPH-3CD1	[FB80 BCD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_277)
{
    // 3CD1 0041;	
    // (㳑) CJK UNIFIED IDEOGRAPH-3CD1	[FB80 BCD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CD1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_278)
{
    // 3CD1 0062;	
    // (㳑) CJK UNIFIED IDEOGRAPH-3CD1	[FB80 BCD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_279)
{
    // 3CD2 0021;	
    // (㳒) CJK UNIFIED IDEOGRAPH-3CD2	[FB80 BCD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_280)
{
    // 3CD2 003F;	
    // (㳒) CJK UNIFIED IDEOGRAPH-3CD2	[FB80 BCD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_281)
{
    // 3CD2 0061;	
    // (㳒) CJK UNIFIED IDEOGRAPH-3CD2	[FB80 BCD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_282)
{
    // 3CD2 0041;	
    // (㳒) CJK UNIFIED IDEOGRAPH-3CD2	[FB80 BCD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CD2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_283)
{
    // 3CD2 0062;	
    // (㳒) CJK UNIFIED IDEOGRAPH-3CD2	[FB80 BCD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_284)
{
    // 3CD3 0021;	
    // (㳓) CJK UNIFIED IDEOGRAPH-3CD3	[FB80 BCD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_285)
{
    // 3CD3 003F;	
    // (㳓) CJK UNIFIED IDEOGRAPH-3CD3	[FB80 BCD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_286)
{
    // 3CD3 0061;	
    // (㳓) CJK UNIFIED IDEOGRAPH-3CD3	[FB80 BCD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_287)
{
    // 3CD3 0041;	
    // (㳓) CJK UNIFIED IDEOGRAPH-3CD3	[FB80 BCD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CD3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_288)
{
    // 3CD3 0062;	
    // (㳓) CJK UNIFIED IDEOGRAPH-3CD3	[FB80 BCD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_289)
{
    // 3CD4 0021;	
    // (㳔) CJK UNIFIED IDEOGRAPH-3CD4	[FB80 BCD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_290)
{
    // 3CD4 003F;	
    // (㳔) CJK UNIFIED IDEOGRAPH-3CD4	[FB80 BCD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_291)
{
    // 3CD4 0061;	
    // (㳔) CJK UNIFIED IDEOGRAPH-3CD4	[FB80 BCD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_292)
{
    // 3CD4 0041;	
    // (㳔) CJK UNIFIED IDEOGRAPH-3CD4	[FB80 BCD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CD4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_293)
{
    // 3CD4 0062;	
    // (㳔) CJK UNIFIED IDEOGRAPH-3CD4	[FB80 BCD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_294)
{
    // 3CD5 0021;	
    // (㳕) CJK UNIFIED IDEOGRAPH-3CD5	[FB80 BCD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_295)
{
    // 3CD5 003F;	
    // (㳕) CJK UNIFIED IDEOGRAPH-3CD5	[FB80 BCD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_296)
{
    // 3CD5 0061;	
    // (㳕) CJK UNIFIED IDEOGRAPH-3CD5	[FB80 BCD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_297)
{
    // 3CD5 0041;	
    // (㳕) CJK UNIFIED IDEOGRAPH-3CD5	[FB80 BCD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CD5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_298)
{
    // 3CD5 0062;	
    // (㳕) CJK UNIFIED IDEOGRAPH-3CD5	[FB80 BCD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_299)
{
    // 3CD6 0021;	
    // (㳖) CJK UNIFIED IDEOGRAPH-3CD6	[FB80 BCD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_300)
{
    // 3CD6 003F;	
    // (㳖) CJK UNIFIED IDEOGRAPH-3CD6	[FB80 BCD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_301)
{
    // 3CD6 0061;	
    // (㳖) CJK UNIFIED IDEOGRAPH-3CD6	[FB80 BCD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_302)
{
    // 3CD6 0041;	
    // (㳖) CJK UNIFIED IDEOGRAPH-3CD6	[FB80 BCD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CD6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_303)
{
    // 3CD6 0062;	
    // (㳖) CJK UNIFIED IDEOGRAPH-3CD6	[FB80 BCD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_304)
{
    // 3CD7 0021;	
    // (㳗) CJK UNIFIED IDEOGRAPH-3CD7	[FB80 BCD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_305)
{
    // 3CD7 003F;	
    // (㳗) CJK UNIFIED IDEOGRAPH-3CD7	[FB80 BCD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_306)
{
    // 3CD7 0061;	
    // (㳗) CJK UNIFIED IDEOGRAPH-3CD7	[FB80 BCD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_307)
{
    // 3CD7 0041;	
    // (㳗) CJK UNIFIED IDEOGRAPH-3CD7	[FB80 BCD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CD7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_308)
{
    // 3CD7 0062;	
    // (㳗) CJK UNIFIED IDEOGRAPH-3CD7	[FB80 BCD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_309)
{
    // 3CD8 0021;	
    // (㳘) CJK UNIFIED IDEOGRAPH-3CD8	[FB80 BCD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_310)
{
    // 3CD8 003F;	
    // (㳘) CJK UNIFIED IDEOGRAPH-3CD8	[FB80 BCD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_311)
{
    // 3CD8 0061;	
    // (㳘) CJK UNIFIED IDEOGRAPH-3CD8	[FB80 BCD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_312)
{
    // 3CD8 0041;	
    // (㳘) CJK UNIFIED IDEOGRAPH-3CD8	[FB80 BCD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CD8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_313)
{
    // 3CD8 0062;	
    // (㳘) CJK UNIFIED IDEOGRAPH-3CD8	[FB80 BCD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_314)
{
    // 3CD9 0021;	
    // (㳙) CJK UNIFIED IDEOGRAPH-3CD9	[FB80 BCD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_315)
{
    // 3CD9 003F;	
    // (㳙) CJK UNIFIED IDEOGRAPH-3CD9	[FB80 BCD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_316)
{
    // 3CD9 0061;	
    // (㳙) CJK UNIFIED IDEOGRAPH-3CD9	[FB80 BCD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_317)
{
    // 3CD9 0041;	
    // (㳙) CJK UNIFIED IDEOGRAPH-3CD9	[FB80 BCD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CD9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_318)
{
    // 3CD9 0062;	
    // (㳙) CJK UNIFIED IDEOGRAPH-3CD9	[FB80 BCD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CD9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_319)
{
    // 3CDA 0021;	
    // (㳚) CJK UNIFIED IDEOGRAPH-3CDA	[FB80 BCDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_320)
{
    // 3CDA 003F;	
    // (㳚) CJK UNIFIED IDEOGRAPH-3CDA	[FB80 BCDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_321)
{
    // 3CDA 0061;	
    // (㳚) CJK UNIFIED IDEOGRAPH-3CDA	[FB80 BCDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_322)
{
    // 3CDA 0041;	
    // (㳚) CJK UNIFIED IDEOGRAPH-3CDA	[FB80 BCDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CDA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_323)
{
    // 3CDA 0062;	
    // (㳚) CJK UNIFIED IDEOGRAPH-3CDA	[FB80 BCDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_324)
{
    // 3CDB 0021;	
    // (㳛) CJK UNIFIED IDEOGRAPH-3CDB	[FB80 BCDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_325)
{
    // 3CDB 003F;	
    // (㳛) CJK UNIFIED IDEOGRAPH-3CDB	[FB80 BCDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_326)
{
    // 3CDB 0061;	
    // (㳛) CJK UNIFIED IDEOGRAPH-3CDB	[FB80 BCDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_327)
{
    // 3CDB 0041;	
    // (㳛) CJK UNIFIED IDEOGRAPH-3CDB	[FB80 BCDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CDB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_328)
{
    // 3CDB 0062;	
    // (㳛) CJK UNIFIED IDEOGRAPH-3CDB	[FB80 BCDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_329)
{
    // 3CDC 0021;	
    // (㳜) CJK UNIFIED IDEOGRAPH-3CDC	[FB80 BCDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_330)
{
    // 3CDC 003F;	
    // (㳜) CJK UNIFIED IDEOGRAPH-3CDC	[FB80 BCDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_331)
{
    // 3CDC 0061;	
    // (㳜) CJK UNIFIED IDEOGRAPH-3CDC	[FB80 BCDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_332)
{
    // 3CDC 0041;	
    // (㳜) CJK UNIFIED IDEOGRAPH-3CDC	[FB80 BCDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CDC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_333)
{
    // 3CDC 0062;	
    // (㳜) CJK UNIFIED IDEOGRAPH-3CDC	[FB80 BCDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_334)
{
    // 3CDD 0021;	
    // (㳝) CJK UNIFIED IDEOGRAPH-3CDD	[FB80 BCDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_335)
{
    // 3CDD 003F;	
    // (㳝) CJK UNIFIED IDEOGRAPH-3CDD	[FB80 BCDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_336)
{
    // 3CDD 0061;	
    // (㳝) CJK UNIFIED IDEOGRAPH-3CDD	[FB80 BCDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_337)
{
    // 3CDD 0041;	
    // (㳝) CJK UNIFIED IDEOGRAPH-3CDD	[FB80 BCDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CDD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_338)
{
    // 3CDD 0062;	
    // (㳝) CJK UNIFIED IDEOGRAPH-3CDD	[FB80 BCDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_339)
{
    // 3CDE 0021;	
    // (㳞) CJK UNIFIED IDEOGRAPH-3CDE	[FB80 BCDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_340)
{
    // 3CDE 003F;	
    // (㳞) CJK UNIFIED IDEOGRAPH-3CDE	[FB80 BCDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_341)
{
    // 3CDE 0061;	
    // (㳞) CJK UNIFIED IDEOGRAPH-3CDE	[FB80 BCDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_342)
{
    // 3CDE 0041;	
    // (㳞) CJK UNIFIED IDEOGRAPH-3CDE	[FB80 BCDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CDE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_343)
{
    // 3CDE 0062;	
    // (㳞) CJK UNIFIED IDEOGRAPH-3CDE	[FB80 BCDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_344)
{
    // 3CDF 0021;	
    // (㳟) CJK UNIFIED IDEOGRAPH-3CDF	[FB80 BCDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_345)
{
    // 3CDF 003F;	
    // (㳟) CJK UNIFIED IDEOGRAPH-3CDF	[FB80 BCDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_346)
{
    // 3CDF 0061;	
    // (㳟) CJK UNIFIED IDEOGRAPH-3CDF	[FB80 BCDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_347)
{
    // 3CDF 0041;	
    // (㳟) CJK UNIFIED IDEOGRAPH-3CDF	[FB80 BCDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CDF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_348)
{
    // 3CDF 0062;	
    // (㳟) CJK UNIFIED IDEOGRAPH-3CDF	[FB80 BCDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CDF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_349)
{
    // 3CE0 0021;	
    // (㳠) CJK UNIFIED IDEOGRAPH-3CE0	[FB80 BCE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_350)
{
    // 3CE0 003F;	
    // (㳠) CJK UNIFIED IDEOGRAPH-3CE0	[FB80 BCE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_351)
{
    // 3CE0 0061;	
    // (㳠) CJK UNIFIED IDEOGRAPH-3CE0	[FB80 BCE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_352)
{
    // 3CE0 0041;	
    // (㳠) CJK UNIFIED IDEOGRAPH-3CE0	[FB80 BCE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CE0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_353)
{
    // 3CE0 0062;	
    // (㳠) CJK UNIFIED IDEOGRAPH-3CE0	[FB80 BCE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_354)
{
    // 3CE1 0021;	
    // (㳡) CJK UNIFIED IDEOGRAPH-3CE1	[FB80 BCE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_355)
{
    // 3CE1 003F;	
    // (㳡) CJK UNIFIED IDEOGRAPH-3CE1	[FB80 BCE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_356)
{
    // 3CE1 0061;	
    // (㳡) CJK UNIFIED IDEOGRAPH-3CE1	[FB80 BCE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_357)
{
    // 3CE1 0041;	
    // (㳡) CJK UNIFIED IDEOGRAPH-3CE1	[FB80 BCE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CE1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_358)
{
    // 3CE1 0062;	
    // (㳡) CJK UNIFIED IDEOGRAPH-3CE1	[FB80 BCE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_359)
{
    // 3CE2 0021;	
    // (㳢) CJK UNIFIED IDEOGRAPH-3CE2	[FB80 BCE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_360)
{
    // 3CE2 003F;	
    // (㳢) CJK UNIFIED IDEOGRAPH-3CE2	[FB80 BCE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_361)
{
    // 3CE2 0061;	
    // (㳢) CJK UNIFIED IDEOGRAPH-3CE2	[FB80 BCE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_362)
{
    // 3CE2 0041;	
    // (㳢) CJK UNIFIED IDEOGRAPH-3CE2	[FB80 BCE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CE2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_363)
{
    // 3CE2 0062;	
    // (㳢) CJK UNIFIED IDEOGRAPH-3CE2	[FB80 BCE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_364)
{
    // 3CE3 0021;	
    // (㳣) CJK UNIFIED IDEOGRAPH-3CE3	[FB80 BCE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_365)
{
    // 3CE3 003F;	
    // (㳣) CJK UNIFIED IDEOGRAPH-3CE3	[FB80 BCE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_366)
{
    // 3CE3 0061;	
    // (㳣) CJK UNIFIED IDEOGRAPH-3CE3	[FB80 BCE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_367)
{
    // 3CE3 0041;	
    // (㳣) CJK UNIFIED IDEOGRAPH-3CE3	[FB80 BCE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CE3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_368)
{
    // 3CE3 0062;	
    // (㳣) CJK UNIFIED IDEOGRAPH-3CE3	[FB80 BCE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_369)
{
    // 3CE4 0021;	
    // (㳤) CJK UNIFIED IDEOGRAPH-3CE4	[FB80 BCE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_370)
{
    // 3CE4 003F;	
    // (㳤) CJK UNIFIED IDEOGRAPH-3CE4	[FB80 BCE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_371)
{
    // 3CE4 0061;	
    // (㳤) CJK UNIFIED IDEOGRAPH-3CE4	[FB80 BCE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_372)
{
    // 3CE4 0041;	
    // (㳤) CJK UNIFIED IDEOGRAPH-3CE4	[FB80 BCE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CE4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_373)
{
    // 3CE4 0062;	
    // (㳤) CJK UNIFIED IDEOGRAPH-3CE4	[FB80 BCE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_374)
{
    // 3CE5 0021;	
    // (㳥) CJK UNIFIED IDEOGRAPH-3CE5	[FB80 BCE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_375)
{
    // 3CE5 003F;	
    // (㳥) CJK UNIFIED IDEOGRAPH-3CE5	[FB80 BCE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_376)
{
    // 3CE5 0061;	
    // (㳥) CJK UNIFIED IDEOGRAPH-3CE5	[FB80 BCE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_377)
{
    // 3CE5 0041;	
    // (㳥) CJK UNIFIED IDEOGRAPH-3CE5	[FB80 BCE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CE5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_378)
{
    // 3CE5 0062;	
    // (㳥) CJK UNIFIED IDEOGRAPH-3CE5	[FB80 BCE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_379)
{
    // 3CE6 0021;	
    // (㳦) CJK UNIFIED IDEOGRAPH-3CE6	[FB80 BCE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_380)
{
    // 3CE6 003F;	
    // (㳦) CJK UNIFIED IDEOGRAPH-3CE6	[FB80 BCE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_381)
{
    // 3CE6 0061;	
    // (㳦) CJK UNIFIED IDEOGRAPH-3CE6	[FB80 BCE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_382)
{
    // 3CE6 0041;	
    // (㳦) CJK UNIFIED IDEOGRAPH-3CE6	[FB80 BCE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CE6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_383)
{
    // 3CE6 0062;	
    // (㳦) CJK UNIFIED IDEOGRAPH-3CE6	[FB80 BCE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_384)
{
    // 3CE7 0021;	
    // (㳧) CJK UNIFIED IDEOGRAPH-3CE7	[FB80 BCE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_385)
{
    // 3CE7 003F;	
    // (㳧) CJK UNIFIED IDEOGRAPH-3CE7	[FB80 BCE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_386)
{
    // 3CE7 0061;	
    // (㳧) CJK UNIFIED IDEOGRAPH-3CE7	[FB80 BCE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_387)
{
    // 3CE7 0041;	
    // (㳧) CJK UNIFIED IDEOGRAPH-3CE7	[FB80 BCE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CE7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_388)
{
    // 3CE7 0062;	
    // (㳧) CJK UNIFIED IDEOGRAPH-3CE7	[FB80 BCE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_389)
{
    // 3CE8 0021;	
    // (㳨) CJK UNIFIED IDEOGRAPH-3CE8	[FB80 BCE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_390)
{
    // 3CE8 003F;	
    // (㳨) CJK UNIFIED IDEOGRAPH-3CE8	[FB80 BCE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_391)
{
    // 3CE8 0061;	
    // (㳨) CJK UNIFIED IDEOGRAPH-3CE8	[FB80 BCE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_392)
{
    // 3CE8 0041;	
    // (㳨) CJK UNIFIED IDEOGRAPH-3CE8	[FB80 BCE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CE8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_393)
{
    // 3CE8 0062;	
    // (㳨) CJK UNIFIED IDEOGRAPH-3CE8	[FB80 BCE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_394)
{
    // 3CE9 0021;	
    // (㳩) CJK UNIFIED IDEOGRAPH-3CE9	[FB80 BCE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_395)
{
    // 3CE9 003F;	
    // (㳩) CJK UNIFIED IDEOGRAPH-3CE9	[FB80 BCE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_396)
{
    // 3CE9 0061;	
    // (㳩) CJK UNIFIED IDEOGRAPH-3CE9	[FB80 BCE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_397)
{
    // 3CE9 0041;	
    // (㳩) CJK UNIFIED IDEOGRAPH-3CE9	[FB80 BCE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CE9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_398)
{
    // 3CE9 0062;	
    // (㳩) CJK UNIFIED IDEOGRAPH-3CE9	[FB80 BCE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CE9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_399)
{
    // 3CEA 0021;	
    // (㳪) CJK UNIFIED IDEOGRAPH-3CEA	[FB80 BCEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_400)
{
    // 3CEA 003F;	
    // (㳪) CJK UNIFIED IDEOGRAPH-3CEA	[FB80 BCEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_401)
{
    // 3CEA 0061;	
    // (㳪) CJK UNIFIED IDEOGRAPH-3CEA	[FB80 BCEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_402)
{
    // 3CEA 0041;	
    // (㳪) CJK UNIFIED IDEOGRAPH-3CEA	[FB80 BCEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CEA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_403)
{
    // 3CEA 0062;	
    // (㳪) CJK UNIFIED IDEOGRAPH-3CEA	[FB80 BCEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_404)
{
    // 3CEB 0021;	
    // (㳫) CJK UNIFIED IDEOGRAPH-3CEB	[FB80 BCEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_405)
{
    // 3CEB 003F;	
    // (㳫) CJK UNIFIED IDEOGRAPH-3CEB	[FB80 BCEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_406)
{
    // 3CEB 0061;	
    // (㳫) CJK UNIFIED IDEOGRAPH-3CEB	[FB80 BCEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_407)
{
    // 3CEB 0041;	
    // (㳫) CJK UNIFIED IDEOGRAPH-3CEB	[FB80 BCEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CEB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_408)
{
    // 3CEB 0062;	
    // (㳫) CJK UNIFIED IDEOGRAPH-3CEB	[FB80 BCEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_409)
{
    // 3CEC 0021;	
    // (㳬) CJK UNIFIED IDEOGRAPH-3CEC	[FB80 BCEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_410)
{
    // 3CEC 003F;	
    // (㳬) CJK UNIFIED IDEOGRAPH-3CEC	[FB80 BCEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_411)
{
    // 3CEC 0061;	
    // (㳬) CJK UNIFIED IDEOGRAPH-3CEC	[FB80 BCEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_412)
{
    // 3CEC 0041;	
    // (㳬) CJK UNIFIED IDEOGRAPH-3CEC	[FB80 BCEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CEC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_413)
{
    // 3CEC 0062;	
    // (㳬) CJK UNIFIED IDEOGRAPH-3CEC	[FB80 BCEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_414)
{
    // 3CED 0021;	
    // (㳭) CJK UNIFIED IDEOGRAPH-3CED	[FB80 BCED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_415)
{
    // 3CED 003F;	
    // (㳭) CJK UNIFIED IDEOGRAPH-3CED	[FB80 BCED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_416)
{
    // 3CED 0061;	
    // (㳭) CJK UNIFIED IDEOGRAPH-3CED	[FB80 BCED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_417)
{
    // 3CED 0041;	
    // (㳭) CJK UNIFIED IDEOGRAPH-3CED	[FB80 BCED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_418)
{
    // 3CED 0062;	
    // (㳭) CJK UNIFIED IDEOGRAPH-3CED	[FB80 BCED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_419)
{
    // 3CEE 0021;	
    // (㳮) CJK UNIFIED IDEOGRAPH-3CEE	[FB80 BCEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_420)
{
    // 3CEE 003F;	
    // (㳮) CJK UNIFIED IDEOGRAPH-3CEE	[FB80 BCEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_421)
{
    // 3CEE 0061;	
    // (㳮) CJK UNIFIED IDEOGRAPH-3CEE	[FB80 BCEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_422)
{
    // 3CEE 0041;	
    // (㳮) CJK UNIFIED IDEOGRAPH-3CEE	[FB80 BCEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CEE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_423)
{
    // 3CEE 0062;	
    // (㳮) CJK UNIFIED IDEOGRAPH-3CEE	[FB80 BCEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_424)
{
    // 3CEF 0021;	
    // (㳯) CJK UNIFIED IDEOGRAPH-3CEF	[FB80 BCEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_425)
{
    // 3CEF 003F;	
    // (㳯) CJK UNIFIED IDEOGRAPH-3CEF	[FB80 BCEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_426)
{
    // 3CEF 0061;	
    // (㳯) CJK UNIFIED IDEOGRAPH-3CEF	[FB80 BCEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_427)
{
    // 3CEF 0041;	
    // (㳯) CJK UNIFIED IDEOGRAPH-3CEF	[FB80 BCEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CEF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_428)
{
    // 3CEF 0062;	
    // (㳯) CJK UNIFIED IDEOGRAPH-3CEF	[FB80 BCEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CEF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_429)
{
    // 3CF0 0021;	
    // (㳰) CJK UNIFIED IDEOGRAPH-3CF0	[FB80 BCF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_430)
{
    // 3CF0 003F;	
    // (㳰) CJK UNIFIED IDEOGRAPH-3CF0	[FB80 BCF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_431)
{
    // 3CF0 0061;	
    // (㳰) CJK UNIFIED IDEOGRAPH-3CF0	[FB80 BCF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_432)
{
    // 3CF0 0041;	
    // (㳰) CJK UNIFIED IDEOGRAPH-3CF0	[FB80 BCF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CF0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_433)
{
    // 3CF0 0062;	
    // (㳰) CJK UNIFIED IDEOGRAPH-3CF0	[FB80 BCF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_434)
{
    // 3CF1 0021;	
    // (㳱) CJK UNIFIED IDEOGRAPH-3CF1	[FB80 BCF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_435)
{
    // 3CF1 003F;	
    // (㳱) CJK UNIFIED IDEOGRAPH-3CF1	[FB80 BCF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_436)
{
    // 3CF1 0061;	
    // (㳱) CJK UNIFIED IDEOGRAPH-3CF1	[FB80 BCF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_437)
{
    // 3CF1 0041;	
    // (㳱) CJK UNIFIED IDEOGRAPH-3CF1	[FB80 BCF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CF1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_438)
{
    // 3CF1 0062;	
    // (㳱) CJK UNIFIED IDEOGRAPH-3CF1	[FB80 BCF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_439)
{
    // 3CF2 0021;	
    // (㳲) CJK UNIFIED IDEOGRAPH-3CF2	[FB80 BCF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_440)
{
    // 3CF2 003F;	
    // (㳲) CJK UNIFIED IDEOGRAPH-3CF2	[FB80 BCF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_441)
{
    // 3CF2 0061;	
    // (㳲) CJK UNIFIED IDEOGRAPH-3CF2	[FB80 BCF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_442)
{
    // 3CF2 0041;	
    // (㳲) CJK UNIFIED IDEOGRAPH-3CF2	[FB80 BCF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CF2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_443)
{
    // 3CF2 0062;	
    // (㳲) CJK UNIFIED IDEOGRAPH-3CF2	[FB80 BCF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_444)
{
    // 3CF3 0021;	
    // (㳳) CJK UNIFIED IDEOGRAPH-3CF3	[FB80 BCF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_445)
{
    // 3CF3 003F;	
    // (㳳) CJK UNIFIED IDEOGRAPH-3CF3	[FB80 BCF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_446)
{
    // 3CF3 0061;	
    // (㳳) CJK UNIFIED IDEOGRAPH-3CF3	[FB80 BCF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_447)
{
    // 3CF3 0041;	
    // (㳳) CJK UNIFIED IDEOGRAPH-3CF3	[FB80 BCF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CF3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_448)
{
    // 3CF3 0062;	
    // (㳳) CJK UNIFIED IDEOGRAPH-3CF3	[FB80 BCF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_449)
{
    // 3CF4 0021;	
    // (㳴) CJK UNIFIED IDEOGRAPH-3CF4	[FB80 BCF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_450)
{
    // 3CF4 003F;	
    // (㳴) CJK UNIFIED IDEOGRAPH-3CF4	[FB80 BCF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_451)
{
    // 3CF4 0061;	
    // (㳴) CJK UNIFIED IDEOGRAPH-3CF4	[FB80 BCF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_452)
{
    // 3CF4 0041;	
    // (㳴) CJK UNIFIED IDEOGRAPH-3CF4	[FB80 BCF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CF4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_453)
{
    // 3CF4 0062;	
    // (㳴) CJK UNIFIED IDEOGRAPH-3CF4	[FB80 BCF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_454)
{
    // 3CF5 0021;	
    // (㳵) CJK UNIFIED IDEOGRAPH-3CF5	[FB80 BCF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_455)
{
    // 3CF5 003F;	
    // (㳵) CJK UNIFIED IDEOGRAPH-3CF5	[FB80 BCF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_456)
{
    // 3CF5 0061;	
    // (㳵) CJK UNIFIED IDEOGRAPH-3CF5	[FB80 BCF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_457)
{
    // 3CF5 0041;	
    // (㳵) CJK UNIFIED IDEOGRAPH-3CF5	[FB80 BCF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CF5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_458)
{
    // 3CF5 0062;	
    // (㳵) CJK UNIFIED IDEOGRAPH-3CF5	[FB80 BCF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_459)
{
    // 3CF6 0021;	
    // (㳶) CJK UNIFIED IDEOGRAPH-3CF6	[FB80 BCF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_460)
{
    // 3CF6 003F;	
    // (㳶) CJK UNIFIED IDEOGRAPH-3CF6	[FB80 BCF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_461)
{
    // 3CF6 0061;	
    // (㳶) CJK UNIFIED IDEOGRAPH-3CF6	[FB80 BCF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_462)
{
    // 3CF6 0041;	
    // (㳶) CJK UNIFIED IDEOGRAPH-3CF6	[FB80 BCF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CF6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_463)
{
    // 3CF6 0062;	
    // (㳶) CJK UNIFIED IDEOGRAPH-3CF6	[FB80 BCF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_464)
{
    // 3CF7 0021;	
    // (㳷) CJK UNIFIED IDEOGRAPH-3CF7	[FB80 BCF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_465)
{
    // 3CF7 003F;	
    // (㳷) CJK UNIFIED IDEOGRAPH-3CF7	[FB80 BCF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_466)
{
    // 3CF7 0061;	
    // (㳷) CJK UNIFIED IDEOGRAPH-3CF7	[FB80 BCF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_467)
{
    // 3CF7 0041;	
    // (㳷) CJK UNIFIED IDEOGRAPH-3CF7	[FB80 BCF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CF7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_468)
{
    // 3CF7 0062;	
    // (㳷) CJK UNIFIED IDEOGRAPH-3CF7	[FB80 BCF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_469)
{
    // 3CF8 0021;	
    // (㳸) CJK UNIFIED IDEOGRAPH-3CF8	[FB80 BCF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_470)
{
    // 3CF8 003F;	
    // (㳸) CJK UNIFIED IDEOGRAPH-3CF8	[FB80 BCF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_471)
{
    // 3CF8 0061;	
    // (㳸) CJK UNIFIED IDEOGRAPH-3CF8	[FB80 BCF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_472)
{
    // 3CF8 0041;	
    // (㳸) CJK UNIFIED IDEOGRAPH-3CF8	[FB80 BCF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CF8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_473)
{
    // 3CF8 0062;	
    // (㳸) CJK UNIFIED IDEOGRAPH-3CF8	[FB80 BCF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_474)
{
    // 3CF9 0021;	
    // (㳹) CJK UNIFIED IDEOGRAPH-3CF9	[FB80 BCF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_475)
{
    // 3CF9 003F;	
    // (㳹) CJK UNIFIED IDEOGRAPH-3CF9	[FB80 BCF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_476)
{
    // 3CF9 0061;	
    // (㳹) CJK UNIFIED IDEOGRAPH-3CF9	[FB80 BCF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_477)
{
    // 3CF9 0041;	
    // (㳹) CJK UNIFIED IDEOGRAPH-3CF9	[FB80 BCF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CF9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_478)
{
    // 3CF9 0062;	
    // (㳹) CJK UNIFIED IDEOGRAPH-3CF9	[FB80 BCF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CF9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_479)
{
    // 3CFA 0021;	
    // (㳺) CJK UNIFIED IDEOGRAPH-3CFA	[FB80 BCFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_480)
{
    // 3CFA 003F;	
    // (㳺) CJK UNIFIED IDEOGRAPH-3CFA	[FB80 BCFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_481)
{
    // 3CFA 0061;	
    // (㳺) CJK UNIFIED IDEOGRAPH-3CFA	[FB80 BCFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_482)
{
    // 3CFA 0041;	
    // (㳺) CJK UNIFIED IDEOGRAPH-3CFA	[FB80 BCFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CFA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_483)
{
    // 3CFA 0062;	
    // (㳺) CJK UNIFIED IDEOGRAPH-3CFA	[FB80 BCFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_484)
{
    // 3CFB 0021;	
    // (㳻) CJK UNIFIED IDEOGRAPH-3CFB	[FB80 BCFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_485)
{
    // 3CFB 003F;	
    // (㳻) CJK UNIFIED IDEOGRAPH-3CFB	[FB80 BCFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_486)
{
    // 3CFB 0061;	
    // (㳻) CJK UNIFIED IDEOGRAPH-3CFB	[FB80 BCFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_487)
{
    // 3CFB 0041;	
    // (㳻) CJK UNIFIED IDEOGRAPH-3CFB	[FB80 BCFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CFB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_488)
{
    // 3CFB 0062;	
    // (㳻) CJK UNIFIED IDEOGRAPH-3CFB	[FB80 BCFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_489)
{
    // 3CFC 0021;	
    // (㳼) CJK UNIFIED IDEOGRAPH-3CFC	[FB80 BCFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_490)
{
    // 3CFC 003F;	
    // (㳼) CJK UNIFIED IDEOGRAPH-3CFC	[FB80 BCFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_491)
{
    // 3CFC 0061;	
    // (㳼) CJK UNIFIED IDEOGRAPH-3CFC	[FB80 BCFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_492)
{
    // 3CFC 0041;	
    // (㳼) CJK UNIFIED IDEOGRAPH-3CFC	[FB80 BCFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CFC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_493)
{
    // 3CFC 0062;	
    // (㳼) CJK UNIFIED IDEOGRAPH-3CFC	[FB80 BCFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_494)
{
    // 3CFD 0021;	
    // (㳽) CJK UNIFIED IDEOGRAPH-3CFD	[FB80 BCFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_495)
{
    // 3CFD 003F;	
    // (㳽) CJK UNIFIED IDEOGRAPH-3CFD	[FB80 BCFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_496)
{
    // 3CFD 0061;	
    // (㳽) CJK UNIFIED IDEOGRAPH-3CFD	[FB80 BCFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_497)
{
    // 3CFD 0041;	
    // (㳽) CJK UNIFIED IDEOGRAPH-3CFD	[FB80 BCFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CFD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_498)
{
    // 3CFD 0062;	
    // (㳽) CJK UNIFIED IDEOGRAPH-3CFD	[FB80 BCFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_349_499)
{
    // 3CFE 0021;	
    // (㳾) CJK UNIFIED IDEOGRAPH-3CFE	[FB80 BCFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

