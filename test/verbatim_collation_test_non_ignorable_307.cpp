// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_307_000)
{
    // 13415 003F;	
    // (ìêï) EGYPTIAN HIEROGLYPH AA007B	[545F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13415, 0x003F };
    uint32_t const ces[9] = { 0x545F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_001)
{
    // 13415 0061;	
    // (ìêï) EGYPTIAN HIEROGLYPH AA007B	[545F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13415, 0x0061 };
    uint32_t const ces[9] = { 0x545F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_002)
{
    // 13415 0041;	
    // (ìêï) EGYPTIAN HIEROGLYPH AA007B	[545F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13415, 0x0041 };
    uint32_t const ces[9] = { 0x545F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_003)
{
    // 13415 0062;	
    // (ìêï) EGYPTIAN HIEROGLYPH AA007B	[545F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13415, 0x0062 };
    uint32_t const ces[9] = { 0x545F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_004)
{
    // 13416 0021;	
    // (ìêñ) EGYPTIAN HIEROGLYPH AA008	[5460 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13416, 0x0021 };
    uint32_t const ces[9] = { 0x5460, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_005)
{
    // 13416 003F;	
    // (ìêñ) EGYPTIAN HIEROGLYPH AA008	[5460 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13416, 0x003F };
    uint32_t const ces[9] = { 0x5460, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_006)
{
    // 13416 0061;	
    // (ìêñ) EGYPTIAN HIEROGLYPH AA008	[5460 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13416, 0x0061 };
    uint32_t const ces[9] = { 0x5460, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_007)
{
    // 13416 0041;	
    // (ìêñ) EGYPTIAN HIEROGLYPH AA008	[5460 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13416, 0x0041 };
    uint32_t const ces[9] = { 0x5460, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_008)
{
    // 13416 0062;	
    // (ìêñ) EGYPTIAN HIEROGLYPH AA008	[5460 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13416, 0x0062 };
    uint32_t const ces[9] = { 0x5460, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_009)
{
    // 13417 0021;	
    // (ìêó) EGYPTIAN HIEROGLYPH AA009	[5461 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13417, 0x0021 };
    uint32_t const ces[9] = { 0x5461, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_010)
{
    // 13417 003F;	
    // (ìêó) EGYPTIAN HIEROGLYPH AA009	[5461 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13417, 0x003F };
    uint32_t const ces[9] = { 0x5461, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_011)
{
    // 13417 0061;	
    // (ìêó) EGYPTIAN HIEROGLYPH AA009	[5461 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13417, 0x0061 };
    uint32_t const ces[9] = { 0x5461, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_012)
{
    // 13417 0041;	
    // (ìêó) EGYPTIAN HIEROGLYPH AA009	[5461 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13417, 0x0041 };
    uint32_t const ces[9] = { 0x5461, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_013)
{
    // 13417 0062;	
    // (ìêó) EGYPTIAN HIEROGLYPH AA009	[5461 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13417, 0x0062 };
    uint32_t const ces[9] = { 0x5461, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_014)
{
    // 13418 0021;	
    // (ìêò) EGYPTIAN HIEROGLYPH AA010	[5462 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13418, 0x0021 };
    uint32_t const ces[9] = { 0x5462, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_015)
{
    // 13418 003F;	
    // (ìêò) EGYPTIAN HIEROGLYPH AA010	[5462 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13418, 0x003F };
    uint32_t const ces[9] = { 0x5462, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_016)
{
    // 13418 0061;	
    // (ìêò) EGYPTIAN HIEROGLYPH AA010	[5462 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13418, 0x0061 };
    uint32_t const ces[9] = { 0x5462, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_017)
{
    // 13418 0041;	
    // (ìêò) EGYPTIAN HIEROGLYPH AA010	[5462 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13418, 0x0041 };
    uint32_t const ces[9] = { 0x5462, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_018)
{
    // 13418 0062;	
    // (ìêò) EGYPTIAN HIEROGLYPH AA010	[5462 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13418, 0x0062 };
    uint32_t const ces[9] = { 0x5462, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_019)
{
    // 13419 0021;	
    // (ìêô) EGYPTIAN HIEROGLYPH AA011	[5463 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13419, 0x0021 };
    uint32_t const ces[9] = { 0x5463, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_020)
{
    // 13419 003F;	
    // (ìêô) EGYPTIAN HIEROGLYPH AA011	[5463 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13419, 0x003F };
    uint32_t const ces[9] = { 0x5463, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_021)
{
    // 13419 0061;	
    // (ìêô) EGYPTIAN HIEROGLYPH AA011	[5463 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13419, 0x0061 };
    uint32_t const ces[9] = { 0x5463, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_022)
{
    // 13419 0041;	
    // (ìêô) EGYPTIAN HIEROGLYPH AA011	[5463 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13419, 0x0041 };
    uint32_t const ces[9] = { 0x5463, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_023)
{
    // 13419 0062;	
    // (ìêô) EGYPTIAN HIEROGLYPH AA011	[5463 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13419, 0x0062 };
    uint32_t const ces[9] = { 0x5463, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_024)
{
    // 1341A 0021;	
    // (ìêö) EGYPTIAN HIEROGLYPH AA012	[5464 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341A, 0x0021 };
    uint32_t const ces[9] = { 0x5464, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_025)
{
    // 1341A 003F;	
    // (ìêö) EGYPTIAN HIEROGLYPH AA012	[5464 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341A, 0x003F };
    uint32_t const ces[9] = { 0x5464, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_026)
{
    // 1341A 0061;	
    // (ìêö) EGYPTIAN HIEROGLYPH AA012	[5464 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341A, 0x0061 };
    uint32_t const ces[9] = { 0x5464, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_027)
{
    // 1341A 0041;	
    // (ìêö) EGYPTIAN HIEROGLYPH AA012	[5464 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1341A, 0x0041 };
    uint32_t const ces[9] = { 0x5464, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_028)
{
    // 1341A 0062;	
    // (ìêö) EGYPTIAN HIEROGLYPH AA012	[5464 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341A, 0x0062 };
    uint32_t const ces[9] = { 0x5464, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_029)
{
    // 1341B 0021;	
    // (ìêõ) EGYPTIAN HIEROGLYPH AA013	[5465 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341B, 0x0021 };
    uint32_t const ces[9] = { 0x5465, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_030)
{
    // 1341B 003F;	
    // (ìêõ) EGYPTIAN HIEROGLYPH AA013	[5465 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341B, 0x003F };
    uint32_t const ces[9] = { 0x5465, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_031)
{
    // 1341B 0061;	
    // (ìêõ) EGYPTIAN HIEROGLYPH AA013	[5465 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341B, 0x0061 };
    uint32_t const ces[9] = { 0x5465, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_032)
{
    // 1341B 0041;	
    // (ìêõ) EGYPTIAN HIEROGLYPH AA013	[5465 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1341B, 0x0041 };
    uint32_t const ces[9] = { 0x5465, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_033)
{
    // 1341B 0062;	
    // (ìêõ) EGYPTIAN HIEROGLYPH AA013	[5465 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341B, 0x0062 };
    uint32_t const ces[9] = { 0x5465, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_034)
{
    // 1341C 0021;	
    // (ìêú) EGYPTIAN HIEROGLYPH AA014	[5466 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341C, 0x0021 };
    uint32_t const ces[9] = { 0x5466, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_035)
{
    // 1341C 003F;	
    // (ìêú) EGYPTIAN HIEROGLYPH AA014	[5466 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341C, 0x003F };
    uint32_t const ces[9] = { 0x5466, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_036)
{
    // 1341C 0061;	
    // (ìêú) EGYPTIAN HIEROGLYPH AA014	[5466 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341C, 0x0061 };
    uint32_t const ces[9] = { 0x5466, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_037)
{
    // 1341C 0041;	
    // (ìêú) EGYPTIAN HIEROGLYPH AA014	[5466 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1341C, 0x0041 };
    uint32_t const ces[9] = { 0x5466, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_038)
{
    // 1341C 0062;	
    // (ìêú) EGYPTIAN HIEROGLYPH AA014	[5466 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341C, 0x0062 };
    uint32_t const ces[9] = { 0x5466, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_039)
{
    // 1341D 0021;	
    // (ìêù) EGYPTIAN HIEROGLYPH AA015	[5467 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341D, 0x0021 };
    uint32_t const ces[9] = { 0x5467, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_040)
{
    // 1341D 003F;	
    // (ìêù) EGYPTIAN HIEROGLYPH AA015	[5467 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341D, 0x003F };
    uint32_t const ces[9] = { 0x5467, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_041)
{
    // 1341D 0061;	
    // (ìêù) EGYPTIAN HIEROGLYPH AA015	[5467 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341D, 0x0061 };
    uint32_t const ces[9] = { 0x5467, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_042)
{
    // 1341D 0041;	
    // (ìêù) EGYPTIAN HIEROGLYPH AA015	[5467 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1341D, 0x0041 };
    uint32_t const ces[9] = { 0x5467, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_043)
{
    // 1341D 0062;	
    // (ìêù) EGYPTIAN HIEROGLYPH AA015	[5467 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341D, 0x0062 };
    uint32_t const ces[9] = { 0x5467, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_044)
{
    // 1341E 0021;	
    // (ìêû) EGYPTIAN HIEROGLYPH AA016	[5468 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341E, 0x0021 };
    uint32_t const ces[9] = { 0x5468, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_045)
{
    // 1341E 003F;	
    // (ìêû) EGYPTIAN HIEROGLYPH AA016	[5468 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341E, 0x003F };
    uint32_t const ces[9] = { 0x5468, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_046)
{
    // 1341E 0061;	
    // (ìêû) EGYPTIAN HIEROGLYPH AA016	[5468 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341E, 0x0061 };
    uint32_t const ces[9] = { 0x5468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_047)
{
    // 1341E 0041;	
    // (ìêû) EGYPTIAN HIEROGLYPH AA016	[5468 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1341E, 0x0041 };
    uint32_t const ces[9] = { 0x5468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_048)
{
    // 1341E 0062;	
    // (ìêû) EGYPTIAN HIEROGLYPH AA016	[5468 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341E, 0x0062 };
    uint32_t const ces[9] = { 0x5468, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_049)
{
    // 1341F 0021;	
    // (ìêü) EGYPTIAN HIEROGLYPH AA017	[5469 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341F, 0x0021 };
    uint32_t const ces[9] = { 0x5469, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_050)
{
    // 1341F 003F;	
    // (ìêü) EGYPTIAN HIEROGLYPH AA017	[5469 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341F, 0x003F };
    uint32_t const ces[9] = { 0x5469, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_051)
{
    // 1341F 0061;	
    // (ìêü) EGYPTIAN HIEROGLYPH AA017	[5469 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341F, 0x0061 };
    uint32_t const ces[9] = { 0x5469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_052)
{
    // 1341F 0041;	
    // (ìêü) EGYPTIAN HIEROGLYPH AA017	[5469 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1341F, 0x0041 };
    uint32_t const ces[9] = { 0x5469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_053)
{
    // 1341F 0062;	
    // (ìêü) EGYPTIAN HIEROGLYPH AA017	[5469 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1341F, 0x0062 };
    uint32_t const ces[9] = { 0x5469, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_054)
{
    // 13420 0021;	
    // (ìê†) EGYPTIAN HIEROGLYPH AA018	[546A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13420, 0x0021 };
    uint32_t const ces[9] = { 0x546A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_055)
{
    // 13420 003F;	
    // (ìê†) EGYPTIAN HIEROGLYPH AA018	[546A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13420, 0x003F };
    uint32_t const ces[9] = { 0x546A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_056)
{
    // 13420 0061;	
    // (ìê†) EGYPTIAN HIEROGLYPH AA018	[546A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13420, 0x0061 };
    uint32_t const ces[9] = { 0x546A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_057)
{
    // 13420 0041;	
    // (ìê†) EGYPTIAN HIEROGLYPH AA018	[546A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13420, 0x0041 };
    uint32_t const ces[9] = { 0x546A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_058)
{
    // 13420 0062;	
    // (ìê†) EGYPTIAN HIEROGLYPH AA018	[546A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13420, 0x0062 };
    uint32_t const ces[9] = { 0x546A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_059)
{
    // 13421 0021;	
    // (ìê°) EGYPTIAN HIEROGLYPH AA019	[546B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13421, 0x0021 };
    uint32_t const ces[9] = { 0x546B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_060)
{
    // 13421 003F;	
    // (ìê°) EGYPTIAN HIEROGLYPH AA019	[546B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13421, 0x003F };
    uint32_t const ces[9] = { 0x546B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_061)
{
    // 13421 0061;	
    // (ìê°) EGYPTIAN HIEROGLYPH AA019	[546B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13421, 0x0061 };
    uint32_t const ces[9] = { 0x546B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_062)
{
    // 13421 0041;	
    // (ìê°) EGYPTIAN HIEROGLYPH AA019	[546B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13421, 0x0041 };
    uint32_t const ces[9] = { 0x546B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_063)
{
    // 13421 0062;	
    // (ìê°) EGYPTIAN HIEROGLYPH AA019	[546B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13421, 0x0062 };
    uint32_t const ces[9] = { 0x546B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_064)
{
    // 13422 0021;	
    // (ìê¢) EGYPTIAN HIEROGLYPH AA020	[546C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13422, 0x0021 };
    uint32_t const ces[9] = { 0x546C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_065)
{
    // 13422 003F;	
    // (ìê¢) EGYPTIAN HIEROGLYPH AA020	[546C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13422, 0x003F };
    uint32_t const ces[9] = { 0x546C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_066)
{
    // 13422 0061;	
    // (ìê¢) EGYPTIAN HIEROGLYPH AA020	[546C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13422, 0x0061 };
    uint32_t const ces[9] = { 0x546C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_067)
{
    // 13422 0041;	
    // (ìê¢) EGYPTIAN HIEROGLYPH AA020	[546C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13422, 0x0041 };
    uint32_t const ces[9] = { 0x546C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_068)
{
    // 13422 0062;	
    // (ìê¢) EGYPTIAN HIEROGLYPH AA020	[546C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13422, 0x0062 };
    uint32_t const ces[9] = { 0x546C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_069)
{
    // 13423 0021;	
    // (ìê£) EGYPTIAN HIEROGLYPH AA021	[546D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13423, 0x0021 };
    uint32_t const ces[9] = { 0x546D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_070)
{
    // 13423 003F;	
    // (ìê£) EGYPTIAN HIEROGLYPH AA021	[546D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13423, 0x003F };
    uint32_t const ces[9] = { 0x546D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_071)
{
    // 13423 0061;	
    // (ìê£) EGYPTIAN HIEROGLYPH AA021	[546D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13423, 0x0061 };
    uint32_t const ces[9] = { 0x546D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_072)
{
    // 13423 0041;	
    // (ìê£) EGYPTIAN HIEROGLYPH AA021	[546D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13423, 0x0041 };
    uint32_t const ces[9] = { 0x546D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_073)
{
    // 13423 0062;	
    // (ìê£) EGYPTIAN HIEROGLYPH AA021	[546D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13423, 0x0062 };
    uint32_t const ces[9] = { 0x546D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_074)
{
    // 13424 0021;	
    // (ìê§) EGYPTIAN HIEROGLYPH AA022	[546E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13424, 0x0021 };
    uint32_t const ces[9] = { 0x546E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_075)
{
    // 13424 003F;	
    // (ìê§) EGYPTIAN HIEROGLYPH AA022	[546E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13424, 0x003F };
    uint32_t const ces[9] = { 0x546E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_076)
{
    // 13424 0061;	
    // (ìê§) EGYPTIAN HIEROGLYPH AA022	[546E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13424, 0x0061 };
    uint32_t const ces[9] = { 0x546E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_077)
{
    // 13424 0041;	
    // (ìê§) EGYPTIAN HIEROGLYPH AA022	[546E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13424, 0x0041 };
    uint32_t const ces[9] = { 0x546E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_078)
{
    // 13424 0062;	
    // (ìê§) EGYPTIAN HIEROGLYPH AA022	[546E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13424, 0x0062 };
    uint32_t const ces[9] = { 0x546E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_079)
{
    // 13425 0021;	
    // (ìê•) EGYPTIAN HIEROGLYPH AA023	[546F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13425, 0x0021 };
    uint32_t const ces[9] = { 0x546F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_080)
{
    // 13425 003F;	
    // (ìê•) EGYPTIAN HIEROGLYPH AA023	[546F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13425, 0x003F };
    uint32_t const ces[9] = { 0x546F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_081)
{
    // 13425 0061;	
    // (ìê•) EGYPTIAN HIEROGLYPH AA023	[546F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13425, 0x0061 };
    uint32_t const ces[9] = { 0x546F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_082)
{
    // 13425 0041;	
    // (ìê•) EGYPTIAN HIEROGLYPH AA023	[546F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13425, 0x0041 };
    uint32_t const ces[9] = { 0x546F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_083)
{
    // 13425 0062;	
    // (ìê•) EGYPTIAN HIEROGLYPH AA023	[546F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13425, 0x0062 };
    uint32_t const ces[9] = { 0x546F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_084)
{
    // 13426 0021;	
    // (ìê¶) EGYPTIAN HIEROGLYPH AA024	[5470 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13426, 0x0021 };
    uint32_t const ces[9] = { 0x5470, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_085)
{
    // 13426 003F;	
    // (ìê¶) EGYPTIAN HIEROGLYPH AA024	[5470 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13426, 0x003F };
    uint32_t const ces[9] = { 0x5470, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_086)
{
    // 13426 0061;	
    // (ìê¶) EGYPTIAN HIEROGLYPH AA024	[5470 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13426, 0x0061 };
    uint32_t const ces[9] = { 0x5470, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_087)
{
    // 13426 0041;	
    // (ìê¶) EGYPTIAN HIEROGLYPH AA024	[5470 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13426, 0x0041 };
    uint32_t const ces[9] = { 0x5470, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_088)
{
    // 13426 0062;	
    // (ìê¶) EGYPTIAN HIEROGLYPH AA024	[5470 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13426, 0x0062 };
    uint32_t const ces[9] = { 0x5470, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_089)
{
    // 13427 0021;	
    // (ìêß) EGYPTIAN HIEROGLYPH AA025	[5471 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13427, 0x0021 };
    uint32_t const ces[9] = { 0x5471, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_090)
{
    // 13427 003F;	
    // (ìêß) EGYPTIAN HIEROGLYPH AA025	[5471 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13427, 0x003F };
    uint32_t const ces[9] = { 0x5471, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_091)
{
    // 13427 0061;	
    // (ìêß) EGYPTIAN HIEROGLYPH AA025	[5471 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13427, 0x0061 };
    uint32_t const ces[9] = { 0x5471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_092)
{
    // 13427 0041;	
    // (ìêß) EGYPTIAN HIEROGLYPH AA025	[5471 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13427, 0x0041 };
    uint32_t const ces[9] = { 0x5471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_093)
{
    // 13427 0062;	
    // (ìêß) EGYPTIAN HIEROGLYPH AA025	[5471 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13427, 0x0062 };
    uint32_t const ces[9] = { 0x5471, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_094)
{
    // 13428 0021;	
    // (ìê®) EGYPTIAN HIEROGLYPH AA026	[5472 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13428, 0x0021 };
    uint32_t const ces[9] = { 0x5472, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_095)
{
    // 13428 003F;	
    // (ìê®) EGYPTIAN HIEROGLYPH AA026	[5472 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13428, 0x003F };
    uint32_t const ces[9] = { 0x5472, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_096)
{
    // 13428 0061;	
    // (ìê®) EGYPTIAN HIEROGLYPH AA026	[5472 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13428, 0x0061 };
    uint32_t const ces[9] = { 0x5472, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_097)
{
    // 13428 0041;	
    // (ìê®) EGYPTIAN HIEROGLYPH AA026	[5472 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13428, 0x0041 };
    uint32_t const ces[9] = { 0x5472, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_098)
{
    // 13428 0062;	
    // (ìê®) EGYPTIAN HIEROGLYPH AA026	[5472 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13428, 0x0062 };
    uint32_t const ces[9] = { 0x5472, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_099)
{
    // 13429 0021;	
    // (ìê©) EGYPTIAN HIEROGLYPH AA027	[5473 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13429, 0x0021 };
    uint32_t const ces[9] = { 0x5473, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_100)
{
    // 13429 003F;	
    // (ìê©) EGYPTIAN HIEROGLYPH AA027	[5473 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13429, 0x003F };
    uint32_t const ces[9] = { 0x5473, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_101)
{
    // 13429 0061;	
    // (ìê©) EGYPTIAN HIEROGLYPH AA027	[5473 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13429, 0x0061 };
    uint32_t const ces[9] = { 0x5473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_102)
{
    // 13429 0041;	
    // (ìê©) EGYPTIAN HIEROGLYPH AA027	[5473 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13429, 0x0041 };
    uint32_t const ces[9] = { 0x5473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_103)
{
    // 13429 0062;	
    // (ìê©) EGYPTIAN HIEROGLYPH AA027	[5473 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13429, 0x0062 };
    uint32_t const ces[9] = { 0x5473, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_104)
{
    // 1342A 0021;	
    // (ìê™) EGYPTIAN HIEROGLYPH AA028	[5474 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342A, 0x0021 };
    uint32_t const ces[9] = { 0x5474, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_105)
{
    // 1342A 003F;	
    // (ìê™) EGYPTIAN HIEROGLYPH AA028	[5474 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342A, 0x003F };
    uint32_t const ces[9] = { 0x5474, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_106)
{
    // 1342A 0061;	
    // (ìê™) EGYPTIAN HIEROGLYPH AA028	[5474 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342A, 0x0061 };
    uint32_t const ces[9] = { 0x5474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_107)
{
    // 1342A 0041;	
    // (ìê™) EGYPTIAN HIEROGLYPH AA028	[5474 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1342A, 0x0041 };
    uint32_t const ces[9] = { 0x5474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_108)
{
    // 1342A 0062;	
    // (ìê™) EGYPTIAN HIEROGLYPH AA028	[5474 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342A, 0x0062 };
    uint32_t const ces[9] = { 0x5474, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_109)
{
    // 1342B 0021;	
    // (ìê´) EGYPTIAN HIEROGLYPH AA029	[5475 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342B, 0x0021 };
    uint32_t const ces[9] = { 0x5475, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_110)
{
    // 1342B 003F;	
    // (ìê´) EGYPTIAN HIEROGLYPH AA029	[5475 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342B, 0x003F };
    uint32_t const ces[9] = { 0x5475, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_111)
{
    // 1342B 0061;	
    // (ìê´) EGYPTIAN HIEROGLYPH AA029	[5475 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342B, 0x0061 };
    uint32_t const ces[9] = { 0x5475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_112)
{
    // 1342B 0041;	
    // (ìê´) EGYPTIAN HIEROGLYPH AA029	[5475 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1342B, 0x0041 };
    uint32_t const ces[9] = { 0x5475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_113)
{
    // 1342B 0062;	
    // (ìê´) EGYPTIAN HIEROGLYPH AA029	[5475 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342B, 0x0062 };
    uint32_t const ces[9] = { 0x5475, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_114)
{
    // 1342C 0021;	
    // (ìê¨) EGYPTIAN HIEROGLYPH AA030	[5476 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342C, 0x0021 };
    uint32_t const ces[9] = { 0x5476, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_115)
{
    // 1342C 003F;	
    // (ìê¨) EGYPTIAN HIEROGLYPH AA030	[5476 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342C, 0x003F };
    uint32_t const ces[9] = { 0x5476, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_116)
{
    // 1342C 0061;	
    // (ìê¨) EGYPTIAN HIEROGLYPH AA030	[5476 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342C, 0x0061 };
    uint32_t const ces[9] = { 0x5476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_117)
{
    // 1342C 0041;	
    // (ìê¨) EGYPTIAN HIEROGLYPH AA030	[5476 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1342C, 0x0041 };
    uint32_t const ces[9] = { 0x5476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_118)
{
    // 1342C 0062;	
    // (ìê¨) EGYPTIAN HIEROGLYPH AA030	[5476 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342C, 0x0062 };
    uint32_t const ces[9] = { 0x5476, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_119)
{
    // 1342D 0021;	
    // (ìê≠) EGYPTIAN HIEROGLYPH AA031	[5477 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342D, 0x0021 };
    uint32_t const ces[9] = { 0x5477, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_120)
{
    // 1342D 003F;	
    // (ìê≠) EGYPTIAN HIEROGLYPH AA031	[5477 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342D, 0x003F };
    uint32_t const ces[9] = { 0x5477, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_121)
{
    // 1342D 0061;	
    // (ìê≠) EGYPTIAN HIEROGLYPH AA031	[5477 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342D, 0x0061 };
    uint32_t const ces[9] = { 0x5477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_122)
{
    // 1342D 0041;	
    // (ìê≠) EGYPTIAN HIEROGLYPH AA031	[5477 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1342D, 0x0041 };
    uint32_t const ces[9] = { 0x5477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_123)
{
    // 1342D 0062;	
    // (ìê≠) EGYPTIAN HIEROGLYPH AA031	[5477 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342D, 0x0062 };
    uint32_t const ces[9] = { 0x5477, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_124)
{
    // 1342E 0021;	
    // (ìêÆ) EGYPTIAN HIEROGLYPH AA032	[5478 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342E, 0x0021 };
    uint32_t const ces[9] = { 0x5478, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_125)
{
    // 1342E 003F;	
    // (ìêÆ) EGYPTIAN HIEROGLYPH AA032	[5478 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342E, 0x003F };
    uint32_t const ces[9] = { 0x5478, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_126)
{
    // 1342E 0061;	
    // (ìêÆ) EGYPTIAN HIEROGLYPH AA032	[5478 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342E, 0x0061 };
    uint32_t const ces[9] = { 0x5478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_127)
{
    // 1342E 0041;	
    // (ìêÆ) EGYPTIAN HIEROGLYPH AA032	[5478 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1342E, 0x0041 };
    uint32_t const ces[9] = { 0x5478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_128)
{
    // 1342E 0062;	
    // (ìêÆ) EGYPTIAN HIEROGLYPH AA032	[5478 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1342E, 0x0062 };
    uint32_t const ces[9] = { 0x5478, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_129)
{
    // 109A0 0021;	
    // (‚Äé‚Äéê¶†‚Äé‚Äé) MEROITIC CURSIVE LETTER A	[5479 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A0, 0x0021 };
    uint32_t const ces[9] = { 0x5479, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_130)
{
    // 10980 0021;	
    // (‚Äé‚Äéê¶Ä‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER A	[5479 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10980, 0x0021 };
    uint32_t const ces[11] = { 0x5479, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_131)
{
    // 109A0 003F;	
    // (‚Äé‚Äéê¶†‚Äé‚Äé) MEROITIC CURSIVE LETTER A	[5479 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A0, 0x003F };
    uint32_t const ces[9] = { 0x5479, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_132)
{
    // 10980 003F;	
    // (‚Äé‚Äéê¶Ä‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER A	[5479 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10980, 0x003F };
    uint32_t const ces[11] = { 0x5479, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_133)
{
    // 109A0 0061;	
    // (‚Äé‚Äéê¶†‚Äé‚Äé) MEROITIC CURSIVE LETTER A	[5479 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A0, 0x0061 };
    uint32_t const ces[9] = { 0x5479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_134)
{
    // 109A0 0041;	
    // (‚Äé‚Äéê¶†‚Äé‚Äé) MEROITIC CURSIVE LETTER A	[5479 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109A0, 0x0041 };
    uint32_t const ces[9] = { 0x5479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_135)
{
    // 10980 0061;	
    // (‚Äé‚Äéê¶Ä‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER A	[5479 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10980, 0x0061 };
    uint32_t const ces[11] = { 0x5479, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_136)
{
    // 10980 0041;	
    // (‚Äé‚Äéê¶Ä‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER A	[5479 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10980, 0x0041 };
    uint32_t const ces[11] = { 0x5479, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_137)
{
    // 109A0 0062;	
    // (‚Äé‚Äéê¶†‚Äé‚Äé) MEROITIC CURSIVE LETTER A	[5479 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A0, 0x0062 };
    uint32_t const ces[9] = { 0x5479, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_138)
{
    // 10980 0062;	
    // (‚Äé‚Äéê¶Ä‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER A	[5479 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10980, 0x0062 };
    uint32_t const ces[11] = { 0x5479, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_139)
{
    // 109A1 0021;	
    // (‚Äé‚Äéê¶°‚Äé‚Äé) MEROITIC CURSIVE LETTER E	[547A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A1, 0x0021 };
    uint32_t const ces[9] = { 0x547A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_140)
{
    // 10981 0021;	
    // (‚Äé‚Äéê¶Å‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER E	[547A 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10981, 0x0021 };
    uint32_t const ces[11] = { 0x547A, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_141)
{
    // 109A1 003F;	
    // (‚Äé‚Äéê¶°‚Äé‚Äé) MEROITIC CURSIVE LETTER E	[547A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A1, 0x003F };
    uint32_t const ces[9] = { 0x547A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_142)
{
    // 10981 003F;	
    // (‚Äé‚Äéê¶Å‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER E	[547A 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10981, 0x003F };
    uint32_t const ces[11] = { 0x547A, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_143)
{
    // 109A1 0061;	
    // (‚Äé‚Äéê¶°‚Äé‚Äé) MEROITIC CURSIVE LETTER E	[547A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A1, 0x0061 };
    uint32_t const ces[9] = { 0x547A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_144)
{
    // 109A1 0041;	
    // (‚Äé‚Äéê¶°‚Äé‚Äé) MEROITIC CURSIVE LETTER E	[547A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109A1, 0x0041 };
    uint32_t const ces[9] = { 0x547A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_145)
{
    // 10981 0061;	
    // (‚Äé‚Äéê¶Å‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER E	[547A 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10981, 0x0061 };
    uint32_t const ces[11] = { 0x547A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_146)
{
    // 10981 0041;	
    // (‚Äé‚Äéê¶Å‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER E	[547A 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10981, 0x0041 };
    uint32_t const ces[11] = { 0x547A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_147)
{
    // 109A1 0062;	
    // (‚Äé‚Äéê¶°‚Äé‚Äé) MEROITIC CURSIVE LETTER E	[547A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A1, 0x0062 };
    uint32_t const ces[9] = { 0x547A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_148)
{
    // 10981 0062;	
    // (‚Äé‚Äéê¶Å‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER E	[547A 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10981, 0x0062 };
    uint32_t const ces[11] = { 0x547A, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_149)
{
    // 109A2 0021;	
    // (‚Äé‚Äéê¶¢‚Äé‚Äé) MEROITIC CURSIVE LETTER I	[547B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A2, 0x0021 };
    uint32_t const ces[9] = { 0x547B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_150)
{
    // 10982 0021;	
    // (‚Äé‚Äéê¶Ç‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER I	[547B 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10982, 0x0021 };
    uint32_t const ces[11] = { 0x547B, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_151)
{
    // 109A2 003F;	
    // (‚Äé‚Äéê¶¢‚Äé‚Äé) MEROITIC CURSIVE LETTER I	[547B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A2, 0x003F };
    uint32_t const ces[9] = { 0x547B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_152)
{
    // 10982 003F;	
    // (‚Äé‚Äéê¶Ç‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER I	[547B 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10982, 0x003F };
    uint32_t const ces[11] = { 0x547B, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_153)
{
    // 109A2 0061;	
    // (‚Äé‚Äéê¶¢‚Äé‚Äé) MEROITIC CURSIVE LETTER I	[547B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A2, 0x0061 };
    uint32_t const ces[9] = { 0x547B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_154)
{
    // 109A2 0041;	
    // (‚Äé‚Äéê¶¢‚Äé‚Äé) MEROITIC CURSIVE LETTER I	[547B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109A2, 0x0041 };
    uint32_t const ces[9] = { 0x547B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_155)
{
    // 10982 0061;	
    // (‚Äé‚Äéê¶Ç‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER I	[547B 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10982, 0x0061 };
    uint32_t const ces[11] = { 0x547B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_156)
{
    // 10982 0041;	
    // (‚Äé‚Äéê¶Ç‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER I	[547B 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10982, 0x0041 };
    uint32_t const ces[11] = { 0x547B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_157)
{
    // 109A2 0062;	
    // (‚Äé‚Äéê¶¢‚Äé‚Äé) MEROITIC CURSIVE LETTER I	[547B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A2, 0x0062 };
    uint32_t const ces[9] = { 0x547B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_158)
{
    // 10982 0062;	
    // (‚Äé‚Äéê¶Ç‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER I	[547B 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10982, 0x0062 };
    uint32_t const ces[11] = { 0x547B, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_159)
{
    // 109A3 0021;	
    // (‚Äé‚Äéê¶£‚Äé‚Äé) MEROITIC CURSIVE LETTER O	[547C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A3, 0x0021 };
    uint32_t const ces[9] = { 0x547C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_160)
{
    // 10983 0021;	
    // (‚Äé‚Äéê¶É‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER O	[547C 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10983, 0x0021 };
    uint32_t const ces[11] = { 0x547C, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_161)
{
    // 109A3 003F;	
    // (‚Äé‚Äéê¶£‚Äé‚Äé) MEROITIC CURSIVE LETTER O	[547C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A3, 0x003F };
    uint32_t const ces[9] = { 0x547C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_162)
{
    // 10983 003F;	
    // (‚Äé‚Äéê¶É‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER O	[547C 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10983, 0x003F };
    uint32_t const ces[11] = { 0x547C, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_163)
{
    // 109A3 0061;	
    // (‚Äé‚Äéê¶£‚Äé‚Äé) MEROITIC CURSIVE LETTER O	[547C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A3, 0x0061 };
    uint32_t const ces[9] = { 0x547C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_164)
{
    // 109A3 0041;	
    // (‚Äé‚Äéê¶£‚Äé‚Äé) MEROITIC CURSIVE LETTER O	[547C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109A3, 0x0041 };
    uint32_t const ces[9] = { 0x547C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_165)
{
    // 10983 0061;	
    // (‚Äé‚Äéê¶É‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER O	[547C 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10983, 0x0061 };
    uint32_t const ces[11] = { 0x547C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_166)
{
    // 10983 0041;	
    // (‚Äé‚Äéê¶É‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER O	[547C 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10983, 0x0041 };
    uint32_t const ces[11] = { 0x547C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_167)
{
    // 109A3 0062;	
    // (‚Äé‚Äéê¶£‚Äé‚Äé) MEROITIC CURSIVE LETTER O	[547C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A3, 0x0062 };
    uint32_t const ces[9] = { 0x547C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_168)
{
    // 10983 0062;	
    // (‚Äé‚Äéê¶É‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER O	[547C 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10983, 0x0062 };
    uint32_t const ces[11] = { 0x547C, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_169)
{
    // 109A4 0021;	
    // (‚Äé‚Äéê¶§‚Äé‚Äé) MEROITIC CURSIVE LETTER YA	[547D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A4, 0x0021 };
    uint32_t const ces[9] = { 0x547D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_170)
{
    // 10984 0021;	
    // (‚Äé‚Äéê¶Ñ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER YA	[547D 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10984, 0x0021 };
    uint32_t const ces[11] = { 0x547D, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_171)
{
    // 109A4 003F;	
    // (‚Äé‚Äéê¶§‚Äé‚Äé) MEROITIC CURSIVE LETTER YA	[547D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A4, 0x003F };
    uint32_t const ces[9] = { 0x547D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_172)
{
    // 10984 003F;	
    // (‚Äé‚Äéê¶Ñ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER YA	[547D 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10984, 0x003F };
    uint32_t const ces[11] = { 0x547D, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_173)
{
    // 109A4 0061;	
    // (‚Äé‚Äéê¶§‚Äé‚Äé) MEROITIC CURSIVE LETTER YA	[547D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A4, 0x0061 };
    uint32_t const ces[9] = { 0x547D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_174)
{
    // 109A4 0041;	
    // (‚Äé‚Äéê¶§‚Äé‚Äé) MEROITIC CURSIVE LETTER YA	[547D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109A4, 0x0041 };
    uint32_t const ces[9] = { 0x547D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_175)
{
    // 10984 0061;	
    // (‚Äé‚Äéê¶Ñ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER YA	[547D 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10984, 0x0061 };
    uint32_t const ces[11] = { 0x547D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_176)
{
    // 10984 0041;	
    // (‚Äé‚Äéê¶Ñ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER YA	[547D 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10984, 0x0041 };
    uint32_t const ces[11] = { 0x547D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_177)
{
    // 109A4 0062;	
    // (‚Äé‚Äéê¶§‚Äé‚Äé) MEROITIC CURSIVE LETTER YA	[547D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A4, 0x0062 };
    uint32_t const ces[9] = { 0x547D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_178)
{
    // 10984 0062;	
    // (‚Äé‚Äéê¶Ñ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER YA	[547D 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10984, 0x0062 };
    uint32_t const ces[11] = { 0x547D, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_179)
{
    // 109A5 0021;	
    // (‚Äé‚Äéê¶•‚Äé‚Äé) MEROITIC CURSIVE LETTER WA	[547E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A5, 0x0021 };
    uint32_t const ces[9] = { 0x547E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_180)
{
    // 10985 0021;	
    // (‚Äé‚Äéê¶Ö‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER WA	[547E 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10985, 0x0021 };
    uint32_t const ces[11] = { 0x547E, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_181)
{
    // 109A5 003F;	
    // (‚Äé‚Äéê¶•‚Äé‚Äé) MEROITIC CURSIVE LETTER WA	[547E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A5, 0x003F };
    uint32_t const ces[9] = { 0x547E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_182)
{
    // 10985 003F;	
    // (‚Äé‚Äéê¶Ö‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER WA	[547E 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10985, 0x003F };
    uint32_t const ces[11] = { 0x547E, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_183)
{
    // 109A5 0061;	
    // (‚Äé‚Äéê¶•‚Äé‚Äé) MEROITIC CURSIVE LETTER WA	[547E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A5, 0x0061 };
    uint32_t const ces[9] = { 0x547E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_184)
{
    // 109A5 0041;	
    // (‚Äé‚Äéê¶•‚Äé‚Äé) MEROITIC CURSIVE LETTER WA	[547E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109A5, 0x0041 };
    uint32_t const ces[9] = { 0x547E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_185)
{
    // 10985 0061;	
    // (‚Äé‚Äéê¶Ö‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER WA	[547E 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10985, 0x0061 };
    uint32_t const ces[11] = { 0x547E, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_186)
{
    // 10985 0041;	
    // (‚Äé‚Äéê¶Ö‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER WA	[547E 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10985, 0x0041 };
    uint32_t const ces[11] = { 0x547E, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_187)
{
    // 109A5 0062;	
    // (‚Äé‚Äéê¶•‚Äé‚Äé) MEROITIC CURSIVE LETTER WA	[547E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A5, 0x0062 };
    uint32_t const ces[9] = { 0x547E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_188)
{
    // 10985 0062;	
    // (‚Äé‚Äéê¶Ö‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER WA	[547E 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10985, 0x0062 };
    uint32_t const ces[11] = { 0x547E, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_189)
{
    // 109A6 0021;	
    // (‚Äé‚Äéê¶¶‚Äé‚Äé) MEROITIC CURSIVE LETTER BA	[547F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A6, 0x0021 };
    uint32_t const ces[9] = { 0x547F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_190)
{
    // 10986 0021;	
    // (‚Äé‚Äéê¶Ü‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER BA	[547F 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10986, 0x0021 };
    uint32_t const ces[11] = { 0x547F, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_191)
{
    // 10987 0021;	
    // (‚Äé‚Äéê¶á‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER BA-2	[547F 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10987, 0x0021 };
    uint32_t const ces[11] = { 0x547F, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_192)
{
    // 109A6 003F;	
    // (‚Äé‚Äéê¶¶‚Äé‚Äé) MEROITIC CURSIVE LETTER BA	[547F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A6, 0x003F };
    uint32_t const ces[9] = { 0x547F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_193)
{
    // 10986 003F;	
    // (‚Äé‚Äéê¶Ü‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER BA	[547F 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10986, 0x003F };
    uint32_t const ces[11] = { 0x547F, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_194)
{
    // 10987 003F;	
    // (‚Äé‚Äéê¶á‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER BA-2	[547F 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10987, 0x003F };
    uint32_t const ces[11] = { 0x547F, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_195)
{
    // 109A6 0061;	
    // (‚Äé‚Äéê¶¶‚Äé‚Äé) MEROITIC CURSIVE LETTER BA	[547F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A6, 0x0061 };
    uint32_t const ces[9] = { 0x547F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_196)
{
    // 109A6 0041;	
    // (‚Äé‚Äéê¶¶‚Äé‚Äé) MEROITIC CURSIVE LETTER BA	[547F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109A6, 0x0041 };
    uint32_t const ces[9] = { 0x547F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_197)
{
    // 10986 0061;	
    // (‚Äé‚Äéê¶Ü‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER BA	[547F 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10986, 0x0061 };
    uint32_t const ces[11] = { 0x547F, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_198)
{
    // 10986 0041;	
    // (‚Äé‚Äéê¶Ü‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER BA	[547F 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10986, 0x0041 };
    uint32_t const ces[11] = { 0x547F, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_199)
{
    // 10987 0061;	
    // (‚Äé‚Äéê¶á‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER BA-2	[547F 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10987, 0x0061 };
    uint32_t const ces[11] = { 0x547F, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_200)
{
    // 10987 0041;	
    // (‚Äé‚Äéê¶á‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER BA-2	[547F 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10987, 0x0041 };
    uint32_t const ces[11] = { 0x547F, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_201)
{
    // 109A6 0062;	
    // (‚Äé‚Äéê¶¶‚Äé‚Äé) MEROITIC CURSIVE LETTER BA	[547F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A6, 0x0062 };
    uint32_t const ces[9] = { 0x547F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_202)
{
    // 10986 0062;	
    // (‚Äé‚Äéê¶Ü‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER BA	[547F 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10986, 0x0062 };
    uint32_t const ces[11] = { 0x547F, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_203)
{
    // 10987 0062;	
    // (‚Äé‚Äéê¶á‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER BA-2	[547F 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10987, 0x0062 };
    uint32_t const ces[11] = { 0x547F, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_204)
{
    // 109A7 0021;	
    // (‚Äé‚Äéê¶ß‚Äé‚Äé) MEROITIC CURSIVE LETTER PA	[5480 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A7, 0x0021 };
    uint32_t const ces[9] = { 0x5480, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_205)
{
    // 10988 0021;	
    // (‚Äé‚Äéê¶à‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER PA	[5480 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10988, 0x0021 };
    uint32_t const ces[11] = { 0x5480, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_206)
{
    // 109A7 003F;	
    // (‚Äé‚Äéê¶ß‚Äé‚Äé) MEROITIC CURSIVE LETTER PA	[5480 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A7, 0x003F };
    uint32_t const ces[9] = { 0x5480, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_207)
{
    // 10988 003F;	
    // (‚Äé‚Äéê¶à‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER PA	[5480 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10988, 0x003F };
    uint32_t const ces[11] = { 0x5480, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_208)
{
    // 109A7 0061;	
    // (‚Äé‚Äéê¶ß‚Äé‚Äé) MEROITIC CURSIVE LETTER PA	[5480 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A7, 0x0061 };
    uint32_t const ces[9] = { 0x5480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_209)
{
    // 109A7 0041;	
    // (‚Äé‚Äéê¶ß‚Äé‚Äé) MEROITIC CURSIVE LETTER PA	[5480 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109A7, 0x0041 };
    uint32_t const ces[9] = { 0x5480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_210)
{
    // 10988 0061;	
    // (‚Äé‚Äéê¶à‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER PA	[5480 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10988, 0x0061 };
    uint32_t const ces[11] = { 0x5480, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_211)
{
    // 10988 0041;	
    // (‚Äé‚Äéê¶à‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER PA	[5480 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10988, 0x0041 };
    uint32_t const ces[11] = { 0x5480, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_212)
{
    // 109A7 0062;	
    // (‚Äé‚Äéê¶ß‚Äé‚Äé) MEROITIC CURSIVE LETTER PA	[5480 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A7, 0x0062 };
    uint32_t const ces[9] = { 0x5480, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_213)
{
    // 10988 0062;	
    // (‚Äé‚Äéê¶à‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER PA	[5480 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10988, 0x0062 };
    uint32_t const ces[11] = { 0x5480, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_214)
{
    // 109A8 0021;	
    // (‚Äé‚Äéê¶®‚Äé‚Äé) MEROITIC CURSIVE LETTER MA	[5481 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A8, 0x0021 };
    uint32_t const ces[9] = { 0x5481, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_215)
{
    // 10989 0021;	
    // (‚Äé‚Äéê¶â‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER MA	[5481 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10989, 0x0021 };
    uint32_t const ces[11] = { 0x5481, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_216)
{
    // 109A8 003F;	
    // (‚Äé‚Äéê¶®‚Äé‚Äé) MEROITIC CURSIVE LETTER MA	[5481 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A8, 0x003F };
    uint32_t const ces[9] = { 0x5481, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_217)
{
    // 10989 003F;	
    // (‚Äé‚Äéê¶â‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER MA	[5481 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10989, 0x003F };
    uint32_t const ces[11] = { 0x5481, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_218)
{
    // 109A8 0061;	
    // (‚Äé‚Äéê¶®‚Äé‚Äé) MEROITIC CURSIVE LETTER MA	[5481 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A8, 0x0061 };
    uint32_t const ces[9] = { 0x5481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_219)
{
    // 109A8 0041;	
    // (‚Äé‚Äéê¶®‚Äé‚Äé) MEROITIC CURSIVE LETTER MA	[5481 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109A8, 0x0041 };
    uint32_t const ces[9] = { 0x5481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_220)
{
    // 10989 0061;	
    // (‚Äé‚Äéê¶â‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER MA	[5481 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10989, 0x0061 };
    uint32_t const ces[11] = { 0x5481, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_221)
{
    // 10989 0041;	
    // (‚Äé‚Äéê¶â‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER MA	[5481 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10989, 0x0041 };
    uint32_t const ces[11] = { 0x5481, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_222)
{
    // 109A8 0062;	
    // (‚Äé‚Äéê¶®‚Äé‚Äé) MEROITIC CURSIVE LETTER MA	[5481 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A8, 0x0062 };
    uint32_t const ces[9] = { 0x5481, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_223)
{
    // 10989 0062;	
    // (‚Äé‚Äéê¶â‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER MA	[5481 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10989, 0x0062 };
    uint32_t const ces[11] = { 0x5481, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_224)
{
    // 109A9 0021;	
    // (‚Äé‚Äéê¶©‚Äé‚Äé) MEROITIC CURSIVE LETTER NA	[5482 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A9, 0x0021 };
    uint32_t const ces[9] = { 0x5482, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_225)
{
    // 1098A 0021;	
    // (‚Äé‚Äéê¶ä‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NA	[5482 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098A, 0x0021 };
    uint32_t const ces[11] = { 0x5482, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_226)
{
    // 1098B 0021;	
    // (‚Äé‚Äéê¶ã‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NA-2	[5482 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098B, 0x0021 };
    uint32_t const ces[11] = { 0x5482, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_227)
{
    // 109A9 003F;	
    // (‚Äé‚Äéê¶©‚Äé‚Äé) MEROITIC CURSIVE LETTER NA	[5482 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A9, 0x003F };
    uint32_t const ces[9] = { 0x5482, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_228)
{
    // 1098A 003F;	
    // (‚Äé‚Äéê¶ä‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NA	[5482 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098A, 0x003F };
    uint32_t const ces[11] = { 0x5482, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_229)
{
    // 1098B 003F;	
    // (‚Äé‚Äéê¶ã‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NA-2	[5482 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098B, 0x003F };
    uint32_t const ces[11] = { 0x5482, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_230)
{
    // 109A9 0061;	
    // (‚Äé‚Äéê¶©‚Äé‚Äé) MEROITIC CURSIVE LETTER NA	[5482 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A9, 0x0061 };
    uint32_t const ces[9] = { 0x5482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_231)
{
    // 109A9 0041;	
    // (‚Äé‚Äéê¶©‚Äé‚Äé) MEROITIC CURSIVE LETTER NA	[5482 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109A9, 0x0041 };
    uint32_t const ces[9] = { 0x5482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_232)
{
    // 1098A 0061;	
    // (‚Äé‚Äéê¶ä‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NA	[5482 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098A, 0x0061 };
    uint32_t const ces[11] = { 0x5482, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_233)
{
    // 1098A 0041;	
    // (‚Äé‚Äéê¶ä‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NA	[5482 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1098A, 0x0041 };
    uint32_t const ces[11] = { 0x5482, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_234)
{
    // 1098B 0061;	
    // (‚Äé‚Äéê¶ã‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NA-2	[5482 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098B, 0x0061 };
    uint32_t const ces[11] = { 0x5482, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_235)
{
    // 1098B 0041;	
    // (‚Äé‚Äéê¶ã‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NA-2	[5482 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1098B, 0x0041 };
    uint32_t const ces[11] = { 0x5482, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_236)
{
    // 109A9 0062;	
    // (‚Äé‚Äéê¶©‚Äé‚Äé) MEROITIC CURSIVE LETTER NA	[5482 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A9, 0x0062 };
    uint32_t const ces[9] = { 0x5482, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_237)
{
    // 1098A 0062;	
    // (‚Äé‚Äéê¶ä‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NA	[5482 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098A, 0x0062 };
    uint32_t const ces[11] = { 0x5482, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_238)
{
    // 1098B 0062;	
    // (‚Äé‚Äéê¶ã‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NA-2	[5482 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098B, 0x0062 };
    uint32_t const ces[11] = { 0x5482, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_239)
{
    // 109AA 0021;	
    // (‚Äé‚Äéê¶™‚Äé‚Äé) MEROITIC CURSIVE LETTER NE	[5483 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AA, 0x0021 };
    uint32_t const ces[9] = { 0x5483, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_240)
{
    // 1098C 0021;	
    // (‚Äé‚Äéê¶å‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NE	[5483 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098C, 0x0021 };
    uint32_t const ces[11] = { 0x5483, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_241)
{
    // 1098D 0021;	
    // (‚Äé‚Äéê¶ç‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NE-2	[5483 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098D, 0x0021 };
    uint32_t const ces[11] = { 0x5483, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_242)
{
    // 109AA 003F;	
    // (‚Äé‚Äéê¶™‚Äé‚Äé) MEROITIC CURSIVE LETTER NE	[5483 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AA, 0x003F };
    uint32_t const ces[9] = { 0x5483, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_243)
{
    // 1098C 003F;	
    // (‚Äé‚Äéê¶å‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NE	[5483 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098C, 0x003F };
    uint32_t const ces[11] = { 0x5483, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_244)
{
    // 1098D 003F;	
    // (‚Äé‚Äéê¶ç‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NE-2	[5483 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098D, 0x003F };
    uint32_t const ces[11] = { 0x5483, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_245)
{
    // 109AA 0061;	
    // (‚Äé‚Äéê¶™‚Äé‚Äé) MEROITIC CURSIVE LETTER NE	[5483 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AA, 0x0061 };
    uint32_t const ces[9] = { 0x5483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_246)
{
    // 109AA 0041;	
    // (‚Äé‚Äéê¶™‚Äé‚Äé) MEROITIC CURSIVE LETTER NE	[5483 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109AA, 0x0041 };
    uint32_t const ces[9] = { 0x5483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_247)
{
    // 1098C 0061;	
    // (‚Äé‚Äéê¶å‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NE	[5483 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098C, 0x0061 };
    uint32_t const ces[11] = { 0x5483, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_248)
{
    // 1098C 0041;	
    // (‚Äé‚Äéê¶å‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NE	[5483 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1098C, 0x0041 };
    uint32_t const ces[11] = { 0x5483, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_249)
{
    // 1098D 0061;	
    // (‚Äé‚Äéê¶ç‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NE-2	[5483 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098D, 0x0061 };
    uint32_t const ces[11] = { 0x5483, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_250)
{
    // 1098D 0041;	
    // (‚Äé‚Äéê¶ç‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NE-2	[5483 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1098D, 0x0041 };
    uint32_t const ces[11] = { 0x5483, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_251)
{
    // 109AA 0062;	
    // (‚Äé‚Äéê¶™‚Äé‚Äé) MEROITIC CURSIVE LETTER NE	[5483 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AA, 0x0062 };
    uint32_t const ces[9] = { 0x5483, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_252)
{
    // 1098C 0062;	
    // (‚Äé‚Äéê¶å‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NE	[5483 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098C, 0x0062 };
    uint32_t const ces[11] = { 0x5483, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_253)
{
    // 1098D 0062;	
    // (‚Äé‚Äéê¶ç‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER NE-2	[5483 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098D, 0x0062 };
    uint32_t const ces[11] = { 0x5483, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_254)
{
    // 109AB 0021;	
    // (‚Äé‚Äéê¶´‚Äé‚Äé) MEROITIC CURSIVE LETTER RA	[5484 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AB, 0x0021 };
    uint32_t const ces[9] = { 0x5484, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_255)
{
    // 1098E 0021;	
    // (‚Äé‚Äéê¶é‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER RA	[5484 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098E, 0x0021 };
    uint32_t const ces[11] = { 0x5484, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_256)
{
    // 1098F 0021;	
    // (‚Äé‚Äéê¶è‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER RA-2	[5484 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098F, 0x0021 };
    uint32_t const ces[11] = { 0x5484, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_257)
{
    // 109AB 003F;	
    // (‚Äé‚Äéê¶´‚Äé‚Äé) MEROITIC CURSIVE LETTER RA	[5484 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AB, 0x003F };
    uint32_t const ces[9] = { 0x5484, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_258)
{
    // 1098E 003F;	
    // (‚Äé‚Äéê¶é‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER RA	[5484 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098E, 0x003F };
    uint32_t const ces[11] = { 0x5484, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_259)
{
    // 1098F 003F;	
    // (‚Äé‚Äéê¶è‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER RA-2	[5484 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098F, 0x003F };
    uint32_t const ces[11] = { 0x5484, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_260)
{
    // 109AB 0061;	
    // (‚Äé‚Äéê¶´‚Äé‚Äé) MEROITIC CURSIVE LETTER RA	[5484 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AB, 0x0061 };
    uint32_t const ces[9] = { 0x5484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_261)
{
    // 109AB 0041;	
    // (‚Äé‚Äéê¶´‚Äé‚Äé) MEROITIC CURSIVE LETTER RA	[5484 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109AB, 0x0041 };
    uint32_t const ces[9] = { 0x5484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_262)
{
    // 1098E 0061;	
    // (‚Äé‚Äéê¶é‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER RA	[5484 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098E, 0x0061 };
    uint32_t const ces[11] = { 0x5484, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_263)
{
    // 1098E 0041;	
    // (‚Äé‚Äéê¶é‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER RA	[5484 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1098E, 0x0041 };
    uint32_t const ces[11] = { 0x5484, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_264)
{
    // 1098F 0061;	
    // (‚Äé‚Äéê¶è‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER RA-2	[5484 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098F, 0x0061 };
    uint32_t const ces[11] = { 0x5484, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_265)
{
    // 1098F 0041;	
    // (‚Äé‚Äéê¶è‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER RA-2	[5484 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1098F, 0x0041 };
    uint32_t const ces[11] = { 0x5484, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_266)
{
    // 109AB 0062;	
    // (‚Äé‚Äéê¶´‚Äé‚Äé) MEROITIC CURSIVE LETTER RA	[5484 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AB, 0x0062 };
    uint32_t const ces[9] = { 0x5484, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_267)
{
    // 1098E 0062;	
    // (‚Äé‚Äéê¶é‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER RA	[5484 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098E, 0x0062 };
    uint32_t const ces[11] = { 0x5484, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_268)
{
    // 1098F 0062;	
    // (‚Äé‚Äéê¶è‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER RA-2	[5484 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1098F, 0x0062 };
    uint32_t const ces[11] = { 0x5484, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_269)
{
    // 109AC 0021;	
    // (‚Äé‚Äéê¶¨‚Äé‚Äé) MEROITIC CURSIVE LETTER LA	[5485 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AC, 0x0021 };
    uint32_t const ces[9] = { 0x5485, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_270)
{
    // 10990 0021;	
    // (‚Äé‚Äéê¶ê‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER LA	[5485 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10990, 0x0021 };
    uint32_t const ces[11] = { 0x5485, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_271)
{
    // 109AC 003F;	
    // (‚Äé‚Äéê¶¨‚Äé‚Äé) MEROITIC CURSIVE LETTER LA	[5485 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AC, 0x003F };
    uint32_t const ces[9] = { 0x5485, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_272)
{
    // 10990 003F;	
    // (‚Äé‚Äéê¶ê‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER LA	[5485 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10990, 0x003F };
    uint32_t const ces[11] = { 0x5485, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_273)
{
    // 109AC 0061;	
    // (‚Äé‚Äéê¶¨‚Äé‚Äé) MEROITIC CURSIVE LETTER LA	[5485 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AC, 0x0061 };
    uint32_t const ces[9] = { 0x5485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_274)
{
    // 109AC 0041;	
    // (‚Äé‚Äéê¶¨‚Äé‚Äé) MEROITIC CURSIVE LETTER LA	[5485 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109AC, 0x0041 };
    uint32_t const ces[9] = { 0x5485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_275)
{
    // 10990 0061;	
    // (‚Äé‚Äéê¶ê‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER LA	[5485 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10990, 0x0061 };
    uint32_t const ces[11] = { 0x5485, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_276)
{
    // 10990 0041;	
    // (‚Äé‚Äéê¶ê‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER LA	[5485 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10990, 0x0041 };
    uint32_t const ces[11] = { 0x5485, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_277)
{
    // 109AC 0062;	
    // (‚Äé‚Äéê¶¨‚Äé‚Äé) MEROITIC CURSIVE LETTER LA	[5485 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AC, 0x0062 };
    uint32_t const ces[9] = { 0x5485, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_278)
{
    // 10990 0062;	
    // (‚Äé‚Äéê¶ê‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER LA	[5485 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10990, 0x0062 };
    uint32_t const ces[11] = { 0x5485, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_279)
{
    // 109AD 0021;	
    // (‚Äé‚Äéê¶≠‚Äé‚Äé) MEROITIC CURSIVE LETTER KHA	[5486 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AD, 0x0021 };
    uint32_t const ces[9] = { 0x5486, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_280)
{
    // 10991 0021;	
    // (‚Äé‚Äéê¶ë‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER KHA	[5486 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10991, 0x0021 };
    uint32_t const ces[11] = { 0x5486, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_281)
{
    // 109AD 003F;	
    // (‚Äé‚Äéê¶≠‚Äé‚Äé) MEROITIC CURSIVE LETTER KHA	[5486 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AD, 0x003F };
    uint32_t const ces[9] = { 0x5486, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_282)
{
    // 10991 003F;	
    // (‚Äé‚Äéê¶ë‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER KHA	[5486 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10991, 0x003F };
    uint32_t const ces[11] = { 0x5486, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_283)
{
    // 109AD 0061;	
    // (‚Äé‚Äéê¶≠‚Äé‚Äé) MEROITIC CURSIVE LETTER KHA	[5486 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AD, 0x0061 };
    uint32_t const ces[9] = { 0x5486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_284)
{
    // 109AD 0041;	
    // (‚Äé‚Äéê¶≠‚Äé‚Äé) MEROITIC CURSIVE LETTER KHA	[5486 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109AD, 0x0041 };
    uint32_t const ces[9] = { 0x5486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_285)
{
    // 10991 0061;	
    // (‚Äé‚Äéê¶ë‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER KHA	[5486 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10991, 0x0061 };
    uint32_t const ces[11] = { 0x5486, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_286)
{
    // 10991 0041;	
    // (‚Äé‚Äéê¶ë‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER KHA	[5486 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10991, 0x0041 };
    uint32_t const ces[11] = { 0x5486, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_287)
{
    // 109AD 0062;	
    // (‚Äé‚Äéê¶≠‚Äé‚Äé) MEROITIC CURSIVE LETTER KHA	[5486 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AD, 0x0062 };
    uint32_t const ces[9] = { 0x5486, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_288)
{
    // 10991 0062;	
    // (‚Äé‚Äéê¶ë‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER KHA	[5486 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10991, 0x0062 };
    uint32_t const ces[11] = { 0x5486, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_289)
{
    // 109AE 0021;	
    // (‚Äé‚Äéê¶Æ‚Äé‚Äé) MEROITIC CURSIVE LETTER HHA	[5487 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AE, 0x0021 };
    uint32_t const ces[9] = { 0x5487, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_290)
{
    // 10992 0021;	
    // (‚Äé‚Äéê¶í‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER HHA	[5487 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10992, 0x0021 };
    uint32_t const ces[11] = { 0x5487, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_291)
{
    // 109AE 003F;	
    // (‚Äé‚Äéê¶Æ‚Äé‚Äé) MEROITIC CURSIVE LETTER HHA	[5487 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AE, 0x003F };
    uint32_t const ces[9] = { 0x5487, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_292)
{
    // 10992 003F;	
    // (‚Äé‚Äéê¶í‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER HHA	[5487 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10992, 0x003F };
    uint32_t const ces[11] = { 0x5487, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_293)
{
    // 109AE 0061;	
    // (‚Äé‚Äéê¶Æ‚Äé‚Äé) MEROITIC CURSIVE LETTER HHA	[5487 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AE, 0x0061 };
    uint32_t const ces[9] = { 0x5487, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_294)
{
    // 109AE 0041;	
    // (‚Äé‚Äéê¶Æ‚Äé‚Äé) MEROITIC CURSIVE LETTER HHA	[5487 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109AE, 0x0041 };
    uint32_t const ces[9] = { 0x5487, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_295)
{
    // 10992 0061;	
    // (‚Äé‚Äéê¶í‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER HHA	[5487 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10992, 0x0061 };
    uint32_t const ces[11] = { 0x5487, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_296)
{
    // 10992 0041;	
    // (‚Äé‚Äéê¶í‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER HHA	[5487 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10992, 0x0041 };
    uint32_t const ces[11] = { 0x5487, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_297)
{
    // 109AE 0062;	
    // (‚Äé‚Äéê¶Æ‚Äé‚Äé) MEROITIC CURSIVE LETTER HHA	[5487 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AE, 0x0062 };
    uint32_t const ces[9] = { 0x5487, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_298)
{
    // 10992 0062;	
    // (‚Äé‚Äéê¶í‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER HHA	[5487 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10992, 0x0062 };
    uint32_t const ces[11] = { 0x5487, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_299)
{
    // 109AF 0021;	
    // (‚Äé‚Äéê¶Ø‚Äé‚Äé) MEROITIC CURSIVE LETTER SA	[5488 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AF, 0x0021 };
    uint32_t const ces[9] = { 0x5488, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_300)
{
    // 109B0 0021;	
    // (‚Äé‚Äéê¶∞‚Äé‚Äé) MEROITIC CURSIVE LETTER ARCHAIC SA	[5488 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x109B0, 0x0021 };
    uint32_t const ces[11] = { 0x5488, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_301)
{
    // 10993 0021;	
    // (‚Äé‚Äéê¶ì‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SA	[5488 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10993, 0x0021 };
    uint32_t const ces[11] = { 0x5488, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_302)
{
    // 10994 0021;	
    // (‚Äé‚Äéê¶î‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SA-2	[5488 0261 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10994, 0x0021 };
    uint32_t const ces[11] = { 0x5488, 0x0261, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_303)
{
    // 109AF 003F;	
    // (‚Äé‚Äéê¶Ø‚Äé‚Äé) MEROITIC CURSIVE LETTER SA	[5488 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AF, 0x003F };
    uint32_t const ces[9] = { 0x5488, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_304)
{
    // 109B0 003F;	
    // (‚Äé‚Äéê¶∞‚Äé‚Äé) MEROITIC CURSIVE LETTER ARCHAIC SA	[5488 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x109B0, 0x003F };
    uint32_t const ces[11] = { 0x5488, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_305)
{
    // 10993 003F;	
    // (‚Äé‚Äéê¶ì‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SA	[5488 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10993, 0x003F };
    uint32_t const ces[11] = { 0x5488, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_306)
{
    // 10994 003F;	
    // (‚Äé‚Äéê¶î‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SA-2	[5488 0267 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10994, 0x003F };
    uint32_t const ces[11] = { 0x5488, 0x0267, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_307)
{
    // 109AF 0061;	
    // (‚Äé‚Äéê¶Ø‚Äé‚Äé) MEROITIC CURSIVE LETTER SA	[5488 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AF, 0x0061 };
    uint32_t const ces[9] = { 0x5488, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_308)
{
    // 109AF 0041;	
    // (‚Äé‚Äéê¶Ø‚Äé‚Äé) MEROITIC CURSIVE LETTER SA	[5488 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109AF, 0x0041 };
    uint32_t const ces[9] = { 0x5488, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_309)
{
    // 109B0 0061;	
    // (‚Äé‚Äéê¶∞‚Äé‚Äé) MEROITIC CURSIVE LETTER ARCHAIC SA	[5488 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x109B0, 0x0061 };
    uint32_t const ces[11] = { 0x5488, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_310)
{
    // 109B0 0041;	
    // (‚Äé‚Äéê¶∞‚Äé‚Äé) MEROITIC CURSIVE LETTER ARCHAIC SA	[5488 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x109B0, 0x0041 };
    uint32_t const ces[11] = { 0x5488, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_311)
{
    // 10993 0061;	
    // (‚Äé‚Äéê¶ì‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SA	[5488 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10993, 0x0061 };
    uint32_t const ces[11] = { 0x5488, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_312)
{
    // 10993 0041;	
    // (‚Äé‚Äéê¶ì‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SA	[5488 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10993, 0x0041 };
    uint32_t const ces[11] = { 0x5488, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_313)
{
    // 10994 0061;	
    // (‚Äé‚Äéê¶î‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SA-2	[5488 1CAD | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10994, 0x0061 };
    uint32_t const ces[11] = { 0x5488, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_314)
{
    // 10994 0041;	
    // (‚Äé‚Äéê¶î‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SA-2	[5488 1CAD | 0020 0113 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10994, 0x0041 };
    uint32_t const ces[11] = { 0x5488, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_315)
{
    // 109AF 0062;	
    // (‚Äé‚Äéê¶Ø‚Äé‚Äé) MEROITIC CURSIVE LETTER SA	[5488 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109AF, 0x0062 };
    uint32_t const ces[9] = { 0x5488, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_316)
{
    // 109B0 0062;	
    // (‚Äé‚Äéê¶∞‚Äé‚Äé) MEROITIC CURSIVE LETTER ARCHAIC SA	[5488 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x109B0, 0x0062 };
    uint32_t const ces[11] = { 0x5488, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_317)
{
    // 10993 0062;	
    // (‚Äé‚Äéê¶ì‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SA	[5488 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10993, 0x0062 };
    uint32_t const ces[11] = { 0x5488, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_318)
{
    // 10994 0062;	
    // (‚Äé‚Äéê¶î‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SA-2	[5488 1CC6 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10994, 0x0062 };
    uint32_t const ces[11] = { 0x5488, 0x1CC6, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_319)
{
    // 109B1 0021;	
    // (‚Äé‚Äéê¶±‚Äé‚Äé) MEROITIC CURSIVE LETTER SE	[5489 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B1, 0x0021 };
    uint32_t const ces[9] = { 0x5489, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_320)
{
    // 10995 0021;	
    // (‚Äé‚Äéê¶ï‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SE	[5489 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10995, 0x0021 };
    uint32_t const ces[11] = { 0x5489, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_321)
{
    // 109B1 003F;	
    // (‚Äé‚Äéê¶±‚Äé‚Äé) MEROITIC CURSIVE LETTER SE	[5489 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B1, 0x003F };
    uint32_t const ces[9] = { 0x5489, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_322)
{
    // 10995 003F;	
    // (‚Äé‚Äéê¶ï‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SE	[5489 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10995, 0x003F };
    uint32_t const ces[11] = { 0x5489, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_323)
{
    // 109B1 0061;	
    // (‚Äé‚Äéê¶±‚Äé‚Äé) MEROITIC CURSIVE LETTER SE	[5489 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B1, 0x0061 };
    uint32_t const ces[9] = { 0x5489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_324)
{
    // 109B1 0041;	
    // (‚Äé‚Äéê¶±‚Äé‚Äé) MEROITIC CURSIVE LETTER SE	[5489 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109B1, 0x0041 };
    uint32_t const ces[9] = { 0x5489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_325)
{
    // 10995 0061;	
    // (‚Äé‚Äéê¶ï‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SE	[5489 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10995, 0x0061 };
    uint32_t const ces[11] = { 0x5489, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_326)
{
    // 10995 0041;	
    // (‚Äé‚Äéê¶ï‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SE	[5489 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10995, 0x0041 };
    uint32_t const ces[11] = { 0x5489, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_327)
{
    // 109B1 0062;	
    // (‚Äé‚Äéê¶±‚Äé‚Äé) MEROITIC CURSIVE LETTER SE	[5489 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B1, 0x0062 };
    uint32_t const ces[9] = { 0x5489, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_328)
{
    // 10995 0062;	
    // (‚Äé‚Äéê¶ï‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER SE	[5489 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10995, 0x0062 };
    uint32_t const ces[11] = { 0x5489, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_329)
{
    // 109B2 0021;	
    // (‚Äé‚Äéê¶≤‚Äé‚Äé) MEROITIC CURSIVE LETTER KA	[548A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B2, 0x0021 };
    uint32_t const ces[9] = { 0x548A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_330)
{
    // 10996 0021;	
    // (‚Äé‚Äéê¶ñ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER KA	[548A 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10996, 0x0021 };
    uint32_t const ces[11] = { 0x548A, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_331)
{
    // 109B2 003F;	
    // (‚Äé‚Äéê¶≤‚Äé‚Äé) MEROITIC CURSIVE LETTER KA	[548A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B2, 0x003F };
    uint32_t const ces[9] = { 0x548A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_332)
{
    // 10996 003F;	
    // (‚Äé‚Äéê¶ñ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER KA	[548A 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10996, 0x003F };
    uint32_t const ces[11] = { 0x548A, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_333)
{
    // 109B2 0061;	
    // (‚Äé‚Äéê¶≤‚Äé‚Äé) MEROITIC CURSIVE LETTER KA	[548A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B2, 0x0061 };
    uint32_t const ces[9] = { 0x548A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_334)
{
    // 109B2 0041;	
    // (‚Äé‚Äéê¶≤‚Äé‚Äé) MEROITIC CURSIVE LETTER KA	[548A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109B2, 0x0041 };
    uint32_t const ces[9] = { 0x548A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_335)
{
    // 10996 0061;	
    // (‚Äé‚Äéê¶ñ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER KA	[548A 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10996, 0x0061 };
    uint32_t const ces[11] = { 0x548A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_336)
{
    // 10996 0041;	
    // (‚Äé‚Äéê¶ñ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER KA	[548A 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10996, 0x0041 };
    uint32_t const ces[11] = { 0x548A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_337)
{
    // 109B2 0062;	
    // (‚Äé‚Äéê¶≤‚Äé‚Äé) MEROITIC CURSIVE LETTER KA	[548A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B2, 0x0062 };
    uint32_t const ces[9] = { 0x548A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_338)
{
    // 10996 0062;	
    // (‚Äé‚Äéê¶ñ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER KA	[548A 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10996, 0x0062 };
    uint32_t const ces[11] = { 0x548A, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_339)
{
    // 109B3 0021;	
    // (‚Äé‚Äéê¶≥‚Äé‚Äé) MEROITIC CURSIVE LETTER QA	[548B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B3, 0x0021 };
    uint32_t const ces[9] = { 0x548B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_340)
{
    // 10997 0021;	
    // (‚Äé‚Äéê¶ó‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER QA	[548B 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10997, 0x0021 };
    uint32_t const ces[11] = { 0x548B, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_341)
{
    // 109B3 003F;	
    // (‚Äé‚Äéê¶≥‚Äé‚Äé) MEROITIC CURSIVE LETTER QA	[548B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B3, 0x003F };
    uint32_t const ces[9] = { 0x548B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_342)
{
    // 10997 003F;	
    // (‚Äé‚Äéê¶ó‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER QA	[548B 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10997, 0x003F };
    uint32_t const ces[11] = { 0x548B, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_343)
{
    // 109B3 0061;	
    // (‚Äé‚Äéê¶≥‚Äé‚Äé) MEROITIC CURSIVE LETTER QA	[548B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B3, 0x0061 };
    uint32_t const ces[9] = { 0x548B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_344)
{
    // 109B3 0041;	
    // (‚Äé‚Äéê¶≥‚Äé‚Äé) MEROITIC CURSIVE LETTER QA	[548B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109B3, 0x0041 };
    uint32_t const ces[9] = { 0x548B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_345)
{
    // 10997 0061;	
    // (‚Äé‚Äéê¶ó‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER QA	[548B 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10997, 0x0061 };
    uint32_t const ces[11] = { 0x548B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_346)
{
    // 10997 0041;	
    // (‚Äé‚Äéê¶ó‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER QA	[548B 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10997, 0x0041 };
    uint32_t const ces[11] = { 0x548B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_347)
{
    // 109B3 0062;	
    // (‚Äé‚Äéê¶≥‚Äé‚Äé) MEROITIC CURSIVE LETTER QA	[548B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B3, 0x0062 };
    uint32_t const ces[9] = { 0x548B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_348)
{
    // 10997 0062;	
    // (‚Äé‚Äéê¶ó‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER QA	[548B 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10997, 0x0062 };
    uint32_t const ces[11] = { 0x548B, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_349)
{
    // 109B4 0021;	
    // (‚Äé‚Äéê¶¥‚Äé‚Äé) MEROITIC CURSIVE LETTER TA	[548C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B4, 0x0021 };
    uint32_t const ces[9] = { 0x548C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_350)
{
    // 10998 0021;	
    // (‚Äé‚Äéê¶ò‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TA	[548C 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10998, 0x0021 };
    uint32_t const ces[11] = { 0x548C, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_351)
{
    // 10999 0021;	
    // (‚Äé‚Äéê¶ô‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TA-2	[548C 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10999, 0x0021 };
    uint32_t const ces[11] = { 0x548C, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_352)
{
    // 109B4 003F;	
    // (‚Äé‚Äéê¶¥‚Äé‚Äé) MEROITIC CURSIVE LETTER TA	[548C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B4, 0x003F };
    uint32_t const ces[9] = { 0x548C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_353)
{
    // 10998 003F;	
    // (‚Äé‚Äéê¶ò‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TA	[548C 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10998, 0x003F };
    uint32_t const ces[11] = { 0x548C, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_354)
{
    // 10999 003F;	
    // (‚Äé‚Äéê¶ô‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TA-2	[548C 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10999, 0x003F };
    uint32_t const ces[11] = { 0x548C, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_355)
{
    // 109B4 0061;	
    // (‚Äé‚Äéê¶¥‚Äé‚Äé) MEROITIC CURSIVE LETTER TA	[548C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B4, 0x0061 };
    uint32_t const ces[9] = { 0x548C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_356)
{
    // 109B4 0041;	
    // (‚Äé‚Äéê¶¥‚Äé‚Äé) MEROITIC CURSIVE LETTER TA	[548C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109B4, 0x0041 };
    uint32_t const ces[9] = { 0x548C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_357)
{
    // 10998 0061;	
    // (‚Äé‚Äéê¶ò‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TA	[548C 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10998, 0x0061 };
    uint32_t const ces[11] = { 0x548C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_358)
{
    // 10998 0041;	
    // (‚Äé‚Äéê¶ò‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TA	[548C 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10998, 0x0041 };
    uint32_t const ces[11] = { 0x548C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_359)
{
    // 10999 0061;	
    // (‚Äé‚Äéê¶ô‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TA-2	[548C 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10999, 0x0061 };
    uint32_t const ces[11] = { 0x548C, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_360)
{
    // 10999 0041;	
    // (‚Äé‚Äéê¶ô‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TA-2	[548C 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10999, 0x0041 };
    uint32_t const ces[11] = { 0x548C, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_361)
{
    // 109B4 0062;	
    // (‚Äé‚Äéê¶¥‚Äé‚Äé) MEROITIC CURSIVE LETTER TA	[548C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B4, 0x0062 };
    uint32_t const ces[9] = { 0x548C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_362)
{
    // 10998 0062;	
    // (‚Äé‚Äéê¶ò‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TA	[548C 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10998, 0x0062 };
    uint32_t const ces[11] = { 0x548C, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_363)
{
    // 10999 0062;	
    // (‚Äé‚Äéê¶ô‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TA-2	[548C 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10999, 0x0062 };
    uint32_t const ces[11] = { 0x548C, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_364)
{
    // 109B5 0021;	
    // (‚Äé‚Äéê¶µ‚Äé‚Äé) MEROITIC CURSIVE LETTER TE	[548D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B5, 0x0021 };
    uint32_t const ces[9] = { 0x548D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_365)
{
    // 1099A 0021;	
    // (‚Äé‚Äéê¶ö‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TE	[548D 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099A, 0x0021 };
    uint32_t const ces[11] = { 0x548D, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_366)
{
    // 1099B 0021;	
    // (‚Äé‚Äéê¶õ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TE-2	[548D 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099B, 0x0021 };
    uint32_t const ces[11] = { 0x548D, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_367)
{
    // 109B5 003F;	
    // (‚Äé‚Äéê¶µ‚Äé‚Äé) MEROITIC CURSIVE LETTER TE	[548D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B5, 0x003F };
    uint32_t const ces[9] = { 0x548D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_368)
{
    // 1099A 003F;	
    // (‚Äé‚Äéê¶ö‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TE	[548D 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099A, 0x003F };
    uint32_t const ces[11] = { 0x548D, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_369)
{
    // 1099B 003F;	
    // (‚Äé‚Äéê¶õ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TE-2	[548D 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099B, 0x003F };
    uint32_t const ces[11] = { 0x548D, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_370)
{
    // 109B5 0061;	
    // (‚Äé‚Äéê¶µ‚Äé‚Äé) MEROITIC CURSIVE LETTER TE	[548D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B5, 0x0061 };
    uint32_t const ces[9] = { 0x548D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_371)
{
    // 109B5 0041;	
    // (‚Äé‚Äéê¶µ‚Äé‚Äé) MEROITIC CURSIVE LETTER TE	[548D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109B5, 0x0041 };
    uint32_t const ces[9] = { 0x548D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_372)
{
    // 1099A 0061;	
    // (‚Äé‚Äéê¶ö‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TE	[548D 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099A, 0x0061 };
    uint32_t const ces[11] = { 0x548D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_373)
{
    // 1099A 0041;	
    // (‚Äé‚Äéê¶ö‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TE	[548D 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1099A, 0x0041 };
    uint32_t const ces[11] = { 0x548D, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_374)
{
    // 1099B 0061;	
    // (‚Äé‚Äéê¶õ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TE-2	[548D 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099B, 0x0061 };
    uint32_t const ces[11] = { 0x548D, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_375)
{
    // 1099B 0041;	
    // (‚Äé‚Äéê¶õ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TE-2	[548D 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1099B, 0x0041 };
    uint32_t const ces[11] = { 0x548D, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_376)
{
    // 109B5 0062;	
    // (‚Äé‚Äéê¶µ‚Äé‚Äé) MEROITIC CURSIVE LETTER TE	[548D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B5, 0x0062 };
    uint32_t const ces[9] = { 0x548D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_377)
{
    // 1099A 0062;	
    // (‚Äé‚Äéê¶ö‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TE	[548D 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099A, 0x0062 };
    uint32_t const ces[11] = { 0x548D, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_378)
{
    // 1099B 0062;	
    // (‚Äé‚Äéê¶õ‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TE-2	[548D 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099B, 0x0062 };
    uint32_t const ces[11] = { 0x548D, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_379)
{
    // 109B6 0021;	
    // (‚Äé‚Äéê¶∂‚Äé‚Äé) MEROITIC CURSIVE LETTER TO	[548E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B6, 0x0021 };
    uint32_t const ces[9] = { 0x548E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_380)
{
    // 1099C 0021;	
    // (‚Äé‚Äéê¶ú‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TO	[548E 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099C, 0x0021 };
    uint32_t const ces[11] = { 0x548E, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_381)
{
    // 109B6 003F;	
    // (‚Äé‚Äéê¶∂‚Äé‚Äé) MEROITIC CURSIVE LETTER TO	[548E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B6, 0x003F };
    uint32_t const ces[9] = { 0x548E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_382)
{
    // 1099C 003F;	
    // (‚Äé‚Äéê¶ú‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TO	[548E 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099C, 0x003F };
    uint32_t const ces[11] = { 0x548E, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_383)
{
    // 109B6 0061;	
    // (‚Äé‚Äéê¶∂‚Äé‚Äé) MEROITIC CURSIVE LETTER TO	[548E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B6, 0x0061 };
    uint32_t const ces[9] = { 0x548E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_384)
{
    // 109B6 0041;	
    // (‚Äé‚Äéê¶∂‚Äé‚Äé) MEROITIC CURSIVE LETTER TO	[548E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109B6, 0x0041 };
    uint32_t const ces[9] = { 0x548E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_385)
{
    // 1099C 0061;	
    // (‚Äé‚Äéê¶ú‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TO	[548E 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099C, 0x0061 };
    uint32_t const ces[11] = { 0x548E, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_386)
{
    // 1099C 0041;	
    // (‚Äé‚Äéê¶ú‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TO	[548E 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1099C, 0x0041 };
    uint32_t const ces[11] = { 0x548E, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_387)
{
    // 109B6 0062;	
    // (‚Äé‚Äéê¶∂‚Äé‚Äé) MEROITIC CURSIVE LETTER TO	[548E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B6, 0x0062 };
    uint32_t const ces[9] = { 0x548E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_388)
{
    // 1099C 0062;	
    // (‚Äé‚Äéê¶ú‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER TO	[548E 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099C, 0x0062 };
    uint32_t const ces[11] = { 0x548E, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_389)
{
    // 109B7 0021;	
    // (‚Äé‚Äéê¶∑‚Äé‚Äé) MEROITIC CURSIVE LETTER DA	[548F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B7, 0x0021 };
    uint32_t const ces[9] = { 0x548F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_390)
{
    // 1099D 0021;	
    // (‚Äé‚Äéê¶ù‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER DA	[548F 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099D, 0x0021 };
    uint32_t const ces[11] = { 0x548F, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_391)
{
    // 109B7 003F;	
    // (‚Äé‚Äéê¶∑‚Äé‚Äé) MEROITIC CURSIVE LETTER DA	[548F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B7, 0x003F };
    uint32_t const ces[9] = { 0x548F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_392)
{
    // 1099D 003F;	
    // (‚Äé‚Äéê¶ù‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER DA	[548F 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099D, 0x003F };
    uint32_t const ces[11] = { 0x548F, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_393)
{
    // 109B7 0061;	
    // (‚Äé‚Äéê¶∑‚Äé‚Äé) MEROITIC CURSIVE LETTER DA	[548F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B7, 0x0061 };
    uint32_t const ces[9] = { 0x548F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_394)
{
    // 109B7 0041;	
    // (‚Äé‚Äéê¶∑‚Äé‚Äé) MEROITIC CURSIVE LETTER DA	[548F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109B7, 0x0041 };
    uint32_t const ces[9] = { 0x548F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_395)
{
    // 1099D 0061;	
    // (‚Äé‚Äéê¶ù‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER DA	[548F 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099D, 0x0061 };
    uint32_t const ces[11] = { 0x548F, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_396)
{
    // 1099D 0041;	
    // (‚Äé‚Äéê¶ù‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER DA	[548F 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1099D, 0x0041 };
    uint32_t const ces[11] = { 0x548F, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_397)
{
    // 109B7 0062;	
    // (‚Äé‚Äéê¶∑‚Äé‚Äé) MEROITIC CURSIVE LETTER DA	[548F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B7, 0x0062 };
    uint32_t const ces[9] = { 0x548F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_398)
{
    // 1099D 0062;	
    // (‚Äé‚Äéê¶ù‚Äé‚Äé) MEROITIC HIEROGLYPHIC LETTER DA	[548F 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1099D, 0x0062 };
    uint32_t const ces[11] = { 0x548F, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_399)
{
    // 109BE 0021;	
    // (‚Äé‚Äéê¶æ‚Äé‚Äé) MEROITIC CURSIVE LOGOGRAM RMT	[5490 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BE, 0x0021 };
    uint32_t const ces[9] = { 0x5490, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_400)
{
    // 109BE 003F;	
    // (‚Äé‚Äéê¶æ‚Äé‚Äé) MEROITIC CURSIVE LOGOGRAM RMT	[5490 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BE, 0x003F };
    uint32_t const ces[9] = { 0x5490, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_401)
{
    // 109BE 0061;	
    // (‚Äé‚Äéê¶æ‚Äé‚Äé) MEROITIC CURSIVE LOGOGRAM RMT	[5490 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BE, 0x0061 };
    uint32_t const ces[9] = { 0x5490, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_402)
{
    // 109BE 0041;	
    // (‚Äé‚Äéê¶æ‚Äé‚Äé) MEROITIC CURSIVE LOGOGRAM RMT	[5490 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109BE, 0x0041 };
    uint32_t const ces[9] = { 0x5490, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_403)
{
    // 109BE 0062;	
    // (‚Äé‚Äéê¶æ‚Äé‚Äé) MEROITIC CURSIVE LOGOGRAM RMT	[5490 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BE, 0x0062 };
    uint32_t const ces[9] = { 0x5490, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_404)
{
    // 109BF 0021;	
    // (‚Äé‚Äéê¶ø‚Äé‚Äé) MEROITIC CURSIVE LOGOGRAM IMN	[5491 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BF, 0x0021 };
    uint32_t const ces[9] = { 0x5491, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_405)
{
    // 109BF 003F;	
    // (‚Äé‚Äéê¶ø‚Äé‚Äé) MEROITIC CURSIVE LOGOGRAM IMN	[5491 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BF, 0x003F };
    uint32_t const ces[9] = { 0x5491, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_406)
{
    // 109BF 0061;	
    // (‚Äé‚Äéê¶ø‚Äé‚Äé) MEROITIC CURSIVE LOGOGRAM IMN	[5491 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BF, 0x0061 };
    uint32_t const ces[9] = { 0x5491, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_407)
{
    // 109BF 0041;	
    // (‚Äé‚Äéê¶ø‚Äé‚Äé) MEROITIC CURSIVE LOGOGRAM IMN	[5491 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109BF, 0x0041 };
    uint32_t const ces[9] = { 0x5491, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_408)
{
    // 109BF 0062;	
    // (‚Äé‚Äéê¶ø‚Äé‚Äé) MEROITIC CURSIVE LOGOGRAM IMN	[5491 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109BF, 0x0062 };
    uint32_t const ces[9] = { 0x5491, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_409)
{
    // 1099E 0021;	
    // (‚Äé‚Äéê¶û‚Äé‚Äé) MEROITIC HIEROGLYPHIC SYMBOL VIDJ	[5492 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099E, 0x0021 };
    uint32_t const ces[9] = { 0x5492, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_410)
{
    // 1099E 003F;	
    // (‚Äé‚Äéê¶û‚Äé‚Äé) MEROITIC HIEROGLYPHIC SYMBOL VIDJ	[5492 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099E, 0x003F };
    uint32_t const ces[9] = { 0x5492, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_411)
{
    // 1099E 0061;	
    // (‚Äé‚Äéê¶û‚Äé‚Äé) MEROITIC HIEROGLYPHIC SYMBOL VIDJ	[5492 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099E, 0x0061 };
    uint32_t const ces[9] = { 0x5492, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_412)
{
    // 1099E 0041;	
    // (‚Äé‚Äéê¶û‚Äé‚Äé) MEROITIC HIEROGLYPHIC SYMBOL VIDJ	[5492 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1099E, 0x0041 };
    uint32_t const ces[9] = { 0x5492, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_413)
{
    // 1099E 0062;	
    // (‚Äé‚Äéê¶û‚Äé‚Äé) MEROITIC HIEROGLYPHIC SYMBOL VIDJ	[5492 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099E, 0x0062 };
    uint32_t const ces[9] = { 0x5492, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_414)
{
    // 1099F 0021;	
    // (‚Äé‚Äéê¶ü‚Äé‚Äé) MEROITIC HIEROGLYPHIC SYMBOL VIDJ-2	[5493 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099F, 0x0021 };
    uint32_t const ces[9] = { 0x5493, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_415)
{
    // 1099F 003F;	
    // (‚Äé‚Äéê¶ü‚Äé‚Äé) MEROITIC HIEROGLYPHIC SYMBOL VIDJ-2	[5493 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099F, 0x003F };
    uint32_t const ces[9] = { 0x5493, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_416)
{
    // 1099F 0061;	
    // (‚Äé‚Äéê¶ü‚Äé‚Äé) MEROITIC HIEROGLYPHIC SYMBOL VIDJ-2	[5493 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099F, 0x0061 };
    uint32_t const ces[9] = { 0x5493, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_417)
{
    // 1099F 0041;	
    // (‚Äé‚Äéê¶ü‚Äé‚Äé) MEROITIC HIEROGLYPHIC SYMBOL VIDJ-2	[5493 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1099F, 0x0041 };
    uint32_t const ces[9] = { 0x5493, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_418)
{
    // 1099F 0062;	
    // (‚Äé‚Äéê¶ü‚Äé‚Äé) MEROITIC HIEROGLYPHIC SYMBOL VIDJ-2	[5493 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099F, 0x0062 };
    uint32_t const ces[9] = { 0x5493, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_419)
{
    // 14400 0021;	
    // (îêÄ) ANATOLIAN HIEROGLYPH A001	[5494 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14400, 0x0021 };
    uint32_t const ces[9] = { 0x5494, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_420)
{
    // 14400 003F;	
    // (îêÄ) ANATOLIAN HIEROGLYPH A001	[5494 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14400, 0x003F };
    uint32_t const ces[9] = { 0x5494, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_421)
{
    // 14400 0061;	
    // (îêÄ) ANATOLIAN HIEROGLYPH A001	[5494 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14400, 0x0061 };
    uint32_t const ces[9] = { 0x5494, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_422)
{
    // 14400 0041;	
    // (îêÄ) ANATOLIAN HIEROGLYPH A001	[5494 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14400, 0x0041 };
    uint32_t const ces[9] = { 0x5494, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_423)
{
    // 14400 0062;	
    // (îêÄ) ANATOLIAN HIEROGLYPH A001	[5494 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14400, 0x0062 };
    uint32_t const ces[9] = { 0x5494, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_424)
{
    // 14401 0021;	
    // (îêÅ) ANATOLIAN HIEROGLYPH A002	[5495 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14401, 0x0021 };
    uint32_t const ces[9] = { 0x5495, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_425)
{
    // 14401 003F;	
    // (îêÅ) ANATOLIAN HIEROGLYPH A002	[5495 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14401, 0x003F };
    uint32_t const ces[9] = { 0x5495, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_426)
{
    // 14401 0061;	
    // (îêÅ) ANATOLIAN HIEROGLYPH A002	[5495 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14401, 0x0061 };
    uint32_t const ces[9] = { 0x5495, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_427)
{
    // 14401 0041;	
    // (îêÅ) ANATOLIAN HIEROGLYPH A002	[5495 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14401, 0x0041 };
    uint32_t const ces[9] = { 0x5495, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_428)
{
    // 14401 0062;	
    // (îêÅ) ANATOLIAN HIEROGLYPH A002	[5495 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14401, 0x0062 };
    uint32_t const ces[9] = { 0x5495, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_429)
{
    // 14402 0021;	
    // (îêÇ) ANATOLIAN HIEROGLYPH A003	[5496 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14402, 0x0021 };
    uint32_t const ces[9] = { 0x5496, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_430)
{
    // 14402 003F;	
    // (îêÇ) ANATOLIAN HIEROGLYPH A003	[5496 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14402, 0x003F };
    uint32_t const ces[9] = { 0x5496, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_431)
{
    // 14402 0061;	
    // (îêÇ) ANATOLIAN HIEROGLYPH A003	[5496 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14402, 0x0061 };
    uint32_t const ces[9] = { 0x5496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_432)
{
    // 14402 0041;	
    // (îêÇ) ANATOLIAN HIEROGLYPH A003	[5496 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14402, 0x0041 };
    uint32_t const ces[9] = { 0x5496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_433)
{
    // 14402 0062;	
    // (îêÇ) ANATOLIAN HIEROGLYPH A003	[5496 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14402, 0x0062 };
    uint32_t const ces[9] = { 0x5496, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_434)
{
    // 14403 0021;	
    // (îêÉ) ANATOLIAN HIEROGLYPH A004	[5497 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14403, 0x0021 };
    uint32_t const ces[9] = { 0x5497, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_435)
{
    // 14403 003F;	
    // (îêÉ) ANATOLIAN HIEROGLYPH A004	[5497 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14403, 0x003F };
    uint32_t const ces[9] = { 0x5497, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_436)
{
    // 14403 0061;	
    // (îêÉ) ANATOLIAN HIEROGLYPH A004	[5497 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14403, 0x0061 };
    uint32_t const ces[9] = { 0x5497, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_437)
{
    // 14403 0041;	
    // (îêÉ) ANATOLIAN HIEROGLYPH A004	[5497 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14403, 0x0041 };
    uint32_t const ces[9] = { 0x5497, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_438)
{
    // 14403 0062;	
    // (îêÉ) ANATOLIAN HIEROGLYPH A004	[5497 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14403, 0x0062 };
    uint32_t const ces[9] = { 0x5497, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_439)
{
    // 14404 0021;	
    // (îêÑ) ANATOLIAN HIEROGLYPH A005	[5498 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14404, 0x0021 };
    uint32_t const ces[9] = { 0x5498, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_440)
{
    // 14404 003F;	
    // (îêÑ) ANATOLIAN HIEROGLYPH A005	[5498 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14404, 0x003F };
    uint32_t const ces[9] = { 0x5498, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_441)
{
    // 14404 0061;	
    // (îêÑ) ANATOLIAN HIEROGLYPH A005	[5498 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14404, 0x0061 };
    uint32_t const ces[9] = { 0x5498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_442)
{
    // 14404 0041;	
    // (îêÑ) ANATOLIAN HIEROGLYPH A005	[5498 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14404, 0x0041 };
    uint32_t const ces[9] = { 0x5498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_443)
{
    // 14404 0062;	
    // (îêÑ) ANATOLIAN HIEROGLYPH A005	[5498 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14404, 0x0062 };
    uint32_t const ces[9] = { 0x5498, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_444)
{
    // 14405 0021;	
    // (îêÖ) ANATOLIAN HIEROGLYPH A006	[5499 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14405, 0x0021 };
    uint32_t const ces[9] = { 0x5499, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_445)
{
    // 14405 003F;	
    // (îêÖ) ANATOLIAN HIEROGLYPH A006	[5499 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14405, 0x003F };
    uint32_t const ces[9] = { 0x5499, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_446)
{
    // 14405 0061;	
    // (îêÖ) ANATOLIAN HIEROGLYPH A006	[5499 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14405, 0x0061 };
    uint32_t const ces[9] = { 0x5499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_447)
{
    // 14405 0041;	
    // (îêÖ) ANATOLIAN HIEROGLYPH A006	[5499 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14405, 0x0041 };
    uint32_t const ces[9] = { 0x5499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_448)
{
    // 14405 0062;	
    // (îêÖ) ANATOLIAN HIEROGLYPH A006	[5499 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14405, 0x0062 };
    uint32_t const ces[9] = { 0x5499, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_449)
{
    // 14406 0021;	
    // (îêÜ) ANATOLIAN HIEROGLYPH A007	[549A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14406, 0x0021 };
    uint32_t const ces[9] = { 0x549A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_450)
{
    // 14406 003F;	
    // (îêÜ) ANATOLIAN HIEROGLYPH A007	[549A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14406, 0x003F };
    uint32_t const ces[9] = { 0x549A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_451)
{
    // 14406 0061;	
    // (îêÜ) ANATOLIAN HIEROGLYPH A007	[549A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14406, 0x0061 };
    uint32_t const ces[9] = { 0x549A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_452)
{
    // 14406 0041;	
    // (îêÜ) ANATOLIAN HIEROGLYPH A007	[549A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14406, 0x0041 };
    uint32_t const ces[9] = { 0x549A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_453)
{
    // 14406 0062;	
    // (îêÜ) ANATOLIAN HIEROGLYPH A007	[549A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14406, 0x0062 };
    uint32_t const ces[9] = { 0x549A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_454)
{
    // 14407 0021;	
    // (îêá) ANATOLIAN HIEROGLYPH A008	[549B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14407, 0x0021 };
    uint32_t const ces[9] = { 0x549B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_455)
{
    // 14407 003F;	
    // (îêá) ANATOLIAN HIEROGLYPH A008	[549B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14407, 0x003F };
    uint32_t const ces[9] = { 0x549B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_456)
{
    // 14407 0061;	
    // (îêá) ANATOLIAN HIEROGLYPH A008	[549B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14407, 0x0061 };
    uint32_t const ces[9] = { 0x549B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_457)
{
    // 14407 0041;	
    // (îêá) ANATOLIAN HIEROGLYPH A008	[549B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14407, 0x0041 };
    uint32_t const ces[9] = { 0x549B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_458)
{
    // 14407 0062;	
    // (îêá) ANATOLIAN HIEROGLYPH A008	[549B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14407, 0x0062 };
    uint32_t const ces[9] = { 0x549B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_459)
{
    // 14408 0021;	
    // (îêà) ANATOLIAN HIEROGLYPH A009	[549C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14408, 0x0021 };
    uint32_t const ces[9] = { 0x549C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_460)
{
    // 14408 003F;	
    // (îêà) ANATOLIAN HIEROGLYPH A009	[549C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14408, 0x003F };
    uint32_t const ces[9] = { 0x549C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_461)
{
    // 14408 0061;	
    // (îêà) ANATOLIAN HIEROGLYPH A009	[549C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14408, 0x0061 };
    uint32_t const ces[9] = { 0x549C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_462)
{
    // 14408 0041;	
    // (îêà) ANATOLIAN HIEROGLYPH A009	[549C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14408, 0x0041 };
    uint32_t const ces[9] = { 0x549C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_463)
{
    // 14408 0062;	
    // (îêà) ANATOLIAN HIEROGLYPH A009	[549C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14408, 0x0062 };
    uint32_t const ces[9] = { 0x549C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_464)
{
    // 14409 0021;	
    // (îêâ) ANATOLIAN HIEROGLYPH A010	[549D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14409, 0x0021 };
    uint32_t const ces[9] = { 0x549D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_465)
{
    // 14409 003F;	
    // (îêâ) ANATOLIAN HIEROGLYPH A010	[549D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14409, 0x003F };
    uint32_t const ces[9] = { 0x549D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_466)
{
    // 14409 0061;	
    // (îêâ) ANATOLIAN HIEROGLYPH A010	[549D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14409, 0x0061 };
    uint32_t const ces[9] = { 0x549D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_467)
{
    // 14409 0041;	
    // (îêâ) ANATOLIAN HIEROGLYPH A010	[549D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14409, 0x0041 };
    uint32_t const ces[9] = { 0x549D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_468)
{
    // 14409 0062;	
    // (îêâ) ANATOLIAN HIEROGLYPH A010	[549D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14409, 0x0062 };
    uint32_t const ces[9] = { 0x549D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_469)
{
    // 1440A 0021;	
    // (îêä) ANATOLIAN HIEROGLYPH A010A	[549E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440A, 0x0021 };
    uint32_t const ces[9] = { 0x549E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_470)
{
    // 1440A 003F;	
    // (îêä) ANATOLIAN HIEROGLYPH A010A	[549E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440A, 0x003F };
    uint32_t const ces[9] = { 0x549E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_471)
{
    // 1440A 0061;	
    // (îêä) ANATOLIAN HIEROGLYPH A010A	[549E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440A, 0x0061 };
    uint32_t const ces[9] = { 0x549E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_472)
{
    // 1440A 0041;	
    // (îêä) ANATOLIAN HIEROGLYPH A010A	[549E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1440A, 0x0041 };
    uint32_t const ces[9] = { 0x549E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_473)
{
    // 1440A 0062;	
    // (îêä) ANATOLIAN HIEROGLYPH A010A	[549E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440A, 0x0062 };
    uint32_t const ces[9] = { 0x549E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_474)
{
    // 1440B 0021;	
    // (îêã) ANATOLIAN HIEROGLYPH A011	[549F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440B, 0x0021 };
    uint32_t const ces[9] = { 0x549F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_475)
{
    // 1440B 003F;	
    // (îêã) ANATOLIAN HIEROGLYPH A011	[549F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440B, 0x003F };
    uint32_t const ces[9] = { 0x549F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_476)
{
    // 1440B 0061;	
    // (îêã) ANATOLIAN HIEROGLYPH A011	[549F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440B, 0x0061 };
    uint32_t const ces[9] = { 0x549F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_477)
{
    // 1440B 0041;	
    // (îêã) ANATOLIAN HIEROGLYPH A011	[549F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1440B, 0x0041 };
    uint32_t const ces[9] = { 0x549F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_478)
{
    // 1440B 0062;	
    // (îêã) ANATOLIAN HIEROGLYPH A011	[549F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440B, 0x0062 };
    uint32_t const ces[9] = { 0x549F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_479)
{
    // 1440C 0021;	
    // (îêå) ANATOLIAN HIEROGLYPH A012	[54A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440C, 0x0021 };
    uint32_t const ces[9] = { 0x54A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_480)
{
    // 1440C 003F;	
    // (îêå) ANATOLIAN HIEROGLYPH A012	[54A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440C, 0x003F };
    uint32_t const ces[9] = { 0x54A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_481)
{
    // 1440C 0061;	
    // (îêå) ANATOLIAN HIEROGLYPH A012	[54A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440C, 0x0061 };
    uint32_t const ces[9] = { 0x54A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_482)
{
    // 1440C 0041;	
    // (îêå) ANATOLIAN HIEROGLYPH A012	[54A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1440C, 0x0041 };
    uint32_t const ces[9] = { 0x54A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_483)
{
    // 1440C 0062;	
    // (îêå) ANATOLIAN HIEROGLYPH A012	[54A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440C, 0x0062 };
    uint32_t const ces[9] = { 0x54A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_484)
{
    // 1440D 0021;	
    // (îêç) ANATOLIAN HIEROGLYPH A013	[54A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440D, 0x0021 };
    uint32_t const ces[9] = { 0x54A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_485)
{
    // 1440D 003F;	
    // (îêç) ANATOLIAN HIEROGLYPH A013	[54A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440D, 0x003F };
    uint32_t const ces[9] = { 0x54A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_486)
{
    // 1440D 0061;	
    // (îêç) ANATOLIAN HIEROGLYPH A013	[54A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440D, 0x0061 };
    uint32_t const ces[9] = { 0x54A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_487)
{
    // 1440D 0041;	
    // (îêç) ANATOLIAN HIEROGLYPH A013	[54A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1440D, 0x0041 };
    uint32_t const ces[9] = { 0x54A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_488)
{
    // 1440D 0062;	
    // (îêç) ANATOLIAN HIEROGLYPH A013	[54A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440D, 0x0062 };
    uint32_t const ces[9] = { 0x54A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_489)
{
    // 1440E 0021;	
    // (îêé) ANATOLIAN HIEROGLYPH A014	[54A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440E, 0x0021 };
    uint32_t const ces[9] = { 0x54A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_490)
{
    // 1440E 003F;	
    // (îêé) ANATOLIAN HIEROGLYPH A014	[54A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440E, 0x003F };
    uint32_t const ces[9] = { 0x54A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_491)
{
    // 1440E 0061;	
    // (îêé) ANATOLIAN HIEROGLYPH A014	[54A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440E, 0x0061 };
    uint32_t const ces[9] = { 0x54A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_492)
{
    // 1440E 0041;	
    // (îêé) ANATOLIAN HIEROGLYPH A014	[54A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1440E, 0x0041 };
    uint32_t const ces[9] = { 0x54A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_493)
{
    // 1440E 0062;	
    // (îêé) ANATOLIAN HIEROGLYPH A014	[54A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440E, 0x0062 };
    uint32_t const ces[9] = { 0x54A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_494)
{
    // 1440F 0021;	
    // (îêè) ANATOLIAN HIEROGLYPH A015	[54A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440F, 0x0021 };
    uint32_t const ces[9] = { 0x54A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_495)
{
    // 1440F 003F;	
    // (îêè) ANATOLIAN HIEROGLYPH A015	[54A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440F, 0x003F };
    uint32_t const ces[9] = { 0x54A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_496)
{
    // 1440F 0061;	
    // (îêè) ANATOLIAN HIEROGLYPH A015	[54A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440F, 0x0061 };
    uint32_t const ces[9] = { 0x54A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_497)
{
    // 1440F 0041;	
    // (îêè) ANATOLIAN HIEROGLYPH A015	[54A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1440F, 0x0041 };
    uint32_t const ces[9] = { 0x54A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_498)
{
    // 1440F 0062;	
    // (îêè) ANATOLIAN HIEROGLYPH A015	[54A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1440F, 0x0062 };
    uint32_t const ces[9] = { 0x54A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_307_499)
{
    // 14410 0021;	
    // (îêê) ANATOLIAN HIEROGLYPH A016	[54A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14410, 0x0021 };
    uint32_t const ces[9] = { 0x54A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

