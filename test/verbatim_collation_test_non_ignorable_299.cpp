// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_299_000)
{
    // 130F5 003F;	
    // (𓃵) EGYPTIAN HIEROGLYPH E030	[513F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F5, 0x003F };
    uint32_t const ces[9] = { 0x513F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_001)
{
    // 130F5 0061;	
    // (𓃵) EGYPTIAN HIEROGLYPH E030	[513F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F5, 0x0061 };
    uint32_t const ces[9] = { 0x513F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_002)
{
    // 130F5 0041;	
    // (𓃵) EGYPTIAN HIEROGLYPH E030	[513F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130F5, 0x0041 };
    uint32_t const ces[9] = { 0x513F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_003)
{
    // 130F5 0062;	
    // (𓃵) EGYPTIAN HIEROGLYPH E030	[513F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F5, 0x0062 };
    uint32_t const ces[9] = { 0x513F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_004)
{
    // 130F6 0021;	
    // (𓃶) EGYPTIAN HIEROGLYPH E031	[5140 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F6, 0x0021 };
    uint32_t const ces[9] = { 0x5140, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_005)
{
    // 130F6 003F;	
    // (𓃶) EGYPTIAN HIEROGLYPH E031	[5140 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F6, 0x003F };
    uint32_t const ces[9] = { 0x5140, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_006)
{
    // 130F6 0061;	
    // (𓃶) EGYPTIAN HIEROGLYPH E031	[5140 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F6, 0x0061 };
    uint32_t const ces[9] = { 0x5140, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_007)
{
    // 130F6 0041;	
    // (𓃶) EGYPTIAN HIEROGLYPH E031	[5140 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130F6, 0x0041 };
    uint32_t const ces[9] = { 0x5140, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_008)
{
    // 130F6 0062;	
    // (𓃶) EGYPTIAN HIEROGLYPH E031	[5140 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F6, 0x0062 };
    uint32_t const ces[9] = { 0x5140, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_009)
{
    // 130F7 0021;	
    // (𓃷) EGYPTIAN HIEROGLYPH E032	[5141 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F7, 0x0021 };
    uint32_t const ces[9] = { 0x5141, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_010)
{
    // 130F7 003F;	
    // (𓃷) EGYPTIAN HIEROGLYPH E032	[5141 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F7, 0x003F };
    uint32_t const ces[9] = { 0x5141, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_011)
{
    // 130F7 0061;	
    // (𓃷) EGYPTIAN HIEROGLYPH E032	[5141 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F7, 0x0061 };
    uint32_t const ces[9] = { 0x5141, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_012)
{
    // 130F7 0041;	
    // (𓃷) EGYPTIAN HIEROGLYPH E032	[5141 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130F7, 0x0041 };
    uint32_t const ces[9] = { 0x5141, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_013)
{
    // 130F7 0062;	
    // (𓃷) EGYPTIAN HIEROGLYPH E032	[5141 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F7, 0x0062 };
    uint32_t const ces[9] = { 0x5141, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_014)
{
    // 130F8 0021;	
    // (𓃸) EGYPTIAN HIEROGLYPH E033	[5142 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F8, 0x0021 };
    uint32_t const ces[9] = { 0x5142, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_015)
{
    // 130F8 003F;	
    // (𓃸) EGYPTIAN HIEROGLYPH E033	[5142 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F8, 0x003F };
    uint32_t const ces[9] = { 0x5142, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_016)
{
    // 130F8 0061;	
    // (𓃸) EGYPTIAN HIEROGLYPH E033	[5142 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F8, 0x0061 };
    uint32_t const ces[9] = { 0x5142, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_017)
{
    // 130F8 0041;	
    // (𓃸) EGYPTIAN HIEROGLYPH E033	[5142 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130F8, 0x0041 };
    uint32_t const ces[9] = { 0x5142, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_018)
{
    // 130F8 0062;	
    // (𓃸) EGYPTIAN HIEROGLYPH E033	[5142 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F8, 0x0062 };
    uint32_t const ces[9] = { 0x5142, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_019)
{
    // 130F9 0021;	
    // (𓃹) EGYPTIAN HIEROGLYPH E034	[5143 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F9, 0x0021 };
    uint32_t const ces[9] = { 0x5143, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_020)
{
    // 130F9 003F;	
    // (𓃹) EGYPTIAN HIEROGLYPH E034	[5143 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F9, 0x003F };
    uint32_t const ces[9] = { 0x5143, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_021)
{
    // 130F9 0061;	
    // (𓃹) EGYPTIAN HIEROGLYPH E034	[5143 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F9, 0x0061 };
    uint32_t const ces[9] = { 0x5143, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_022)
{
    // 130F9 0041;	
    // (𓃹) EGYPTIAN HIEROGLYPH E034	[5143 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130F9, 0x0041 };
    uint32_t const ces[9] = { 0x5143, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_023)
{
    // 130F9 0062;	
    // (𓃹) EGYPTIAN HIEROGLYPH E034	[5143 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130F9, 0x0062 };
    uint32_t const ces[9] = { 0x5143, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_024)
{
    // 130FA 0021;	
    // (𓃺) EGYPTIAN HIEROGLYPH E034A	[5144 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FA, 0x0021 };
    uint32_t const ces[9] = { 0x5144, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_025)
{
    // 130FA 003F;	
    // (𓃺) EGYPTIAN HIEROGLYPH E034A	[5144 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FA, 0x003F };
    uint32_t const ces[9] = { 0x5144, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_026)
{
    // 130FA 0061;	
    // (𓃺) EGYPTIAN HIEROGLYPH E034A	[5144 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FA, 0x0061 };
    uint32_t const ces[9] = { 0x5144, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_027)
{
    // 130FA 0041;	
    // (𓃺) EGYPTIAN HIEROGLYPH E034A	[5144 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130FA, 0x0041 };
    uint32_t const ces[9] = { 0x5144, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_028)
{
    // 130FA 0062;	
    // (𓃺) EGYPTIAN HIEROGLYPH E034A	[5144 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FA, 0x0062 };
    uint32_t const ces[9] = { 0x5144, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_029)
{
    // 130FB 0021;	
    // (𓃻) EGYPTIAN HIEROGLYPH E036	[5145 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FB, 0x0021 };
    uint32_t const ces[9] = { 0x5145, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_030)
{
    // 130FB 003F;	
    // (𓃻) EGYPTIAN HIEROGLYPH E036	[5145 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FB, 0x003F };
    uint32_t const ces[9] = { 0x5145, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_031)
{
    // 130FB 0061;	
    // (𓃻) EGYPTIAN HIEROGLYPH E036	[5145 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FB, 0x0061 };
    uint32_t const ces[9] = { 0x5145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_032)
{
    // 130FB 0041;	
    // (𓃻) EGYPTIAN HIEROGLYPH E036	[5145 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130FB, 0x0041 };
    uint32_t const ces[9] = { 0x5145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_033)
{
    // 130FB 0062;	
    // (𓃻) EGYPTIAN HIEROGLYPH E036	[5145 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FB, 0x0062 };
    uint32_t const ces[9] = { 0x5145, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_034)
{
    // 130FC 0021;	
    // (𓃼) EGYPTIAN HIEROGLYPH E037	[5146 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FC, 0x0021 };
    uint32_t const ces[9] = { 0x5146, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_035)
{
    // 130FC 003F;	
    // (𓃼) EGYPTIAN HIEROGLYPH E037	[5146 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FC, 0x003F };
    uint32_t const ces[9] = { 0x5146, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_036)
{
    // 130FC 0061;	
    // (𓃼) EGYPTIAN HIEROGLYPH E037	[5146 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FC, 0x0061 };
    uint32_t const ces[9] = { 0x5146, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_037)
{
    // 130FC 0041;	
    // (𓃼) EGYPTIAN HIEROGLYPH E037	[5146 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130FC, 0x0041 };
    uint32_t const ces[9] = { 0x5146, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_038)
{
    // 130FC 0062;	
    // (𓃼) EGYPTIAN HIEROGLYPH E037	[5146 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FC, 0x0062 };
    uint32_t const ces[9] = { 0x5146, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_039)
{
    // 130FD 0021;	
    // (𓃽) EGYPTIAN HIEROGLYPH E038	[5147 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FD, 0x0021 };
    uint32_t const ces[9] = { 0x5147, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_040)
{
    // 130FD 003F;	
    // (𓃽) EGYPTIAN HIEROGLYPH E038	[5147 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FD, 0x003F };
    uint32_t const ces[9] = { 0x5147, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_041)
{
    // 130FD 0061;	
    // (𓃽) EGYPTIAN HIEROGLYPH E038	[5147 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FD, 0x0061 };
    uint32_t const ces[9] = { 0x5147, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_042)
{
    // 130FD 0041;	
    // (𓃽) EGYPTIAN HIEROGLYPH E038	[5147 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130FD, 0x0041 };
    uint32_t const ces[9] = { 0x5147, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_043)
{
    // 130FD 0062;	
    // (𓃽) EGYPTIAN HIEROGLYPH E038	[5147 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FD, 0x0062 };
    uint32_t const ces[9] = { 0x5147, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_044)
{
    // 130FE 0021;	
    // (𓃾) EGYPTIAN HIEROGLYPH F001	[5148 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FE, 0x0021 };
    uint32_t const ces[9] = { 0x5148, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_045)
{
    // 130FE 003F;	
    // (𓃾) EGYPTIAN HIEROGLYPH F001	[5148 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FE, 0x003F };
    uint32_t const ces[9] = { 0x5148, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_046)
{
    // 130FE 0061;	
    // (𓃾) EGYPTIAN HIEROGLYPH F001	[5148 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FE, 0x0061 };
    uint32_t const ces[9] = { 0x5148, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_047)
{
    // 130FE 0041;	
    // (𓃾) EGYPTIAN HIEROGLYPH F001	[5148 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130FE, 0x0041 };
    uint32_t const ces[9] = { 0x5148, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_048)
{
    // 130FE 0062;	
    // (𓃾) EGYPTIAN HIEROGLYPH F001	[5148 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FE, 0x0062 };
    uint32_t const ces[9] = { 0x5148, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_049)
{
    // 130FF 0021;	
    // (𓃿) EGYPTIAN HIEROGLYPH F001A	[5149 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FF, 0x0021 };
    uint32_t const ces[9] = { 0x5149, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_050)
{
    // 130FF 003F;	
    // (𓃿) EGYPTIAN HIEROGLYPH F001A	[5149 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FF, 0x003F };
    uint32_t const ces[9] = { 0x5149, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_051)
{
    // 130FF 0061;	
    // (𓃿) EGYPTIAN HIEROGLYPH F001A	[5149 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FF, 0x0061 };
    uint32_t const ces[9] = { 0x5149, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_052)
{
    // 130FF 0041;	
    // (𓃿) EGYPTIAN HIEROGLYPH F001A	[5149 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x130FF, 0x0041 };
    uint32_t const ces[9] = { 0x5149, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_053)
{
    // 130FF 0062;	
    // (𓃿) EGYPTIAN HIEROGLYPH F001A	[5149 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x130FF, 0x0062 };
    uint32_t const ces[9] = { 0x5149, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_054)
{
    // 13100 0021;	
    // (𓄀) EGYPTIAN HIEROGLYPH F002	[514A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13100, 0x0021 };
    uint32_t const ces[9] = { 0x514A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_055)
{
    // 13100 003F;	
    // (𓄀) EGYPTIAN HIEROGLYPH F002	[514A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13100, 0x003F };
    uint32_t const ces[9] = { 0x514A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_056)
{
    // 13100 0061;	
    // (𓄀) EGYPTIAN HIEROGLYPH F002	[514A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13100, 0x0061 };
    uint32_t const ces[9] = { 0x514A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_057)
{
    // 13100 0041;	
    // (𓄀) EGYPTIAN HIEROGLYPH F002	[514A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13100, 0x0041 };
    uint32_t const ces[9] = { 0x514A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_058)
{
    // 13100 0062;	
    // (𓄀) EGYPTIAN HIEROGLYPH F002	[514A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13100, 0x0062 };
    uint32_t const ces[9] = { 0x514A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_059)
{
    // 13101 0021;	
    // (𓄁) EGYPTIAN HIEROGLYPH F003	[514B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13101, 0x0021 };
    uint32_t const ces[9] = { 0x514B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_060)
{
    // 13101 003F;	
    // (𓄁) EGYPTIAN HIEROGLYPH F003	[514B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13101, 0x003F };
    uint32_t const ces[9] = { 0x514B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_061)
{
    // 13101 0061;	
    // (𓄁) EGYPTIAN HIEROGLYPH F003	[514B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13101, 0x0061 };
    uint32_t const ces[9] = { 0x514B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_062)
{
    // 13101 0041;	
    // (𓄁) EGYPTIAN HIEROGLYPH F003	[514B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13101, 0x0041 };
    uint32_t const ces[9] = { 0x514B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_063)
{
    // 13101 0062;	
    // (𓄁) EGYPTIAN HIEROGLYPH F003	[514B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13101, 0x0062 };
    uint32_t const ces[9] = { 0x514B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_064)
{
    // 13102 0021;	
    // (𓄂) EGYPTIAN HIEROGLYPH F004	[514C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13102, 0x0021 };
    uint32_t const ces[9] = { 0x514C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_065)
{
    // 13102 003F;	
    // (𓄂) EGYPTIAN HIEROGLYPH F004	[514C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13102, 0x003F };
    uint32_t const ces[9] = { 0x514C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_066)
{
    // 13102 0061;	
    // (𓄂) EGYPTIAN HIEROGLYPH F004	[514C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13102, 0x0061 };
    uint32_t const ces[9] = { 0x514C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_067)
{
    // 13102 0041;	
    // (𓄂) EGYPTIAN HIEROGLYPH F004	[514C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13102, 0x0041 };
    uint32_t const ces[9] = { 0x514C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_068)
{
    // 13102 0062;	
    // (𓄂) EGYPTIAN HIEROGLYPH F004	[514C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13102, 0x0062 };
    uint32_t const ces[9] = { 0x514C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_069)
{
    // 13103 0021;	
    // (𓄃) EGYPTIAN HIEROGLYPH F005	[514D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13103, 0x0021 };
    uint32_t const ces[9] = { 0x514D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_070)
{
    // 13103 003F;	
    // (𓄃) EGYPTIAN HIEROGLYPH F005	[514D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13103, 0x003F };
    uint32_t const ces[9] = { 0x514D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_071)
{
    // 13103 0061;	
    // (𓄃) EGYPTIAN HIEROGLYPH F005	[514D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13103, 0x0061 };
    uint32_t const ces[9] = { 0x514D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_072)
{
    // 13103 0041;	
    // (𓄃) EGYPTIAN HIEROGLYPH F005	[514D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13103, 0x0041 };
    uint32_t const ces[9] = { 0x514D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_073)
{
    // 13103 0062;	
    // (𓄃) EGYPTIAN HIEROGLYPH F005	[514D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13103, 0x0062 };
    uint32_t const ces[9] = { 0x514D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_074)
{
    // 13104 0021;	
    // (𓄄) EGYPTIAN HIEROGLYPH F006	[514E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13104, 0x0021 };
    uint32_t const ces[9] = { 0x514E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_075)
{
    // 13104 003F;	
    // (𓄄) EGYPTIAN HIEROGLYPH F006	[514E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13104, 0x003F };
    uint32_t const ces[9] = { 0x514E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_076)
{
    // 13104 0061;	
    // (𓄄) EGYPTIAN HIEROGLYPH F006	[514E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13104, 0x0061 };
    uint32_t const ces[9] = { 0x514E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_077)
{
    // 13104 0041;	
    // (𓄄) EGYPTIAN HIEROGLYPH F006	[514E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13104, 0x0041 };
    uint32_t const ces[9] = { 0x514E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_078)
{
    // 13104 0062;	
    // (𓄄) EGYPTIAN HIEROGLYPH F006	[514E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13104, 0x0062 };
    uint32_t const ces[9] = { 0x514E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_079)
{
    // 13105 0021;	
    // (𓄅) EGYPTIAN HIEROGLYPH F007	[514F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13105, 0x0021 };
    uint32_t const ces[9] = { 0x514F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_080)
{
    // 13105 003F;	
    // (𓄅) EGYPTIAN HIEROGLYPH F007	[514F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13105, 0x003F };
    uint32_t const ces[9] = { 0x514F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_081)
{
    // 13105 0061;	
    // (𓄅) EGYPTIAN HIEROGLYPH F007	[514F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13105, 0x0061 };
    uint32_t const ces[9] = { 0x514F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_082)
{
    // 13105 0041;	
    // (𓄅) EGYPTIAN HIEROGLYPH F007	[514F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13105, 0x0041 };
    uint32_t const ces[9] = { 0x514F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_083)
{
    // 13105 0062;	
    // (𓄅) EGYPTIAN HIEROGLYPH F007	[514F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13105, 0x0062 };
    uint32_t const ces[9] = { 0x514F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_084)
{
    // 13106 0021;	
    // (𓄆) EGYPTIAN HIEROGLYPH F008	[5150 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13106, 0x0021 };
    uint32_t const ces[9] = { 0x5150, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_085)
{
    // 13106 003F;	
    // (𓄆) EGYPTIAN HIEROGLYPH F008	[5150 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13106, 0x003F };
    uint32_t const ces[9] = { 0x5150, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_086)
{
    // 13106 0061;	
    // (𓄆) EGYPTIAN HIEROGLYPH F008	[5150 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13106, 0x0061 };
    uint32_t const ces[9] = { 0x5150, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_087)
{
    // 13106 0041;	
    // (𓄆) EGYPTIAN HIEROGLYPH F008	[5150 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13106, 0x0041 };
    uint32_t const ces[9] = { 0x5150, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_088)
{
    // 13106 0062;	
    // (𓄆) EGYPTIAN HIEROGLYPH F008	[5150 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13106, 0x0062 };
    uint32_t const ces[9] = { 0x5150, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_089)
{
    // 13107 0021;	
    // (𓄇) EGYPTIAN HIEROGLYPH F009	[5151 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13107, 0x0021 };
    uint32_t const ces[9] = { 0x5151, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_090)
{
    // 13107 003F;	
    // (𓄇) EGYPTIAN HIEROGLYPH F009	[5151 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13107, 0x003F };
    uint32_t const ces[9] = { 0x5151, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_091)
{
    // 13107 0061;	
    // (𓄇) EGYPTIAN HIEROGLYPH F009	[5151 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13107, 0x0061 };
    uint32_t const ces[9] = { 0x5151, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_092)
{
    // 13107 0041;	
    // (𓄇) EGYPTIAN HIEROGLYPH F009	[5151 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13107, 0x0041 };
    uint32_t const ces[9] = { 0x5151, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_093)
{
    // 13107 0062;	
    // (𓄇) EGYPTIAN HIEROGLYPH F009	[5151 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13107, 0x0062 };
    uint32_t const ces[9] = { 0x5151, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_094)
{
    // 13108 0021;	
    // (𓄈) EGYPTIAN HIEROGLYPH F010	[5152 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13108, 0x0021 };
    uint32_t const ces[9] = { 0x5152, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_095)
{
    // 13108 003F;	
    // (𓄈) EGYPTIAN HIEROGLYPH F010	[5152 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13108, 0x003F };
    uint32_t const ces[9] = { 0x5152, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_096)
{
    // 13108 0061;	
    // (𓄈) EGYPTIAN HIEROGLYPH F010	[5152 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13108, 0x0061 };
    uint32_t const ces[9] = { 0x5152, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_097)
{
    // 13108 0041;	
    // (𓄈) EGYPTIAN HIEROGLYPH F010	[5152 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13108, 0x0041 };
    uint32_t const ces[9] = { 0x5152, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_098)
{
    // 13108 0062;	
    // (𓄈) EGYPTIAN HIEROGLYPH F010	[5152 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13108, 0x0062 };
    uint32_t const ces[9] = { 0x5152, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_099)
{
    // 13109 0021;	
    // (𓄉) EGYPTIAN HIEROGLYPH F011	[5153 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13109, 0x0021 };
    uint32_t const ces[9] = { 0x5153, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_100)
{
    // 13109 003F;	
    // (𓄉) EGYPTIAN HIEROGLYPH F011	[5153 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13109, 0x003F };
    uint32_t const ces[9] = { 0x5153, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_101)
{
    // 13109 0061;	
    // (𓄉) EGYPTIAN HIEROGLYPH F011	[5153 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13109, 0x0061 };
    uint32_t const ces[9] = { 0x5153, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_102)
{
    // 13109 0041;	
    // (𓄉) EGYPTIAN HIEROGLYPH F011	[5153 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13109, 0x0041 };
    uint32_t const ces[9] = { 0x5153, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_103)
{
    // 13109 0062;	
    // (𓄉) EGYPTIAN HIEROGLYPH F011	[5153 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13109, 0x0062 };
    uint32_t const ces[9] = { 0x5153, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_104)
{
    // 1310A 0021;	
    // (𓄊) EGYPTIAN HIEROGLYPH F012	[5154 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310A, 0x0021 };
    uint32_t const ces[9] = { 0x5154, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_105)
{
    // 1310A 003F;	
    // (𓄊) EGYPTIAN HIEROGLYPH F012	[5154 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310A, 0x003F };
    uint32_t const ces[9] = { 0x5154, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_106)
{
    // 1310A 0061;	
    // (𓄊) EGYPTIAN HIEROGLYPH F012	[5154 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310A, 0x0061 };
    uint32_t const ces[9] = { 0x5154, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_107)
{
    // 1310A 0041;	
    // (𓄊) EGYPTIAN HIEROGLYPH F012	[5154 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1310A, 0x0041 };
    uint32_t const ces[9] = { 0x5154, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_108)
{
    // 1310A 0062;	
    // (𓄊) EGYPTIAN HIEROGLYPH F012	[5154 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310A, 0x0062 };
    uint32_t const ces[9] = { 0x5154, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_109)
{
    // 1310B 0021;	
    // (𓄋) EGYPTIAN HIEROGLYPH F013	[5155 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310B, 0x0021 };
    uint32_t const ces[9] = { 0x5155, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_110)
{
    // 1310B 003F;	
    // (𓄋) EGYPTIAN HIEROGLYPH F013	[5155 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310B, 0x003F };
    uint32_t const ces[9] = { 0x5155, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_111)
{
    // 1310B 0061;	
    // (𓄋) EGYPTIAN HIEROGLYPH F013	[5155 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310B, 0x0061 };
    uint32_t const ces[9] = { 0x5155, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_112)
{
    // 1310B 0041;	
    // (𓄋) EGYPTIAN HIEROGLYPH F013	[5155 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1310B, 0x0041 };
    uint32_t const ces[9] = { 0x5155, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_113)
{
    // 1310B 0062;	
    // (𓄋) EGYPTIAN HIEROGLYPH F013	[5155 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310B, 0x0062 };
    uint32_t const ces[9] = { 0x5155, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_114)
{
    // 1310C 0021;	
    // (𓄌) EGYPTIAN HIEROGLYPH F013A	[5156 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310C, 0x0021 };
    uint32_t const ces[9] = { 0x5156, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_115)
{
    // 1310C 003F;	
    // (𓄌) EGYPTIAN HIEROGLYPH F013A	[5156 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310C, 0x003F };
    uint32_t const ces[9] = { 0x5156, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_116)
{
    // 1310C 0061;	
    // (𓄌) EGYPTIAN HIEROGLYPH F013A	[5156 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310C, 0x0061 };
    uint32_t const ces[9] = { 0x5156, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_117)
{
    // 1310C 0041;	
    // (𓄌) EGYPTIAN HIEROGLYPH F013A	[5156 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1310C, 0x0041 };
    uint32_t const ces[9] = { 0x5156, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_118)
{
    // 1310C 0062;	
    // (𓄌) EGYPTIAN HIEROGLYPH F013A	[5156 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310C, 0x0062 };
    uint32_t const ces[9] = { 0x5156, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_119)
{
    // 1310D 0021;	
    // (𓄍) EGYPTIAN HIEROGLYPH F014	[5157 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310D, 0x0021 };
    uint32_t const ces[9] = { 0x5157, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_120)
{
    // 1310D 003F;	
    // (𓄍) EGYPTIAN HIEROGLYPH F014	[5157 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310D, 0x003F };
    uint32_t const ces[9] = { 0x5157, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_121)
{
    // 1310D 0061;	
    // (𓄍) EGYPTIAN HIEROGLYPH F014	[5157 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310D, 0x0061 };
    uint32_t const ces[9] = { 0x5157, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_122)
{
    // 1310D 0041;	
    // (𓄍) EGYPTIAN HIEROGLYPH F014	[5157 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1310D, 0x0041 };
    uint32_t const ces[9] = { 0x5157, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_123)
{
    // 1310D 0062;	
    // (𓄍) EGYPTIAN HIEROGLYPH F014	[5157 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310D, 0x0062 };
    uint32_t const ces[9] = { 0x5157, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_124)
{
    // 1310E 0021;	
    // (𓄎) EGYPTIAN HIEROGLYPH F015	[5158 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310E, 0x0021 };
    uint32_t const ces[9] = { 0x5158, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_125)
{
    // 1310E 003F;	
    // (𓄎) EGYPTIAN HIEROGLYPH F015	[5158 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310E, 0x003F };
    uint32_t const ces[9] = { 0x5158, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_126)
{
    // 1310E 0061;	
    // (𓄎) EGYPTIAN HIEROGLYPH F015	[5158 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310E, 0x0061 };
    uint32_t const ces[9] = { 0x5158, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_127)
{
    // 1310E 0041;	
    // (𓄎) EGYPTIAN HIEROGLYPH F015	[5158 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1310E, 0x0041 };
    uint32_t const ces[9] = { 0x5158, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_128)
{
    // 1310E 0062;	
    // (𓄎) EGYPTIAN HIEROGLYPH F015	[5158 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310E, 0x0062 };
    uint32_t const ces[9] = { 0x5158, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_129)
{
    // 1310F 0021;	
    // (𓄏) EGYPTIAN HIEROGLYPH F016	[5159 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310F, 0x0021 };
    uint32_t const ces[9] = { 0x5159, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_130)
{
    // 1310F 003F;	
    // (𓄏) EGYPTIAN HIEROGLYPH F016	[5159 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310F, 0x003F };
    uint32_t const ces[9] = { 0x5159, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_131)
{
    // 1310F 0061;	
    // (𓄏) EGYPTIAN HIEROGLYPH F016	[5159 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310F, 0x0061 };
    uint32_t const ces[9] = { 0x5159, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_132)
{
    // 1310F 0041;	
    // (𓄏) EGYPTIAN HIEROGLYPH F016	[5159 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1310F, 0x0041 };
    uint32_t const ces[9] = { 0x5159, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_133)
{
    // 1310F 0062;	
    // (𓄏) EGYPTIAN HIEROGLYPH F016	[5159 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1310F, 0x0062 };
    uint32_t const ces[9] = { 0x5159, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_134)
{
    // 13110 0021;	
    // (𓄐) EGYPTIAN HIEROGLYPH F017	[515A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13110, 0x0021 };
    uint32_t const ces[9] = { 0x515A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_135)
{
    // 13110 003F;	
    // (𓄐) EGYPTIAN HIEROGLYPH F017	[515A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13110, 0x003F };
    uint32_t const ces[9] = { 0x515A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_136)
{
    // 13110 0061;	
    // (𓄐) EGYPTIAN HIEROGLYPH F017	[515A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13110, 0x0061 };
    uint32_t const ces[9] = { 0x515A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_137)
{
    // 13110 0041;	
    // (𓄐) EGYPTIAN HIEROGLYPH F017	[515A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13110, 0x0041 };
    uint32_t const ces[9] = { 0x515A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_138)
{
    // 13110 0062;	
    // (𓄐) EGYPTIAN HIEROGLYPH F017	[515A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13110, 0x0062 };
    uint32_t const ces[9] = { 0x515A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_139)
{
    // 13111 0021;	
    // (𓄑) EGYPTIAN HIEROGLYPH F018	[515B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13111, 0x0021 };
    uint32_t const ces[9] = { 0x515B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_140)
{
    // 13111 003F;	
    // (𓄑) EGYPTIAN HIEROGLYPH F018	[515B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13111, 0x003F };
    uint32_t const ces[9] = { 0x515B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_141)
{
    // 13111 0061;	
    // (𓄑) EGYPTIAN HIEROGLYPH F018	[515B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13111, 0x0061 };
    uint32_t const ces[9] = { 0x515B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_142)
{
    // 13111 0041;	
    // (𓄑) EGYPTIAN HIEROGLYPH F018	[515B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13111, 0x0041 };
    uint32_t const ces[9] = { 0x515B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_143)
{
    // 13111 0062;	
    // (𓄑) EGYPTIAN HIEROGLYPH F018	[515B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13111, 0x0062 };
    uint32_t const ces[9] = { 0x515B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_144)
{
    // 13112 0021;	
    // (𓄒) EGYPTIAN HIEROGLYPH F019	[515C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13112, 0x0021 };
    uint32_t const ces[9] = { 0x515C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_145)
{
    // 13112 003F;	
    // (𓄒) EGYPTIAN HIEROGLYPH F019	[515C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13112, 0x003F };
    uint32_t const ces[9] = { 0x515C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_146)
{
    // 13112 0061;	
    // (𓄒) EGYPTIAN HIEROGLYPH F019	[515C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13112, 0x0061 };
    uint32_t const ces[9] = { 0x515C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_147)
{
    // 13112 0041;	
    // (𓄒) EGYPTIAN HIEROGLYPH F019	[515C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13112, 0x0041 };
    uint32_t const ces[9] = { 0x515C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_148)
{
    // 13112 0062;	
    // (𓄒) EGYPTIAN HIEROGLYPH F019	[515C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13112, 0x0062 };
    uint32_t const ces[9] = { 0x515C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_149)
{
    // 13113 0021;	
    // (𓄓) EGYPTIAN HIEROGLYPH F020	[515D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13113, 0x0021 };
    uint32_t const ces[9] = { 0x515D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_150)
{
    // 13113 003F;	
    // (𓄓) EGYPTIAN HIEROGLYPH F020	[515D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13113, 0x003F };
    uint32_t const ces[9] = { 0x515D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_151)
{
    // 13113 0061;	
    // (𓄓) EGYPTIAN HIEROGLYPH F020	[515D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13113, 0x0061 };
    uint32_t const ces[9] = { 0x515D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_152)
{
    // 13113 0041;	
    // (𓄓) EGYPTIAN HIEROGLYPH F020	[515D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13113, 0x0041 };
    uint32_t const ces[9] = { 0x515D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_153)
{
    // 13113 0062;	
    // (𓄓) EGYPTIAN HIEROGLYPH F020	[515D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13113, 0x0062 };
    uint32_t const ces[9] = { 0x515D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_154)
{
    // 13114 0021;	
    // (𓄔) EGYPTIAN HIEROGLYPH F021	[515E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13114, 0x0021 };
    uint32_t const ces[9] = { 0x515E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_155)
{
    // 13114 003F;	
    // (𓄔) EGYPTIAN HIEROGLYPH F021	[515E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13114, 0x003F };
    uint32_t const ces[9] = { 0x515E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_156)
{
    // 13114 0061;	
    // (𓄔) EGYPTIAN HIEROGLYPH F021	[515E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13114, 0x0061 };
    uint32_t const ces[9] = { 0x515E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_157)
{
    // 13114 0041;	
    // (𓄔) EGYPTIAN HIEROGLYPH F021	[515E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13114, 0x0041 };
    uint32_t const ces[9] = { 0x515E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_158)
{
    // 13114 0062;	
    // (𓄔) EGYPTIAN HIEROGLYPH F021	[515E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13114, 0x0062 };
    uint32_t const ces[9] = { 0x515E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_159)
{
    // 13115 0021;	
    // (𓄕) EGYPTIAN HIEROGLYPH F021A	[515F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13115, 0x0021 };
    uint32_t const ces[9] = { 0x515F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_160)
{
    // 13115 003F;	
    // (𓄕) EGYPTIAN HIEROGLYPH F021A	[515F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13115, 0x003F };
    uint32_t const ces[9] = { 0x515F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_161)
{
    // 13115 0061;	
    // (𓄕) EGYPTIAN HIEROGLYPH F021A	[515F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13115, 0x0061 };
    uint32_t const ces[9] = { 0x515F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_162)
{
    // 13115 0041;	
    // (𓄕) EGYPTIAN HIEROGLYPH F021A	[515F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13115, 0x0041 };
    uint32_t const ces[9] = { 0x515F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_163)
{
    // 13115 0062;	
    // (𓄕) EGYPTIAN HIEROGLYPH F021A	[515F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13115, 0x0062 };
    uint32_t const ces[9] = { 0x515F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_164)
{
    // 13116 0021;	
    // (𓄖) EGYPTIAN HIEROGLYPH F022	[5160 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13116, 0x0021 };
    uint32_t const ces[9] = { 0x5160, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_165)
{
    // 13116 003F;	
    // (𓄖) EGYPTIAN HIEROGLYPH F022	[5160 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13116, 0x003F };
    uint32_t const ces[9] = { 0x5160, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_166)
{
    // 13116 0061;	
    // (𓄖) EGYPTIAN HIEROGLYPH F022	[5160 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13116, 0x0061 };
    uint32_t const ces[9] = { 0x5160, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_167)
{
    // 13116 0041;	
    // (𓄖) EGYPTIAN HIEROGLYPH F022	[5160 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13116, 0x0041 };
    uint32_t const ces[9] = { 0x5160, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_168)
{
    // 13116 0062;	
    // (𓄖) EGYPTIAN HIEROGLYPH F022	[5160 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13116, 0x0062 };
    uint32_t const ces[9] = { 0x5160, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_169)
{
    // 13117 0021;	
    // (𓄗) EGYPTIAN HIEROGLYPH F023	[5161 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13117, 0x0021 };
    uint32_t const ces[9] = { 0x5161, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_170)
{
    // 13117 003F;	
    // (𓄗) EGYPTIAN HIEROGLYPH F023	[5161 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13117, 0x003F };
    uint32_t const ces[9] = { 0x5161, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_171)
{
    // 13117 0061;	
    // (𓄗) EGYPTIAN HIEROGLYPH F023	[5161 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13117, 0x0061 };
    uint32_t const ces[9] = { 0x5161, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_172)
{
    // 13117 0041;	
    // (𓄗) EGYPTIAN HIEROGLYPH F023	[5161 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13117, 0x0041 };
    uint32_t const ces[9] = { 0x5161, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_173)
{
    // 13117 0062;	
    // (𓄗) EGYPTIAN HIEROGLYPH F023	[5161 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13117, 0x0062 };
    uint32_t const ces[9] = { 0x5161, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_174)
{
    // 13118 0021;	
    // (𓄘) EGYPTIAN HIEROGLYPH F024	[5162 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13118, 0x0021 };
    uint32_t const ces[9] = { 0x5162, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_175)
{
    // 13118 003F;	
    // (𓄘) EGYPTIAN HIEROGLYPH F024	[5162 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13118, 0x003F };
    uint32_t const ces[9] = { 0x5162, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_176)
{
    // 13118 0061;	
    // (𓄘) EGYPTIAN HIEROGLYPH F024	[5162 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13118, 0x0061 };
    uint32_t const ces[9] = { 0x5162, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_177)
{
    // 13118 0041;	
    // (𓄘) EGYPTIAN HIEROGLYPH F024	[5162 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13118, 0x0041 };
    uint32_t const ces[9] = { 0x5162, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_178)
{
    // 13118 0062;	
    // (𓄘) EGYPTIAN HIEROGLYPH F024	[5162 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13118, 0x0062 };
    uint32_t const ces[9] = { 0x5162, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_179)
{
    // 13119 0021;	
    // (𓄙) EGYPTIAN HIEROGLYPH F025	[5163 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13119, 0x0021 };
    uint32_t const ces[9] = { 0x5163, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_180)
{
    // 13119 003F;	
    // (𓄙) EGYPTIAN HIEROGLYPH F025	[5163 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13119, 0x003F };
    uint32_t const ces[9] = { 0x5163, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_181)
{
    // 13119 0061;	
    // (𓄙) EGYPTIAN HIEROGLYPH F025	[5163 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13119, 0x0061 };
    uint32_t const ces[9] = { 0x5163, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_182)
{
    // 13119 0041;	
    // (𓄙) EGYPTIAN HIEROGLYPH F025	[5163 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13119, 0x0041 };
    uint32_t const ces[9] = { 0x5163, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_183)
{
    // 13119 0062;	
    // (𓄙) EGYPTIAN HIEROGLYPH F025	[5163 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13119, 0x0062 };
    uint32_t const ces[9] = { 0x5163, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_184)
{
    // 1311A 0021;	
    // (𓄚) EGYPTIAN HIEROGLYPH F026	[5164 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311A, 0x0021 };
    uint32_t const ces[9] = { 0x5164, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_185)
{
    // 1311A 003F;	
    // (𓄚) EGYPTIAN HIEROGLYPH F026	[5164 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311A, 0x003F };
    uint32_t const ces[9] = { 0x5164, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_186)
{
    // 1311A 0061;	
    // (𓄚) EGYPTIAN HIEROGLYPH F026	[5164 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311A, 0x0061 };
    uint32_t const ces[9] = { 0x5164, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_187)
{
    // 1311A 0041;	
    // (𓄚) EGYPTIAN HIEROGLYPH F026	[5164 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1311A, 0x0041 };
    uint32_t const ces[9] = { 0x5164, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_188)
{
    // 1311A 0062;	
    // (𓄚) EGYPTIAN HIEROGLYPH F026	[5164 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311A, 0x0062 };
    uint32_t const ces[9] = { 0x5164, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_189)
{
    // 1311B 0021;	
    // (𓄛) EGYPTIAN HIEROGLYPH F027	[5165 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311B, 0x0021 };
    uint32_t const ces[9] = { 0x5165, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_190)
{
    // 1311B 003F;	
    // (𓄛) EGYPTIAN HIEROGLYPH F027	[5165 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311B, 0x003F };
    uint32_t const ces[9] = { 0x5165, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_191)
{
    // 1311B 0061;	
    // (𓄛) EGYPTIAN HIEROGLYPH F027	[5165 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311B, 0x0061 };
    uint32_t const ces[9] = { 0x5165, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_192)
{
    // 1311B 0041;	
    // (𓄛) EGYPTIAN HIEROGLYPH F027	[5165 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1311B, 0x0041 };
    uint32_t const ces[9] = { 0x5165, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_193)
{
    // 1311B 0062;	
    // (𓄛) EGYPTIAN HIEROGLYPH F027	[5165 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311B, 0x0062 };
    uint32_t const ces[9] = { 0x5165, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_194)
{
    // 1311C 0021;	
    // (𓄜) EGYPTIAN HIEROGLYPH F028	[5166 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311C, 0x0021 };
    uint32_t const ces[9] = { 0x5166, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_195)
{
    // 1311C 003F;	
    // (𓄜) EGYPTIAN HIEROGLYPH F028	[5166 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311C, 0x003F };
    uint32_t const ces[9] = { 0x5166, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_196)
{
    // 1311C 0061;	
    // (𓄜) EGYPTIAN HIEROGLYPH F028	[5166 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311C, 0x0061 };
    uint32_t const ces[9] = { 0x5166, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_197)
{
    // 1311C 0041;	
    // (𓄜) EGYPTIAN HIEROGLYPH F028	[5166 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1311C, 0x0041 };
    uint32_t const ces[9] = { 0x5166, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_198)
{
    // 1311C 0062;	
    // (𓄜) EGYPTIAN HIEROGLYPH F028	[5166 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311C, 0x0062 };
    uint32_t const ces[9] = { 0x5166, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_199)
{
    // 1311D 0021;	
    // (𓄝) EGYPTIAN HIEROGLYPH F029	[5167 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311D, 0x0021 };
    uint32_t const ces[9] = { 0x5167, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_200)
{
    // 1311D 003F;	
    // (𓄝) EGYPTIAN HIEROGLYPH F029	[5167 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311D, 0x003F };
    uint32_t const ces[9] = { 0x5167, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_201)
{
    // 1311D 0061;	
    // (𓄝) EGYPTIAN HIEROGLYPH F029	[5167 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311D, 0x0061 };
    uint32_t const ces[9] = { 0x5167, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_202)
{
    // 1311D 0041;	
    // (𓄝) EGYPTIAN HIEROGLYPH F029	[5167 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1311D, 0x0041 };
    uint32_t const ces[9] = { 0x5167, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_203)
{
    // 1311D 0062;	
    // (𓄝) EGYPTIAN HIEROGLYPH F029	[5167 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311D, 0x0062 };
    uint32_t const ces[9] = { 0x5167, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_204)
{
    // 1311E 0021;	
    // (𓄞) EGYPTIAN HIEROGLYPH F030	[5168 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311E, 0x0021 };
    uint32_t const ces[9] = { 0x5168, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_205)
{
    // 1311E 003F;	
    // (𓄞) EGYPTIAN HIEROGLYPH F030	[5168 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311E, 0x003F };
    uint32_t const ces[9] = { 0x5168, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_206)
{
    // 1311E 0061;	
    // (𓄞) EGYPTIAN HIEROGLYPH F030	[5168 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311E, 0x0061 };
    uint32_t const ces[9] = { 0x5168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_207)
{
    // 1311E 0041;	
    // (𓄞) EGYPTIAN HIEROGLYPH F030	[5168 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1311E, 0x0041 };
    uint32_t const ces[9] = { 0x5168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_208)
{
    // 1311E 0062;	
    // (𓄞) EGYPTIAN HIEROGLYPH F030	[5168 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311E, 0x0062 };
    uint32_t const ces[9] = { 0x5168, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_209)
{
    // 1311F 0021;	
    // (𓄟) EGYPTIAN HIEROGLYPH F031	[5169 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311F, 0x0021 };
    uint32_t const ces[9] = { 0x5169, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_210)
{
    // 1311F 003F;	
    // (𓄟) EGYPTIAN HIEROGLYPH F031	[5169 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311F, 0x003F };
    uint32_t const ces[9] = { 0x5169, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_211)
{
    // 1311F 0061;	
    // (𓄟) EGYPTIAN HIEROGLYPH F031	[5169 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311F, 0x0061 };
    uint32_t const ces[9] = { 0x5169, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_212)
{
    // 1311F 0041;	
    // (𓄟) EGYPTIAN HIEROGLYPH F031	[5169 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1311F, 0x0041 };
    uint32_t const ces[9] = { 0x5169, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_213)
{
    // 1311F 0062;	
    // (𓄟) EGYPTIAN HIEROGLYPH F031	[5169 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1311F, 0x0062 };
    uint32_t const ces[9] = { 0x5169, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_214)
{
    // 13120 0021;	
    // (𓄠) EGYPTIAN HIEROGLYPH F031A	[516A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13120, 0x0021 };
    uint32_t const ces[9] = { 0x516A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_215)
{
    // 13120 003F;	
    // (𓄠) EGYPTIAN HIEROGLYPH F031A	[516A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13120, 0x003F };
    uint32_t const ces[9] = { 0x516A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_216)
{
    // 13120 0061;	
    // (𓄠) EGYPTIAN HIEROGLYPH F031A	[516A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13120, 0x0061 };
    uint32_t const ces[9] = { 0x516A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_217)
{
    // 13120 0041;	
    // (𓄠) EGYPTIAN HIEROGLYPH F031A	[516A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13120, 0x0041 };
    uint32_t const ces[9] = { 0x516A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_218)
{
    // 13120 0062;	
    // (𓄠) EGYPTIAN HIEROGLYPH F031A	[516A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13120, 0x0062 };
    uint32_t const ces[9] = { 0x516A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_219)
{
    // 13121 0021;	
    // (𓄡) EGYPTIAN HIEROGLYPH F032	[516B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13121, 0x0021 };
    uint32_t const ces[9] = { 0x516B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_220)
{
    // 13121 003F;	
    // (𓄡) EGYPTIAN HIEROGLYPH F032	[516B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13121, 0x003F };
    uint32_t const ces[9] = { 0x516B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_221)
{
    // 13121 0061;	
    // (𓄡) EGYPTIAN HIEROGLYPH F032	[516B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13121, 0x0061 };
    uint32_t const ces[9] = { 0x516B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_222)
{
    // 13121 0041;	
    // (𓄡) EGYPTIAN HIEROGLYPH F032	[516B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13121, 0x0041 };
    uint32_t const ces[9] = { 0x516B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_223)
{
    // 13121 0062;	
    // (𓄡) EGYPTIAN HIEROGLYPH F032	[516B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13121, 0x0062 };
    uint32_t const ces[9] = { 0x516B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_224)
{
    // 13122 0021;	
    // (𓄢) EGYPTIAN HIEROGLYPH F033	[516C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13122, 0x0021 };
    uint32_t const ces[9] = { 0x516C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_225)
{
    // 13122 003F;	
    // (𓄢) EGYPTIAN HIEROGLYPH F033	[516C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13122, 0x003F };
    uint32_t const ces[9] = { 0x516C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_226)
{
    // 13122 0061;	
    // (𓄢) EGYPTIAN HIEROGLYPH F033	[516C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13122, 0x0061 };
    uint32_t const ces[9] = { 0x516C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_227)
{
    // 13122 0041;	
    // (𓄢) EGYPTIAN HIEROGLYPH F033	[516C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13122, 0x0041 };
    uint32_t const ces[9] = { 0x516C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_228)
{
    // 13122 0062;	
    // (𓄢) EGYPTIAN HIEROGLYPH F033	[516C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13122, 0x0062 };
    uint32_t const ces[9] = { 0x516C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_229)
{
    // 13123 0021;	
    // (𓄣) EGYPTIAN HIEROGLYPH F034	[516D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13123, 0x0021 };
    uint32_t const ces[9] = { 0x516D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_230)
{
    // 13123 003F;	
    // (𓄣) EGYPTIAN HIEROGLYPH F034	[516D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13123, 0x003F };
    uint32_t const ces[9] = { 0x516D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_231)
{
    // 13123 0061;	
    // (𓄣) EGYPTIAN HIEROGLYPH F034	[516D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13123, 0x0061 };
    uint32_t const ces[9] = { 0x516D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_232)
{
    // 13123 0041;	
    // (𓄣) EGYPTIAN HIEROGLYPH F034	[516D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13123, 0x0041 };
    uint32_t const ces[9] = { 0x516D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_233)
{
    // 13123 0062;	
    // (𓄣) EGYPTIAN HIEROGLYPH F034	[516D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13123, 0x0062 };
    uint32_t const ces[9] = { 0x516D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_234)
{
    // 13124 0021;	
    // (𓄤) EGYPTIAN HIEROGLYPH F035	[516E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13124, 0x0021 };
    uint32_t const ces[9] = { 0x516E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_235)
{
    // 13124 003F;	
    // (𓄤) EGYPTIAN HIEROGLYPH F035	[516E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13124, 0x003F };
    uint32_t const ces[9] = { 0x516E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_236)
{
    // 13124 0061;	
    // (𓄤) EGYPTIAN HIEROGLYPH F035	[516E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13124, 0x0061 };
    uint32_t const ces[9] = { 0x516E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_237)
{
    // 13124 0041;	
    // (𓄤) EGYPTIAN HIEROGLYPH F035	[516E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13124, 0x0041 };
    uint32_t const ces[9] = { 0x516E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_238)
{
    // 13124 0062;	
    // (𓄤) EGYPTIAN HIEROGLYPH F035	[516E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13124, 0x0062 };
    uint32_t const ces[9] = { 0x516E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_239)
{
    // 13125 0021;	
    // (𓄥) EGYPTIAN HIEROGLYPH F036	[516F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13125, 0x0021 };
    uint32_t const ces[9] = { 0x516F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_240)
{
    // 13125 003F;	
    // (𓄥) EGYPTIAN HIEROGLYPH F036	[516F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13125, 0x003F };
    uint32_t const ces[9] = { 0x516F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_241)
{
    // 13125 0061;	
    // (𓄥) EGYPTIAN HIEROGLYPH F036	[516F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13125, 0x0061 };
    uint32_t const ces[9] = { 0x516F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_242)
{
    // 13125 0041;	
    // (𓄥) EGYPTIAN HIEROGLYPH F036	[516F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13125, 0x0041 };
    uint32_t const ces[9] = { 0x516F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_243)
{
    // 13125 0062;	
    // (𓄥) EGYPTIAN HIEROGLYPH F036	[516F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13125, 0x0062 };
    uint32_t const ces[9] = { 0x516F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_244)
{
    // 13126 0021;	
    // (𓄦) EGYPTIAN HIEROGLYPH F037	[5170 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13126, 0x0021 };
    uint32_t const ces[9] = { 0x5170, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_245)
{
    // 13126 003F;	
    // (𓄦) EGYPTIAN HIEROGLYPH F037	[5170 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13126, 0x003F };
    uint32_t const ces[9] = { 0x5170, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_246)
{
    // 13126 0061;	
    // (𓄦) EGYPTIAN HIEROGLYPH F037	[5170 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13126, 0x0061 };
    uint32_t const ces[9] = { 0x5170, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_247)
{
    // 13126 0041;	
    // (𓄦) EGYPTIAN HIEROGLYPH F037	[5170 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13126, 0x0041 };
    uint32_t const ces[9] = { 0x5170, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_248)
{
    // 13126 0062;	
    // (𓄦) EGYPTIAN HIEROGLYPH F037	[5170 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13126, 0x0062 };
    uint32_t const ces[9] = { 0x5170, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_249)
{
    // 13127 0021;	
    // (𓄧) EGYPTIAN HIEROGLYPH F037A	[5171 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13127, 0x0021 };
    uint32_t const ces[9] = { 0x5171, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_250)
{
    // 13127 003F;	
    // (𓄧) EGYPTIAN HIEROGLYPH F037A	[5171 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13127, 0x003F };
    uint32_t const ces[9] = { 0x5171, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_251)
{
    // 13127 0061;	
    // (𓄧) EGYPTIAN HIEROGLYPH F037A	[5171 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13127, 0x0061 };
    uint32_t const ces[9] = { 0x5171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_252)
{
    // 13127 0041;	
    // (𓄧) EGYPTIAN HIEROGLYPH F037A	[5171 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13127, 0x0041 };
    uint32_t const ces[9] = { 0x5171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_253)
{
    // 13127 0062;	
    // (𓄧) EGYPTIAN HIEROGLYPH F037A	[5171 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13127, 0x0062 };
    uint32_t const ces[9] = { 0x5171, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_254)
{
    // 13128 0021;	
    // (𓄨) EGYPTIAN HIEROGLYPH F038	[5172 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13128, 0x0021 };
    uint32_t const ces[9] = { 0x5172, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_255)
{
    // 13128 003F;	
    // (𓄨) EGYPTIAN HIEROGLYPH F038	[5172 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13128, 0x003F };
    uint32_t const ces[9] = { 0x5172, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_256)
{
    // 13128 0061;	
    // (𓄨) EGYPTIAN HIEROGLYPH F038	[5172 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13128, 0x0061 };
    uint32_t const ces[9] = { 0x5172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_257)
{
    // 13128 0041;	
    // (𓄨) EGYPTIAN HIEROGLYPH F038	[5172 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13128, 0x0041 };
    uint32_t const ces[9] = { 0x5172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_258)
{
    // 13128 0062;	
    // (𓄨) EGYPTIAN HIEROGLYPH F038	[5172 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13128, 0x0062 };
    uint32_t const ces[9] = { 0x5172, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_259)
{
    // 13129 0021;	
    // (𓄩) EGYPTIAN HIEROGLYPH F038A	[5173 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13129, 0x0021 };
    uint32_t const ces[9] = { 0x5173, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_260)
{
    // 13129 003F;	
    // (𓄩) EGYPTIAN HIEROGLYPH F038A	[5173 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13129, 0x003F };
    uint32_t const ces[9] = { 0x5173, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_261)
{
    // 13129 0061;	
    // (𓄩) EGYPTIAN HIEROGLYPH F038A	[5173 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13129, 0x0061 };
    uint32_t const ces[9] = { 0x5173, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_262)
{
    // 13129 0041;	
    // (𓄩) EGYPTIAN HIEROGLYPH F038A	[5173 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13129, 0x0041 };
    uint32_t const ces[9] = { 0x5173, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_263)
{
    // 13129 0062;	
    // (𓄩) EGYPTIAN HIEROGLYPH F038A	[5173 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13129, 0x0062 };
    uint32_t const ces[9] = { 0x5173, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_264)
{
    // 1312A 0021;	
    // (𓄪) EGYPTIAN HIEROGLYPH F039	[5174 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312A, 0x0021 };
    uint32_t const ces[9] = { 0x5174, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_265)
{
    // 1312A 003F;	
    // (𓄪) EGYPTIAN HIEROGLYPH F039	[5174 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312A, 0x003F };
    uint32_t const ces[9] = { 0x5174, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_266)
{
    // 1312A 0061;	
    // (𓄪) EGYPTIAN HIEROGLYPH F039	[5174 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312A, 0x0061 };
    uint32_t const ces[9] = { 0x5174, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_267)
{
    // 1312A 0041;	
    // (𓄪) EGYPTIAN HIEROGLYPH F039	[5174 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1312A, 0x0041 };
    uint32_t const ces[9] = { 0x5174, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_268)
{
    // 1312A 0062;	
    // (𓄪) EGYPTIAN HIEROGLYPH F039	[5174 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312A, 0x0062 };
    uint32_t const ces[9] = { 0x5174, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_269)
{
    // 1312B 0021;	
    // (𓄫) EGYPTIAN HIEROGLYPH F040	[5175 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312B, 0x0021 };
    uint32_t const ces[9] = { 0x5175, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_270)
{
    // 1312B 003F;	
    // (𓄫) EGYPTIAN HIEROGLYPH F040	[5175 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312B, 0x003F };
    uint32_t const ces[9] = { 0x5175, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_271)
{
    // 1312B 0061;	
    // (𓄫) EGYPTIAN HIEROGLYPH F040	[5175 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312B, 0x0061 };
    uint32_t const ces[9] = { 0x5175, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_272)
{
    // 1312B 0041;	
    // (𓄫) EGYPTIAN HIEROGLYPH F040	[5175 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1312B, 0x0041 };
    uint32_t const ces[9] = { 0x5175, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_273)
{
    // 1312B 0062;	
    // (𓄫) EGYPTIAN HIEROGLYPH F040	[5175 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312B, 0x0062 };
    uint32_t const ces[9] = { 0x5175, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_274)
{
    // 1312C 0021;	
    // (𓄬) EGYPTIAN HIEROGLYPH F041	[5176 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312C, 0x0021 };
    uint32_t const ces[9] = { 0x5176, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_275)
{
    // 1312C 003F;	
    // (𓄬) EGYPTIAN HIEROGLYPH F041	[5176 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312C, 0x003F };
    uint32_t const ces[9] = { 0x5176, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_276)
{
    // 1312C 0061;	
    // (𓄬) EGYPTIAN HIEROGLYPH F041	[5176 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312C, 0x0061 };
    uint32_t const ces[9] = { 0x5176, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_277)
{
    // 1312C 0041;	
    // (𓄬) EGYPTIAN HIEROGLYPH F041	[5176 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1312C, 0x0041 };
    uint32_t const ces[9] = { 0x5176, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_278)
{
    // 1312C 0062;	
    // (𓄬) EGYPTIAN HIEROGLYPH F041	[5176 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312C, 0x0062 };
    uint32_t const ces[9] = { 0x5176, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_279)
{
    // 1312D 0021;	
    // (𓄭) EGYPTIAN HIEROGLYPH F042	[5177 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312D, 0x0021 };
    uint32_t const ces[9] = { 0x5177, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_280)
{
    // 1312D 003F;	
    // (𓄭) EGYPTIAN HIEROGLYPH F042	[5177 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312D, 0x003F };
    uint32_t const ces[9] = { 0x5177, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_281)
{
    // 1312D 0061;	
    // (𓄭) EGYPTIAN HIEROGLYPH F042	[5177 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312D, 0x0061 };
    uint32_t const ces[9] = { 0x5177, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_282)
{
    // 1312D 0041;	
    // (𓄭) EGYPTIAN HIEROGLYPH F042	[5177 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1312D, 0x0041 };
    uint32_t const ces[9] = { 0x5177, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_283)
{
    // 1312D 0062;	
    // (𓄭) EGYPTIAN HIEROGLYPH F042	[5177 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312D, 0x0062 };
    uint32_t const ces[9] = { 0x5177, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_284)
{
    // 1312E 0021;	
    // (𓄮) EGYPTIAN HIEROGLYPH F043	[5178 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312E, 0x0021 };
    uint32_t const ces[9] = { 0x5178, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_285)
{
    // 1312E 003F;	
    // (𓄮) EGYPTIAN HIEROGLYPH F043	[5178 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312E, 0x003F };
    uint32_t const ces[9] = { 0x5178, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_286)
{
    // 1312E 0061;	
    // (𓄮) EGYPTIAN HIEROGLYPH F043	[5178 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312E, 0x0061 };
    uint32_t const ces[9] = { 0x5178, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_287)
{
    // 1312E 0041;	
    // (𓄮) EGYPTIAN HIEROGLYPH F043	[5178 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1312E, 0x0041 };
    uint32_t const ces[9] = { 0x5178, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_288)
{
    // 1312E 0062;	
    // (𓄮) EGYPTIAN HIEROGLYPH F043	[5178 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312E, 0x0062 };
    uint32_t const ces[9] = { 0x5178, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_289)
{
    // 1312F 0021;	
    // (𓄯) EGYPTIAN HIEROGLYPH F044	[5179 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312F, 0x0021 };
    uint32_t const ces[9] = { 0x5179, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_290)
{
    // 1312F 003F;	
    // (𓄯) EGYPTIAN HIEROGLYPH F044	[5179 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312F, 0x003F };
    uint32_t const ces[9] = { 0x5179, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_291)
{
    // 1312F 0061;	
    // (𓄯) EGYPTIAN HIEROGLYPH F044	[5179 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312F, 0x0061 };
    uint32_t const ces[9] = { 0x5179, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_292)
{
    // 1312F 0041;	
    // (𓄯) EGYPTIAN HIEROGLYPH F044	[5179 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1312F, 0x0041 };
    uint32_t const ces[9] = { 0x5179, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_293)
{
    // 1312F 0062;	
    // (𓄯) EGYPTIAN HIEROGLYPH F044	[5179 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1312F, 0x0062 };
    uint32_t const ces[9] = { 0x5179, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_294)
{
    // 13130 0021;	
    // (𓄰) EGYPTIAN HIEROGLYPH F045	[517A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13130, 0x0021 };
    uint32_t const ces[9] = { 0x517A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_295)
{
    // 13130 003F;	
    // (𓄰) EGYPTIAN HIEROGLYPH F045	[517A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13130, 0x003F };
    uint32_t const ces[9] = { 0x517A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_296)
{
    // 13130 0061;	
    // (𓄰) EGYPTIAN HIEROGLYPH F045	[517A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13130, 0x0061 };
    uint32_t const ces[9] = { 0x517A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_297)
{
    // 13130 0041;	
    // (𓄰) EGYPTIAN HIEROGLYPH F045	[517A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13130, 0x0041 };
    uint32_t const ces[9] = { 0x517A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_298)
{
    // 13130 0062;	
    // (𓄰) EGYPTIAN HIEROGLYPH F045	[517A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13130, 0x0062 };
    uint32_t const ces[9] = { 0x517A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_299)
{
    // 13131 0021;	
    // (𓄱) EGYPTIAN HIEROGLYPH F045A	[517B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13131, 0x0021 };
    uint32_t const ces[9] = { 0x517B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_300)
{
    // 13131 003F;	
    // (𓄱) EGYPTIAN HIEROGLYPH F045A	[517B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13131, 0x003F };
    uint32_t const ces[9] = { 0x517B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_301)
{
    // 13131 0061;	
    // (𓄱) EGYPTIAN HIEROGLYPH F045A	[517B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13131, 0x0061 };
    uint32_t const ces[9] = { 0x517B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_302)
{
    // 13131 0041;	
    // (𓄱) EGYPTIAN HIEROGLYPH F045A	[517B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13131, 0x0041 };
    uint32_t const ces[9] = { 0x517B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_303)
{
    // 13131 0062;	
    // (𓄱) EGYPTIAN HIEROGLYPH F045A	[517B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13131, 0x0062 };
    uint32_t const ces[9] = { 0x517B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_304)
{
    // 13132 0021;	
    // (𓄲) EGYPTIAN HIEROGLYPH F046	[517C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13132, 0x0021 };
    uint32_t const ces[9] = { 0x517C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_305)
{
    // 13132 003F;	
    // (𓄲) EGYPTIAN HIEROGLYPH F046	[517C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13132, 0x003F };
    uint32_t const ces[9] = { 0x517C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_306)
{
    // 13132 0061;	
    // (𓄲) EGYPTIAN HIEROGLYPH F046	[517C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13132, 0x0061 };
    uint32_t const ces[9] = { 0x517C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_307)
{
    // 13132 0041;	
    // (𓄲) EGYPTIAN HIEROGLYPH F046	[517C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13132, 0x0041 };
    uint32_t const ces[9] = { 0x517C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_308)
{
    // 13132 0062;	
    // (𓄲) EGYPTIAN HIEROGLYPH F046	[517C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13132, 0x0062 };
    uint32_t const ces[9] = { 0x517C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_309)
{
    // 13133 0021;	
    // (𓄳) EGYPTIAN HIEROGLYPH F046A	[517D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13133, 0x0021 };
    uint32_t const ces[9] = { 0x517D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_310)
{
    // 13133 003F;	
    // (𓄳) EGYPTIAN HIEROGLYPH F046A	[517D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13133, 0x003F };
    uint32_t const ces[9] = { 0x517D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_311)
{
    // 13133 0061;	
    // (𓄳) EGYPTIAN HIEROGLYPH F046A	[517D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13133, 0x0061 };
    uint32_t const ces[9] = { 0x517D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_312)
{
    // 13133 0041;	
    // (𓄳) EGYPTIAN HIEROGLYPH F046A	[517D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13133, 0x0041 };
    uint32_t const ces[9] = { 0x517D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_313)
{
    // 13133 0062;	
    // (𓄳) EGYPTIAN HIEROGLYPH F046A	[517D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13133, 0x0062 };
    uint32_t const ces[9] = { 0x517D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_314)
{
    // 13134 0021;	
    // (𓄴) EGYPTIAN HIEROGLYPH F047	[517E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13134, 0x0021 };
    uint32_t const ces[9] = { 0x517E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_315)
{
    // 13134 003F;	
    // (𓄴) EGYPTIAN HIEROGLYPH F047	[517E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13134, 0x003F };
    uint32_t const ces[9] = { 0x517E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_316)
{
    // 13134 0061;	
    // (𓄴) EGYPTIAN HIEROGLYPH F047	[517E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13134, 0x0061 };
    uint32_t const ces[9] = { 0x517E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_317)
{
    // 13134 0041;	
    // (𓄴) EGYPTIAN HIEROGLYPH F047	[517E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13134, 0x0041 };
    uint32_t const ces[9] = { 0x517E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_318)
{
    // 13134 0062;	
    // (𓄴) EGYPTIAN HIEROGLYPH F047	[517E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13134, 0x0062 };
    uint32_t const ces[9] = { 0x517E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_319)
{
    // 13135 0021;	
    // (𓄵) EGYPTIAN HIEROGLYPH F047A	[517F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13135, 0x0021 };
    uint32_t const ces[9] = { 0x517F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_320)
{
    // 13135 003F;	
    // (𓄵) EGYPTIAN HIEROGLYPH F047A	[517F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13135, 0x003F };
    uint32_t const ces[9] = { 0x517F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_321)
{
    // 13135 0061;	
    // (𓄵) EGYPTIAN HIEROGLYPH F047A	[517F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13135, 0x0061 };
    uint32_t const ces[9] = { 0x517F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_322)
{
    // 13135 0041;	
    // (𓄵) EGYPTIAN HIEROGLYPH F047A	[517F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13135, 0x0041 };
    uint32_t const ces[9] = { 0x517F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_323)
{
    // 13135 0062;	
    // (𓄵) EGYPTIAN HIEROGLYPH F047A	[517F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13135, 0x0062 };
    uint32_t const ces[9] = { 0x517F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_324)
{
    // 13136 0021;	
    // (𓄶) EGYPTIAN HIEROGLYPH F048	[5180 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13136, 0x0021 };
    uint32_t const ces[9] = { 0x5180, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_325)
{
    // 13136 003F;	
    // (𓄶) EGYPTIAN HIEROGLYPH F048	[5180 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13136, 0x003F };
    uint32_t const ces[9] = { 0x5180, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_326)
{
    // 13136 0061;	
    // (𓄶) EGYPTIAN HIEROGLYPH F048	[5180 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13136, 0x0061 };
    uint32_t const ces[9] = { 0x5180, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_327)
{
    // 13136 0041;	
    // (𓄶) EGYPTIAN HIEROGLYPH F048	[5180 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13136, 0x0041 };
    uint32_t const ces[9] = { 0x5180, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_328)
{
    // 13136 0062;	
    // (𓄶) EGYPTIAN HIEROGLYPH F048	[5180 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13136, 0x0062 };
    uint32_t const ces[9] = { 0x5180, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_329)
{
    // 13137 0021;	
    // (𓄷) EGYPTIAN HIEROGLYPH F049	[5181 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13137, 0x0021 };
    uint32_t const ces[9] = { 0x5181, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_330)
{
    // 13137 003F;	
    // (𓄷) EGYPTIAN HIEROGLYPH F049	[5181 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13137, 0x003F };
    uint32_t const ces[9] = { 0x5181, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_331)
{
    // 13137 0061;	
    // (𓄷) EGYPTIAN HIEROGLYPH F049	[5181 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13137, 0x0061 };
    uint32_t const ces[9] = { 0x5181, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_332)
{
    // 13137 0041;	
    // (𓄷) EGYPTIAN HIEROGLYPH F049	[5181 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13137, 0x0041 };
    uint32_t const ces[9] = { 0x5181, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_333)
{
    // 13137 0062;	
    // (𓄷) EGYPTIAN HIEROGLYPH F049	[5181 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13137, 0x0062 };
    uint32_t const ces[9] = { 0x5181, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_334)
{
    // 13138 0021;	
    // (𓄸) EGYPTIAN HIEROGLYPH F050	[5182 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13138, 0x0021 };
    uint32_t const ces[9] = { 0x5182, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_335)
{
    // 13138 003F;	
    // (𓄸) EGYPTIAN HIEROGLYPH F050	[5182 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13138, 0x003F };
    uint32_t const ces[9] = { 0x5182, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_336)
{
    // 13138 0061;	
    // (𓄸) EGYPTIAN HIEROGLYPH F050	[5182 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13138, 0x0061 };
    uint32_t const ces[9] = { 0x5182, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_337)
{
    // 13138 0041;	
    // (𓄸) EGYPTIAN HIEROGLYPH F050	[5182 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13138, 0x0041 };
    uint32_t const ces[9] = { 0x5182, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_338)
{
    // 13138 0062;	
    // (𓄸) EGYPTIAN HIEROGLYPH F050	[5182 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13138, 0x0062 };
    uint32_t const ces[9] = { 0x5182, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_339)
{
    // 13139 0021;	
    // (𓄹) EGYPTIAN HIEROGLYPH F051	[5183 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13139, 0x0021 };
    uint32_t const ces[9] = { 0x5183, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_340)
{
    // 13139 003F;	
    // (𓄹) EGYPTIAN HIEROGLYPH F051	[5183 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13139, 0x003F };
    uint32_t const ces[9] = { 0x5183, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_341)
{
    // 13139 0061;	
    // (𓄹) EGYPTIAN HIEROGLYPH F051	[5183 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13139, 0x0061 };
    uint32_t const ces[9] = { 0x5183, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_342)
{
    // 13139 0041;	
    // (𓄹) EGYPTIAN HIEROGLYPH F051	[5183 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13139, 0x0041 };
    uint32_t const ces[9] = { 0x5183, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_343)
{
    // 13139 0062;	
    // (𓄹) EGYPTIAN HIEROGLYPH F051	[5183 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13139, 0x0062 };
    uint32_t const ces[9] = { 0x5183, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_344)
{
    // 1313A 0021;	
    // (𓄺) EGYPTIAN HIEROGLYPH F051A	[5184 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313A, 0x0021 };
    uint32_t const ces[9] = { 0x5184, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_345)
{
    // 1313A 003F;	
    // (𓄺) EGYPTIAN HIEROGLYPH F051A	[5184 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313A, 0x003F };
    uint32_t const ces[9] = { 0x5184, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_346)
{
    // 1313A 0061;	
    // (𓄺) EGYPTIAN HIEROGLYPH F051A	[5184 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313A, 0x0061 };
    uint32_t const ces[9] = { 0x5184, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_347)
{
    // 1313A 0041;	
    // (𓄺) EGYPTIAN HIEROGLYPH F051A	[5184 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1313A, 0x0041 };
    uint32_t const ces[9] = { 0x5184, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_348)
{
    // 1313A 0062;	
    // (𓄺) EGYPTIAN HIEROGLYPH F051A	[5184 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313A, 0x0062 };
    uint32_t const ces[9] = { 0x5184, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_349)
{
    // 1313B 0021;	
    // (𓄻) EGYPTIAN HIEROGLYPH F051B	[5185 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313B, 0x0021 };
    uint32_t const ces[9] = { 0x5185, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_350)
{
    // 1313B 003F;	
    // (𓄻) EGYPTIAN HIEROGLYPH F051B	[5185 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313B, 0x003F };
    uint32_t const ces[9] = { 0x5185, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_351)
{
    // 1313B 0061;	
    // (𓄻) EGYPTIAN HIEROGLYPH F051B	[5185 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313B, 0x0061 };
    uint32_t const ces[9] = { 0x5185, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_352)
{
    // 1313B 0041;	
    // (𓄻) EGYPTIAN HIEROGLYPH F051B	[5185 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1313B, 0x0041 };
    uint32_t const ces[9] = { 0x5185, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_353)
{
    // 1313B 0062;	
    // (𓄻) EGYPTIAN HIEROGLYPH F051B	[5185 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313B, 0x0062 };
    uint32_t const ces[9] = { 0x5185, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_354)
{
    // 1313C 0021;	
    // (𓄼) EGYPTIAN HIEROGLYPH F051C	[5186 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313C, 0x0021 };
    uint32_t const ces[9] = { 0x5186, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_355)
{
    // 1313C 003F;	
    // (𓄼) EGYPTIAN HIEROGLYPH F051C	[5186 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313C, 0x003F };
    uint32_t const ces[9] = { 0x5186, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_356)
{
    // 1313C 0061;	
    // (𓄼) EGYPTIAN HIEROGLYPH F051C	[5186 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313C, 0x0061 };
    uint32_t const ces[9] = { 0x5186, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_357)
{
    // 1313C 0041;	
    // (𓄼) EGYPTIAN HIEROGLYPH F051C	[5186 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1313C, 0x0041 };
    uint32_t const ces[9] = { 0x5186, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_358)
{
    // 1313C 0062;	
    // (𓄼) EGYPTIAN HIEROGLYPH F051C	[5186 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313C, 0x0062 };
    uint32_t const ces[9] = { 0x5186, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_359)
{
    // 1313D 0021;	
    // (𓄽) EGYPTIAN HIEROGLYPH F052	[5187 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313D, 0x0021 };
    uint32_t const ces[9] = { 0x5187, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_360)
{
    // 1313D 003F;	
    // (𓄽) EGYPTIAN HIEROGLYPH F052	[5187 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313D, 0x003F };
    uint32_t const ces[9] = { 0x5187, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_361)
{
    // 1313D 0061;	
    // (𓄽) EGYPTIAN HIEROGLYPH F052	[5187 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313D, 0x0061 };
    uint32_t const ces[9] = { 0x5187, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_362)
{
    // 1313D 0041;	
    // (𓄽) EGYPTIAN HIEROGLYPH F052	[5187 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1313D, 0x0041 };
    uint32_t const ces[9] = { 0x5187, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_363)
{
    // 1313D 0062;	
    // (𓄽) EGYPTIAN HIEROGLYPH F052	[5187 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313D, 0x0062 };
    uint32_t const ces[9] = { 0x5187, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_364)
{
    // 1313E 0021;	
    // (𓄾) EGYPTIAN HIEROGLYPH F053	[5188 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313E, 0x0021 };
    uint32_t const ces[9] = { 0x5188, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_365)
{
    // 1313E 003F;	
    // (𓄾) EGYPTIAN HIEROGLYPH F053	[5188 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313E, 0x003F };
    uint32_t const ces[9] = { 0x5188, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_366)
{
    // 1313E 0061;	
    // (𓄾) EGYPTIAN HIEROGLYPH F053	[5188 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313E, 0x0061 };
    uint32_t const ces[9] = { 0x5188, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_367)
{
    // 1313E 0041;	
    // (𓄾) EGYPTIAN HIEROGLYPH F053	[5188 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1313E, 0x0041 };
    uint32_t const ces[9] = { 0x5188, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_368)
{
    // 1313E 0062;	
    // (𓄾) EGYPTIAN HIEROGLYPH F053	[5188 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313E, 0x0062 };
    uint32_t const ces[9] = { 0x5188, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_369)
{
    // 1313F 0021;	
    // (𓄿) EGYPTIAN HIEROGLYPH G001	[5189 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313F, 0x0021 };
    uint32_t const ces[9] = { 0x5189, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_370)
{
    // 1313F 003F;	
    // (𓄿) EGYPTIAN HIEROGLYPH G001	[5189 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313F, 0x003F };
    uint32_t const ces[9] = { 0x5189, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_371)
{
    // 1313F 0061;	
    // (𓄿) EGYPTIAN HIEROGLYPH G001	[5189 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313F, 0x0061 };
    uint32_t const ces[9] = { 0x5189, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_372)
{
    // 1313F 0041;	
    // (𓄿) EGYPTIAN HIEROGLYPH G001	[5189 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1313F, 0x0041 };
    uint32_t const ces[9] = { 0x5189, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_373)
{
    // 1313F 0062;	
    // (𓄿) EGYPTIAN HIEROGLYPH G001	[5189 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1313F, 0x0062 };
    uint32_t const ces[9] = { 0x5189, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_374)
{
    // 13140 0021;	
    // (𓅀) EGYPTIAN HIEROGLYPH G002	[518A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13140, 0x0021 };
    uint32_t const ces[9] = { 0x518A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_375)
{
    // 13140 003F;	
    // (𓅀) EGYPTIAN HIEROGLYPH G002	[518A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13140, 0x003F };
    uint32_t const ces[9] = { 0x518A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_376)
{
    // 13140 0061;	
    // (𓅀) EGYPTIAN HIEROGLYPH G002	[518A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13140, 0x0061 };
    uint32_t const ces[9] = { 0x518A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_377)
{
    // 13140 0041;	
    // (𓅀) EGYPTIAN HIEROGLYPH G002	[518A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13140, 0x0041 };
    uint32_t const ces[9] = { 0x518A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_378)
{
    // 13140 0062;	
    // (𓅀) EGYPTIAN HIEROGLYPH G002	[518A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13140, 0x0062 };
    uint32_t const ces[9] = { 0x518A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_379)
{
    // 13141 0021;	
    // (𓅁) EGYPTIAN HIEROGLYPH G003	[518B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13141, 0x0021 };
    uint32_t const ces[9] = { 0x518B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_380)
{
    // 13141 003F;	
    // (𓅁) EGYPTIAN HIEROGLYPH G003	[518B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13141, 0x003F };
    uint32_t const ces[9] = { 0x518B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_381)
{
    // 13141 0061;	
    // (𓅁) EGYPTIAN HIEROGLYPH G003	[518B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13141, 0x0061 };
    uint32_t const ces[9] = { 0x518B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_382)
{
    // 13141 0041;	
    // (𓅁) EGYPTIAN HIEROGLYPH G003	[518B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13141, 0x0041 };
    uint32_t const ces[9] = { 0x518B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_383)
{
    // 13141 0062;	
    // (𓅁) EGYPTIAN HIEROGLYPH G003	[518B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13141, 0x0062 };
    uint32_t const ces[9] = { 0x518B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_384)
{
    // 13142 0021;	
    // (𓅂) EGYPTIAN HIEROGLYPH G004	[518C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13142, 0x0021 };
    uint32_t const ces[9] = { 0x518C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_385)
{
    // 13142 003F;	
    // (𓅂) EGYPTIAN HIEROGLYPH G004	[518C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13142, 0x003F };
    uint32_t const ces[9] = { 0x518C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_386)
{
    // 13142 0061;	
    // (𓅂) EGYPTIAN HIEROGLYPH G004	[518C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13142, 0x0061 };
    uint32_t const ces[9] = { 0x518C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_387)
{
    // 13142 0041;	
    // (𓅂) EGYPTIAN HIEROGLYPH G004	[518C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13142, 0x0041 };
    uint32_t const ces[9] = { 0x518C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_388)
{
    // 13142 0062;	
    // (𓅂) EGYPTIAN HIEROGLYPH G004	[518C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13142, 0x0062 };
    uint32_t const ces[9] = { 0x518C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_389)
{
    // 13143 0021;	
    // (𓅃) EGYPTIAN HIEROGLYPH G005	[518D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13143, 0x0021 };
    uint32_t const ces[9] = { 0x518D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_390)
{
    // 13143 003F;	
    // (𓅃) EGYPTIAN HIEROGLYPH G005	[518D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13143, 0x003F };
    uint32_t const ces[9] = { 0x518D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_391)
{
    // 13143 0061;	
    // (𓅃) EGYPTIAN HIEROGLYPH G005	[518D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13143, 0x0061 };
    uint32_t const ces[9] = { 0x518D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_392)
{
    // 13143 0041;	
    // (𓅃) EGYPTIAN HIEROGLYPH G005	[518D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13143, 0x0041 };
    uint32_t const ces[9] = { 0x518D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_393)
{
    // 13143 0062;	
    // (𓅃) EGYPTIAN HIEROGLYPH G005	[518D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13143, 0x0062 };
    uint32_t const ces[9] = { 0x518D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_394)
{
    // 13144 0021;	
    // (𓅄) EGYPTIAN HIEROGLYPH G006	[518E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13144, 0x0021 };
    uint32_t const ces[9] = { 0x518E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_395)
{
    // 13144 003F;	
    // (𓅄) EGYPTIAN HIEROGLYPH G006	[518E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13144, 0x003F };
    uint32_t const ces[9] = { 0x518E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_396)
{
    // 13144 0061;	
    // (𓅄) EGYPTIAN HIEROGLYPH G006	[518E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13144, 0x0061 };
    uint32_t const ces[9] = { 0x518E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_397)
{
    // 13144 0041;	
    // (𓅄) EGYPTIAN HIEROGLYPH G006	[518E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13144, 0x0041 };
    uint32_t const ces[9] = { 0x518E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_398)
{
    // 13144 0062;	
    // (𓅄) EGYPTIAN HIEROGLYPH G006	[518E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13144, 0x0062 };
    uint32_t const ces[9] = { 0x518E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_399)
{
    // 13145 0021;	
    // (𓅅) EGYPTIAN HIEROGLYPH G006A	[518F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13145, 0x0021 };
    uint32_t const ces[9] = { 0x518F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_400)
{
    // 13145 003F;	
    // (𓅅) EGYPTIAN HIEROGLYPH G006A	[518F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13145, 0x003F };
    uint32_t const ces[9] = { 0x518F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_401)
{
    // 13145 0061;	
    // (𓅅) EGYPTIAN HIEROGLYPH G006A	[518F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13145, 0x0061 };
    uint32_t const ces[9] = { 0x518F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_402)
{
    // 13145 0041;	
    // (𓅅) EGYPTIAN HIEROGLYPH G006A	[518F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13145, 0x0041 };
    uint32_t const ces[9] = { 0x518F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_403)
{
    // 13145 0062;	
    // (𓅅) EGYPTIAN HIEROGLYPH G006A	[518F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13145, 0x0062 };
    uint32_t const ces[9] = { 0x518F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_404)
{
    // 13146 0021;	
    // (𓅆) EGYPTIAN HIEROGLYPH G007	[5190 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13146, 0x0021 };
    uint32_t const ces[9] = { 0x5190, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_405)
{
    // 13146 003F;	
    // (𓅆) EGYPTIAN HIEROGLYPH G007	[5190 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13146, 0x003F };
    uint32_t const ces[9] = { 0x5190, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_406)
{
    // 13146 0061;	
    // (𓅆) EGYPTIAN HIEROGLYPH G007	[5190 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13146, 0x0061 };
    uint32_t const ces[9] = { 0x5190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_407)
{
    // 13146 0041;	
    // (𓅆) EGYPTIAN HIEROGLYPH G007	[5190 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13146, 0x0041 };
    uint32_t const ces[9] = { 0x5190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_408)
{
    // 13146 0062;	
    // (𓅆) EGYPTIAN HIEROGLYPH G007	[5190 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13146, 0x0062 };
    uint32_t const ces[9] = { 0x5190, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_409)
{
    // 13147 0021;	
    // (𓅇) EGYPTIAN HIEROGLYPH G007A	[5191 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13147, 0x0021 };
    uint32_t const ces[9] = { 0x5191, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_410)
{
    // 13147 003F;	
    // (𓅇) EGYPTIAN HIEROGLYPH G007A	[5191 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13147, 0x003F };
    uint32_t const ces[9] = { 0x5191, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_411)
{
    // 13147 0061;	
    // (𓅇) EGYPTIAN HIEROGLYPH G007A	[5191 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13147, 0x0061 };
    uint32_t const ces[9] = { 0x5191, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_412)
{
    // 13147 0041;	
    // (𓅇) EGYPTIAN HIEROGLYPH G007A	[5191 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13147, 0x0041 };
    uint32_t const ces[9] = { 0x5191, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_413)
{
    // 13147 0062;	
    // (𓅇) EGYPTIAN HIEROGLYPH G007A	[5191 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13147, 0x0062 };
    uint32_t const ces[9] = { 0x5191, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_414)
{
    // 13148 0021;	
    // (𓅈) EGYPTIAN HIEROGLYPH G007B	[5192 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13148, 0x0021 };
    uint32_t const ces[9] = { 0x5192, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_415)
{
    // 13148 003F;	
    // (𓅈) EGYPTIAN HIEROGLYPH G007B	[5192 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13148, 0x003F };
    uint32_t const ces[9] = { 0x5192, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_416)
{
    // 13148 0061;	
    // (𓅈) EGYPTIAN HIEROGLYPH G007B	[5192 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13148, 0x0061 };
    uint32_t const ces[9] = { 0x5192, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_417)
{
    // 13148 0041;	
    // (𓅈) EGYPTIAN HIEROGLYPH G007B	[5192 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13148, 0x0041 };
    uint32_t const ces[9] = { 0x5192, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_418)
{
    // 13148 0062;	
    // (𓅈) EGYPTIAN HIEROGLYPH G007B	[5192 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13148, 0x0062 };
    uint32_t const ces[9] = { 0x5192, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_419)
{
    // 13149 0021;	
    // (𓅉) EGYPTIAN HIEROGLYPH G008	[5193 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13149, 0x0021 };
    uint32_t const ces[9] = { 0x5193, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_420)
{
    // 13149 003F;	
    // (𓅉) EGYPTIAN HIEROGLYPH G008	[5193 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13149, 0x003F };
    uint32_t const ces[9] = { 0x5193, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_421)
{
    // 13149 0061;	
    // (𓅉) EGYPTIAN HIEROGLYPH G008	[5193 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13149, 0x0061 };
    uint32_t const ces[9] = { 0x5193, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_422)
{
    // 13149 0041;	
    // (𓅉) EGYPTIAN HIEROGLYPH G008	[5193 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13149, 0x0041 };
    uint32_t const ces[9] = { 0x5193, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_423)
{
    // 13149 0062;	
    // (𓅉) EGYPTIAN HIEROGLYPH G008	[5193 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13149, 0x0062 };
    uint32_t const ces[9] = { 0x5193, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_424)
{
    // 1314A 0021;	
    // (𓅊) EGYPTIAN HIEROGLYPH G009	[5194 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314A, 0x0021 };
    uint32_t const ces[9] = { 0x5194, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_425)
{
    // 1314A 003F;	
    // (𓅊) EGYPTIAN HIEROGLYPH G009	[5194 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314A, 0x003F };
    uint32_t const ces[9] = { 0x5194, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_426)
{
    // 1314A 0061;	
    // (𓅊) EGYPTIAN HIEROGLYPH G009	[5194 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314A, 0x0061 };
    uint32_t const ces[9] = { 0x5194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_427)
{
    // 1314A 0041;	
    // (𓅊) EGYPTIAN HIEROGLYPH G009	[5194 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1314A, 0x0041 };
    uint32_t const ces[9] = { 0x5194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_428)
{
    // 1314A 0062;	
    // (𓅊) EGYPTIAN HIEROGLYPH G009	[5194 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314A, 0x0062 };
    uint32_t const ces[9] = { 0x5194, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_429)
{
    // 1314B 0021;	
    // (𓅋) EGYPTIAN HIEROGLYPH G010	[5195 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314B, 0x0021 };
    uint32_t const ces[9] = { 0x5195, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_430)
{
    // 1314B 003F;	
    // (𓅋) EGYPTIAN HIEROGLYPH G010	[5195 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314B, 0x003F };
    uint32_t const ces[9] = { 0x5195, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_431)
{
    // 1314B 0061;	
    // (𓅋) EGYPTIAN HIEROGLYPH G010	[5195 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314B, 0x0061 };
    uint32_t const ces[9] = { 0x5195, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_432)
{
    // 1314B 0041;	
    // (𓅋) EGYPTIAN HIEROGLYPH G010	[5195 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1314B, 0x0041 };
    uint32_t const ces[9] = { 0x5195, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_433)
{
    // 1314B 0062;	
    // (𓅋) EGYPTIAN HIEROGLYPH G010	[5195 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314B, 0x0062 };
    uint32_t const ces[9] = { 0x5195, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_434)
{
    // 1314C 0021;	
    // (𓅌) EGYPTIAN HIEROGLYPH G011	[5196 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314C, 0x0021 };
    uint32_t const ces[9] = { 0x5196, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_435)
{
    // 1314C 003F;	
    // (𓅌) EGYPTIAN HIEROGLYPH G011	[5196 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314C, 0x003F };
    uint32_t const ces[9] = { 0x5196, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_436)
{
    // 1314C 0061;	
    // (𓅌) EGYPTIAN HIEROGLYPH G011	[5196 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314C, 0x0061 };
    uint32_t const ces[9] = { 0x5196, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_437)
{
    // 1314C 0041;	
    // (𓅌) EGYPTIAN HIEROGLYPH G011	[5196 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1314C, 0x0041 };
    uint32_t const ces[9] = { 0x5196, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_438)
{
    // 1314C 0062;	
    // (𓅌) EGYPTIAN HIEROGLYPH G011	[5196 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314C, 0x0062 };
    uint32_t const ces[9] = { 0x5196, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_439)
{
    // 1314D 0021;	
    // (𓅍) EGYPTIAN HIEROGLYPH G011A	[5197 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314D, 0x0021 };
    uint32_t const ces[9] = { 0x5197, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_440)
{
    // 1314D 003F;	
    // (𓅍) EGYPTIAN HIEROGLYPH G011A	[5197 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314D, 0x003F };
    uint32_t const ces[9] = { 0x5197, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_441)
{
    // 1314D 0061;	
    // (𓅍) EGYPTIAN HIEROGLYPH G011A	[5197 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314D, 0x0061 };
    uint32_t const ces[9] = { 0x5197, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_442)
{
    // 1314D 0041;	
    // (𓅍) EGYPTIAN HIEROGLYPH G011A	[5197 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1314D, 0x0041 };
    uint32_t const ces[9] = { 0x5197, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_443)
{
    // 1314D 0062;	
    // (𓅍) EGYPTIAN HIEROGLYPH G011A	[5197 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314D, 0x0062 };
    uint32_t const ces[9] = { 0x5197, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_444)
{
    // 1314E 0021;	
    // (𓅎) EGYPTIAN HIEROGLYPH G012	[5198 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314E, 0x0021 };
    uint32_t const ces[9] = { 0x5198, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_445)
{
    // 1314E 003F;	
    // (𓅎) EGYPTIAN HIEROGLYPH G012	[5198 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314E, 0x003F };
    uint32_t const ces[9] = { 0x5198, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_446)
{
    // 1314E 0061;	
    // (𓅎) EGYPTIAN HIEROGLYPH G012	[5198 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314E, 0x0061 };
    uint32_t const ces[9] = { 0x5198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_447)
{
    // 1314E 0041;	
    // (𓅎) EGYPTIAN HIEROGLYPH G012	[5198 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1314E, 0x0041 };
    uint32_t const ces[9] = { 0x5198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_448)
{
    // 1314E 0062;	
    // (𓅎) EGYPTIAN HIEROGLYPH G012	[5198 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314E, 0x0062 };
    uint32_t const ces[9] = { 0x5198, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_449)
{
    // 1314F 0021;	
    // (𓅏) EGYPTIAN HIEROGLYPH G013	[5199 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314F, 0x0021 };
    uint32_t const ces[9] = { 0x5199, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_450)
{
    // 1314F 003F;	
    // (𓅏) EGYPTIAN HIEROGLYPH G013	[5199 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314F, 0x003F };
    uint32_t const ces[9] = { 0x5199, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_451)
{
    // 1314F 0061;	
    // (𓅏) EGYPTIAN HIEROGLYPH G013	[5199 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314F, 0x0061 };
    uint32_t const ces[9] = { 0x5199, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_452)
{
    // 1314F 0041;	
    // (𓅏) EGYPTIAN HIEROGLYPH G013	[5199 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1314F, 0x0041 };
    uint32_t const ces[9] = { 0x5199, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_453)
{
    // 1314F 0062;	
    // (𓅏) EGYPTIAN HIEROGLYPH G013	[5199 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1314F, 0x0062 };
    uint32_t const ces[9] = { 0x5199, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_454)
{
    // 13150 0021;	
    // (𓅐) EGYPTIAN HIEROGLYPH G014	[519A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13150, 0x0021 };
    uint32_t const ces[9] = { 0x519A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_455)
{
    // 13150 003F;	
    // (𓅐) EGYPTIAN HIEROGLYPH G014	[519A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13150, 0x003F };
    uint32_t const ces[9] = { 0x519A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_456)
{
    // 13150 0061;	
    // (𓅐) EGYPTIAN HIEROGLYPH G014	[519A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13150, 0x0061 };
    uint32_t const ces[9] = { 0x519A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_457)
{
    // 13150 0041;	
    // (𓅐) EGYPTIAN HIEROGLYPH G014	[519A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13150, 0x0041 };
    uint32_t const ces[9] = { 0x519A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_458)
{
    // 13150 0062;	
    // (𓅐) EGYPTIAN HIEROGLYPH G014	[519A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13150, 0x0062 };
    uint32_t const ces[9] = { 0x519A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_459)
{
    // 13151 0021;	
    // (𓅑) EGYPTIAN HIEROGLYPH G015	[519B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13151, 0x0021 };
    uint32_t const ces[9] = { 0x519B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_460)
{
    // 13151 003F;	
    // (𓅑) EGYPTIAN HIEROGLYPH G015	[519B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13151, 0x003F };
    uint32_t const ces[9] = { 0x519B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_461)
{
    // 13151 0061;	
    // (𓅑) EGYPTIAN HIEROGLYPH G015	[519B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13151, 0x0061 };
    uint32_t const ces[9] = { 0x519B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_462)
{
    // 13151 0041;	
    // (𓅑) EGYPTIAN HIEROGLYPH G015	[519B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13151, 0x0041 };
    uint32_t const ces[9] = { 0x519B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_463)
{
    // 13151 0062;	
    // (𓅑) EGYPTIAN HIEROGLYPH G015	[519B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13151, 0x0062 };
    uint32_t const ces[9] = { 0x519B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_464)
{
    // 13152 0021;	
    // (𓅒) EGYPTIAN HIEROGLYPH G016	[519C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13152, 0x0021 };
    uint32_t const ces[9] = { 0x519C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_465)
{
    // 13152 003F;	
    // (𓅒) EGYPTIAN HIEROGLYPH G016	[519C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13152, 0x003F };
    uint32_t const ces[9] = { 0x519C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_466)
{
    // 13152 0061;	
    // (𓅒) EGYPTIAN HIEROGLYPH G016	[519C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13152, 0x0061 };
    uint32_t const ces[9] = { 0x519C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_467)
{
    // 13152 0041;	
    // (𓅒) EGYPTIAN HIEROGLYPH G016	[519C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13152, 0x0041 };
    uint32_t const ces[9] = { 0x519C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_468)
{
    // 13152 0062;	
    // (𓅒) EGYPTIAN HIEROGLYPH G016	[519C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13152, 0x0062 };
    uint32_t const ces[9] = { 0x519C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_469)
{
    // 13153 0021;	
    // (𓅓) EGYPTIAN HIEROGLYPH G017	[519D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13153, 0x0021 };
    uint32_t const ces[9] = { 0x519D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_470)
{
    // 13153 003F;	
    // (𓅓) EGYPTIAN HIEROGLYPH G017	[519D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13153, 0x003F };
    uint32_t const ces[9] = { 0x519D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_471)
{
    // 13153 0061;	
    // (𓅓) EGYPTIAN HIEROGLYPH G017	[519D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13153, 0x0061 };
    uint32_t const ces[9] = { 0x519D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_472)
{
    // 13153 0041;	
    // (𓅓) EGYPTIAN HIEROGLYPH G017	[519D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13153, 0x0041 };
    uint32_t const ces[9] = { 0x519D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_473)
{
    // 13153 0062;	
    // (𓅓) EGYPTIAN HIEROGLYPH G017	[519D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13153, 0x0062 };
    uint32_t const ces[9] = { 0x519D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_474)
{
    // 13154 0021;	
    // (𓅔) EGYPTIAN HIEROGLYPH G018	[519E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13154, 0x0021 };
    uint32_t const ces[9] = { 0x519E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_475)
{
    // 13154 003F;	
    // (𓅔) EGYPTIAN HIEROGLYPH G018	[519E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13154, 0x003F };
    uint32_t const ces[9] = { 0x519E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_476)
{
    // 13154 0061;	
    // (𓅔) EGYPTIAN HIEROGLYPH G018	[519E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13154, 0x0061 };
    uint32_t const ces[9] = { 0x519E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_477)
{
    // 13154 0041;	
    // (𓅔) EGYPTIAN HIEROGLYPH G018	[519E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13154, 0x0041 };
    uint32_t const ces[9] = { 0x519E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_478)
{
    // 13154 0062;	
    // (𓅔) EGYPTIAN HIEROGLYPH G018	[519E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13154, 0x0062 };
    uint32_t const ces[9] = { 0x519E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_479)
{
    // 13155 0021;	
    // (𓅕) EGYPTIAN HIEROGLYPH G019	[519F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13155, 0x0021 };
    uint32_t const ces[9] = { 0x519F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_480)
{
    // 13155 003F;	
    // (𓅕) EGYPTIAN HIEROGLYPH G019	[519F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13155, 0x003F };
    uint32_t const ces[9] = { 0x519F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_481)
{
    // 13155 0061;	
    // (𓅕) EGYPTIAN HIEROGLYPH G019	[519F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13155, 0x0061 };
    uint32_t const ces[9] = { 0x519F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_482)
{
    // 13155 0041;	
    // (𓅕) EGYPTIAN HIEROGLYPH G019	[519F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13155, 0x0041 };
    uint32_t const ces[9] = { 0x519F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_483)
{
    // 13155 0062;	
    // (𓅕) EGYPTIAN HIEROGLYPH G019	[519F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13155, 0x0062 };
    uint32_t const ces[9] = { 0x519F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_484)
{
    // 13156 0021;	
    // (𓅖) EGYPTIAN HIEROGLYPH G020	[51A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13156, 0x0021 };
    uint32_t const ces[9] = { 0x51A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_485)
{
    // 13156 003F;	
    // (𓅖) EGYPTIAN HIEROGLYPH G020	[51A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13156, 0x003F };
    uint32_t const ces[9] = { 0x51A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_486)
{
    // 13156 0061;	
    // (𓅖) EGYPTIAN HIEROGLYPH G020	[51A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13156, 0x0061 };
    uint32_t const ces[9] = { 0x51A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_487)
{
    // 13156 0041;	
    // (𓅖) EGYPTIAN HIEROGLYPH G020	[51A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13156, 0x0041 };
    uint32_t const ces[9] = { 0x51A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_488)
{
    // 13156 0062;	
    // (𓅖) EGYPTIAN HIEROGLYPH G020	[51A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13156, 0x0062 };
    uint32_t const ces[9] = { 0x51A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_489)
{
    // 13157 0021;	
    // (𓅗) EGYPTIAN HIEROGLYPH G020A	[51A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13157, 0x0021 };
    uint32_t const ces[9] = { 0x51A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_490)
{
    // 13157 003F;	
    // (𓅗) EGYPTIAN HIEROGLYPH G020A	[51A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13157, 0x003F };
    uint32_t const ces[9] = { 0x51A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_491)
{
    // 13157 0061;	
    // (𓅗) EGYPTIAN HIEROGLYPH G020A	[51A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13157, 0x0061 };
    uint32_t const ces[9] = { 0x51A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_492)
{
    // 13157 0041;	
    // (𓅗) EGYPTIAN HIEROGLYPH G020A	[51A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13157, 0x0041 };
    uint32_t const ces[9] = { 0x51A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_493)
{
    // 13157 0062;	
    // (𓅗) EGYPTIAN HIEROGLYPH G020A	[51A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13157, 0x0062 };
    uint32_t const ces[9] = { 0x51A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_494)
{
    // 13158 0021;	
    // (𓅘) EGYPTIAN HIEROGLYPH G021	[51A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13158, 0x0021 };
    uint32_t const ces[9] = { 0x51A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_495)
{
    // 13158 003F;	
    // (𓅘) EGYPTIAN HIEROGLYPH G021	[51A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13158, 0x003F };
    uint32_t const ces[9] = { 0x51A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_496)
{
    // 13158 0061;	
    // (𓅘) EGYPTIAN HIEROGLYPH G021	[51A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13158, 0x0061 };
    uint32_t const ces[9] = { 0x51A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_497)
{
    // 13158 0041;	
    // (𓅘) EGYPTIAN HIEROGLYPH G021	[51A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13158, 0x0041 };
    uint32_t const ces[9] = { 0x51A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_498)
{
    // 13158 0062;	
    // (𓅘) EGYPTIAN HIEROGLYPH G021	[51A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13158, 0x0062 };
    uint32_t const ces[9] = { 0x51A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_299_499)
{
    // 13159 0021;	
    // (𓅙) EGYPTIAN HIEROGLYPH G022	[51A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13159, 0x0021 };
    uint32_t const ces[9] = { 0x51A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

