// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_198_000)
{
    // 1F606 ; [*1661.0020.0002] 
    // SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES

    uint32_t const cps[1] = { 0x1f606 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1661), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_001)
{
    // 1F607 ; [*1662.0020.0002] 
    // SMILING FACE WITH HALO

    uint32_t const cps[1] = { 0x1f607 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1662), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_002)
{
    // 1F608 ; [*1663.0020.0002] 
    // SMILING FACE WITH HORNS

    uint32_t const cps[1] = { 0x1f608 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1663), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_003)
{
    // 1F609 ; [*1664.0020.0002] 
    // WINKING FACE

    uint32_t const cps[1] = { 0x1f609 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1664), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_004)
{
    // 1F60A ; [*1665.0020.0002] 
    // SMILING FACE WITH SMILING EYES

    uint32_t const cps[1] = { 0x1f60a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1665), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_005)
{
    // 1F60B ; [*1666.0020.0002] 
    // FACE SAVOURING DELICIOUS FOOD

    uint32_t const cps[1] = { 0x1f60b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1666), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_006)
{
    // 1F60C ; [*1667.0020.0002] 
    // RELIEVED FACE

    uint32_t const cps[1] = { 0x1f60c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1667), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_007)
{
    // 1F60D ; [*1668.0020.0002] 
    // SMILING FACE WITH HEART-SHAPED EYES

    uint32_t const cps[1] = { 0x1f60d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1668), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_008)
{
    // 1F60E ; [*1669.0020.0002] 
    // SMILING FACE WITH SUNGLASSES

    uint32_t const cps[1] = { 0x1f60e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1669), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_009)
{
    // 1F60F ; [*166A.0020.0002] 
    // SMIRKING FACE

    uint32_t const cps[1] = { 0x1f60f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x166a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_010)
{
    // 1F610 ; [*166B.0020.0002] 
    // NEUTRAL FACE

    uint32_t const cps[1] = { 0x1f610 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x166b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_011)
{
    // 1F611 ; [*166C.0020.0002] 
    // EXPRESSIONLESS FACE

    uint32_t const cps[1] = { 0x1f611 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x166c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_012)
{
    // 1F612 ; [*166D.0020.0002] 
    // UNAMUSED FACE

    uint32_t const cps[1] = { 0x1f612 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x166d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_013)
{
    // 1F613 ; [*166E.0020.0002] 
    // FACE WITH COLD SWEAT

    uint32_t const cps[1] = { 0x1f613 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x166e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_014)
{
    // 1F614 ; [*166F.0020.0002] 
    // PENSIVE FACE

    uint32_t const cps[1] = { 0x1f614 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x166f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_015)
{
    // 1F615 ; [*1670.0020.0002] 
    // CONFUSED FACE

    uint32_t const cps[1] = { 0x1f615 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1670), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_016)
{
    // 1F616 ; [*1671.0020.0002] 
    // CONFOUNDED FACE

    uint32_t const cps[1] = { 0x1f616 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1671), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_017)
{
    // 1F617 ; [*1672.0020.0002] 
    // KISSING FACE

    uint32_t const cps[1] = { 0x1f617 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1672), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_018)
{
    // 1F618 ; [*1673.0020.0002] 
    // FACE THROWING A KISS

    uint32_t const cps[1] = { 0x1f618 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1673), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_019)
{
    // 1F619 ; [*1674.0020.0002] 
    // KISSING FACE WITH SMILING EYES

    uint32_t const cps[1] = { 0x1f619 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1674), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_020)
{
    // 1F61A ; [*1675.0020.0002] 
    // KISSING FACE WITH CLOSED EYES

    uint32_t const cps[1] = { 0x1f61a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1675), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_021)
{
    // 1F61B ; [*1676.0020.0002] 
    // FACE WITH STUCK-OUT TONGUE

    uint32_t const cps[1] = { 0x1f61b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1676), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_022)
{
    // 1F61C ; [*1677.0020.0002] 
    // FACE WITH STUCK-OUT TONGUE AND WINKING EYE

    uint32_t const cps[1] = { 0x1f61c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1677), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_023)
{
    // 1F61D ; [*1678.0020.0002] 
    // FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES

    uint32_t const cps[1] = { 0x1f61d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1678), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_024)
{
    // 1F61E ; [*1679.0020.0002] 
    // DISAPPOINTED FACE

    uint32_t const cps[1] = { 0x1f61e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1679), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_025)
{
    // 1F61F ; [*167A.0020.0002] 
    // WORRIED FACE

    uint32_t const cps[1] = { 0x1f61f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x167a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_026)
{
    // 1F620 ; [*167B.0020.0002] 
    // ANGRY FACE

    uint32_t const cps[1] = { 0x1f620 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x167b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_027)
{
    // 1F621 ; [*167C.0020.0002] 
    // POUTING FACE

    uint32_t const cps[1] = { 0x1f621 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x167c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_028)
{
    // 1F622 ; [*167D.0020.0002] 
    // CRYING FACE

    uint32_t const cps[1] = { 0x1f622 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x167d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_029)
{
    // 1F623 ; [*167E.0020.0002] 
    // PERSEVERING FACE

    uint32_t const cps[1] = { 0x1f623 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x167e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_030)
{
    // 1F624 ; [*167F.0020.0002] 
    // FACE WITH LOOK OF TRIUMPH

    uint32_t const cps[1] = { 0x1f624 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x167f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_031)
{
    // 1F625 ; [*1680.0020.0002] 
    // DISAPPOINTED BUT RELIEVED FACE

    uint32_t const cps[1] = { 0x1f625 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1680), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_032)
{
    // 1F626 ; [*1681.0020.0002] 
    // FROWNING FACE WITH OPEN MOUTH

    uint32_t const cps[1] = { 0x1f626 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1681), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_033)
{
    // 1F627 ; [*1682.0020.0002] 
    // ANGUISHED FACE

    uint32_t const cps[1] = { 0x1f627 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1682), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_034)
{
    // 1F628 ; [*1683.0020.0002] 
    // FEARFUL FACE

    uint32_t const cps[1] = { 0x1f628 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1683), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_035)
{
    // 1F629 ; [*1684.0020.0002] 
    // WEARY FACE

    uint32_t const cps[1] = { 0x1f629 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1684), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_036)
{
    // 1F62A ; [*1685.0020.0002] 
    // SLEEPY FACE

    uint32_t const cps[1] = { 0x1f62a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1685), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_037)
{
    // 1F62B ; [*1686.0020.0002] 
    // TIRED FACE

    uint32_t const cps[1] = { 0x1f62b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1686), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_038)
{
    // 1F62C ; [*1687.0020.0002] 
    // GRIMACING FACE

    uint32_t const cps[1] = { 0x1f62c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1687), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_039)
{
    // 1F62D ; [*1688.0020.0002] 
    // LOUDLY CRYING FACE

    uint32_t const cps[1] = { 0x1f62d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1688), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_040)
{
    // 1F62E ; [*1689.0020.0002] 
    // FACE WITH OPEN MOUTH

    uint32_t const cps[1] = { 0x1f62e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1689), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_041)
{
    // 1F62F ; [*168A.0020.0002] 
    // HUSHED FACE

    uint32_t const cps[1] = { 0x1f62f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x168a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_042)
{
    // 1F630 ; [*168B.0020.0002] 
    // FACE WITH OPEN MOUTH AND COLD SWEAT

    uint32_t const cps[1] = { 0x1f630 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x168b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_043)
{
    // 1F631 ; [*168C.0020.0002] 
    // FACE SCREAMING IN FEAR

    uint32_t const cps[1] = { 0x1f631 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x168c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_044)
{
    // 1F632 ; [*168D.0020.0002] 
    // ASTONISHED FACE

    uint32_t const cps[1] = { 0x1f632 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x168d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_045)
{
    // 1F633 ; [*168E.0020.0002] 
    // FLUSHED FACE

    uint32_t const cps[1] = { 0x1f633 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x168e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_046)
{
    // 1F634 ; [*168F.0020.0002] 
    // SLEEPING FACE

    uint32_t const cps[1] = { 0x1f634 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x168f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_047)
{
    // 1F635 ; [*1690.0020.0002] 
    // DIZZY FACE

    uint32_t const cps[1] = { 0x1f635 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1690), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_048)
{
    // 1F636 ; [*1691.0020.0002] 
    // FACE WITHOUT MOUTH

    uint32_t const cps[1] = { 0x1f636 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1691), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_049)
{
    // 1F637 ; [*1692.0020.0002] 
    // FACE WITH MEDICAL MASK

    uint32_t const cps[1] = { 0x1f637 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1692), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_050)
{
    // 1F638 ; [*1693.0020.0002] 
    // GRINNING CAT FACE WITH SMILING EYES

    uint32_t const cps[1] = { 0x1f638 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1693), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_051)
{
    // 1F639 ; [*1694.0020.0002] 
    // CAT FACE WITH TEARS OF JOY

    uint32_t const cps[1] = { 0x1f639 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1694), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_052)
{
    // 1F63A ; [*1695.0020.0002] 
    // SMILING CAT FACE WITH OPEN MOUTH

    uint32_t const cps[1] = { 0x1f63a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1695), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_053)
{
    // 1F63B ; [*1696.0020.0002] 
    // SMILING CAT FACE WITH HEART-SHAPED EYES

    uint32_t const cps[1] = { 0x1f63b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1696), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_054)
{
    // 1F63C ; [*1697.0020.0002] 
    // CAT FACE WITH WRY SMILE

    uint32_t const cps[1] = { 0x1f63c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1697), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_055)
{
    // 1F63D ; [*1698.0020.0002] 
    // KISSING CAT FACE WITH CLOSED EYES

    uint32_t const cps[1] = { 0x1f63d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1698), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_056)
{
    // 1F63E ; [*1699.0020.0002] 
    // POUTING CAT FACE

    uint32_t const cps[1] = { 0x1f63e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1699), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_057)
{
    // 1F63F ; [*169A.0020.0002] 
    // CRYING CAT FACE

    uint32_t const cps[1] = { 0x1f63f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x169a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_058)
{
    // 1F640 ; [*169B.0020.0002] 
    // WEARY CAT FACE

    uint32_t const cps[1] = { 0x1f640 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x169b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_059)
{
    // 1F641 ; [*169C.0020.0002] 
    // SLIGHTLY FROWNING FACE

    uint32_t const cps[1] = { 0x1f641 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x169c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_060)
{
    // 1F642 ; [*169D.0020.0002] 
    // SLIGHTLY SMILING FACE

    uint32_t const cps[1] = { 0x1f642 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x169d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_061)
{
    // 1F643 ; [*169E.0020.0002] 
    // UPSIDE-DOWN FACE

    uint32_t const cps[1] = { 0x1f643 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x169e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_062)
{
    // 1F644 ; [*169F.0020.0002] 
    // FACE WITH ROLLING EYES

    uint32_t const cps[1] = { 0x1f644 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x169f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_063)
{
    // 1F645 ; [*16A0.0020.0002] 
    // FACE WITH NO GOOD GESTURE

    uint32_t const cps[1] = { 0x1f645 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_064)
{
    // 1F646 ; [*16A1.0020.0002] 
    // FACE WITH OK GESTURE

    uint32_t const cps[1] = { 0x1f646 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_065)
{
    // 1F647 ; [*16A2.0020.0002] 
    // PERSON BOWING DEEPLY

    uint32_t const cps[1] = { 0x1f647 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_066)
{
    // 1F648 ; [*16A3.0020.0002] 
    // SEE-NO-EVIL MONKEY

    uint32_t const cps[1] = { 0x1f648 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_067)
{
    // 1F649 ; [*16A4.0020.0002] 
    // HEAR-NO-EVIL MONKEY

    uint32_t const cps[1] = { 0x1f649 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_068)
{
    // 1F64A ; [*16A5.0020.0002] 
    // SPEAK-NO-EVIL MONKEY

    uint32_t const cps[1] = { 0x1f64a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_069)
{
    // 1F64B ; [*16A6.0020.0002] 
    // HAPPY PERSON RAISING ONE HAND

    uint32_t const cps[1] = { 0x1f64b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_070)
{
    // 1F64C ; [*16A7.0020.0002] 
    // PERSON RAISING BOTH HANDS IN CELEBRATION

    uint32_t const cps[1] = { 0x1f64c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_071)
{
    // 1F64D ; [*16A8.0020.0002] 
    // PERSON FROWNING

    uint32_t const cps[1] = { 0x1f64d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_072)
{
    // 1F64E ; [*16A9.0020.0002] 
    // PERSON WITH POUTING FACE

    uint32_t const cps[1] = { 0x1f64e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_073)
{
    // 1F64F ; [*16AA.0020.0002] 
    // PERSON WITH FOLDED HANDS

    uint32_t const cps[1] = { 0x1f64f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_074)
{
    // 1F650 ; [*16AB.0020.0002] 
    // NORTH WEST POINTING LEAF

    uint32_t const cps[1] = { 0x1f650 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_075)
{
    // 1F651 ; [*16AC.0020.0002] 
    // SOUTH WEST POINTING LEAF

    uint32_t const cps[1] = { 0x1f651 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_076)
{
    // 1F652 ; [*16AD.0020.0002] 
    // NORTH EAST POINTING LEAF

    uint32_t const cps[1] = { 0x1f652 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_077)
{
    // 1F653 ; [*16AE.0020.0002] 
    // SOUTH EAST POINTING LEAF

    uint32_t const cps[1] = { 0x1f653 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_078)
{
    // 1F654 ; [*16AF.0020.0002] 
    // TURNED NORTH WEST POINTING LEAF

    uint32_t const cps[1] = { 0x1f654 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_079)
{
    // 1F655 ; [*16B0.0020.0002] 
    // TURNED SOUTH WEST POINTING LEAF

    uint32_t const cps[1] = { 0x1f655 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_080)
{
    // 1F656 ; [*16B1.0020.0002] 
    // TURNED NORTH EAST POINTING LEAF

    uint32_t const cps[1] = { 0x1f656 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_081)
{
    // 1F657 ; [*16B2.0020.0002] 
    // TURNED SOUTH EAST POINTING LEAF

    uint32_t const cps[1] = { 0x1f657 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_082)
{
    // 1F658 ; [*16B3.0020.0002] 
    // NORTH WEST POINTING VINE LEAF

    uint32_t const cps[1] = { 0x1f658 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_083)
{
    // 1F659 ; [*16B4.0020.0002] 
    // SOUTH WEST POINTING VINE LEAF

    uint32_t const cps[1] = { 0x1f659 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_084)
{
    // 1F65A ; [*16B5.0020.0002] 
    // NORTH EAST POINTING VINE LEAF

    uint32_t const cps[1] = { 0x1f65a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_085)
{
    // 1F65B ; [*16B6.0020.0002] 
    // SOUTH EAST POINTING VINE LEAF

    uint32_t const cps[1] = { 0x1f65b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_086)
{
    // 1F65C ; [*16B7.0020.0002] 
    // HEAVY NORTH WEST POINTING VINE LEAF

    uint32_t const cps[1] = { 0x1f65c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_087)
{
    // 1F65D ; [*16B8.0020.0002] 
    // HEAVY SOUTH WEST POINTING VINE LEAF

    uint32_t const cps[1] = { 0x1f65d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_088)
{
    // 1F65E ; [*16B9.0020.0002] 
    // HEAVY NORTH EAST POINTING VINE LEAF

    uint32_t const cps[1] = { 0x1f65e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_089)
{
    // 1F65F ; [*16BA.0020.0002] 
    // HEAVY SOUTH EAST POINTING VINE LEAF

    uint32_t const cps[1] = { 0x1f65f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_090)
{
    // 1F660 ; [*16BB.0020.0002] 
    // NORTH WEST POINTING BUD

    uint32_t const cps[1] = { 0x1f660 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_091)
{
    // 1F661 ; [*16BC.0020.0002] 
    // SOUTH WEST POINTING BUD

    uint32_t const cps[1] = { 0x1f661 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_092)
{
    // 1F662 ; [*16BD.0020.0002] 
    // NORTH EAST POINTING BUD

    uint32_t const cps[1] = { 0x1f662 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_093)
{
    // 1F663 ; [*16BE.0020.0002] 
    // SOUTH EAST POINTING BUD

    uint32_t const cps[1] = { 0x1f663 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16be), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_094)
{
    // 1F664 ; [*16BF.0020.0002] 
    // HEAVY NORTH WEST POINTING BUD

    uint32_t const cps[1] = { 0x1f664 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_095)
{
    // 1F665 ; [*16C0.0020.0002] 
    // HEAVY SOUTH WEST POINTING BUD

    uint32_t const cps[1] = { 0x1f665 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_096)
{
    // 1F666 ; [*16C1.0020.0002] 
    // HEAVY NORTH EAST POINTING BUD

    uint32_t const cps[1] = { 0x1f666 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_097)
{
    // 1F667 ; [*16C2.0020.0002] 
    // HEAVY SOUTH EAST POINTING BUD

    uint32_t const cps[1] = { 0x1f667 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_098)
{
    // 1F668 ; [*16C3.0020.0002] 
    // HOLLOW QUILT SQUARE ORNAMENT

    uint32_t const cps[1] = { 0x1f668 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_099)
{
    // 1F669 ; [*16C4.0020.0002] 
    // HOLLOW QUILT SQUARE ORNAMENT IN BLACK SQUARE

    uint32_t const cps[1] = { 0x1f669 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_100)
{
    // 1F66A ; [*16C5.0020.0002] 
    // SOLID QUILT SQUARE ORNAMENT

    uint32_t const cps[1] = { 0x1f66a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_101)
{
    // 1F66B ; [*16C6.0020.0002] 
    // SOLID QUILT SQUARE ORNAMENT IN BLACK SQUARE

    uint32_t const cps[1] = { 0x1f66b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_102)
{
    // 1F66C ; [*16C7.0020.0002] 
    // LEFTWARDS ROCKET

    uint32_t const cps[1] = { 0x1f66c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_103)
{
    // 1F66D ; [*16C8.0020.0002] 
    // UPWARDS ROCKET

    uint32_t const cps[1] = { 0x1f66d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_104)
{
    // 1F66E ; [*16C9.0020.0002] 
    // RIGHTWARDS ROCKET

    uint32_t const cps[1] = { 0x1f66e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_105)
{
    // 1F66F ; [*16CA.0020.0002] 
    // DOWNWARDS ROCKET

    uint32_t const cps[1] = { 0x1f66f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_106)
{
    // 1F670 ; [*16CB.0020.0002] 
    // SCRIPT LIGATURE ET ORNAMENT

    uint32_t const cps[1] = { 0x1f670 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_107)
{
    // 1F671 ; [*16CC.0020.0002] 
    // HEAVY SCRIPT LIGATURE ET ORNAMENT

    uint32_t const cps[1] = { 0x1f671 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_108)
{
    // 1F672 ; [*16CD.0020.0002] 
    // LIGATURE OPEN ET ORNAMENT

    uint32_t const cps[1] = { 0x1f672 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_109)
{
    // 1F673 ; [*16CE.0020.0002] 
    // HEAVY LIGATURE OPEN ET ORNAMENT

    uint32_t const cps[1] = { 0x1f673 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_110)
{
    // 1F674 ; [*16CF.0020.0002] 
    // HEAVY AMPERSAND ORNAMENT

    uint32_t const cps[1] = { 0x1f674 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_111)
{
    // 1F675 ; [*16D0.0020.0002] 
    // SWASH AMPERSAND ORNAMENT

    uint32_t const cps[1] = { 0x1f675 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_112)
{
    // 1F676 ; [*16D1.0020.0002] 
    // SANS-SERIF HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x1f676 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_113)
{
    // 1F677 ; [*16D2.0020.0002] 
    // SANS-SERIF HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x1f677 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_114)
{
    // 1F678 ; [*16D3.0020.0002] 
    // SANS-SERIF HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x1f678 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_115)
{
    // 1F679 ; [*16D4.0020.0002] 
    // HEAVY INTERROBANG ORNAMENT

    uint32_t const cps[1] = { 0x1f679 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_116)
{
    // 1F67A ; [*16D5.0020.0002] 
    // SANS-SERIF INTERROBANG ORNAMENT

    uint32_t const cps[1] = { 0x1f67a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_117)
{
    // 1F67B ; [*16D6.0020.0002] 
    // HEAVY SANS-SERIF INTERROBANG ORNAMENT

    uint32_t const cps[1] = { 0x1f67b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_118)
{
    // 1F67C ; [*16D7.0020.0002] 
    // VERY HEAVY SOLIDUS

    uint32_t const cps[1] = { 0x1f67c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_119)
{
    // 1F67D ; [*16D8.0020.0002] 
    // VERY HEAVY REVERSE SOLIDUS

    uint32_t const cps[1] = { 0x1f67d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_120)
{
    // 1F67E ; [*16D9.0020.0002] 
    // CHECKER BOARD

    uint32_t const cps[1] = { 0x1f67e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_121)
{
    // 1F67F ; [*16DA.0020.0002] 
    // REVERSE CHECKER BOARD

    uint32_t const cps[1] = { 0x1f67f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_122)
{
    // 1F680 ; [*16DB.0020.0002] 
    // ROCKET

    uint32_t const cps[1] = { 0x1f680 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_123)
{
    // 1F681 ; [*16DC.0020.0002] 
    // HELICOPTER

    uint32_t const cps[1] = { 0x1f681 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_124)
{
    // 1F682 ; [*16DD.0020.0002] 
    // STEAM LOCOMOTIVE

    uint32_t const cps[1] = { 0x1f682 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_125)
{
    // 1F683 ; [*16DE.0020.0002] 
    // RAILWAY CAR

    uint32_t const cps[1] = { 0x1f683 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_126)
{
    // 1F684 ; [*16DF.0020.0002] 
    // HIGH-SPEED TRAIN

    uint32_t const cps[1] = { 0x1f684 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_127)
{
    // 1F685 ; [*16E0.0020.0002] 
    // HIGH-SPEED TRAIN WITH BULLET NOSE

    uint32_t const cps[1] = { 0x1f685 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_128)
{
    // 1F686 ; [*16E1.0020.0002] 
    // TRAIN

    uint32_t const cps[1] = { 0x1f686 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_129)
{
    // 1F687 ; [*16E2.0020.0002] 
    // METRO

    uint32_t const cps[1] = { 0x1f687 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_130)
{
    // 1F688 ; [*16E3.0020.0002] 
    // LIGHT RAIL

    uint32_t const cps[1] = { 0x1f688 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_131)
{
    // 1F689 ; [*16E4.0020.0002] 
    // STATION

    uint32_t const cps[1] = { 0x1f689 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_132)
{
    // 1F68A ; [*16E5.0020.0002] 
    // TRAM

    uint32_t const cps[1] = { 0x1f68a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_133)
{
    // 1F68B ; [*16E6.0020.0002] 
    // TRAM CAR

    uint32_t const cps[1] = { 0x1f68b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_134)
{
    // 1F68C ; [*16E7.0020.0002] 
    // BUS

    uint32_t const cps[1] = { 0x1f68c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_135)
{
    // 1F68D ; [*16E8.0020.0002] 
    // ONCOMING BUS

    uint32_t const cps[1] = { 0x1f68d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_136)
{
    // 1F68E ; [*16E9.0020.0002] 
    // TROLLEYBUS

    uint32_t const cps[1] = { 0x1f68e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_137)
{
    // 1F68F ; [*16EA.0020.0002] 
    // BUS STOP

    uint32_t const cps[1] = { 0x1f68f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_138)
{
    // 1F690 ; [*16EB.0020.0002] 
    // MINIBUS

    uint32_t const cps[1] = { 0x1f690 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_139)
{
    // 1F691 ; [*16EC.0020.0002] 
    // AMBULANCE

    uint32_t const cps[1] = { 0x1f691 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_140)
{
    // 1F692 ; [*16ED.0020.0002] 
    // FIRE ENGINE

    uint32_t const cps[1] = { 0x1f692 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_141)
{
    // 1F693 ; [*16EE.0020.0002] 
    // POLICE CAR

    uint32_t const cps[1] = { 0x1f693 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_142)
{
    // 1F694 ; [*16EF.0020.0002] 
    // ONCOMING POLICE CAR

    uint32_t const cps[1] = { 0x1f694 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_143)
{
    // 1F695 ; [*16F0.0020.0002] 
    // TAXI

    uint32_t const cps[1] = { 0x1f695 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_144)
{
    // 1F696 ; [*16F1.0020.0002] 
    // ONCOMING TAXI

    uint32_t const cps[1] = { 0x1f696 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_145)
{
    // 1F697 ; [*16F2.0020.0002] 
    // AUTOMOBILE

    uint32_t const cps[1] = { 0x1f697 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_146)
{
    // 1F698 ; [*16F3.0020.0002] 
    // ONCOMING AUTOMOBILE

    uint32_t const cps[1] = { 0x1f698 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_147)
{
    // 1F699 ; [*16F4.0020.0002] 
    // RECREATIONAL VEHICLE

    uint32_t const cps[1] = { 0x1f699 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_148)
{
    // 1F69A ; [*16F5.0020.0002] 
    // DELIVERY TRUCK

    uint32_t const cps[1] = { 0x1f69a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_198_149)
{
    // 1F69B ; [*16F6.0020.0002] 
    // ARTICULATED LORRY

    uint32_t const cps[1] = { 0x1f69b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x16f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

