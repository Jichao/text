// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_374_000)
{
    // 463E 003F;	
    // (䘾) CJK UNIFIED IDEOGRAPH-463E	[FB80 C63E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC63E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_001)
{
    // 463E 0061;	
    // (䘾) CJK UNIFIED IDEOGRAPH-463E	[FB80 C63E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC63E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_002)
{
    // 463E 0041;	
    // (䘾) CJK UNIFIED IDEOGRAPH-463E	[FB80 C63E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x463E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC63E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_003)
{
    // 463E 0062;	
    // (䘾) CJK UNIFIED IDEOGRAPH-463E	[FB80 C63E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC63E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_004)
{
    // 463F 0021;	
    // (䘿) CJK UNIFIED IDEOGRAPH-463F	[FB80 C63F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC63F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_005)
{
    // 463F 003F;	
    // (䘿) CJK UNIFIED IDEOGRAPH-463F	[FB80 C63F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC63F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_006)
{
    // 463F 0061;	
    // (䘿) CJK UNIFIED IDEOGRAPH-463F	[FB80 C63F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC63F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_007)
{
    // 463F 0041;	
    // (䘿) CJK UNIFIED IDEOGRAPH-463F	[FB80 C63F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x463F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC63F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_008)
{
    // 463F 0062;	
    // (䘿) CJK UNIFIED IDEOGRAPH-463F	[FB80 C63F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x463F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC63F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_009)
{
    // 4640 0021;	
    // (䙀) CJK UNIFIED IDEOGRAPH-4640	[FB80 C640 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4640, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC640, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_010)
{
    // 4640 003F;	
    // (䙀) CJK UNIFIED IDEOGRAPH-4640	[FB80 C640 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4640, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC640, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_011)
{
    // 4640 0061;	
    // (䙀) CJK UNIFIED IDEOGRAPH-4640	[FB80 C640 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4640, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_012)
{
    // 4640 0041;	
    // (䙀) CJK UNIFIED IDEOGRAPH-4640	[FB80 C640 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4640, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_013)
{
    // 4640 0062;	
    // (䙀) CJK UNIFIED IDEOGRAPH-4640	[FB80 C640 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4640, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC640, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_014)
{
    // 4641 0021;	
    // (䙁) CJK UNIFIED IDEOGRAPH-4641	[FB80 C641 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4641, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC641, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_015)
{
    // 4641 003F;	
    // (䙁) CJK UNIFIED IDEOGRAPH-4641	[FB80 C641 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4641, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC641, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_016)
{
    // 4641 0061;	
    // (䙁) CJK UNIFIED IDEOGRAPH-4641	[FB80 C641 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4641, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_017)
{
    // 4641 0041;	
    // (䙁) CJK UNIFIED IDEOGRAPH-4641	[FB80 C641 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4641, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_018)
{
    // 4641 0062;	
    // (䙁) CJK UNIFIED IDEOGRAPH-4641	[FB80 C641 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4641, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC641, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_019)
{
    // 4642 0021;	
    // (䙂) CJK UNIFIED IDEOGRAPH-4642	[FB80 C642 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4642, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC642, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_020)
{
    // 4642 003F;	
    // (䙂) CJK UNIFIED IDEOGRAPH-4642	[FB80 C642 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4642, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC642, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_021)
{
    // 4642 0061;	
    // (䙂) CJK UNIFIED IDEOGRAPH-4642	[FB80 C642 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4642, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_022)
{
    // 4642 0041;	
    // (䙂) CJK UNIFIED IDEOGRAPH-4642	[FB80 C642 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4642, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_023)
{
    // 4642 0062;	
    // (䙂) CJK UNIFIED IDEOGRAPH-4642	[FB80 C642 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4642, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC642, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_024)
{
    // 4643 0021;	
    // (䙃) CJK UNIFIED IDEOGRAPH-4643	[FB80 C643 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4643, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC643, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_025)
{
    // 4643 003F;	
    // (䙃) CJK UNIFIED IDEOGRAPH-4643	[FB80 C643 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4643, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC643, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_026)
{
    // 4643 0061;	
    // (䙃) CJK UNIFIED IDEOGRAPH-4643	[FB80 C643 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4643, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_027)
{
    // 4643 0041;	
    // (䙃) CJK UNIFIED IDEOGRAPH-4643	[FB80 C643 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4643, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_028)
{
    // 4643 0062;	
    // (䙃) CJK UNIFIED IDEOGRAPH-4643	[FB80 C643 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4643, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC643, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_029)
{
    // 4644 0021;	
    // (䙄) CJK UNIFIED IDEOGRAPH-4644	[FB80 C644 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4644, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC644, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_030)
{
    // 4644 003F;	
    // (䙄) CJK UNIFIED IDEOGRAPH-4644	[FB80 C644 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4644, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC644, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_031)
{
    // 4644 0061;	
    // (䙄) CJK UNIFIED IDEOGRAPH-4644	[FB80 C644 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4644, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_032)
{
    // 4644 0041;	
    // (䙄) CJK UNIFIED IDEOGRAPH-4644	[FB80 C644 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4644, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_033)
{
    // 4644 0062;	
    // (䙄) CJK UNIFIED IDEOGRAPH-4644	[FB80 C644 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4644, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC644, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_034)
{
    // 4645 0021;	
    // (䙅) CJK UNIFIED IDEOGRAPH-4645	[FB80 C645 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4645, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC645, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_035)
{
    // 4645 003F;	
    // (䙅) CJK UNIFIED IDEOGRAPH-4645	[FB80 C645 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4645, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC645, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_036)
{
    // 4645 0061;	
    // (䙅) CJK UNIFIED IDEOGRAPH-4645	[FB80 C645 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4645, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_037)
{
    // 4645 0041;	
    // (䙅) CJK UNIFIED IDEOGRAPH-4645	[FB80 C645 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4645, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_038)
{
    // 4645 0062;	
    // (䙅) CJK UNIFIED IDEOGRAPH-4645	[FB80 C645 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4645, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC645, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_039)
{
    // 4646 0021;	
    // (䙆) CJK UNIFIED IDEOGRAPH-4646	[FB80 C646 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4646, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC646, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_040)
{
    // 4646 003F;	
    // (䙆) CJK UNIFIED IDEOGRAPH-4646	[FB80 C646 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4646, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC646, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_041)
{
    // 4646 0061;	
    // (䙆) CJK UNIFIED IDEOGRAPH-4646	[FB80 C646 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4646, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_042)
{
    // 4646 0041;	
    // (䙆) CJK UNIFIED IDEOGRAPH-4646	[FB80 C646 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4646, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_043)
{
    // 4646 0062;	
    // (䙆) CJK UNIFIED IDEOGRAPH-4646	[FB80 C646 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4646, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC646, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_044)
{
    // 4647 0021;	
    // (䙇) CJK UNIFIED IDEOGRAPH-4647	[FB80 C647 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4647, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC647, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_045)
{
    // 4647 003F;	
    // (䙇) CJK UNIFIED IDEOGRAPH-4647	[FB80 C647 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4647, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC647, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_046)
{
    // 4647 0061;	
    // (䙇) CJK UNIFIED IDEOGRAPH-4647	[FB80 C647 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4647, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_047)
{
    // 4647 0041;	
    // (䙇) CJK UNIFIED IDEOGRAPH-4647	[FB80 C647 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4647, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_048)
{
    // 4647 0062;	
    // (䙇) CJK UNIFIED IDEOGRAPH-4647	[FB80 C647 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4647, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC647, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_049)
{
    // 4648 0021;	
    // (䙈) CJK UNIFIED IDEOGRAPH-4648	[FB80 C648 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4648, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC648, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_050)
{
    // 4648 003F;	
    // (䙈) CJK UNIFIED IDEOGRAPH-4648	[FB80 C648 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4648, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC648, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_051)
{
    // 4648 0061;	
    // (䙈) CJK UNIFIED IDEOGRAPH-4648	[FB80 C648 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4648, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_052)
{
    // 4648 0041;	
    // (䙈) CJK UNIFIED IDEOGRAPH-4648	[FB80 C648 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4648, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_053)
{
    // 4648 0062;	
    // (䙈) CJK UNIFIED IDEOGRAPH-4648	[FB80 C648 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4648, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC648, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_054)
{
    // 4649 0021;	
    // (䙉) CJK UNIFIED IDEOGRAPH-4649	[FB80 C649 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4649, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC649, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_055)
{
    // 4649 003F;	
    // (䙉) CJK UNIFIED IDEOGRAPH-4649	[FB80 C649 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4649, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC649, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_056)
{
    // 4649 0061;	
    // (䙉) CJK UNIFIED IDEOGRAPH-4649	[FB80 C649 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4649, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_057)
{
    // 4649 0041;	
    // (䙉) CJK UNIFIED IDEOGRAPH-4649	[FB80 C649 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4649, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_058)
{
    // 4649 0062;	
    // (䙉) CJK UNIFIED IDEOGRAPH-4649	[FB80 C649 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4649, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC649, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_059)
{
    // 464A 0021;	
    // (䙊) CJK UNIFIED IDEOGRAPH-464A	[FB80 C64A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC64A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_060)
{
    // 464A 003F;	
    // (䙊) CJK UNIFIED IDEOGRAPH-464A	[FB80 C64A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC64A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_061)
{
    // 464A 0061;	
    // (䙊) CJK UNIFIED IDEOGRAPH-464A	[FB80 C64A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC64A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_062)
{
    // 464A 0041;	
    // (䙊) CJK UNIFIED IDEOGRAPH-464A	[FB80 C64A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x464A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC64A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_063)
{
    // 464A 0062;	
    // (䙊) CJK UNIFIED IDEOGRAPH-464A	[FB80 C64A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC64A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_064)
{
    // 464B 0021;	
    // (䙋) CJK UNIFIED IDEOGRAPH-464B	[FB80 C64B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC64B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_065)
{
    // 464B 003F;	
    // (䙋) CJK UNIFIED IDEOGRAPH-464B	[FB80 C64B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC64B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_066)
{
    // 464B 0061;	
    // (䙋) CJK UNIFIED IDEOGRAPH-464B	[FB80 C64B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC64B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_067)
{
    // 464B 0041;	
    // (䙋) CJK UNIFIED IDEOGRAPH-464B	[FB80 C64B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x464B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC64B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_068)
{
    // 464B 0062;	
    // (䙋) CJK UNIFIED IDEOGRAPH-464B	[FB80 C64B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC64B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_069)
{
    // 464C 0021;	
    // (䙌) CJK UNIFIED IDEOGRAPH-464C	[FB80 C64C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC64C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_070)
{
    // 464C 003F;	
    // (䙌) CJK UNIFIED IDEOGRAPH-464C	[FB80 C64C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC64C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_071)
{
    // 464C 0061;	
    // (䙌) CJK UNIFIED IDEOGRAPH-464C	[FB80 C64C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC64C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_072)
{
    // 464C 0041;	
    // (䙌) CJK UNIFIED IDEOGRAPH-464C	[FB80 C64C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x464C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC64C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_073)
{
    // 464C 0062;	
    // (䙌) CJK UNIFIED IDEOGRAPH-464C	[FB80 C64C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC64C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_074)
{
    // 464D 0021;	
    // (䙍) CJK UNIFIED IDEOGRAPH-464D	[FB80 C64D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC64D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_075)
{
    // 464D 003F;	
    // (䙍) CJK UNIFIED IDEOGRAPH-464D	[FB80 C64D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC64D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_076)
{
    // 464D 0061;	
    // (䙍) CJK UNIFIED IDEOGRAPH-464D	[FB80 C64D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC64D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_077)
{
    // 464D 0041;	
    // (䙍) CJK UNIFIED IDEOGRAPH-464D	[FB80 C64D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x464D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC64D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_078)
{
    // 464D 0062;	
    // (䙍) CJK UNIFIED IDEOGRAPH-464D	[FB80 C64D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC64D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_079)
{
    // 464E 0021;	
    // (䙎) CJK UNIFIED IDEOGRAPH-464E	[FB80 C64E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC64E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_080)
{
    // 464E 003F;	
    // (䙎) CJK UNIFIED IDEOGRAPH-464E	[FB80 C64E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC64E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_081)
{
    // 464E 0061;	
    // (䙎) CJK UNIFIED IDEOGRAPH-464E	[FB80 C64E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC64E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_082)
{
    // 464E 0041;	
    // (䙎) CJK UNIFIED IDEOGRAPH-464E	[FB80 C64E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x464E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC64E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_083)
{
    // 464E 0062;	
    // (䙎) CJK UNIFIED IDEOGRAPH-464E	[FB80 C64E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC64E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_084)
{
    // 464F 0021;	
    // (䙏) CJK UNIFIED IDEOGRAPH-464F	[FB80 C64F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC64F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_085)
{
    // 464F 003F;	
    // (䙏) CJK UNIFIED IDEOGRAPH-464F	[FB80 C64F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC64F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_086)
{
    // 464F 0061;	
    // (䙏) CJK UNIFIED IDEOGRAPH-464F	[FB80 C64F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC64F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_087)
{
    // 464F 0041;	
    // (䙏) CJK UNIFIED IDEOGRAPH-464F	[FB80 C64F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x464F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC64F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_088)
{
    // 464F 0062;	
    // (䙏) CJK UNIFIED IDEOGRAPH-464F	[FB80 C64F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x464F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC64F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_089)
{
    // 4650 0021;	
    // (䙐) CJK UNIFIED IDEOGRAPH-4650	[FB80 C650 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4650, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC650, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_090)
{
    // 4650 003F;	
    // (䙐) CJK UNIFIED IDEOGRAPH-4650	[FB80 C650 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4650, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC650, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_091)
{
    // 4650 0061;	
    // (䙐) CJK UNIFIED IDEOGRAPH-4650	[FB80 C650 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4650, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_092)
{
    // 4650 0041;	
    // (䙐) CJK UNIFIED IDEOGRAPH-4650	[FB80 C650 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4650, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_093)
{
    // 4650 0062;	
    // (䙐) CJK UNIFIED IDEOGRAPH-4650	[FB80 C650 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4650, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC650, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_094)
{
    // 4651 0021;	
    // (䙑) CJK UNIFIED IDEOGRAPH-4651	[FB80 C651 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4651, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC651, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_095)
{
    // 4651 003F;	
    // (䙑) CJK UNIFIED IDEOGRAPH-4651	[FB80 C651 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4651, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC651, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_096)
{
    // 4651 0061;	
    // (䙑) CJK UNIFIED IDEOGRAPH-4651	[FB80 C651 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4651, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_097)
{
    // 4651 0041;	
    // (䙑) CJK UNIFIED IDEOGRAPH-4651	[FB80 C651 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4651, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_098)
{
    // 4651 0062;	
    // (䙑) CJK UNIFIED IDEOGRAPH-4651	[FB80 C651 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4651, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC651, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_099)
{
    // 4652 0021;	
    // (䙒) CJK UNIFIED IDEOGRAPH-4652	[FB80 C652 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4652, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC652, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_100)
{
    // 4652 003F;	
    // (䙒) CJK UNIFIED IDEOGRAPH-4652	[FB80 C652 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4652, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC652, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_101)
{
    // 4652 0061;	
    // (䙒) CJK UNIFIED IDEOGRAPH-4652	[FB80 C652 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4652, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_102)
{
    // 4652 0041;	
    // (䙒) CJK UNIFIED IDEOGRAPH-4652	[FB80 C652 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4652, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_103)
{
    // 4652 0062;	
    // (䙒) CJK UNIFIED IDEOGRAPH-4652	[FB80 C652 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4652, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC652, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_104)
{
    // 4653 0021;	
    // (䙓) CJK UNIFIED IDEOGRAPH-4653	[FB80 C653 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4653, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC653, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_105)
{
    // 4653 003F;	
    // (䙓) CJK UNIFIED IDEOGRAPH-4653	[FB80 C653 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4653, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC653, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_106)
{
    // 4653 0061;	
    // (䙓) CJK UNIFIED IDEOGRAPH-4653	[FB80 C653 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4653, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_107)
{
    // 4653 0041;	
    // (䙓) CJK UNIFIED IDEOGRAPH-4653	[FB80 C653 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4653, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_108)
{
    // 4653 0062;	
    // (䙓) CJK UNIFIED IDEOGRAPH-4653	[FB80 C653 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4653, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC653, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_109)
{
    // 4654 0021;	
    // (䙔) CJK UNIFIED IDEOGRAPH-4654	[FB80 C654 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4654, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC654, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_110)
{
    // 4654 003F;	
    // (䙔) CJK UNIFIED IDEOGRAPH-4654	[FB80 C654 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4654, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC654, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_111)
{
    // 4654 0061;	
    // (䙔) CJK UNIFIED IDEOGRAPH-4654	[FB80 C654 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4654, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_112)
{
    // 4654 0041;	
    // (䙔) CJK UNIFIED IDEOGRAPH-4654	[FB80 C654 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4654, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_113)
{
    // 4654 0062;	
    // (䙔) CJK UNIFIED IDEOGRAPH-4654	[FB80 C654 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4654, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC654, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_114)
{
    // 4655 0021;	
    // (䙕) CJK UNIFIED IDEOGRAPH-4655	[FB80 C655 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4655, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC655, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_115)
{
    // 4655 003F;	
    // (䙕) CJK UNIFIED IDEOGRAPH-4655	[FB80 C655 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4655, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC655, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_116)
{
    // 4655 0061;	
    // (䙕) CJK UNIFIED IDEOGRAPH-4655	[FB80 C655 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4655, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_117)
{
    // 4655 0041;	
    // (䙕) CJK UNIFIED IDEOGRAPH-4655	[FB80 C655 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4655, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_118)
{
    // 4655 0062;	
    // (䙕) CJK UNIFIED IDEOGRAPH-4655	[FB80 C655 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4655, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC655, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_119)
{
    // 4656 0021;	
    // (䙖) CJK UNIFIED IDEOGRAPH-4656	[FB80 C656 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4656, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC656, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_120)
{
    // 4656 003F;	
    // (䙖) CJK UNIFIED IDEOGRAPH-4656	[FB80 C656 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4656, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC656, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_121)
{
    // 4656 0061;	
    // (䙖) CJK UNIFIED IDEOGRAPH-4656	[FB80 C656 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4656, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_122)
{
    // 4656 0041;	
    // (䙖) CJK UNIFIED IDEOGRAPH-4656	[FB80 C656 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4656, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_123)
{
    // 4656 0062;	
    // (䙖) CJK UNIFIED IDEOGRAPH-4656	[FB80 C656 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4656, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC656, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_124)
{
    // 4657 0021;	
    // (䙗) CJK UNIFIED IDEOGRAPH-4657	[FB80 C657 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4657, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC657, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_125)
{
    // 4657 003F;	
    // (䙗) CJK UNIFIED IDEOGRAPH-4657	[FB80 C657 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4657, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC657, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_126)
{
    // 4657 0061;	
    // (䙗) CJK UNIFIED IDEOGRAPH-4657	[FB80 C657 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4657, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_127)
{
    // 4657 0041;	
    // (䙗) CJK UNIFIED IDEOGRAPH-4657	[FB80 C657 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4657, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_128)
{
    // 4657 0062;	
    // (䙗) CJK UNIFIED IDEOGRAPH-4657	[FB80 C657 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4657, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC657, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_129)
{
    // 4658 0021;	
    // (䙘) CJK UNIFIED IDEOGRAPH-4658	[FB80 C658 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4658, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC658, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_130)
{
    // 4658 003F;	
    // (䙘) CJK UNIFIED IDEOGRAPH-4658	[FB80 C658 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4658, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC658, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_131)
{
    // 4658 0061;	
    // (䙘) CJK UNIFIED IDEOGRAPH-4658	[FB80 C658 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4658, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_132)
{
    // 4658 0041;	
    // (䙘) CJK UNIFIED IDEOGRAPH-4658	[FB80 C658 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4658, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_133)
{
    // 4658 0062;	
    // (䙘) CJK UNIFIED IDEOGRAPH-4658	[FB80 C658 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4658, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC658, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_134)
{
    // 4659 0021;	
    // (䙙) CJK UNIFIED IDEOGRAPH-4659	[FB80 C659 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4659, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC659, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_135)
{
    // 4659 003F;	
    // (䙙) CJK UNIFIED IDEOGRAPH-4659	[FB80 C659 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4659, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC659, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_136)
{
    // 4659 0061;	
    // (䙙) CJK UNIFIED IDEOGRAPH-4659	[FB80 C659 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4659, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_137)
{
    // 4659 0041;	
    // (䙙) CJK UNIFIED IDEOGRAPH-4659	[FB80 C659 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4659, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_138)
{
    // 4659 0062;	
    // (䙙) CJK UNIFIED IDEOGRAPH-4659	[FB80 C659 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4659, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC659, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_139)
{
    // 465A 0021;	
    // (䙚) CJK UNIFIED IDEOGRAPH-465A	[FB80 C65A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC65A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_140)
{
    // 465A 003F;	
    // (䙚) CJK UNIFIED IDEOGRAPH-465A	[FB80 C65A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC65A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_141)
{
    // 465A 0061;	
    // (䙚) CJK UNIFIED IDEOGRAPH-465A	[FB80 C65A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC65A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_142)
{
    // 465A 0041;	
    // (䙚) CJK UNIFIED IDEOGRAPH-465A	[FB80 C65A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x465A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC65A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_143)
{
    // 465A 0062;	
    // (䙚) CJK UNIFIED IDEOGRAPH-465A	[FB80 C65A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC65A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_144)
{
    // 465B 0021;	
    // (䙛) CJK UNIFIED IDEOGRAPH-465B	[FB80 C65B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC65B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_145)
{
    // 465B 003F;	
    // (䙛) CJK UNIFIED IDEOGRAPH-465B	[FB80 C65B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC65B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_146)
{
    // 465B 0061;	
    // (䙛) CJK UNIFIED IDEOGRAPH-465B	[FB80 C65B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC65B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_147)
{
    // 465B 0041;	
    // (䙛) CJK UNIFIED IDEOGRAPH-465B	[FB80 C65B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x465B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC65B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_148)
{
    // 465B 0062;	
    // (䙛) CJK UNIFIED IDEOGRAPH-465B	[FB80 C65B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC65B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_149)
{
    // 465C 0021;	
    // (䙜) CJK UNIFIED IDEOGRAPH-465C	[FB80 C65C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC65C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_150)
{
    // 465C 003F;	
    // (䙜) CJK UNIFIED IDEOGRAPH-465C	[FB80 C65C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC65C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_151)
{
    // 465C 0061;	
    // (䙜) CJK UNIFIED IDEOGRAPH-465C	[FB80 C65C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC65C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_152)
{
    // 465C 0041;	
    // (䙜) CJK UNIFIED IDEOGRAPH-465C	[FB80 C65C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x465C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC65C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_153)
{
    // 465C 0062;	
    // (䙜) CJK UNIFIED IDEOGRAPH-465C	[FB80 C65C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC65C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_154)
{
    // 465D 0021;	
    // (䙝) CJK UNIFIED IDEOGRAPH-465D	[FB80 C65D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC65D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_155)
{
    // 465D 003F;	
    // (䙝) CJK UNIFIED IDEOGRAPH-465D	[FB80 C65D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC65D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_156)
{
    // 465D 0061;	
    // (䙝) CJK UNIFIED IDEOGRAPH-465D	[FB80 C65D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC65D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_157)
{
    // 465D 0041;	
    // (䙝) CJK UNIFIED IDEOGRAPH-465D	[FB80 C65D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x465D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC65D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_158)
{
    // 465D 0062;	
    // (䙝) CJK UNIFIED IDEOGRAPH-465D	[FB80 C65D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC65D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_159)
{
    // 465E 0021;	
    // (䙞) CJK UNIFIED IDEOGRAPH-465E	[FB80 C65E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC65E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_160)
{
    // 465E 003F;	
    // (䙞) CJK UNIFIED IDEOGRAPH-465E	[FB80 C65E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC65E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_161)
{
    // 465E 0061;	
    // (䙞) CJK UNIFIED IDEOGRAPH-465E	[FB80 C65E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC65E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_162)
{
    // 465E 0041;	
    // (䙞) CJK UNIFIED IDEOGRAPH-465E	[FB80 C65E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x465E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC65E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_163)
{
    // 465E 0062;	
    // (䙞) CJK UNIFIED IDEOGRAPH-465E	[FB80 C65E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC65E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_164)
{
    // 465F 0021;	
    // (䙟) CJK UNIFIED IDEOGRAPH-465F	[FB80 C65F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC65F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_165)
{
    // 465F 003F;	
    // (䙟) CJK UNIFIED IDEOGRAPH-465F	[FB80 C65F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC65F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_166)
{
    // 465F 0061;	
    // (䙟) CJK UNIFIED IDEOGRAPH-465F	[FB80 C65F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC65F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_167)
{
    // 465F 0041;	
    // (䙟) CJK UNIFIED IDEOGRAPH-465F	[FB80 C65F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x465F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC65F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_168)
{
    // 465F 0062;	
    // (䙟) CJK UNIFIED IDEOGRAPH-465F	[FB80 C65F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x465F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC65F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_169)
{
    // 4660 0021;	
    // (䙠) CJK UNIFIED IDEOGRAPH-4660	[FB80 C660 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4660, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC660, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_170)
{
    // 4660 003F;	
    // (䙠) CJK UNIFIED IDEOGRAPH-4660	[FB80 C660 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4660, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC660, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_171)
{
    // 4660 0061;	
    // (䙠) CJK UNIFIED IDEOGRAPH-4660	[FB80 C660 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4660, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_172)
{
    // 4660 0041;	
    // (䙠) CJK UNIFIED IDEOGRAPH-4660	[FB80 C660 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4660, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_173)
{
    // 4660 0062;	
    // (䙠) CJK UNIFIED IDEOGRAPH-4660	[FB80 C660 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4660, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC660, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_174)
{
    // 4661 0021;	
    // (䙡) CJK UNIFIED IDEOGRAPH-4661	[FB80 C661 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4661, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC661, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_175)
{
    // 4661 003F;	
    // (䙡) CJK UNIFIED IDEOGRAPH-4661	[FB80 C661 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4661, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC661, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_176)
{
    // 4661 0061;	
    // (䙡) CJK UNIFIED IDEOGRAPH-4661	[FB80 C661 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4661, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_177)
{
    // 4661 0041;	
    // (䙡) CJK UNIFIED IDEOGRAPH-4661	[FB80 C661 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4661, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_178)
{
    // 4661 0062;	
    // (䙡) CJK UNIFIED IDEOGRAPH-4661	[FB80 C661 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4661, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC661, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_179)
{
    // 4662 0021;	
    // (䙢) CJK UNIFIED IDEOGRAPH-4662	[FB80 C662 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4662, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC662, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_180)
{
    // 4662 003F;	
    // (䙢) CJK UNIFIED IDEOGRAPH-4662	[FB80 C662 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4662, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC662, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_181)
{
    // 4662 0061;	
    // (䙢) CJK UNIFIED IDEOGRAPH-4662	[FB80 C662 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4662, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_182)
{
    // 4662 0041;	
    // (䙢) CJK UNIFIED IDEOGRAPH-4662	[FB80 C662 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4662, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_183)
{
    // 4662 0062;	
    // (䙢) CJK UNIFIED IDEOGRAPH-4662	[FB80 C662 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4662, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC662, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_184)
{
    // 4663 0021;	
    // (䙣) CJK UNIFIED IDEOGRAPH-4663	[FB80 C663 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4663, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC663, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_185)
{
    // 4663 003F;	
    // (䙣) CJK UNIFIED IDEOGRAPH-4663	[FB80 C663 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4663, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC663, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_186)
{
    // 4663 0061;	
    // (䙣) CJK UNIFIED IDEOGRAPH-4663	[FB80 C663 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4663, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_187)
{
    // 4663 0041;	
    // (䙣) CJK UNIFIED IDEOGRAPH-4663	[FB80 C663 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4663, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_188)
{
    // 4663 0062;	
    // (䙣) CJK UNIFIED IDEOGRAPH-4663	[FB80 C663 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4663, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC663, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_189)
{
    // 4664 0021;	
    // (䙤) CJK UNIFIED IDEOGRAPH-4664	[FB80 C664 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4664, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC664, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_190)
{
    // 4664 003F;	
    // (䙤) CJK UNIFIED IDEOGRAPH-4664	[FB80 C664 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4664, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC664, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_191)
{
    // 4664 0061;	
    // (䙤) CJK UNIFIED IDEOGRAPH-4664	[FB80 C664 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4664, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_192)
{
    // 4664 0041;	
    // (䙤) CJK UNIFIED IDEOGRAPH-4664	[FB80 C664 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4664, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_193)
{
    // 4664 0062;	
    // (䙤) CJK UNIFIED IDEOGRAPH-4664	[FB80 C664 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4664, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC664, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_194)
{
    // 4665 0021;	
    // (䙥) CJK UNIFIED IDEOGRAPH-4665	[FB80 C665 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4665, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC665, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_195)
{
    // 4665 003F;	
    // (䙥) CJK UNIFIED IDEOGRAPH-4665	[FB80 C665 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4665, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC665, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_196)
{
    // 4665 0061;	
    // (䙥) CJK UNIFIED IDEOGRAPH-4665	[FB80 C665 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4665, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_197)
{
    // 4665 0041;	
    // (䙥) CJK UNIFIED IDEOGRAPH-4665	[FB80 C665 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4665, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_198)
{
    // 4665 0062;	
    // (䙥) CJK UNIFIED IDEOGRAPH-4665	[FB80 C665 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4665, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC665, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_199)
{
    // 4666 0021;	
    // (䙦) CJK UNIFIED IDEOGRAPH-4666	[FB80 C666 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4666, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC666, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_200)
{
    // 4666 003F;	
    // (䙦) CJK UNIFIED IDEOGRAPH-4666	[FB80 C666 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4666, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC666, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_201)
{
    // 4666 0061;	
    // (䙦) CJK UNIFIED IDEOGRAPH-4666	[FB80 C666 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4666, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_202)
{
    // 4666 0041;	
    // (䙦) CJK UNIFIED IDEOGRAPH-4666	[FB80 C666 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4666, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_203)
{
    // 4666 0062;	
    // (䙦) CJK UNIFIED IDEOGRAPH-4666	[FB80 C666 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4666, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC666, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_204)
{
    // 4667 0021;	
    // (䙧) CJK UNIFIED IDEOGRAPH-4667	[FB80 C667 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4667, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC667, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_205)
{
    // 4667 003F;	
    // (䙧) CJK UNIFIED IDEOGRAPH-4667	[FB80 C667 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4667, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC667, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_206)
{
    // 4667 0061;	
    // (䙧) CJK UNIFIED IDEOGRAPH-4667	[FB80 C667 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4667, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_207)
{
    // 4667 0041;	
    // (䙧) CJK UNIFIED IDEOGRAPH-4667	[FB80 C667 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4667, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_208)
{
    // 4667 0062;	
    // (䙧) CJK UNIFIED IDEOGRAPH-4667	[FB80 C667 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4667, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC667, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_209)
{
    // 4668 0021;	
    // (䙨) CJK UNIFIED IDEOGRAPH-4668	[FB80 C668 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4668, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC668, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_210)
{
    // 4668 003F;	
    // (䙨) CJK UNIFIED IDEOGRAPH-4668	[FB80 C668 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4668, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC668, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_211)
{
    // 4668 0061;	
    // (䙨) CJK UNIFIED IDEOGRAPH-4668	[FB80 C668 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4668, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_212)
{
    // 4668 0041;	
    // (䙨) CJK UNIFIED IDEOGRAPH-4668	[FB80 C668 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4668, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_213)
{
    // 4668 0062;	
    // (䙨) CJK UNIFIED IDEOGRAPH-4668	[FB80 C668 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4668, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC668, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_214)
{
    // 4669 0021;	
    // (䙩) CJK UNIFIED IDEOGRAPH-4669	[FB80 C669 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4669, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC669, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_215)
{
    // 4669 003F;	
    // (䙩) CJK UNIFIED IDEOGRAPH-4669	[FB80 C669 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4669, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC669, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_216)
{
    // 4669 0061;	
    // (䙩) CJK UNIFIED IDEOGRAPH-4669	[FB80 C669 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4669, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_217)
{
    // 4669 0041;	
    // (䙩) CJK UNIFIED IDEOGRAPH-4669	[FB80 C669 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4669, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_218)
{
    // 4669 0062;	
    // (䙩) CJK UNIFIED IDEOGRAPH-4669	[FB80 C669 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4669, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC669, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_219)
{
    // 466A 0021;	
    // (䙪) CJK UNIFIED IDEOGRAPH-466A	[FB80 C66A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC66A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_220)
{
    // 466A 003F;	
    // (䙪) CJK UNIFIED IDEOGRAPH-466A	[FB80 C66A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC66A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_221)
{
    // 466A 0061;	
    // (䙪) CJK UNIFIED IDEOGRAPH-466A	[FB80 C66A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC66A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_222)
{
    // 466A 0041;	
    // (䙪) CJK UNIFIED IDEOGRAPH-466A	[FB80 C66A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x466A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC66A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_223)
{
    // 466A 0062;	
    // (䙪) CJK UNIFIED IDEOGRAPH-466A	[FB80 C66A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC66A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_224)
{
    // 466B 0021;	
    // (䙫) CJK UNIFIED IDEOGRAPH-466B	[FB80 C66B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC66B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_225)
{
    // 466B 003F;	
    // (䙫) CJK UNIFIED IDEOGRAPH-466B	[FB80 C66B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC66B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_226)
{
    // 466B 0061;	
    // (䙫) CJK UNIFIED IDEOGRAPH-466B	[FB80 C66B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC66B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_227)
{
    // 466B 0041;	
    // (䙫) CJK UNIFIED IDEOGRAPH-466B	[FB80 C66B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x466B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC66B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_228)
{
    // 466B 0062;	
    // (䙫) CJK UNIFIED IDEOGRAPH-466B	[FB80 C66B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC66B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_229)
{
    // 466C 0021;	
    // (䙬) CJK UNIFIED IDEOGRAPH-466C	[FB80 C66C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC66C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_230)
{
    // 466C 003F;	
    // (䙬) CJK UNIFIED IDEOGRAPH-466C	[FB80 C66C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC66C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_231)
{
    // 466C 0061;	
    // (䙬) CJK UNIFIED IDEOGRAPH-466C	[FB80 C66C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC66C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_232)
{
    // 466C 0041;	
    // (䙬) CJK UNIFIED IDEOGRAPH-466C	[FB80 C66C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x466C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC66C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_233)
{
    // 466C 0062;	
    // (䙬) CJK UNIFIED IDEOGRAPH-466C	[FB80 C66C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC66C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_234)
{
    // 466D 0021;	
    // (䙭) CJK UNIFIED IDEOGRAPH-466D	[FB80 C66D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC66D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_235)
{
    // 466D 003F;	
    // (䙭) CJK UNIFIED IDEOGRAPH-466D	[FB80 C66D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC66D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_236)
{
    // 466D 0061;	
    // (䙭) CJK UNIFIED IDEOGRAPH-466D	[FB80 C66D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC66D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_237)
{
    // 466D 0041;	
    // (䙭) CJK UNIFIED IDEOGRAPH-466D	[FB80 C66D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x466D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC66D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_238)
{
    // 466D 0062;	
    // (䙭) CJK UNIFIED IDEOGRAPH-466D	[FB80 C66D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC66D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_239)
{
    // 466E 0021;	
    // (䙮) CJK UNIFIED IDEOGRAPH-466E	[FB80 C66E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC66E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_240)
{
    // 466E 003F;	
    // (䙮) CJK UNIFIED IDEOGRAPH-466E	[FB80 C66E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC66E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_241)
{
    // 466E 0061;	
    // (䙮) CJK UNIFIED IDEOGRAPH-466E	[FB80 C66E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC66E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_242)
{
    // 466E 0041;	
    // (䙮) CJK UNIFIED IDEOGRAPH-466E	[FB80 C66E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x466E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC66E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_243)
{
    // 466E 0062;	
    // (䙮) CJK UNIFIED IDEOGRAPH-466E	[FB80 C66E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC66E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_244)
{
    // 466F 0021;	
    // (䙯) CJK UNIFIED IDEOGRAPH-466F	[FB80 C66F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC66F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_245)
{
    // 466F 003F;	
    // (䙯) CJK UNIFIED IDEOGRAPH-466F	[FB80 C66F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC66F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_246)
{
    // 466F 0061;	
    // (䙯) CJK UNIFIED IDEOGRAPH-466F	[FB80 C66F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC66F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_247)
{
    // 466F 0041;	
    // (䙯) CJK UNIFIED IDEOGRAPH-466F	[FB80 C66F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x466F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC66F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_248)
{
    // 466F 0062;	
    // (䙯) CJK UNIFIED IDEOGRAPH-466F	[FB80 C66F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x466F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC66F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_249)
{
    // 4670 0021;	
    // (䙰) CJK UNIFIED IDEOGRAPH-4670	[FB80 C670 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4670, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC670, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_250)
{
    // 4670 003F;	
    // (䙰) CJK UNIFIED IDEOGRAPH-4670	[FB80 C670 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4670, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC670, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_251)
{
    // 4670 0061;	
    // (䙰) CJK UNIFIED IDEOGRAPH-4670	[FB80 C670 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4670, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_252)
{
    // 4670 0041;	
    // (䙰) CJK UNIFIED IDEOGRAPH-4670	[FB80 C670 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4670, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_253)
{
    // 4670 0062;	
    // (䙰) CJK UNIFIED IDEOGRAPH-4670	[FB80 C670 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4670, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC670, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_254)
{
    // 4671 0021;	
    // (䙱) CJK UNIFIED IDEOGRAPH-4671	[FB80 C671 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4671, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC671, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_255)
{
    // 4671 003F;	
    // (䙱) CJK UNIFIED IDEOGRAPH-4671	[FB80 C671 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4671, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC671, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_256)
{
    // 4671 0061;	
    // (䙱) CJK UNIFIED IDEOGRAPH-4671	[FB80 C671 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4671, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_257)
{
    // 4671 0041;	
    // (䙱) CJK UNIFIED IDEOGRAPH-4671	[FB80 C671 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4671, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_258)
{
    // 4671 0062;	
    // (䙱) CJK UNIFIED IDEOGRAPH-4671	[FB80 C671 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4671, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC671, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_259)
{
    // 4672 0021;	
    // (䙲) CJK UNIFIED IDEOGRAPH-4672	[FB80 C672 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4672, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC672, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_260)
{
    // 4672 003F;	
    // (䙲) CJK UNIFIED IDEOGRAPH-4672	[FB80 C672 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4672, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC672, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_261)
{
    // 4672 0061;	
    // (䙲) CJK UNIFIED IDEOGRAPH-4672	[FB80 C672 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4672, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_262)
{
    // 4672 0041;	
    // (䙲) CJK UNIFIED IDEOGRAPH-4672	[FB80 C672 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4672, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_263)
{
    // 4672 0062;	
    // (䙲) CJK UNIFIED IDEOGRAPH-4672	[FB80 C672 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4672, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC672, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_264)
{
    // 4673 0021;	
    // (䙳) CJK UNIFIED IDEOGRAPH-4673	[FB80 C673 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4673, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC673, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_265)
{
    // 4673 003F;	
    // (䙳) CJK UNIFIED IDEOGRAPH-4673	[FB80 C673 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4673, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC673, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_266)
{
    // 4673 0061;	
    // (䙳) CJK UNIFIED IDEOGRAPH-4673	[FB80 C673 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4673, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_267)
{
    // 4673 0041;	
    // (䙳) CJK UNIFIED IDEOGRAPH-4673	[FB80 C673 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4673, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_268)
{
    // 4673 0062;	
    // (䙳) CJK UNIFIED IDEOGRAPH-4673	[FB80 C673 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4673, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC673, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_269)
{
    // 4674 0021;	
    // (䙴) CJK UNIFIED IDEOGRAPH-4674	[FB80 C674 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4674, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC674, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_270)
{
    // 4674 003F;	
    // (䙴) CJK UNIFIED IDEOGRAPH-4674	[FB80 C674 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4674, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC674, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_271)
{
    // 4674 0061;	
    // (䙴) CJK UNIFIED IDEOGRAPH-4674	[FB80 C674 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4674, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_272)
{
    // 4674 0041;	
    // (䙴) CJK UNIFIED IDEOGRAPH-4674	[FB80 C674 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4674, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_273)
{
    // 4674 0062;	
    // (䙴) CJK UNIFIED IDEOGRAPH-4674	[FB80 C674 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4674, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC674, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_274)
{
    // 4675 0021;	
    // (䙵) CJK UNIFIED IDEOGRAPH-4675	[FB80 C675 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4675, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC675, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_275)
{
    // 4675 003F;	
    // (䙵) CJK UNIFIED IDEOGRAPH-4675	[FB80 C675 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4675, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC675, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_276)
{
    // 4675 0061;	
    // (䙵) CJK UNIFIED IDEOGRAPH-4675	[FB80 C675 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4675, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_277)
{
    // 4675 0041;	
    // (䙵) CJK UNIFIED IDEOGRAPH-4675	[FB80 C675 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4675, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_278)
{
    // 4675 0062;	
    // (䙵) CJK UNIFIED IDEOGRAPH-4675	[FB80 C675 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4675, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC675, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_279)
{
    // 4676 0021;	
    // (䙶) CJK UNIFIED IDEOGRAPH-4676	[FB80 C676 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4676, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC676, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_280)
{
    // 4676 003F;	
    // (䙶) CJK UNIFIED IDEOGRAPH-4676	[FB80 C676 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4676, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC676, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_281)
{
    // 4676 0061;	
    // (䙶) CJK UNIFIED IDEOGRAPH-4676	[FB80 C676 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4676, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_282)
{
    // 4676 0041;	
    // (䙶) CJK UNIFIED IDEOGRAPH-4676	[FB80 C676 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4676, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_283)
{
    // 4676 0062;	
    // (䙶) CJK UNIFIED IDEOGRAPH-4676	[FB80 C676 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4676, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC676, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_284)
{
    // 4677 0021;	
    // (䙷) CJK UNIFIED IDEOGRAPH-4677	[FB80 C677 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4677, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC677, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_285)
{
    // 4677 003F;	
    // (䙷) CJK UNIFIED IDEOGRAPH-4677	[FB80 C677 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4677, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC677, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_286)
{
    // 4677 0061;	
    // (䙷) CJK UNIFIED IDEOGRAPH-4677	[FB80 C677 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4677, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_287)
{
    // 4677 0041;	
    // (䙷) CJK UNIFIED IDEOGRAPH-4677	[FB80 C677 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4677, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_288)
{
    // 4677 0062;	
    // (䙷) CJK UNIFIED IDEOGRAPH-4677	[FB80 C677 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4677, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC677, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_289)
{
    // 4678 0021;	
    // (䙸) CJK UNIFIED IDEOGRAPH-4678	[FB80 C678 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4678, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC678, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_290)
{
    // 4678 003F;	
    // (䙸) CJK UNIFIED IDEOGRAPH-4678	[FB80 C678 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4678, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC678, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_291)
{
    // 4678 0061;	
    // (䙸) CJK UNIFIED IDEOGRAPH-4678	[FB80 C678 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4678, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_292)
{
    // 4678 0041;	
    // (䙸) CJK UNIFIED IDEOGRAPH-4678	[FB80 C678 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4678, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_293)
{
    // 4678 0062;	
    // (䙸) CJK UNIFIED IDEOGRAPH-4678	[FB80 C678 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4678, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC678, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_294)
{
    // 4679 0021;	
    // (䙹) CJK UNIFIED IDEOGRAPH-4679	[FB80 C679 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4679, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC679, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_295)
{
    // 4679 003F;	
    // (䙹) CJK UNIFIED IDEOGRAPH-4679	[FB80 C679 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4679, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC679, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_296)
{
    // 4679 0061;	
    // (䙹) CJK UNIFIED IDEOGRAPH-4679	[FB80 C679 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4679, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_297)
{
    // 4679 0041;	
    // (䙹) CJK UNIFIED IDEOGRAPH-4679	[FB80 C679 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4679, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_298)
{
    // 4679 0062;	
    // (䙹) CJK UNIFIED IDEOGRAPH-4679	[FB80 C679 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4679, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC679, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_299)
{
    // 467A 0021;	
    // (䙺) CJK UNIFIED IDEOGRAPH-467A	[FB80 C67A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC67A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_300)
{
    // 467A 003F;	
    // (䙺) CJK UNIFIED IDEOGRAPH-467A	[FB80 C67A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC67A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_301)
{
    // 467A 0061;	
    // (䙺) CJK UNIFIED IDEOGRAPH-467A	[FB80 C67A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC67A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_302)
{
    // 467A 0041;	
    // (䙺) CJK UNIFIED IDEOGRAPH-467A	[FB80 C67A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x467A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC67A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_303)
{
    // 467A 0062;	
    // (䙺) CJK UNIFIED IDEOGRAPH-467A	[FB80 C67A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC67A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_304)
{
    // 467B 0021;	
    // (䙻) CJK UNIFIED IDEOGRAPH-467B	[FB80 C67B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC67B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_305)
{
    // 467B 003F;	
    // (䙻) CJK UNIFIED IDEOGRAPH-467B	[FB80 C67B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC67B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_306)
{
    // 467B 0061;	
    // (䙻) CJK UNIFIED IDEOGRAPH-467B	[FB80 C67B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC67B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_307)
{
    // 467B 0041;	
    // (䙻) CJK UNIFIED IDEOGRAPH-467B	[FB80 C67B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x467B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC67B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_308)
{
    // 467B 0062;	
    // (䙻) CJK UNIFIED IDEOGRAPH-467B	[FB80 C67B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC67B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_309)
{
    // 467C 0021;	
    // (䙼) CJK UNIFIED IDEOGRAPH-467C	[FB80 C67C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC67C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_310)
{
    // 467C 003F;	
    // (䙼) CJK UNIFIED IDEOGRAPH-467C	[FB80 C67C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC67C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_311)
{
    // 467C 0061;	
    // (䙼) CJK UNIFIED IDEOGRAPH-467C	[FB80 C67C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC67C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_312)
{
    // 467C 0041;	
    // (䙼) CJK UNIFIED IDEOGRAPH-467C	[FB80 C67C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x467C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC67C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_313)
{
    // 467C 0062;	
    // (䙼) CJK UNIFIED IDEOGRAPH-467C	[FB80 C67C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC67C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_314)
{
    // 467D 0021;	
    // (䙽) CJK UNIFIED IDEOGRAPH-467D	[FB80 C67D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC67D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_315)
{
    // 467D 003F;	
    // (䙽) CJK UNIFIED IDEOGRAPH-467D	[FB80 C67D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC67D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_316)
{
    // 467D 0061;	
    // (䙽) CJK UNIFIED IDEOGRAPH-467D	[FB80 C67D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC67D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_317)
{
    // 467D 0041;	
    // (䙽) CJK UNIFIED IDEOGRAPH-467D	[FB80 C67D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x467D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC67D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_318)
{
    // 467D 0062;	
    // (䙽) CJK UNIFIED IDEOGRAPH-467D	[FB80 C67D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC67D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_319)
{
    // 467E 0021;	
    // (䙾) CJK UNIFIED IDEOGRAPH-467E	[FB80 C67E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC67E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_320)
{
    // 467E 003F;	
    // (䙾) CJK UNIFIED IDEOGRAPH-467E	[FB80 C67E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC67E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_321)
{
    // 467E 0061;	
    // (䙾) CJK UNIFIED IDEOGRAPH-467E	[FB80 C67E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC67E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_322)
{
    // 467E 0041;	
    // (䙾) CJK UNIFIED IDEOGRAPH-467E	[FB80 C67E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x467E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC67E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_323)
{
    // 467E 0062;	
    // (䙾) CJK UNIFIED IDEOGRAPH-467E	[FB80 C67E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC67E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_324)
{
    // 467F 0021;	
    // (䙿) CJK UNIFIED IDEOGRAPH-467F	[FB80 C67F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC67F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_325)
{
    // 467F 003F;	
    // (䙿) CJK UNIFIED IDEOGRAPH-467F	[FB80 C67F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC67F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_326)
{
    // 467F 0061;	
    // (䙿) CJK UNIFIED IDEOGRAPH-467F	[FB80 C67F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC67F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_327)
{
    // 467F 0041;	
    // (䙿) CJK UNIFIED IDEOGRAPH-467F	[FB80 C67F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x467F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC67F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_328)
{
    // 467F 0062;	
    // (䙿) CJK UNIFIED IDEOGRAPH-467F	[FB80 C67F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x467F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC67F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_329)
{
    // 4680 0021;	
    // (䚀) CJK UNIFIED IDEOGRAPH-4680	[FB80 C680 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4680, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC680, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_330)
{
    // 4680 003F;	
    // (䚀) CJK UNIFIED IDEOGRAPH-4680	[FB80 C680 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4680, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC680, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_331)
{
    // 4680 0061;	
    // (䚀) CJK UNIFIED IDEOGRAPH-4680	[FB80 C680 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4680, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_332)
{
    // 4680 0041;	
    // (䚀) CJK UNIFIED IDEOGRAPH-4680	[FB80 C680 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4680, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_333)
{
    // 4680 0062;	
    // (䚀) CJK UNIFIED IDEOGRAPH-4680	[FB80 C680 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4680, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC680, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_334)
{
    // 4681 0021;	
    // (䚁) CJK UNIFIED IDEOGRAPH-4681	[FB80 C681 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4681, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC681, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_335)
{
    // 4681 003F;	
    // (䚁) CJK UNIFIED IDEOGRAPH-4681	[FB80 C681 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4681, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC681, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_336)
{
    // 4681 0061;	
    // (䚁) CJK UNIFIED IDEOGRAPH-4681	[FB80 C681 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4681, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_337)
{
    // 4681 0041;	
    // (䚁) CJK UNIFIED IDEOGRAPH-4681	[FB80 C681 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4681, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_338)
{
    // 4681 0062;	
    // (䚁) CJK UNIFIED IDEOGRAPH-4681	[FB80 C681 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4681, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC681, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_339)
{
    // 4682 0021;	
    // (䚂) CJK UNIFIED IDEOGRAPH-4682	[FB80 C682 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4682, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC682, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_340)
{
    // 4682 003F;	
    // (䚂) CJK UNIFIED IDEOGRAPH-4682	[FB80 C682 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4682, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC682, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_341)
{
    // 4682 0061;	
    // (䚂) CJK UNIFIED IDEOGRAPH-4682	[FB80 C682 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4682, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_342)
{
    // 4682 0041;	
    // (䚂) CJK UNIFIED IDEOGRAPH-4682	[FB80 C682 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4682, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_343)
{
    // 4682 0062;	
    // (䚂) CJK UNIFIED IDEOGRAPH-4682	[FB80 C682 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4682, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC682, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_344)
{
    // 4683 0021;	
    // (䚃) CJK UNIFIED IDEOGRAPH-4683	[FB80 C683 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4683, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC683, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_345)
{
    // 4683 003F;	
    // (䚃) CJK UNIFIED IDEOGRAPH-4683	[FB80 C683 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4683, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC683, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_346)
{
    // 4683 0061;	
    // (䚃) CJK UNIFIED IDEOGRAPH-4683	[FB80 C683 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4683, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_347)
{
    // 4683 0041;	
    // (䚃) CJK UNIFIED IDEOGRAPH-4683	[FB80 C683 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4683, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_348)
{
    // 4683 0062;	
    // (䚃) CJK UNIFIED IDEOGRAPH-4683	[FB80 C683 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4683, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC683, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_349)
{
    // 4684 0021;	
    // (䚄) CJK UNIFIED IDEOGRAPH-4684	[FB80 C684 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4684, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC684, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_350)
{
    // 4684 003F;	
    // (䚄) CJK UNIFIED IDEOGRAPH-4684	[FB80 C684 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4684, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC684, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_351)
{
    // 4684 0061;	
    // (䚄) CJK UNIFIED IDEOGRAPH-4684	[FB80 C684 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4684, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_352)
{
    // 4684 0041;	
    // (䚄) CJK UNIFIED IDEOGRAPH-4684	[FB80 C684 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4684, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_353)
{
    // 4684 0062;	
    // (䚄) CJK UNIFIED IDEOGRAPH-4684	[FB80 C684 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4684, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC684, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_354)
{
    // 4685 0021;	
    // (䚅) CJK UNIFIED IDEOGRAPH-4685	[FB80 C685 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4685, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC685, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_355)
{
    // 4685 003F;	
    // (䚅) CJK UNIFIED IDEOGRAPH-4685	[FB80 C685 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4685, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC685, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_356)
{
    // 4685 0061;	
    // (䚅) CJK UNIFIED IDEOGRAPH-4685	[FB80 C685 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4685, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_357)
{
    // 4685 0041;	
    // (䚅) CJK UNIFIED IDEOGRAPH-4685	[FB80 C685 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4685, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_358)
{
    // 4685 0062;	
    // (䚅) CJK UNIFIED IDEOGRAPH-4685	[FB80 C685 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4685, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC685, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_359)
{
    // 4686 0021;	
    // (䚆) CJK UNIFIED IDEOGRAPH-4686	[FB80 C686 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4686, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC686, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_360)
{
    // 4686 003F;	
    // (䚆) CJK UNIFIED IDEOGRAPH-4686	[FB80 C686 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4686, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC686, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_361)
{
    // 4686 0061;	
    // (䚆) CJK UNIFIED IDEOGRAPH-4686	[FB80 C686 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4686, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_362)
{
    // 4686 0041;	
    // (䚆) CJK UNIFIED IDEOGRAPH-4686	[FB80 C686 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4686, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_363)
{
    // 4686 0062;	
    // (䚆) CJK UNIFIED IDEOGRAPH-4686	[FB80 C686 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4686, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC686, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_364)
{
    // 4687 0021;	
    // (䚇) CJK UNIFIED IDEOGRAPH-4687	[FB80 C687 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4687, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC687, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_365)
{
    // 4687 003F;	
    // (䚇) CJK UNIFIED IDEOGRAPH-4687	[FB80 C687 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4687, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC687, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_366)
{
    // 4687 0061;	
    // (䚇) CJK UNIFIED IDEOGRAPH-4687	[FB80 C687 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4687, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_367)
{
    // 4687 0041;	
    // (䚇) CJK UNIFIED IDEOGRAPH-4687	[FB80 C687 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4687, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_368)
{
    // 4687 0062;	
    // (䚇) CJK UNIFIED IDEOGRAPH-4687	[FB80 C687 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4687, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC687, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_369)
{
    // 4688 0021;	
    // (䚈) CJK UNIFIED IDEOGRAPH-4688	[FB80 C688 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4688, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC688, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_370)
{
    // 4688 003F;	
    // (䚈) CJK UNIFIED IDEOGRAPH-4688	[FB80 C688 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4688, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC688, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_371)
{
    // 4688 0061;	
    // (䚈) CJK UNIFIED IDEOGRAPH-4688	[FB80 C688 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4688, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_372)
{
    // 4688 0041;	
    // (䚈) CJK UNIFIED IDEOGRAPH-4688	[FB80 C688 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4688, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_373)
{
    // 4688 0062;	
    // (䚈) CJK UNIFIED IDEOGRAPH-4688	[FB80 C688 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4688, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC688, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_374)
{
    // 4689 0021;	
    // (䚉) CJK UNIFIED IDEOGRAPH-4689	[FB80 C689 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4689, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC689, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_375)
{
    // 4689 003F;	
    // (䚉) CJK UNIFIED IDEOGRAPH-4689	[FB80 C689 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4689, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC689, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_376)
{
    // 4689 0061;	
    // (䚉) CJK UNIFIED IDEOGRAPH-4689	[FB80 C689 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4689, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_377)
{
    // 4689 0041;	
    // (䚉) CJK UNIFIED IDEOGRAPH-4689	[FB80 C689 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4689, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_378)
{
    // 4689 0062;	
    // (䚉) CJK UNIFIED IDEOGRAPH-4689	[FB80 C689 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4689, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC689, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_379)
{
    // 468A 0021;	
    // (䚊) CJK UNIFIED IDEOGRAPH-468A	[FB80 C68A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC68A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_380)
{
    // 468A 003F;	
    // (䚊) CJK UNIFIED IDEOGRAPH-468A	[FB80 C68A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC68A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_381)
{
    // 468A 0061;	
    // (䚊) CJK UNIFIED IDEOGRAPH-468A	[FB80 C68A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC68A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_382)
{
    // 468A 0041;	
    // (䚊) CJK UNIFIED IDEOGRAPH-468A	[FB80 C68A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x468A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC68A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_383)
{
    // 468A 0062;	
    // (䚊) CJK UNIFIED IDEOGRAPH-468A	[FB80 C68A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC68A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_384)
{
    // 468B 0021;	
    // (䚋) CJK UNIFIED IDEOGRAPH-468B	[FB80 C68B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC68B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_385)
{
    // 468B 003F;	
    // (䚋) CJK UNIFIED IDEOGRAPH-468B	[FB80 C68B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC68B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_386)
{
    // 468B 0061;	
    // (䚋) CJK UNIFIED IDEOGRAPH-468B	[FB80 C68B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC68B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_387)
{
    // 468B 0041;	
    // (䚋) CJK UNIFIED IDEOGRAPH-468B	[FB80 C68B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x468B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC68B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_388)
{
    // 468B 0062;	
    // (䚋) CJK UNIFIED IDEOGRAPH-468B	[FB80 C68B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC68B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_389)
{
    // 468C 0021;	
    // (䚌) CJK UNIFIED IDEOGRAPH-468C	[FB80 C68C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC68C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_390)
{
    // 468C 003F;	
    // (䚌) CJK UNIFIED IDEOGRAPH-468C	[FB80 C68C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC68C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_391)
{
    // 468C 0061;	
    // (䚌) CJK UNIFIED IDEOGRAPH-468C	[FB80 C68C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC68C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_392)
{
    // 468C 0041;	
    // (䚌) CJK UNIFIED IDEOGRAPH-468C	[FB80 C68C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x468C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC68C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_393)
{
    // 468C 0062;	
    // (䚌) CJK UNIFIED IDEOGRAPH-468C	[FB80 C68C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC68C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_394)
{
    // 468D 0021;	
    // (䚍) CJK UNIFIED IDEOGRAPH-468D	[FB80 C68D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC68D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_395)
{
    // 468D 003F;	
    // (䚍) CJK UNIFIED IDEOGRAPH-468D	[FB80 C68D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC68D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_396)
{
    // 468D 0061;	
    // (䚍) CJK UNIFIED IDEOGRAPH-468D	[FB80 C68D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC68D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_397)
{
    // 468D 0041;	
    // (䚍) CJK UNIFIED IDEOGRAPH-468D	[FB80 C68D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x468D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC68D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_398)
{
    // 468D 0062;	
    // (䚍) CJK UNIFIED IDEOGRAPH-468D	[FB80 C68D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC68D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_399)
{
    // 468E 0021;	
    // (䚎) CJK UNIFIED IDEOGRAPH-468E	[FB80 C68E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC68E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_400)
{
    // 468E 003F;	
    // (䚎) CJK UNIFIED IDEOGRAPH-468E	[FB80 C68E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC68E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_401)
{
    // 468E 0061;	
    // (䚎) CJK UNIFIED IDEOGRAPH-468E	[FB80 C68E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC68E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_402)
{
    // 468E 0041;	
    // (䚎) CJK UNIFIED IDEOGRAPH-468E	[FB80 C68E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x468E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC68E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_403)
{
    // 468E 0062;	
    // (䚎) CJK UNIFIED IDEOGRAPH-468E	[FB80 C68E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC68E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_404)
{
    // 468F 0021;	
    // (䚏) CJK UNIFIED IDEOGRAPH-468F	[FB80 C68F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC68F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_405)
{
    // 468F 003F;	
    // (䚏) CJK UNIFIED IDEOGRAPH-468F	[FB80 C68F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC68F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_406)
{
    // 468F 0061;	
    // (䚏) CJK UNIFIED IDEOGRAPH-468F	[FB80 C68F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC68F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_407)
{
    // 468F 0041;	
    // (䚏) CJK UNIFIED IDEOGRAPH-468F	[FB80 C68F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x468F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC68F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_408)
{
    // 468F 0062;	
    // (䚏) CJK UNIFIED IDEOGRAPH-468F	[FB80 C68F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x468F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC68F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_409)
{
    // 4690 0021;	
    // (䚐) CJK UNIFIED IDEOGRAPH-4690	[FB80 C690 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4690, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC690, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_410)
{
    // 4690 003F;	
    // (䚐) CJK UNIFIED IDEOGRAPH-4690	[FB80 C690 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4690, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC690, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_411)
{
    // 4690 0061;	
    // (䚐) CJK UNIFIED IDEOGRAPH-4690	[FB80 C690 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4690, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_412)
{
    // 4690 0041;	
    // (䚐) CJK UNIFIED IDEOGRAPH-4690	[FB80 C690 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4690, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_413)
{
    // 4690 0062;	
    // (䚐) CJK UNIFIED IDEOGRAPH-4690	[FB80 C690 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4690, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC690, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_414)
{
    // 4691 0021;	
    // (䚑) CJK UNIFIED IDEOGRAPH-4691	[FB80 C691 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4691, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC691, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_415)
{
    // 4691 003F;	
    // (䚑) CJK UNIFIED IDEOGRAPH-4691	[FB80 C691 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4691, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC691, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_416)
{
    // 4691 0061;	
    // (䚑) CJK UNIFIED IDEOGRAPH-4691	[FB80 C691 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4691, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_417)
{
    // 4691 0041;	
    // (䚑) CJK UNIFIED IDEOGRAPH-4691	[FB80 C691 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4691, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_418)
{
    // 4691 0062;	
    // (䚑) CJK UNIFIED IDEOGRAPH-4691	[FB80 C691 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4691, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC691, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_419)
{
    // 4692 0021;	
    // (䚒) CJK UNIFIED IDEOGRAPH-4692	[FB80 C692 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4692, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC692, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_420)
{
    // 4692 003F;	
    // (䚒) CJK UNIFIED IDEOGRAPH-4692	[FB80 C692 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4692, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC692, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_421)
{
    // 4692 0061;	
    // (䚒) CJK UNIFIED IDEOGRAPH-4692	[FB80 C692 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4692, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_422)
{
    // 4692 0041;	
    // (䚒) CJK UNIFIED IDEOGRAPH-4692	[FB80 C692 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4692, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_423)
{
    // 4692 0062;	
    // (䚒) CJK UNIFIED IDEOGRAPH-4692	[FB80 C692 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4692, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC692, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_424)
{
    // 4693 0021;	
    // (䚓) CJK UNIFIED IDEOGRAPH-4693	[FB80 C693 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4693, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC693, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_425)
{
    // 4693 003F;	
    // (䚓) CJK UNIFIED IDEOGRAPH-4693	[FB80 C693 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4693, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC693, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_426)
{
    // 4693 0061;	
    // (䚓) CJK UNIFIED IDEOGRAPH-4693	[FB80 C693 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4693, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_427)
{
    // 4693 0041;	
    // (䚓) CJK UNIFIED IDEOGRAPH-4693	[FB80 C693 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4693, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_428)
{
    // 4693 0062;	
    // (䚓) CJK UNIFIED IDEOGRAPH-4693	[FB80 C693 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4693, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC693, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_429)
{
    // 4694 0021;	
    // (䚔) CJK UNIFIED IDEOGRAPH-4694	[FB80 C694 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4694, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC694, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_430)
{
    // 4694 003F;	
    // (䚔) CJK UNIFIED IDEOGRAPH-4694	[FB80 C694 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4694, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC694, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_431)
{
    // 4694 0061;	
    // (䚔) CJK UNIFIED IDEOGRAPH-4694	[FB80 C694 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4694, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_432)
{
    // 4694 0041;	
    // (䚔) CJK UNIFIED IDEOGRAPH-4694	[FB80 C694 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4694, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_433)
{
    // 4694 0062;	
    // (䚔) CJK UNIFIED IDEOGRAPH-4694	[FB80 C694 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4694, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC694, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_434)
{
    // 4695 0021;	
    // (䚕) CJK UNIFIED IDEOGRAPH-4695	[FB80 C695 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4695, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC695, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_435)
{
    // 4695 003F;	
    // (䚕) CJK UNIFIED IDEOGRAPH-4695	[FB80 C695 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4695, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC695, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_436)
{
    // 4695 0061;	
    // (䚕) CJK UNIFIED IDEOGRAPH-4695	[FB80 C695 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4695, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_437)
{
    // 4695 0041;	
    // (䚕) CJK UNIFIED IDEOGRAPH-4695	[FB80 C695 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4695, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_438)
{
    // 4695 0062;	
    // (䚕) CJK UNIFIED IDEOGRAPH-4695	[FB80 C695 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4695, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC695, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_439)
{
    // 4696 0021;	
    // (䚖) CJK UNIFIED IDEOGRAPH-4696	[FB80 C696 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4696, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC696, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_440)
{
    // 4696 003F;	
    // (䚖) CJK UNIFIED IDEOGRAPH-4696	[FB80 C696 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4696, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC696, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_441)
{
    // 4696 0061;	
    // (䚖) CJK UNIFIED IDEOGRAPH-4696	[FB80 C696 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4696, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_442)
{
    // 4696 0041;	
    // (䚖) CJK UNIFIED IDEOGRAPH-4696	[FB80 C696 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4696, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_443)
{
    // 4696 0062;	
    // (䚖) CJK UNIFIED IDEOGRAPH-4696	[FB80 C696 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4696, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC696, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_444)
{
    // 4697 0021;	
    // (䚗) CJK UNIFIED IDEOGRAPH-4697	[FB80 C697 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4697, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC697, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_445)
{
    // 4697 003F;	
    // (䚗) CJK UNIFIED IDEOGRAPH-4697	[FB80 C697 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4697, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC697, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_446)
{
    // 4697 0061;	
    // (䚗) CJK UNIFIED IDEOGRAPH-4697	[FB80 C697 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4697, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_447)
{
    // 4697 0041;	
    // (䚗) CJK UNIFIED IDEOGRAPH-4697	[FB80 C697 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4697, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_448)
{
    // 4697 0062;	
    // (䚗) CJK UNIFIED IDEOGRAPH-4697	[FB80 C697 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4697, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC697, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_449)
{
    // 4698 0021;	
    // (䚘) CJK UNIFIED IDEOGRAPH-4698	[FB80 C698 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4698, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC698, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_450)
{
    // 4698 003F;	
    // (䚘) CJK UNIFIED IDEOGRAPH-4698	[FB80 C698 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4698, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC698, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_451)
{
    // 4698 0061;	
    // (䚘) CJK UNIFIED IDEOGRAPH-4698	[FB80 C698 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4698, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_452)
{
    // 4698 0041;	
    // (䚘) CJK UNIFIED IDEOGRAPH-4698	[FB80 C698 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4698, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_453)
{
    // 4698 0062;	
    // (䚘) CJK UNIFIED IDEOGRAPH-4698	[FB80 C698 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4698, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC698, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_454)
{
    // 4699 0021;	
    // (䚙) CJK UNIFIED IDEOGRAPH-4699	[FB80 C699 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4699, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC699, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_455)
{
    // 4699 003F;	
    // (䚙) CJK UNIFIED IDEOGRAPH-4699	[FB80 C699 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4699, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC699, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_456)
{
    // 4699 0061;	
    // (䚙) CJK UNIFIED IDEOGRAPH-4699	[FB80 C699 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4699, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_457)
{
    // 4699 0041;	
    // (䚙) CJK UNIFIED IDEOGRAPH-4699	[FB80 C699 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4699, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_458)
{
    // 4699 0062;	
    // (䚙) CJK UNIFIED IDEOGRAPH-4699	[FB80 C699 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4699, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC699, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_459)
{
    // 469A 0021;	
    // (䚚) CJK UNIFIED IDEOGRAPH-469A	[FB80 C69A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC69A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_460)
{
    // 469A 003F;	
    // (䚚) CJK UNIFIED IDEOGRAPH-469A	[FB80 C69A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC69A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_461)
{
    // 469A 0061;	
    // (䚚) CJK UNIFIED IDEOGRAPH-469A	[FB80 C69A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC69A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_462)
{
    // 469A 0041;	
    // (䚚) CJK UNIFIED IDEOGRAPH-469A	[FB80 C69A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x469A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC69A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_463)
{
    // 469A 0062;	
    // (䚚) CJK UNIFIED IDEOGRAPH-469A	[FB80 C69A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC69A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_464)
{
    // 469B 0021;	
    // (䚛) CJK UNIFIED IDEOGRAPH-469B	[FB80 C69B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC69B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_465)
{
    // 469B 003F;	
    // (䚛) CJK UNIFIED IDEOGRAPH-469B	[FB80 C69B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC69B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_466)
{
    // 469B 0061;	
    // (䚛) CJK UNIFIED IDEOGRAPH-469B	[FB80 C69B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC69B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_467)
{
    // 469B 0041;	
    // (䚛) CJK UNIFIED IDEOGRAPH-469B	[FB80 C69B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x469B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC69B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_468)
{
    // 469B 0062;	
    // (䚛) CJK UNIFIED IDEOGRAPH-469B	[FB80 C69B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC69B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_469)
{
    // 469C 0021;	
    // (䚜) CJK UNIFIED IDEOGRAPH-469C	[FB80 C69C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC69C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_470)
{
    // 469C 003F;	
    // (䚜) CJK UNIFIED IDEOGRAPH-469C	[FB80 C69C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC69C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_471)
{
    // 469C 0061;	
    // (䚜) CJK UNIFIED IDEOGRAPH-469C	[FB80 C69C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC69C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_472)
{
    // 469C 0041;	
    // (䚜) CJK UNIFIED IDEOGRAPH-469C	[FB80 C69C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x469C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC69C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_473)
{
    // 469C 0062;	
    // (䚜) CJK UNIFIED IDEOGRAPH-469C	[FB80 C69C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC69C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_474)
{
    // 469D 0021;	
    // (䚝) CJK UNIFIED IDEOGRAPH-469D	[FB80 C69D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC69D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_475)
{
    // 469D 003F;	
    // (䚝) CJK UNIFIED IDEOGRAPH-469D	[FB80 C69D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC69D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_476)
{
    // 469D 0061;	
    // (䚝) CJK UNIFIED IDEOGRAPH-469D	[FB80 C69D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC69D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_477)
{
    // 469D 0041;	
    // (䚝) CJK UNIFIED IDEOGRAPH-469D	[FB80 C69D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x469D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC69D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_478)
{
    // 469D 0062;	
    // (䚝) CJK UNIFIED IDEOGRAPH-469D	[FB80 C69D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC69D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_479)
{
    // 469E 0021;	
    // (䚞) CJK UNIFIED IDEOGRAPH-469E	[FB80 C69E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC69E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_480)
{
    // 469E 003F;	
    // (䚞) CJK UNIFIED IDEOGRAPH-469E	[FB80 C69E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC69E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_481)
{
    // 469E 0061;	
    // (䚞) CJK UNIFIED IDEOGRAPH-469E	[FB80 C69E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC69E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_482)
{
    // 469E 0041;	
    // (䚞) CJK UNIFIED IDEOGRAPH-469E	[FB80 C69E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x469E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC69E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_483)
{
    // 469E 0062;	
    // (䚞) CJK UNIFIED IDEOGRAPH-469E	[FB80 C69E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC69E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_484)
{
    // 469F 0021;	
    // (䚟) CJK UNIFIED IDEOGRAPH-469F	[FB80 C69F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC69F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_485)
{
    // 469F 003F;	
    // (䚟) CJK UNIFIED IDEOGRAPH-469F	[FB80 C69F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC69F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_486)
{
    // 469F 0061;	
    // (䚟) CJK UNIFIED IDEOGRAPH-469F	[FB80 C69F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC69F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_487)
{
    // 469F 0041;	
    // (䚟) CJK UNIFIED IDEOGRAPH-469F	[FB80 C69F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x469F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC69F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_488)
{
    // 469F 0062;	
    // (䚟) CJK UNIFIED IDEOGRAPH-469F	[FB80 C69F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x469F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC69F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_489)
{
    // 46A0 0021;	
    // (䚠) CJK UNIFIED IDEOGRAPH-46A0	[FB80 C6A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_490)
{
    // 46A0 003F;	
    // (䚠) CJK UNIFIED IDEOGRAPH-46A0	[FB80 C6A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_491)
{
    // 46A0 0061;	
    // (䚠) CJK UNIFIED IDEOGRAPH-46A0	[FB80 C6A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_492)
{
    // 46A0 0041;	
    // (䚠) CJK UNIFIED IDEOGRAPH-46A0	[FB80 C6A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_493)
{
    // 46A0 0062;	
    // (䚠) CJK UNIFIED IDEOGRAPH-46A0	[FB80 C6A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_494)
{
    // 46A1 0021;	
    // (䚡) CJK UNIFIED IDEOGRAPH-46A1	[FB80 C6A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_495)
{
    // 46A1 003F;	
    // (䚡) CJK UNIFIED IDEOGRAPH-46A1	[FB80 C6A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_496)
{
    // 46A1 0061;	
    // (䚡) CJK UNIFIED IDEOGRAPH-46A1	[FB80 C6A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_497)
{
    // 46A1 0041;	
    // (䚡) CJK UNIFIED IDEOGRAPH-46A1	[FB80 C6A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_498)
{
    // 46A1 0062;	
    // (䚡) CJK UNIFIED IDEOGRAPH-46A1	[FB80 C6A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_374_499)
{
    // 46A2 0021;	
    // (䚢) CJK UNIFIED IDEOGRAPH-46A2	[FB80 C6A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

