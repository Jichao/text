// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_056_000)
{
    // 1F34B 0041;	
    // (üçã) LEMON	[1312 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F34B, 0x0041 };
    uint32_t const ces[9] = { 0x1312, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_001)
{
    // 1F34B 0062;	
    // (üçã) LEMON	[1312 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34B, 0x0062 };
    uint32_t const ces[9] = { 0x1312, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_002)
{
    // 1F34C 0021;	
    // (üçå) BANANA	[1313 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34C, 0x0021 };
    uint32_t const ces[9] = { 0x1313, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_003)
{
    // 1F34C 003F;	
    // (üçå) BANANA	[1313 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34C, 0x003F };
    uint32_t const ces[9] = { 0x1313, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_004)
{
    // 1F34C 0061;	
    // (üçå) BANANA	[1313 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34C, 0x0061 };
    uint32_t const ces[9] = { 0x1313, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_005)
{
    // 1F34C 0041;	
    // (üçå) BANANA	[1313 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F34C, 0x0041 };
    uint32_t const ces[9] = { 0x1313, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_006)
{
    // 1F34C 0062;	
    // (üçå) BANANA	[1313 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34C, 0x0062 };
    uint32_t const ces[9] = { 0x1313, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_007)
{
    // 1F34D 0021;	
    // (üçç) PINEAPPLE	[1314 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34D, 0x0021 };
    uint32_t const ces[9] = { 0x1314, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_008)
{
    // 1F34D 003F;	
    // (üçç) PINEAPPLE	[1314 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34D, 0x003F };
    uint32_t const ces[9] = { 0x1314, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_009)
{
    // 1F34D 0061;	
    // (üçç) PINEAPPLE	[1314 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34D, 0x0061 };
    uint32_t const ces[9] = { 0x1314, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_010)
{
    // 1F34D 0041;	
    // (üçç) PINEAPPLE	[1314 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F34D, 0x0041 };
    uint32_t const ces[9] = { 0x1314, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_011)
{
    // 1F34D 0062;	
    // (üçç) PINEAPPLE	[1314 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34D, 0x0062 };
    uint32_t const ces[9] = { 0x1314, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_012)
{
    // 1F34E 0021;	
    // (üçé) RED APPLE	[1315 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34E, 0x0021 };
    uint32_t const ces[9] = { 0x1315, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_013)
{
    // 1F34E 003F;	
    // (üçé) RED APPLE	[1315 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34E, 0x003F };
    uint32_t const ces[9] = { 0x1315, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_014)
{
    // 1F34E 0061;	
    // (üçé) RED APPLE	[1315 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34E, 0x0061 };
    uint32_t const ces[9] = { 0x1315, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_015)
{
    // 1F34E 0041;	
    // (üçé) RED APPLE	[1315 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F34E, 0x0041 };
    uint32_t const ces[9] = { 0x1315, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_016)
{
    // 1F34E 0062;	
    // (üçé) RED APPLE	[1315 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34E, 0x0062 };
    uint32_t const ces[9] = { 0x1315, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_017)
{
    // 1F34F 0021;	
    // (üçè) GREEN APPLE	[1316 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34F, 0x0021 };
    uint32_t const ces[9] = { 0x1316, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_018)
{
    // 1F34F 003F;	
    // (üçè) GREEN APPLE	[1316 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34F, 0x003F };
    uint32_t const ces[9] = { 0x1316, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_019)
{
    // 1F34F 0061;	
    // (üçè) GREEN APPLE	[1316 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34F, 0x0061 };
    uint32_t const ces[9] = { 0x1316, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_020)
{
    // 1F34F 0041;	
    // (üçè) GREEN APPLE	[1316 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F34F, 0x0041 };
    uint32_t const ces[9] = { 0x1316, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_021)
{
    // 1F34F 0062;	
    // (üçè) GREEN APPLE	[1316 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F34F, 0x0062 };
    uint32_t const ces[9] = { 0x1316, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_022)
{
    // 1F350 0021;	
    // (üçê) PEAR	[1317 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F350, 0x0021 };
    uint32_t const ces[9] = { 0x1317, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_023)
{
    // 1F350 003F;	
    // (üçê) PEAR	[1317 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F350, 0x003F };
    uint32_t const ces[9] = { 0x1317, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_024)
{
    // 1F350 0061;	
    // (üçê) PEAR	[1317 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F350, 0x0061 };
    uint32_t const ces[9] = { 0x1317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_025)
{
    // 1F350 0041;	
    // (üçê) PEAR	[1317 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F350, 0x0041 };
    uint32_t const ces[9] = { 0x1317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_026)
{
    // 1F350 0062;	
    // (üçê) PEAR	[1317 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F350, 0x0062 };
    uint32_t const ces[9] = { 0x1317, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_027)
{
    // 1F351 0021;	
    // (üçë) PEACH	[1318 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F351, 0x0021 };
    uint32_t const ces[9] = { 0x1318, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_028)
{
    // 1F351 003F;	
    // (üçë) PEACH	[1318 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F351, 0x003F };
    uint32_t const ces[9] = { 0x1318, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_029)
{
    // 1F351 0061;	
    // (üçë) PEACH	[1318 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F351, 0x0061 };
    uint32_t const ces[9] = { 0x1318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_030)
{
    // 1F351 0041;	
    // (üçë) PEACH	[1318 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F351, 0x0041 };
    uint32_t const ces[9] = { 0x1318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_031)
{
    // 1F351 0062;	
    // (üçë) PEACH	[1318 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F351, 0x0062 };
    uint32_t const ces[9] = { 0x1318, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_032)
{
    // 1F352 0021;	
    // (üçí) CHERRIES	[1319 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F352, 0x0021 };
    uint32_t const ces[9] = { 0x1319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_033)
{
    // 1F352 003F;	
    // (üçí) CHERRIES	[1319 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F352, 0x003F };
    uint32_t const ces[9] = { 0x1319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_034)
{
    // 1F352 0061;	
    // (üçí) CHERRIES	[1319 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F352, 0x0061 };
    uint32_t const ces[9] = { 0x1319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_035)
{
    // 1F352 0041;	
    // (üçí) CHERRIES	[1319 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F352, 0x0041 };
    uint32_t const ces[9] = { 0x1319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_036)
{
    // 1F352 0062;	
    // (üçí) CHERRIES	[1319 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F352, 0x0062 };
    uint32_t const ces[9] = { 0x1319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_037)
{
    // 1F353 0021;	
    // (üçì) STRAWBERRY	[131A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F353, 0x0021 };
    uint32_t const ces[9] = { 0x131A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_038)
{
    // 1F353 003F;	
    // (üçì) STRAWBERRY	[131A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F353, 0x003F };
    uint32_t const ces[9] = { 0x131A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_039)
{
    // 1F353 0061;	
    // (üçì) STRAWBERRY	[131A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F353, 0x0061 };
    uint32_t const ces[9] = { 0x131A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_040)
{
    // 1F353 0041;	
    // (üçì) STRAWBERRY	[131A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F353, 0x0041 };
    uint32_t const ces[9] = { 0x131A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_041)
{
    // 1F353 0062;	
    // (üçì) STRAWBERRY	[131A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F353, 0x0062 };
    uint32_t const ces[9] = { 0x131A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_042)
{
    // 1F354 0021;	
    // (üçî) HAMBURGER	[131B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F354, 0x0021 };
    uint32_t const ces[9] = { 0x131B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_043)
{
    // 1F354 003F;	
    // (üçî) HAMBURGER	[131B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F354, 0x003F };
    uint32_t const ces[9] = { 0x131B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_044)
{
    // 1F354 0061;	
    // (üçî) HAMBURGER	[131B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F354, 0x0061 };
    uint32_t const ces[9] = { 0x131B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_045)
{
    // 1F354 0041;	
    // (üçî) HAMBURGER	[131B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F354, 0x0041 };
    uint32_t const ces[9] = { 0x131B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_046)
{
    // 1F354 0062;	
    // (üçî) HAMBURGER	[131B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F354, 0x0062 };
    uint32_t const ces[9] = { 0x131B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_047)
{
    // 1F355 0021;	
    // (üçï) SLICE OF PIZZA	[131C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F355, 0x0021 };
    uint32_t const ces[9] = { 0x131C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_048)
{
    // 1F355 003F;	
    // (üçï) SLICE OF PIZZA	[131C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F355, 0x003F };
    uint32_t const ces[9] = { 0x131C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_049)
{
    // 1F355 0061;	
    // (üçï) SLICE OF PIZZA	[131C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F355, 0x0061 };
    uint32_t const ces[9] = { 0x131C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_050)
{
    // 1F355 0041;	
    // (üçï) SLICE OF PIZZA	[131C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F355, 0x0041 };
    uint32_t const ces[9] = { 0x131C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_051)
{
    // 1F355 0062;	
    // (üçï) SLICE OF PIZZA	[131C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F355, 0x0062 };
    uint32_t const ces[9] = { 0x131C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_052)
{
    // 1F356 0021;	
    // (üçñ) MEAT ON BONE	[131D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F356, 0x0021 };
    uint32_t const ces[9] = { 0x131D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_053)
{
    // 1F356 003F;	
    // (üçñ) MEAT ON BONE	[131D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F356, 0x003F };
    uint32_t const ces[9] = { 0x131D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_054)
{
    // 1F356 0061;	
    // (üçñ) MEAT ON BONE	[131D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F356, 0x0061 };
    uint32_t const ces[9] = { 0x131D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_055)
{
    // 1F356 0041;	
    // (üçñ) MEAT ON BONE	[131D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F356, 0x0041 };
    uint32_t const ces[9] = { 0x131D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_056)
{
    // 1F356 0062;	
    // (üçñ) MEAT ON BONE	[131D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F356, 0x0062 };
    uint32_t const ces[9] = { 0x131D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_057)
{
    // 1F357 0021;	
    // (üçó) POULTRY LEG	[131E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F357, 0x0021 };
    uint32_t const ces[9] = { 0x131E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_058)
{
    // 1F357 003F;	
    // (üçó) POULTRY LEG	[131E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F357, 0x003F };
    uint32_t const ces[9] = { 0x131E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_059)
{
    // 1F357 0061;	
    // (üçó) POULTRY LEG	[131E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F357, 0x0061 };
    uint32_t const ces[9] = { 0x131E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_060)
{
    // 1F357 0041;	
    // (üçó) POULTRY LEG	[131E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F357, 0x0041 };
    uint32_t const ces[9] = { 0x131E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_061)
{
    // 1F357 0062;	
    // (üçó) POULTRY LEG	[131E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F357, 0x0062 };
    uint32_t const ces[9] = { 0x131E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_062)
{
    // 1F358 0021;	
    // (üçò) RICE CRACKER	[131F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F358, 0x0021 };
    uint32_t const ces[9] = { 0x131F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_063)
{
    // 1F358 003F;	
    // (üçò) RICE CRACKER	[131F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F358, 0x003F };
    uint32_t const ces[9] = { 0x131F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_064)
{
    // 1F358 0061;	
    // (üçò) RICE CRACKER	[131F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F358, 0x0061 };
    uint32_t const ces[9] = { 0x131F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_065)
{
    // 1F358 0041;	
    // (üçò) RICE CRACKER	[131F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F358, 0x0041 };
    uint32_t const ces[9] = { 0x131F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_066)
{
    // 1F358 0062;	
    // (üçò) RICE CRACKER	[131F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F358, 0x0062 };
    uint32_t const ces[9] = { 0x131F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_067)
{
    // 1F359 0021;	
    // (üçô) RICE BALL	[1320 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F359, 0x0021 };
    uint32_t const ces[9] = { 0x1320, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_068)
{
    // 1F359 003F;	
    // (üçô) RICE BALL	[1320 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F359, 0x003F };
    uint32_t const ces[9] = { 0x1320, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_069)
{
    // 1F359 0061;	
    // (üçô) RICE BALL	[1320 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F359, 0x0061 };
    uint32_t const ces[9] = { 0x1320, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_070)
{
    // 1F359 0041;	
    // (üçô) RICE BALL	[1320 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F359, 0x0041 };
    uint32_t const ces[9] = { 0x1320, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_071)
{
    // 1F359 0062;	
    // (üçô) RICE BALL	[1320 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F359, 0x0062 };
    uint32_t const ces[9] = { 0x1320, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_072)
{
    // 1F35A 0021;	
    // (üçö) COOKED RICE	[1321 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35A, 0x0021 };
    uint32_t const ces[9] = { 0x1321, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_073)
{
    // 1F35A 003F;	
    // (üçö) COOKED RICE	[1321 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35A, 0x003F };
    uint32_t const ces[9] = { 0x1321, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_074)
{
    // 1F35A 0061;	
    // (üçö) COOKED RICE	[1321 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35A, 0x0061 };
    uint32_t const ces[9] = { 0x1321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_075)
{
    // 1F35A 0041;	
    // (üçö) COOKED RICE	[1321 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F35A, 0x0041 };
    uint32_t const ces[9] = { 0x1321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_076)
{
    // 1F35A 0062;	
    // (üçö) COOKED RICE	[1321 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35A, 0x0062 };
    uint32_t const ces[9] = { 0x1321, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_077)
{
    // 1F35B 0021;	
    // (üçõ) CURRY AND RICE	[1322 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35B, 0x0021 };
    uint32_t const ces[9] = { 0x1322, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_078)
{
    // 1F35B 003F;	
    // (üçõ) CURRY AND RICE	[1322 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35B, 0x003F };
    uint32_t const ces[9] = { 0x1322, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_079)
{
    // 1F35B 0061;	
    // (üçõ) CURRY AND RICE	[1322 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35B, 0x0061 };
    uint32_t const ces[9] = { 0x1322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_080)
{
    // 1F35B 0041;	
    // (üçõ) CURRY AND RICE	[1322 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F35B, 0x0041 };
    uint32_t const ces[9] = { 0x1322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_081)
{
    // 1F35B 0062;	
    // (üçõ) CURRY AND RICE	[1322 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35B, 0x0062 };
    uint32_t const ces[9] = { 0x1322, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_082)
{
    // 1F35C 0021;	
    // (üçú) STEAMING BOWL	[1323 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35C, 0x0021 };
    uint32_t const ces[9] = { 0x1323, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_083)
{
    // 1F35C 003F;	
    // (üçú) STEAMING BOWL	[1323 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35C, 0x003F };
    uint32_t const ces[9] = { 0x1323, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_084)
{
    // 1F35C 0061;	
    // (üçú) STEAMING BOWL	[1323 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35C, 0x0061 };
    uint32_t const ces[9] = { 0x1323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_085)
{
    // 1F35C 0041;	
    // (üçú) STEAMING BOWL	[1323 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F35C, 0x0041 };
    uint32_t const ces[9] = { 0x1323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_086)
{
    // 1F35C 0062;	
    // (üçú) STEAMING BOWL	[1323 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35C, 0x0062 };
    uint32_t const ces[9] = { 0x1323, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_087)
{
    // 1F35D 0021;	
    // (üçù) SPAGHETTI	[1324 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35D, 0x0021 };
    uint32_t const ces[9] = { 0x1324, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_088)
{
    // 1F35D 003F;	
    // (üçù) SPAGHETTI	[1324 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35D, 0x003F };
    uint32_t const ces[9] = { 0x1324, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_089)
{
    // 1F35D 0061;	
    // (üçù) SPAGHETTI	[1324 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35D, 0x0061 };
    uint32_t const ces[9] = { 0x1324, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_090)
{
    // 1F35D 0041;	
    // (üçù) SPAGHETTI	[1324 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F35D, 0x0041 };
    uint32_t const ces[9] = { 0x1324, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_091)
{
    // 1F35D 0062;	
    // (üçù) SPAGHETTI	[1324 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35D, 0x0062 };
    uint32_t const ces[9] = { 0x1324, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_092)
{
    // 1F35E 0021;	
    // (üçû) BREAD	[1325 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35E, 0x0021 };
    uint32_t const ces[9] = { 0x1325, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_093)
{
    // 1F35E 003F;	
    // (üçû) BREAD	[1325 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35E, 0x003F };
    uint32_t const ces[9] = { 0x1325, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_094)
{
    // 1F35E 0061;	
    // (üçû) BREAD	[1325 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35E, 0x0061 };
    uint32_t const ces[9] = { 0x1325, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_095)
{
    // 1F35E 0041;	
    // (üçû) BREAD	[1325 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F35E, 0x0041 };
    uint32_t const ces[9] = { 0x1325, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_096)
{
    // 1F35E 0062;	
    // (üçû) BREAD	[1325 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35E, 0x0062 };
    uint32_t const ces[9] = { 0x1325, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_097)
{
    // 1F35F 0021;	
    // (üçü) FRENCH FRIES	[1326 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35F, 0x0021 };
    uint32_t const ces[9] = { 0x1326, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_098)
{
    // 1F35F 003F;	
    // (üçü) FRENCH FRIES	[1326 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35F, 0x003F };
    uint32_t const ces[9] = { 0x1326, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_099)
{
    // 1F35F 0061;	
    // (üçü) FRENCH FRIES	[1326 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35F, 0x0061 };
    uint32_t const ces[9] = { 0x1326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_100)
{
    // 1F35F 0041;	
    // (üçü) FRENCH FRIES	[1326 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F35F, 0x0041 };
    uint32_t const ces[9] = { 0x1326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_101)
{
    // 1F35F 0062;	
    // (üçü) FRENCH FRIES	[1326 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F35F, 0x0062 };
    uint32_t const ces[9] = { 0x1326, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_102)
{
    // 1F360 0021;	
    // (üç†) ROASTED SWEET POTATO	[1327 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F360, 0x0021 };
    uint32_t const ces[9] = { 0x1327, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_103)
{
    // 1F360 003F;	
    // (üç†) ROASTED SWEET POTATO	[1327 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F360, 0x003F };
    uint32_t const ces[9] = { 0x1327, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_104)
{
    // 1F360 0061;	
    // (üç†) ROASTED SWEET POTATO	[1327 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F360, 0x0061 };
    uint32_t const ces[9] = { 0x1327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_105)
{
    // 1F360 0041;	
    // (üç†) ROASTED SWEET POTATO	[1327 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F360, 0x0041 };
    uint32_t const ces[9] = { 0x1327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_106)
{
    // 1F360 0062;	
    // (üç†) ROASTED SWEET POTATO	[1327 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F360, 0x0062 };
    uint32_t const ces[9] = { 0x1327, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_107)
{
    // 1F361 0021;	
    // (üç°) DANGO	[1328 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F361, 0x0021 };
    uint32_t const ces[9] = { 0x1328, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_108)
{
    // 1F361 003F;	
    // (üç°) DANGO	[1328 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F361, 0x003F };
    uint32_t const ces[9] = { 0x1328, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_109)
{
    // 1F361 0061;	
    // (üç°) DANGO	[1328 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F361, 0x0061 };
    uint32_t const ces[9] = { 0x1328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_110)
{
    // 1F361 0041;	
    // (üç°) DANGO	[1328 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F361, 0x0041 };
    uint32_t const ces[9] = { 0x1328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_111)
{
    // 1F361 0062;	
    // (üç°) DANGO	[1328 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F361, 0x0062 };
    uint32_t const ces[9] = { 0x1328, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_112)
{
    // 1F362 0021;	
    // (üç¢) ODEN	[1329 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F362, 0x0021 };
    uint32_t const ces[9] = { 0x1329, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_113)
{
    // 1F362 003F;	
    // (üç¢) ODEN	[1329 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F362, 0x003F };
    uint32_t const ces[9] = { 0x1329, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_114)
{
    // 1F362 0061;	
    // (üç¢) ODEN	[1329 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F362, 0x0061 };
    uint32_t const ces[9] = { 0x1329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_115)
{
    // 1F362 0041;	
    // (üç¢) ODEN	[1329 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F362, 0x0041 };
    uint32_t const ces[9] = { 0x1329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_116)
{
    // 1F362 0062;	
    // (üç¢) ODEN	[1329 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F362, 0x0062 };
    uint32_t const ces[9] = { 0x1329, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_117)
{
    // 1F363 0021;	
    // (üç£) SUSHI	[132A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F363, 0x0021 };
    uint32_t const ces[9] = { 0x132A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_118)
{
    // 1F363 003F;	
    // (üç£) SUSHI	[132A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F363, 0x003F };
    uint32_t const ces[9] = { 0x132A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_119)
{
    // 1F363 0061;	
    // (üç£) SUSHI	[132A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F363, 0x0061 };
    uint32_t const ces[9] = { 0x132A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_120)
{
    // 1F363 0041;	
    // (üç£) SUSHI	[132A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F363, 0x0041 };
    uint32_t const ces[9] = { 0x132A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_121)
{
    // 1F363 0062;	
    // (üç£) SUSHI	[132A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F363, 0x0062 };
    uint32_t const ces[9] = { 0x132A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_122)
{
    // 1F364 0021;	
    // (üç§) FRIED SHRIMP	[132B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F364, 0x0021 };
    uint32_t const ces[9] = { 0x132B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_123)
{
    // 1F364 003F;	
    // (üç§) FRIED SHRIMP	[132B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F364, 0x003F };
    uint32_t const ces[9] = { 0x132B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_124)
{
    // 1F364 0061;	
    // (üç§) FRIED SHRIMP	[132B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F364, 0x0061 };
    uint32_t const ces[9] = { 0x132B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_125)
{
    // 1F364 0041;	
    // (üç§) FRIED SHRIMP	[132B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F364, 0x0041 };
    uint32_t const ces[9] = { 0x132B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_126)
{
    // 1F364 0062;	
    // (üç§) FRIED SHRIMP	[132B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F364, 0x0062 };
    uint32_t const ces[9] = { 0x132B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_127)
{
    // 1F365 0021;	
    // (üç•) FISH CAKE WITH SWIRL DESIGN	[132C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F365, 0x0021 };
    uint32_t const ces[9] = { 0x132C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_128)
{
    // 1F365 003F;	
    // (üç•) FISH CAKE WITH SWIRL DESIGN	[132C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F365, 0x003F };
    uint32_t const ces[9] = { 0x132C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_129)
{
    // 1F365 0061;	
    // (üç•) FISH CAKE WITH SWIRL DESIGN	[132C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F365, 0x0061 };
    uint32_t const ces[9] = { 0x132C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_130)
{
    // 1F365 0041;	
    // (üç•) FISH CAKE WITH SWIRL DESIGN	[132C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F365, 0x0041 };
    uint32_t const ces[9] = { 0x132C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_131)
{
    // 1F365 0062;	
    // (üç•) FISH CAKE WITH SWIRL DESIGN	[132C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F365, 0x0062 };
    uint32_t const ces[9] = { 0x132C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_132)
{
    // 1F366 0021;	
    // (üç¶) SOFT ICE CREAM	[132D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F366, 0x0021 };
    uint32_t const ces[9] = { 0x132D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_133)
{
    // 1F366 003F;	
    // (üç¶) SOFT ICE CREAM	[132D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F366, 0x003F };
    uint32_t const ces[9] = { 0x132D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_134)
{
    // 1F366 0061;	
    // (üç¶) SOFT ICE CREAM	[132D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F366, 0x0061 };
    uint32_t const ces[9] = { 0x132D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_135)
{
    // 1F366 0041;	
    // (üç¶) SOFT ICE CREAM	[132D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F366, 0x0041 };
    uint32_t const ces[9] = { 0x132D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_136)
{
    // 1F366 0062;	
    // (üç¶) SOFT ICE CREAM	[132D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F366, 0x0062 };
    uint32_t const ces[9] = { 0x132D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_137)
{
    // 1F367 0021;	
    // (üçß) SHAVED ICE	[132E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F367, 0x0021 };
    uint32_t const ces[9] = { 0x132E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_138)
{
    // 1F367 003F;	
    // (üçß) SHAVED ICE	[132E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F367, 0x003F };
    uint32_t const ces[9] = { 0x132E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_139)
{
    // 1F367 0061;	
    // (üçß) SHAVED ICE	[132E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F367, 0x0061 };
    uint32_t const ces[9] = { 0x132E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_140)
{
    // 1F367 0041;	
    // (üçß) SHAVED ICE	[132E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F367, 0x0041 };
    uint32_t const ces[9] = { 0x132E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_141)
{
    // 1F367 0062;	
    // (üçß) SHAVED ICE	[132E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F367, 0x0062 };
    uint32_t const ces[9] = { 0x132E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_142)
{
    // 1F368 0021;	
    // (üç®) ICE CREAM	[132F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F368, 0x0021 };
    uint32_t const ces[9] = { 0x132F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_143)
{
    // 1F368 003F;	
    // (üç®) ICE CREAM	[132F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F368, 0x003F };
    uint32_t const ces[9] = { 0x132F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_144)
{
    // 1F368 0061;	
    // (üç®) ICE CREAM	[132F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F368, 0x0061 };
    uint32_t const ces[9] = { 0x132F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_145)
{
    // 1F368 0041;	
    // (üç®) ICE CREAM	[132F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F368, 0x0041 };
    uint32_t const ces[9] = { 0x132F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_146)
{
    // 1F368 0062;	
    // (üç®) ICE CREAM	[132F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F368, 0x0062 };
    uint32_t const ces[9] = { 0x132F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_147)
{
    // 1F369 0021;	
    // (üç©) DOUGHNUT	[1330 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F369, 0x0021 };
    uint32_t const ces[9] = { 0x1330, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_148)
{
    // 1F369 003F;	
    // (üç©) DOUGHNUT	[1330 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F369, 0x003F };
    uint32_t const ces[9] = { 0x1330, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_149)
{
    // 1F369 0061;	
    // (üç©) DOUGHNUT	[1330 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F369, 0x0061 };
    uint32_t const ces[9] = { 0x1330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_150)
{
    // 1F369 0041;	
    // (üç©) DOUGHNUT	[1330 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F369, 0x0041 };
    uint32_t const ces[9] = { 0x1330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_151)
{
    // 1F369 0062;	
    // (üç©) DOUGHNUT	[1330 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F369, 0x0062 };
    uint32_t const ces[9] = { 0x1330, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_152)
{
    // 1F36A 0021;	
    // (üç™) COOKIE	[1331 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36A, 0x0021 };
    uint32_t const ces[9] = { 0x1331, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_153)
{
    // 1F36A 003F;	
    // (üç™) COOKIE	[1331 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36A, 0x003F };
    uint32_t const ces[9] = { 0x1331, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_154)
{
    // 1F36A 0061;	
    // (üç™) COOKIE	[1331 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36A, 0x0061 };
    uint32_t const ces[9] = { 0x1331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_155)
{
    // 1F36A 0041;	
    // (üç™) COOKIE	[1331 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F36A, 0x0041 };
    uint32_t const ces[9] = { 0x1331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_156)
{
    // 1F36A 0062;	
    // (üç™) COOKIE	[1331 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36A, 0x0062 };
    uint32_t const ces[9] = { 0x1331, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_157)
{
    // 1F36B 0021;	
    // (üç´) CHOCOLATE BAR	[1332 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36B, 0x0021 };
    uint32_t const ces[9] = { 0x1332, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_158)
{
    // 1F36B 003F;	
    // (üç´) CHOCOLATE BAR	[1332 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36B, 0x003F };
    uint32_t const ces[9] = { 0x1332, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_159)
{
    // 1F36B 0061;	
    // (üç´) CHOCOLATE BAR	[1332 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36B, 0x0061 };
    uint32_t const ces[9] = { 0x1332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_160)
{
    // 1F36B 0041;	
    // (üç´) CHOCOLATE BAR	[1332 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F36B, 0x0041 };
    uint32_t const ces[9] = { 0x1332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_161)
{
    // 1F36B 0062;	
    // (üç´) CHOCOLATE BAR	[1332 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36B, 0x0062 };
    uint32_t const ces[9] = { 0x1332, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_162)
{
    // 1F36C 0021;	
    // (üç¨) CANDY	[1333 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36C, 0x0021 };
    uint32_t const ces[9] = { 0x1333, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_163)
{
    // 1F36C 003F;	
    // (üç¨) CANDY	[1333 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36C, 0x003F };
    uint32_t const ces[9] = { 0x1333, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_164)
{
    // 1F36C 0061;	
    // (üç¨) CANDY	[1333 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36C, 0x0061 };
    uint32_t const ces[9] = { 0x1333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_165)
{
    // 1F36C 0041;	
    // (üç¨) CANDY	[1333 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F36C, 0x0041 };
    uint32_t const ces[9] = { 0x1333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_166)
{
    // 1F36C 0062;	
    // (üç¨) CANDY	[1333 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36C, 0x0062 };
    uint32_t const ces[9] = { 0x1333, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_167)
{
    // 1F36D 0021;	
    // (üç≠) LOLLIPOP	[1334 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36D, 0x0021 };
    uint32_t const ces[9] = { 0x1334, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_168)
{
    // 1F36D 003F;	
    // (üç≠) LOLLIPOP	[1334 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36D, 0x003F };
    uint32_t const ces[9] = { 0x1334, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_169)
{
    // 1F36D 0061;	
    // (üç≠) LOLLIPOP	[1334 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36D, 0x0061 };
    uint32_t const ces[9] = { 0x1334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_170)
{
    // 1F36D 0041;	
    // (üç≠) LOLLIPOP	[1334 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F36D, 0x0041 };
    uint32_t const ces[9] = { 0x1334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_171)
{
    // 1F36D 0062;	
    // (üç≠) LOLLIPOP	[1334 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36D, 0x0062 };
    uint32_t const ces[9] = { 0x1334, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_172)
{
    // 1F36E 0021;	
    // (üçÆ) CUSTARD	[1335 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36E, 0x0021 };
    uint32_t const ces[9] = { 0x1335, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_173)
{
    // 1F36E 003F;	
    // (üçÆ) CUSTARD	[1335 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36E, 0x003F };
    uint32_t const ces[9] = { 0x1335, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_174)
{
    // 1F36E 0061;	
    // (üçÆ) CUSTARD	[1335 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36E, 0x0061 };
    uint32_t const ces[9] = { 0x1335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_175)
{
    // 1F36E 0041;	
    // (üçÆ) CUSTARD	[1335 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F36E, 0x0041 };
    uint32_t const ces[9] = { 0x1335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_176)
{
    // 1F36E 0062;	
    // (üçÆ) CUSTARD	[1335 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36E, 0x0062 };
    uint32_t const ces[9] = { 0x1335, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_177)
{
    // 1F36F 0021;	
    // (üçØ) HONEY POT	[1336 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36F, 0x0021 };
    uint32_t const ces[9] = { 0x1336, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_178)
{
    // 1F36F 003F;	
    // (üçØ) HONEY POT	[1336 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36F, 0x003F };
    uint32_t const ces[9] = { 0x1336, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_179)
{
    // 1F36F 0061;	
    // (üçØ) HONEY POT	[1336 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36F, 0x0061 };
    uint32_t const ces[9] = { 0x1336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_180)
{
    // 1F36F 0041;	
    // (üçØ) HONEY POT	[1336 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F36F, 0x0041 };
    uint32_t const ces[9] = { 0x1336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_181)
{
    // 1F36F 0062;	
    // (üçØ) HONEY POT	[1336 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F36F, 0x0062 };
    uint32_t const ces[9] = { 0x1336, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_182)
{
    // 1F370 0021;	
    // (üç∞) SHORTCAKE	[1337 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F370, 0x0021 };
    uint32_t const ces[9] = { 0x1337, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_183)
{
    // 1F370 003F;	
    // (üç∞) SHORTCAKE	[1337 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F370, 0x003F };
    uint32_t const ces[9] = { 0x1337, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_184)
{
    // 1F370 0061;	
    // (üç∞) SHORTCAKE	[1337 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F370, 0x0061 };
    uint32_t const ces[9] = { 0x1337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_185)
{
    // 1F370 0041;	
    // (üç∞) SHORTCAKE	[1337 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F370, 0x0041 };
    uint32_t const ces[9] = { 0x1337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_186)
{
    // 1F370 0062;	
    // (üç∞) SHORTCAKE	[1337 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F370, 0x0062 };
    uint32_t const ces[9] = { 0x1337, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_187)
{
    // 1F371 0021;	
    // (üç±) BENTO BOX	[1338 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F371, 0x0021 };
    uint32_t const ces[9] = { 0x1338, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_188)
{
    // 1F371 003F;	
    // (üç±) BENTO BOX	[1338 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F371, 0x003F };
    uint32_t const ces[9] = { 0x1338, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_189)
{
    // 1F371 0061;	
    // (üç±) BENTO BOX	[1338 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F371, 0x0061 };
    uint32_t const ces[9] = { 0x1338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_190)
{
    // 1F371 0041;	
    // (üç±) BENTO BOX	[1338 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F371, 0x0041 };
    uint32_t const ces[9] = { 0x1338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_191)
{
    // 1F371 0062;	
    // (üç±) BENTO BOX	[1338 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F371, 0x0062 };
    uint32_t const ces[9] = { 0x1338, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_192)
{
    // 1F372 0021;	
    // (üç≤) POT OF FOOD	[1339 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F372, 0x0021 };
    uint32_t const ces[9] = { 0x1339, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_193)
{
    // 1F372 003F;	
    // (üç≤) POT OF FOOD	[1339 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F372, 0x003F };
    uint32_t const ces[9] = { 0x1339, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_194)
{
    // 1F372 0061;	
    // (üç≤) POT OF FOOD	[1339 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F372, 0x0061 };
    uint32_t const ces[9] = { 0x1339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_195)
{
    // 1F372 0041;	
    // (üç≤) POT OF FOOD	[1339 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F372, 0x0041 };
    uint32_t const ces[9] = { 0x1339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_196)
{
    // 1F372 0062;	
    // (üç≤) POT OF FOOD	[1339 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F372, 0x0062 };
    uint32_t const ces[9] = { 0x1339, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_197)
{
    // 1F373 0021;	
    // (üç≥) COOKING	[133A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F373, 0x0021 };
    uint32_t const ces[9] = { 0x133A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_198)
{
    // 1F373 003F;	
    // (üç≥) COOKING	[133A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F373, 0x003F };
    uint32_t const ces[9] = { 0x133A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_199)
{
    // 1F373 0061;	
    // (üç≥) COOKING	[133A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F373, 0x0061 };
    uint32_t const ces[9] = { 0x133A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_200)
{
    // 1F373 0041;	
    // (üç≥) COOKING	[133A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F373, 0x0041 };
    uint32_t const ces[9] = { 0x133A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_201)
{
    // 1F373 0062;	
    // (üç≥) COOKING	[133A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F373, 0x0062 };
    uint32_t const ces[9] = { 0x133A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_202)
{
    // 1F374 0021;	
    // (üç¥) FORK AND KNIFE	[133B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F374, 0x0021 };
    uint32_t const ces[9] = { 0x133B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_203)
{
    // 1F374 003F;	
    // (üç¥) FORK AND KNIFE	[133B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F374, 0x003F };
    uint32_t const ces[9] = { 0x133B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_204)
{
    // 1F374 0061;	
    // (üç¥) FORK AND KNIFE	[133B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F374, 0x0061 };
    uint32_t const ces[9] = { 0x133B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_205)
{
    // 1F374 0041;	
    // (üç¥) FORK AND KNIFE	[133B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F374, 0x0041 };
    uint32_t const ces[9] = { 0x133B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_206)
{
    // 1F374 0062;	
    // (üç¥) FORK AND KNIFE	[133B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F374, 0x0062 };
    uint32_t const ces[9] = { 0x133B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_207)
{
    // 1F375 0021;	
    // (üçµ) TEACUP WITHOUT HANDLE	[133C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F375, 0x0021 };
    uint32_t const ces[9] = { 0x133C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_208)
{
    // 1F375 003F;	
    // (üçµ) TEACUP WITHOUT HANDLE	[133C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F375, 0x003F };
    uint32_t const ces[9] = { 0x133C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_209)
{
    // 1F375 0061;	
    // (üçµ) TEACUP WITHOUT HANDLE	[133C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F375, 0x0061 };
    uint32_t const ces[9] = { 0x133C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_210)
{
    // 1F375 0041;	
    // (üçµ) TEACUP WITHOUT HANDLE	[133C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F375, 0x0041 };
    uint32_t const ces[9] = { 0x133C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_211)
{
    // 1F375 0062;	
    // (üçµ) TEACUP WITHOUT HANDLE	[133C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F375, 0x0062 };
    uint32_t const ces[9] = { 0x133C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_212)
{
    // 1F376 0021;	
    // (üç∂) SAKE BOTTLE AND CUP	[133D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F376, 0x0021 };
    uint32_t const ces[9] = { 0x133D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_213)
{
    // 1F376 003F;	
    // (üç∂) SAKE BOTTLE AND CUP	[133D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F376, 0x003F };
    uint32_t const ces[9] = { 0x133D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_214)
{
    // 1F376 0061;	
    // (üç∂) SAKE BOTTLE AND CUP	[133D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F376, 0x0061 };
    uint32_t const ces[9] = { 0x133D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_215)
{
    // 1F376 0041;	
    // (üç∂) SAKE BOTTLE AND CUP	[133D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F376, 0x0041 };
    uint32_t const ces[9] = { 0x133D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_216)
{
    // 1F376 0062;	
    // (üç∂) SAKE BOTTLE AND CUP	[133D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F376, 0x0062 };
    uint32_t const ces[9] = { 0x133D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_217)
{
    // 1F377 0021;	
    // (üç∑) WINE GLASS	[133E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F377, 0x0021 };
    uint32_t const ces[9] = { 0x133E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_218)
{
    // 1F377 003F;	
    // (üç∑) WINE GLASS	[133E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F377, 0x003F };
    uint32_t const ces[9] = { 0x133E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_219)
{
    // 1F377 0061;	
    // (üç∑) WINE GLASS	[133E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F377, 0x0061 };
    uint32_t const ces[9] = { 0x133E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_220)
{
    // 1F377 0041;	
    // (üç∑) WINE GLASS	[133E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F377, 0x0041 };
    uint32_t const ces[9] = { 0x133E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_221)
{
    // 1F377 0062;	
    // (üç∑) WINE GLASS	[133E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F377, 0x0062 };
    uint32_t const ces[9] = { 0x133E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_222)
{
    // 1F378 0021;	
    // (üç∏) COCKTAIL GLASS	[133F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F378, 0x0021 };
    uint32_t const ces[9] = { 0x133F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_223)
{
    // 1F378 003F;	
    // (üç∏) COCKTAIL GLASS	[133F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F378, 0x003F };
    uint32_t const ces[9] = { 0x133F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_224)
{
    // 1F378 0061;	
    // (üç∏) COCKTAIL GLASS	[133F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F378, 0x0061 };
    uint32_t const ces[9] = { 0x133F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_225)
{
    // 1F378 0041;	
    // (üç∏) COCKTAIL GLASS	[133F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F378, 0x0041 };
    uint32_t const ces[9] = { 0x133F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_226)
{
    // 1F378 0062;	
    // (üç∏) COCKTAIL GLASS	[133F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F378, 0x0062 };
    uint32_t const ces[9] = { 0x133F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_227)
{
    // 1F379 0021;	
    // (üçπ) TROPICAL DRINK	[1340 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F379, 0x0021 };
    uint32_t const ces[9] = { 0x1340, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_228)
{
    // 1F379 003F;	
    // (üçπ) TROPICAL DRINK	[1340 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F379, 0x003F };
    uint32_t const ces[9] = { 0x1340, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_229)
{
    // 1F379 0061;	
    // (üçπ) TROPICAL DRINK	[1340 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F379, 0x0061 };
    uint32_t const ces[9] = { 0x1340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_230)
{
    // 1F379 0041;	
    // (üçπ) TROPICAL DRINK	[1340 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F379, 0x0041 };
    uint32_t const ces[9] = { 0x1340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_231)
{
    // 1F379 0062;	
    // (üçπ) TROPICAL DRINK	[1340 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F379, 0x0062 };
    uint32_t const ces[9] = { 0x1340, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_232)
{
    // 1F37A 0021;	
    // (üç∫) BEER MUG	[1341 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37A, 0x0021 };
    uint32_t const ces[9] = { 0x1341, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_233)
{
    // 1F37A 003F;	
    // (üç∫) BEER MUG	[1341 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37A, 0x003F };
    uint32_t const ces[9] = { 0x1341, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_234)
{
    // 1F37A 0061;	
    // (üç∫) BEER MUG	[1341 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37A, 0x0061 };
    uint32_t const ces[9] = { 0x1341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_235)
{
    // 1F37A 0041;	
    // (üç∫) BEER MUG	[1341 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F37A, 0x0041 };
    uint32_t const ces[9] = { 0x1341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_236)
{
    // 1F37A 0062;	
    // (üç∫) BEER MUG	[1341 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37A, 0x0062 };
    uint32_t const ces[9] = { 0x1341, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_237)
{
    // 1F37B 0021;	
    // (üçª) CLINKING BEER MUGS	[1342 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37B, 0x0021 };
    uint32_t const ces[9] = { 0x1342, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_238)
{
    // 1F37B 003F;	
    // (üçª) CLINKING BEER MUGS	[1342 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37B, 0x003F };
    uint32_t const ces[9] = { 0x1342, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_239)
{
    // 1F37B 0061;	
    // (üçª) CLINKING BEER MUGS	[1342 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37B, 0x0061 };
    uint32_t const ces[9] = { 0x1342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_240)
{
    // 1F37B 0041;	
    // (üçª) CLINKING BEER MUGS	[1342 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F37B, 0x0041 };
    uint32_t const ces[9] = { 0x1342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_241)
{
    // 1F37B 0062;	
    // (üçª) CLINKING BEER MUGS	[1342 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37B, 0x0062 };
    uint32_t const ces[9] = { 0x1342, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_242)
{
    // 1F37C 0021;	
    // (üçº) BABY BOTTLE	[1343 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37C, 0x0021 };
    uint32_t const ces[9] = { 0x1343, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_243)
{
    // 1F37C 003F;	
    // (üçº) BABY BOTTLE	[1343 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37C, 0x003F };
    uint32_t const ces[9] = { 0x1343, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_244)
{
    // 1F37C 0061;	
    // (üçº) BABY BOTTLE	[1343 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37C, 0x0061 };
    uint32_t const ces[9] = { 0x1343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_245)
{
    // 1F37C 0041;	
    // (üçº) BABY BOTTLE	[1343 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F37C, 0x0041 };
    uint32_t const ces[9] = { 0x1343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_246)
{
    // 1F37C 0062;	
    // (üçº) BABY BOTTLE	[1343 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37C, 0x0062 };
    uint32_t const ces[9] = { 0x1343, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_247)
{
    // 1F37D 0021;	
    // (üçΩ) FORK AND KNIFE WITH PLATE	[1344 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37D, 0x0021 };
    uint32_t const ces[9] = { 0x1344, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_248)
{
    // 1F37D 003F;	
    // (üçΩ) FORK AND KNIFE WITH PLATE	[1344 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37D, 0x003F };
    uint32_t const ces[9] = { 0x1344, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_249)
{
    // 1F37D 0061;	
    // (üçΩ) FORK AND KNIFE WITH PLATE	[1344 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37D, 0x0061 };
    uint32_t const ces[9] = { 0x1344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_250)
{
    // 1F37D 0041;	
    // (üçΩ) FORK AND KNIFE WITH PLATE	[1344 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F37D, 0x0041 };
    uint32_t const ces[9] = { 0x1344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_251)
{
    // 1F37D 0062;	
    // (üçΩ) FORK AND KNIFE WITH PLATE	[1344 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37D, 0x0062 };
    uint32_t const ces[9] = { 0x1344, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_252)
{
    // 1F37E 0021;	
    // (üçæ) BOTTLE WITH POPPING CORK	[1345 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37E, 0x0021 };
    uint32_t const ces[9] = { 0x1345, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_253)
{
    // 1F37E 003F;	
    // (üçæ) BOTTLE WITH POPPING CORK	[1345 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37E, 0x003F };
    uint32_t const ces[9] = { 0x1345, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_254)
{
    // 1F37E 0061;	
    // (üçæ) BOTTLE WITH POPPING CORK	[1345 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37E, 0x0061 };
    uint32_t const ces[9] = { 0x1345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_255)
{
    // 1F37E 0041;	
    // (üçæ) BOTTLE WITH POPPING CORK	[1345 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F37E, 0x0041 };
    uint32_t const ces[9] = { 0x1345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_256)
{
    // 1F37E 0062;	
    // (üçæ) BOTTLE WITH POPPING CORK	[1345 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37E, 0x0062 };
    uint32_t const ces[9] = { 0x1345, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_257)
{
    // 1F37F 0021;	
    // (üçø) POPCORN	[1346 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37F, 0x0021 };
    uint32_t const ces[9] = { 0x1346, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_258)
{
    // 1F37F 003F;	
    // (üçø) POPCORN	[1346 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37F, 0x003F };
    uint32_t const ces[9] = { 0x1346, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_259)
{
    // 1F37F 0061;	
    // (üçø) POPCORN	[1346 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37F, 0x0061 };
    uint32_t const ces[9] = { 0x1346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_260)
{
    // 1F37F 0041;	
    // (üçø) POPCORN	[1346 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F37F, 0x0041 };
    uint32_t const ces[9] = { 0x1346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_261)
{
    // 1F37F 0062;	
    // (üçø) POPCORN	[1346 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F37F, 0x0062 };
    uint32_t const ces[9] = { 0x1346, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_262)
{
    // 1F380 0021;	
    // (üéÄ) RIBBON	[1347 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F380, 0x0021 };
    uint32_t const ces[9] = { 0x1347, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_263)
{
    // 1F380 003F;	
    // (üéÄ) RIBBON	[1347 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F380, 0x003F };
    uint32_t const ces[9] = { 0x1347, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_264)
{
    // 1F380 0061;	
    // (üéÄ) RIBBON	[1347 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F380, 0x0061 };
    uint32_t const ces[9] = { 0x1347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_265)
{
    // 1F380 0041;	
    // (üéÄ) RIBBON	[1347 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F380, 0x0041 };
    uint32_t const ces[9] = { 0x1347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_266)
{
    // 1F380 0062;	
    // (üéÄ) RIBBON	[1347 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F380, 0x0062 };
    uint32_t const ces[9] = { 0x1347, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_267)
{
    // 1F381 0021;	
    // (üéÅ) WRAPPED PRESENT	[1348 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F381, 0x0021 };
    uint32_t const ces[9] = { 0x1348, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_268)
{
    // 1F381 003F;	
    // (üéÅ) WRAPPED PRESENT	[1348 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F381, 0x003F };
    uint32_t const ces[9] = { 0x1348, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_269)
{
    // 1F381 0061;	
    // (üéÅ) WRAPPED PRESENT	[1348 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F381, 0x0061 };
    uint32_t const ces[9] = { 0x1348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_270)
{
    // 1F381 0041;	
    // (üéÅ) WRAPPED PRESENT	[1348 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F381, 0x0041 };
    uint32_t const ces[9] = { 0x1348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_271)
{
    // 1F381 0062;	
    // (üéÅ) WRAPPED PRESENT	[1348 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F381, 0x0062 };
    uint32_t const ces[9] = { 0x1348, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_272)
{
    // 1F382 0021;	
    // (üéÇ) BIRTHDAY CAKE	[1349 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F382, 0x0021 };
    uint32_t const ces[9] = { 0x1349, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_273)
{
    // 1F382 003F;	
    // (üéÇ) BIRTHDAY CAKE	[1349 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F382, 0x003F };
    uint32_t const ces[9] = { 0x1349, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_274)
{
    // 1F382 0061;	
    // (üéÇ) BIRTHDAY CAKE	[1349 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F382, 0x0061 };
    uint32_t const ces[9] = { 0x1349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_275)
{
    // 1F382 0041;	
    // (üéÇ) BIRTHDAY CAKE	[1349 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F382, 0x0041 };
    uint32_t const ces[9] = { 0x1349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_276)
{
    // 1F382 0062;	
    // (üéÇ) BIRTHDAY CAKE	[1349 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F382, 0x0062 };
    uint32_t const ces[9] = { 0x1349, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_277)
{
    // 1F383 0021;	
    // (üéÉ) JACK-O-LANTERN	[134A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F383, 0x0021 };
    uint32_t const ces[9] = { 0x134A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_278)
{
    // 1F383 003F;	
    // (üéÉ) JACK-O-LANTERN	[134A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F383, 0x003F };
    uint32_t const ces[9] = { 0x134A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_279)
{
    // 1F383 0061;	
    // (üéÉ) JACK-O-LANTERN	[134A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F383, 0x0061 };
    uint32_t const ces[9] = { 0x134A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_280)
{
    // 1F383 0041;	
    // (üéÉ) JACK-O-LANTERN	[134A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F383, 0x0041 };
    uint32_t const ces[9] = { 0x134A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_281)
{
    // 1F383 0062;	
    // (üéÉ) JACK-O-LANTERN	[134A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F383, 0x0062 };
    uint32_t const ces[9] = { 0x134A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_282)
{
    // 1F384 0021;	
    // (üéÑ) CHRISTMAS TREE	[134B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F384, 0x0021 };
    uint32_t const ces[9] = { 0x134B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_283)
{
    // 1F384 003F;	
    // (üéÑ) CHRISTMAS TREE	[134B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F384, 0x003F };
    uint32_t const ces[9] = { 0x134B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_284)
{
    // 1F384 0061;	
    // (üéÑ) CHRISTMAS TREE	[134B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F384, 0x0061 };
    uint32_t const ces[9] = { 0x134B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_285)
{
    // 1F384 0041;	
    // (üéÑ) CHRISTMAS TREE	[134B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F384, 0x0041 };
    uint32_t const ces[9] = { 0x134B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_286)
{
    // 1F384 0062;	
    // (üéÑ) CHRISTMAS TREE	[134B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F384, 0x0062 };
    uint32_t const ces[9] = { 0x134B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_287)
{
    // 1F385 0021;	
    // (üéÖ) FATHER CHRISTMAS	[134C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F385, 0x0021 };
    uint32_t const ces[9] = { 0x134C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_288)
{
    // 1F385 003F;	
    // (üéÖ) FATHER CHRISTMAS	[134C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F385, 0x003F };
    uint32_t const ces[9] = { 0x134C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_289)
{
    // 1F385 0061;	
    // (üéÖ) FATHER CHRISTMAS	[134C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F385, 0x0061 };
    uint32_t const ces[9] = { 0x134C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_290)
{
    // 1F385 0041;	
    // (üéÖ) FATHER CHRISTMAS	[134C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F385, 0x0041 };
    uint32_t const ces[9] = { 0x134C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_291)
{
    // 1F385 0062;	
    // (üéÖ) FATHER CHRISTMAS	[134C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F385, 0x0062 };
    uint32_t const ces[9] = { 0x134C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_292)
{
    // 1F386 0021;	
    // (üéÜ) FIREWORKS	[134D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F386, 0x0021 };
    uint32_t const ces[9] = { 0x134D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_293)
{
    // 1F386 003F;	
    // (üéÜ) FIREWORKS	[134D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F386, 0x003F };
    uint32_t const ces[9] = { 0x134D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_294)
{
    // 1F386 0061;	
    // (üéÜ) FIREWORKS	[134D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F386, 0x0061 };
    uint32_t const ces[9] = { 0x134D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_295)
{
    // 1F386 0041;	
    // (üéÜ) FIREWORKS	[134D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F386, 0x0041 };
    uint32_t const ces[9] = { 0x134D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_296)
{
    // 1F386 0062;	
    // (üéÜ) FIREWORKS	[134D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F386, 0x0062 };
    uint32_t const ces[9] = { 0x134D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_297)
{
    // 1F387 0021;	
    // (üéá) FIREWORK SPARKLER	[134E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F387, 0x0021 };
    uint32_t const ces[9] = { 0x134E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_298)
{
    // 1F387 003F;	
    // (üéá) FIREWORK SPARKLER	[134E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F387, 0x003F };
    uint32_t const ces[9] = { 0x134E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_299)
{
    // 1F387 0061;	
    // (üéá) FIREWORK SPARKLER	[134E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F387, 0x0061 };
    uint32_t const ces[9] = { 0x134E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_300)
{
    // 1F387 0041;	
    // (üéá) FIREWORK SPARKLER	[134E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F387, 0x0041 };
    uint32_t const ces[9] = { 0x134E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_301)
{
    // 1F387 0062;	
    // (üéá) FIREWORK SPARKLER	[134E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F387, 0x0062 };
    uint32_t const ces[9] = { 0x134E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_302)
{
    // 1F388 0021;	
    // (üéà) BALLOON	[134F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F388, 0x0021 };
    uint32_t const ces[9] = { 0x134F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_303)
{
    // 1F388 003F;	
    // (üéà) BALLOON	[134F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F388, 0x003F };
    uint32_t const ces[9] = { 0x134F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_304)
{
    // 1F388 0061;	
    // (üéà) BALLOON	[134F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F388, 0x0061 };
    uint32_t const ces[9] = { 0x134F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_305)
{
    // 1F388 0041;	
    // (üéà) BALLOON	[134F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F388, 0x0041 };
    uint32_t const ces[9] = { 0x134F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_306)
{
    // 1F388 0062;	
    // (üéà) BALLOON	[134F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F388, 0x0062 };
    uint32_t const ces[9] = { 0x134F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_307)
{
    // 1F389 0021;	
    // (üéâ) PARTY POPPER	[1350 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F389, 0x0021 };
    uint32_t const ces[9] = { 0x1350, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_308)
{
    // 1F389 003F;	
    // (üéâ) PARTY POPPER	[1350 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F389, 0x003F };
    uint32_t const ces[9] = { 0x1350, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_309)
{
    // 1F389 0061;	
    // (üéâ) PARTY POPPER	[1350 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F389, 0x0061 };
    uint32_t const ces[9] = { 0x1350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_310)
{
    // 1F389 0041;	
    // (üéâ) PARTY POPPER	[1350 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F389, 0x0041 };
    uint32_t const ces[9] = { 0x1350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_311)
{
    // 1F389 0062;	
    // (üéâ) PARTY POPPER	[1350 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F389, 0x0062 };
    uint32_t const ces[9] = { 0x1350, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_312)
{
    // 1F38A 0021;	
    // (üéä) CONFETTI BALL	[1351 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38A, 0x0021 };
    uint32_t const ces[9] = { 0x1351, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_313)
{
    // 1F38A 003F;	
    // (üéä) CONFETTI BALL	[1351 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38A, 0x003F };
    uint32_t const ces[9] = { 0x1351, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_314)
{
    // 1F38A 0061;	
    // (üéä) CONFETTI BALL	[1351 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38A, 0x0061 };
    uint32_t const ces[9] = { 0x1351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_315)
{
    // 1F38A 0041;	
    // (üéä) CONFETTI BALL	[1351 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F38A, 0x0041 };
    uint32_t const ces[9] = { 0x1351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_316)
{
    // 1F38A 0062;	
    // (üéä) CONFETTI BALL	[1351 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38A, 0x0062 };
    uint32_t const ces[9] = { 0x1351, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_317)
{
    // 1F38B 0021;	
    // (üéã) TANABATA TREE	[1352 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38B, 0x0021 };
    uint32_t const ces[9] = { 0x1352, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_318)
{
    // 1F38B 003F;	
    // (üéã) TANABATA TREE	[1352 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38B, 0x003F };
    uint32_t const ces[9] = { 0x1352, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_319)
{
    // 1F38B 0061;	
    // (üéã) TANABATA TREE	[1352 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38B, 0x0061 };
    uint32_t const ces[9] = { 0x1352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_320)
{
    // 1F38B 0041;	
    // (üéã) TANABATA TREE	[1352 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F38B, 0x0041 };
    uint32_t const ces[9] = { 0x1352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_321)
{
    // 1F38B 0062;	
    // (üéã) TANABATA TREE	[1352 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38B, 0x0062 };
    uint32_t const ces[9] = { 0x1352, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_322)
{
    // 1F38C 0021;	
    // (üéå) CROSSED FLAGS	[1353 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38C, 0x0021 };
    uint32_t const ces[9] = { 0x1353, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_323)
{
    // 1F38C 003F;	
    // (üéå) CROSSED FLAGS	[1353 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38C, 0x003F };
    uint32_t const ces[9] = { 0x1353, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_324)
{
    // 1F38C 0061;	
    // (üéå) CROSSED FLAGS	[1353 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38C, 0x0061 };
    uint32_t const ces[9] = { 0x1353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_325)
{
    // 1F38C 0041;	
    // (üéå) CROSSED FLAGS	[1353 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F38C, 0x0041 };
    uint32_t const ces[9] = { 0x1353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_326)
{
    // 1F38C 0062;	
    // (üéå) CROSSED FLAGS	[1353 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38C, 0x0062 };
    uint32_t const ces[9] = { 0x1353, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_327)
{
    // 1F38D 0021;	
    // (üéç) PINE DECORATION	[1354 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38D, 0x0021 };
    uint32_t const ces[9] = { 0x1354, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_328)
{
    // 1F38D 003F;	
    // (üéç) PINE DECORATION	[1354 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38D, 0x003F };
    uint32_t const ces[9] = { 0x1354, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_329)
{
    // 1F38D 0061;	
    // (üéç) PINE DECORATION	[1354 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38D, 0x0061 };
    uint32_t const ces[9] = { 0x1354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_330)
{
    // 1F38D 0041;	
    // (üéç) PINE DECORATION	[1354 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F38D, 0x0041 };
    uint32_t const ces[9] = { 0x1354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_331)
{
    // 1F38D 0062;	
    // (üéç) PINE DECORATION	[1354 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38D, 0x0062 };
    uint32_t const ces[9] = { 0x1354, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_332)
{
    // 1F38E 0021;	
    // (üéé) JAPANESE DOLLS	[1355 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38E, 0x0021 };
    uint32_t const ces[9] = { 0x1355, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_333)
{
    // 1F38E 003F;	
    // (üéé) JAPANESE DOLLS	[1355 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38E, 0x003F };
    uint32_t const ces[9] = { 0x1355, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_334)
{
    // 1F38E 0061;	
    // (üéé) JAPANESE DOLLS	[1355 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38E, 0x0061 };
    uint32_t const ces[9] = { 0x1355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_335)
{
    // 1F38E 0041;	
    // (üéé) JAPANESE DOLLS	[1355 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F38E, 0x0041 };
    uint32_t const ces[9] = { 0x1355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_336)
{
    // 1F38E 0062;	
    // (üéé) JAPANESE DOLLS	[1355 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38E, 0x0062 };
    uint32_t const ces[9] = { 0x1355, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_337)
{
    // 1F38F 0021;	
    // (üéè) CARP STREAMER	[1356 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38F, 0x0021 };
    uint32_t const ces[9] = { 0x1356, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_338)
{
    // 1F38F 003F;	
    // (üéè) CARP STREAMER	[1356 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38F, 0x003F };
    uint32_t const ces[9] = { 0x1356, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_339)
{
    // 1F38F 0061;	
    // (üéè) CARP STREAMER	[1356 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38F, 0x0061 };
    uint32_t const ces[9] = { 0x1356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_340)
{
    // 1F38F 0041;	
    // (üéè) CARP STREAMER	[1356 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F38F, 0x0041 };
    uint32_t const ces[9] = { 0x1356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_341)
{
    // 1F38F 0062;	
    // (üéè) CARP STREAMER	[1356 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F38F, 0x0062 };
    uint32_t const ces[9] = { 0x1356, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_342)
{
    // 1F390 0021;	
    // (üéê) WIND CHIME	[1357 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F390, 0x0021 };
    uint32_t const ces[9] = { 0x1357, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_343)
{
    // 1F390 003F;	
    // (üéê) WIND CHIME	[1357 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F390, 0x003F };
    uint32_t const ces[9] = { 0x1357, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_344)
{
    // 1F390 0061;	
    // (üéê) WIND CHIME	[1357 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F390, 0x0061 };
    uint32_t const ces[9] = { 0x1357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_345)
{
    // 1F390 0041;	
    // (üéê) WIND CHIME	[1357 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F390, 0x0041 };
    uint32_t const ces[9] = { 0x1357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_346)
{
    // 1F390 0062;	
    // (üéê) WIND CHIME	[1357 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F390, 0x0062 };
    uint32_t const ces[9] = { 0x1357, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_347)
{
    // 1F391 0021;	
    // (üéë) MOON VIEWING CEREMONY	[1358 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F391, 0x0021 };
    uint32_t const ces[9] = { 0x1358, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_348)
{
    // 1F391 003F;	
    // (üéë) MOON VIEWING CEREMONY	[1358 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F391, 0x003F };
    uint32_t const ces[9] = { 0x1358, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_349)
{
    // 1F391 0061;	
    // (üéë) MOON VIEWING CEREMONY	[1358 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F391, 0x0061 };
    uint32_t const ces[9] = { 0x1358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_350)
{
    // 1F391 0041;	
    // (üéë) MOON VIEWING CEREMONY	[1358 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F391, 0x0041 };
    uint32_t const ces[9] = { 0x1358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_351)
{
    // 1F391 0062;	
    // (üéë) MOON VIEWING CEREMONY	[1358 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F391, 0x0062 };
    uint32_t const ces[9] = { 0x1358, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_352)
{
    // 1F392 0021;	
    // (üéí) SCHOOL SATCHEL	[1359 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F392, 0x0021 };
    uint32_t const ces[9] = { 0x1359, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_353)
{
    // 1F392 003F;	
    // (üéí) SCHOOL SATCHEL	[1359 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F392, 0x003F };
    uint32_t const ces[9] = { 0x1359, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_354)
{
    // 1F392 0061;	
    // (üéí) SCHOOL SATCHEL	[1359 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F392, 0x0061 };
    uint32_t const ces[9] = { 0x1359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_355)
{
    // 1F392 0041;	
    // (üéí) SCHOOL SATCHEL	[1359 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F392, 0x0041 };
    uint32_t const ces[9] = { 0x1359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_356)
{
    // 1F392 0062;	
    // (üéí) SCHOOL SATCHEL	[1359 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F392, 0x0062 };
    uint32_t const ces[9] = { 0x1359, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_357)
{
    // 1F393 0021;	
    // (üéì) GRADUATION CAP	[135A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F393, 0x0021 };
    uint32_t const ces[9] = { 0x135A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_358)
{
    // 1F393 003F;	
    // (üéì) GRADUATION CAP	[135A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F393, 0x003F };
    uint32_t const ces[9] = { 0x135A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_359)
{
    // 1F393 0061;	
    // (üéì) GRADUATION CAP	[135A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F393, 0x0061 };
    uint32_t const ces[9] = { 0x135A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_360)
{
    // 1F393 0041;	
    // (üéì) GRADUATION CAP	[135A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F393, 0x0041 };
    uint32_t const ces[9] = { 0x135A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_361)
{
    // 1F393 0062;	
    // (üéì) GRADUATION CAP	[135A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F393, 0x0062 };
    uint32_t const ces[9] = { 0x135A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_362)
{
    // 1F394 0021;	
    // (üéî) HEART WITH TIP ON THE LEFT	[135B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F394, 0x0021 };
    uint32_t const ces[9] = { 0x135B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_363)
{
    // 1F394 003F;	
    // (üéî) HEART WITH TIP ON THE LEFT	[135B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F394, 0x003F };
    uint32_t const ces[9] = { 0x135B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_364)
{
    // 1F394 0061;	
    // (üéî) HEART WITH TIP ON THE LEFT	[135B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F394, 0x0061 };
    uint32_t const ces[9] = { 0x135B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_365)
{
    // 1F394 0041;	
    // (üéî) HEART WITH TIP ON THE LEFT	[135B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F394, 0x0041 };
    uint32_t const ces[9] = { 0x135B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_366)
{
    // 1F394 0062;	
    // (üéî) HEART WITH TIP ON THE LEFT	[135B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F394, 0x0062 };
    uint32_t const ces[9] = { 0x135B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_367)
{
    // 1F395 0021;	
    // (üéï) BOUQUET OF FLOWERS	[135C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F395, 0x0021 };
    uint32_t const ces[9] = { 0x135C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_368)
{
    // 1F395 003F;	
    // (üéï) BOUQUET OF FLOWERS	[135C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F395, 0x003F };
    uint32_t const ces[9] = { 0x135C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_369)
{
    // 1F395 0061;	
    // (üéï) BOUQUET OF FLOWERS	[135C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F395, 0x0061 };
    uint32_t const ces[9] = { 0x135C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_370)
{
    // 1F395 0041;	
    // (üéï) BOUQUET OF FLOWERS	[135C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F395, 0x0041 };
    uint32_t const ces[9] = { 0x135C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_371)
{
    // 1F395 0062;	
    // (üéï) BOUQUET OF FLOWERS	[135C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F395, 0x0062 };
    uint32_t const ces[9] = { 0x135C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_372)
{
    // 1F396 0021;	
    // (üéñ) MILITARY MEDAL	[135D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F396, 0x0021 };
    uint32_t const ces[9] = { 0x135D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_373)
{
    // 1F396 003F;	
    // (üéñ) MILITARY MEDAL	[135D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F396, 0x003F };
    uint32_t const ces[9] = { 0x135D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_374)
{
    // 1F396 0061;	
    // (üéñ) MILITARY MEDAL	[135D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F396, 0x0061 };
    uint32_t const ces[9] = { 0x135D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_375)
{
    // 1F396 0041;	
    // (üéñ) MILITARY MEDAL	[135D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F396, 0x0041 };
    uint32_t const ces[9] = { 0x135D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_376)
{
    // 1F396 0062;	
    // (üéñ) MILITARY MEDAL	[135D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F396, 0x0062 };
    uint32_t const ces[9] = { 0x135D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_377)
{
    // 1F397 0021;	
    // (üéó) REMINDER RIBBON	[135E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F397, 0x0021 };
    uint32_t const ces[9] = { 0x135E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_378)
{
    // 1F397 003F;	
    // (üéó) REMINDER RIBBON	[135E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F397, 0x003F };
    uint32_t const ces[9] = { 0x135E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_379)
{
    // 1F397 0061;	
    // (üéó) REMINDER RIBBON	[135E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F397, 0x0061 };
    uint32_t const ces[9] = { 0x135E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_380)
{
    // 1F397 0041;	
    // (üéó) REMINDER RIBBON	[135E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F397, 0x0041 };
    uint32_t const ces[9] = { 0x135E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_381)
{
    // 1F397 0062;	
    // (üéó) REMINDER RIBBON	[135E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F397, 0x0062 };
    uint32_t const ces[9] = { 0x135E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_382)
{
    // 1F398 0021;	
    // (üéò) MUSICAL KEYBOARD WITH JACKS	[135F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F398, 0x0021 };
    uint32_t const ces[9] = { 0x135F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_383)
{
    // 1F398 003F;	
    // (üéò) MUSICAL KEYBOARD WITH JACKS	[135F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F398, 0x003F };
    uint32_t const ces[9] = { 0x135F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_384)
{
    // 1F398 0061;	
    // (üéò) MUSICAL KEYBOARD WITH JACKS	[135F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F398, 0x0061 };
    uint32_t const ces[9] = { 0x135F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_385)
{
    // 1F398 0041;	
    // (üéò) MUSICAL KEYBOARD WITH JACKS	[135F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F398, 0x0041 };
    uint32_t const ces[9] = { 0x135F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_386)
{
    // 1F398 0062;	
    // (üéò) MUSICAL KEYBOARD WITH JACKS	[135F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F398, 0x0062 };
    uint32_t const ces[9] = { 0x135F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_387)
{
    // 1F399 0021;	
    // (üéô) STUDIO MICROPHONE	[1360 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F399, 0x0021 };
    uint32_t const ces[9] = { 0x1360, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_388)
{
    // 1F399 003F;	
    // (üéô) STUDIO MICROPHONE	[1360 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F399, 0x003F };
    uint32_t const ces[9] = { 0x1360, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_389)
{
    // 1F399 0061;	
    // (üéô) STUDIO MICROPHONE	[1360 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F399, 0x0061 };
    uint32_t const ces[9] = { 0x1360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_390)
{
    // 1F399 0041;	
    // (üéô) STUDIO MICROPHONE	[1360 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F399, 0x0041 };
    uint32_t const ces[9] = { 0x1360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_391)
{
    // 1F399 0062;	
    // (üéô) STUDIO MICROPHONE	[1360 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F399, 0x0062 };
    uint32_t const ces[9] = { 0x1360, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_392)
{
    // 1F39A 0021;	
    // (üéö) LEVEL SLIDER	[1361 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39A, 0x0021 };
    uint32_t const ces[9] = { 0x1361, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_393)
{
    // 1F39A 003F;	
    // (üéö) LEVEL SLIDER	[1361 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39A, 0x003F };
    uint32_t const ces[9] = { 0x1361, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_394)
{
    // 1F39A 0061;	
    // (üéö) LEVEL SLIDER	[1361 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39A, 0x0061 };
    uint32_t const ces[9] = { 0x1361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_395)
{
    // 1F39A 0041;	
    // (üéö) LEVEL SLIDER	[1361 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F39A, 0x0041 };
    uint32_t const ces[9] = { 0x1361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_396)
{
    // 1F39A 0062;	
    // (üéö) LEVEL SLIDER	[1361 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39A, 0x0062 };
    uint32_t const ces[9] = { 0x1361, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_397)
{
    // 1F39B 0021;	
    // (üéõ) CONTROL KNOBS	[1362 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39B, 0x0021 };
    uint32_t const ces[9] = { 0x1362, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_398)
{
    // 1F39B 003F;	
    // (üéõ) CONTROL KNOBS	[1362 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39B, 0x003F };
    uint32_t const ces[9] = { 0x1362, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_399)
{
    // 1F39B 0061;	
    // (üéõ) CONTROL KNOBS	[1362 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39B, 0x0061 };
    uint32_t const ces[9] = { 0x1362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_400)
{
    // 1F39B 0041;	
    // (üéõ) CONTROL KNOBS	[1362 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F39B, 0x0041 };
    uint32_t const ces[9] = { 0x1362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_401)
{
    // 1F39B 0062;	
    // (üéõ) CONTROL KNOBS	[1362 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39B, 0x0062 };
    uint32_t const ces[9] = { 0x1362, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_402)
{
    // 1F39C 0021;	
    // (üéú) BEAMED ASCENDING MUSICAL NOTES	[1363 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39C, 0x0021 };
    uint32_t const ces[9] = { 0x1363, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_403)
{
    // 1F39C 003F;	
    // (üéú) BEAMED ASCENDING MUSICAL NOTES	[1363 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39C, 0x003F };
    uint32_t const ces[9] = { 0x1363, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_404)
{
    // 1F39C 0061;	
    // (üéú) BEAMED ASCENDING MUSICAL NOTES	[1363 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39C, 0x0061 };
    uint32_t const ces[9] = { 0x1363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_405)
{
    // 1F39C 0041;	
    // (üéú) BEAMED ASCENDING MUSICAL NOTES	[1363 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F39C, 0x0041 };
    uint32_t const ces[9] = { 0x1363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_406)
{
    // 1F39C 0062;	
    // (üéú) BEAMED ASCENDING MUSICAL NOTES	[1363 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39C, 0x0062 };
    uint32_t const ces[9] = { 0x1363, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_407)
{
    // 1F39D 0021;	
    // (üéù) BEAMED DESCENDING MUSICAL NOTES	[1364 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39D, 0x0021 };
    uint32_t const ces[9] = { 0x1364, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_408)
{
    // 1F39D 003F;	
    // (üéù) BEAMED DESCENDING MUSICAL NOTES	[1364 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39D, 0x003F };
    uint32_t const ces[9] = { 0x1364, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_409)
{
    // 1F39D 0061;	
    // (üéù) BEAMED DESCENDING MUSICAL NOTES	[1364 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39D, 0x0061 };
    uint32_t const ces[9] = { 0x1364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_410)
{
    // 1F39D 0041;	
    // (üéù) BEAMED DESCENDING MUSICAL NOTES	[1364 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F39D, 0x0041 };
    uint32_t const ces[9] = { 0x1364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_411)
{
    // 1F39D 0062;	
    // (üéù) BEAMED DESCENDING MUSICAL NOTES	[1364 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39D, 0x0062 };
    uint32_t const ces[9] = { 0x1364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_412)
{
    // 1F39E 0021;	
    // (üéû) FILM FRAMES	[1365 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39E, 0x0021 };
    uint32_t const ces[9] = { 0x1365, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_413)
{
    // 1F39E 003F;	
    // (üéû) FILM FRAMES	[1365 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39E, 0x003F };
    uint32_t const ces[9] = { 0x1365, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_414)
{
    // 1F39E 0061;	
    // (üéû) FILM FRAMES	[1365 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39E, 0x0061 };
    uint32_t const ces[9] = { 0x1365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_415)
{
    // 1F39E 0041;	
    // (üéû) FILM FRAMES	[1365 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F39E, 0x0041 };
    uint32_t const ces[9] = { 0x1365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_416)
{
    // 1F39E 0062;	
    // (üéû) FILM FRAMES	[1365 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39E, 0x0062 };
    uint32_t const ces[9] = { 0x1365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_417)
{
    // 1F39F 0021;	
    // (üéü) ADMISSION TICKETS	[1366 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39F, 0x0021 };
    uint32_t const ces[9] = { 0x1366, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_418)
{
    // 1F39F 003F;	
    // (üéü) ADMISSION TICKETS	[1366 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39F, 0x003F };
    uint32_t const ces[9] = { 0x1366, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_419)
{
    // 1F39F 0061;	
    // (üéü) ADMISSION TICKETS	[1366 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39F, 0x0061 };
    uint32_t const ces[9] = { 0x1366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_420)
{
    // 1F39F 0041;	
    // (üéü) ADMISSION TICKETS	[1366 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F39F, 0x0041 };
    uint32_t const ces[9] = { 0x1366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_421)
{
    // 1F39F 0062;	
    // (üéü) ADMISSION TICKETS	[1366 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F39F, 0x0062 };
    uint32_t const ces[9] = { 0x1366, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_422)
{
    // 1F3A0 0021;	
    // (üé†) CAROUSEL HORSE	[1367 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A0, 0x0021 };
    uint32_t const ces[9] = { 0x1367, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_423)
{
    // 1F3A0 003F;	
    // (üé†) CAROUSEL HORSE	[1367 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A0, 0x003F };
    uint32_t const ces[9] = { 0x1367, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_424)
{
    // 1F3A0 0061;	
    // (üé†) CAROUSEL HORSE	[1367 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A0, 0x0061 };
    uint32_t const ces[9] = { 0x1367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_425)
{
    // 1F3A0 0041;	
    // (üé†) CAROUSEL HORSE	[1367 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3A0, 0x0041 };
    uint32_t const ces[9] = { 0x1367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_426)
{
    // 1F3A0 0062;	
    // (üé†) CAROUSEL HORSE	[1367 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A0, 0x0062 };
    uint32_t const ces[9] = { 0x1367, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_427)
{
    // 1F3A1 0021;	
    // (üé°) FERRIS WHEEL	[1368 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A1, 0x0021 };
    uint32_t const ces[9] = { 0x1368, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_428)
{
    // 1F3A1 003F;	
    // (üé°) FERRIS WHEEL	[1368 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A1, 0x003F };
    uint32_t const ces[9] = { 0x1368, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_429)
{
    // 1F3A1 0061;	
    // (üé°) FERRIS WHEEL	[1368 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A1, 0x0061 };
    uint32_t const ces[9] = { 0x1368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_430)
{
    // 1F3A1 0041;	
    // (üé°) FERRIS WHEEL	[1368 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3A1, 0x0041 };
    uint32_t const ces[9] = { 0x1368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_431)
{
    // 1F3A1 0062;	
    // (üé°) FERRIS WHEEL	[1368 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A1, 0x0062 };
    uint32_t const ces[9] = { 0x1368, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_432)
{
    // 1F3A2 0021;	
    // (üé¢) ROLLER COASTER	[1369 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A2, 0x0021 };
    uint32_t const ces[9] = { 0x1369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_433)
{
    // 1F3A2 003F;	
    // (üé¢) ROLLER COASTER	[1369 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A2, 0x003F };
    uint32_t const ces[9] = { 0x1369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_434)
{
    // 1F3A2 0061;	
    // (üé¢) ROLLER COASTER	[1369 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A2, 0x0061 };
    uint32_t const ces[9] = { 0x1369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_435)
{
    // 1F3A2 0041;	
    // (üé¢) ROLLER COASTER	[1369 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3A2, 0x0041 };
    uint32_t const ces[9] = { 0x1369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_436)
{
    // 1F3A2 0062;	
    // (üé¢) ROLLER COASTER	[1369 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A2, 0x0062 };
    uint32_t const ces[9] = { 0x1369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_437)
{
    // 1F3A3 0021;	
    // (üé£) FISHING POLE AND FISH	[136A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A3, 0x0021 };
    uint32_t const ces[9] = { 0x136A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_438)
{
    // 1F3A3 003F;	
    // (üé£) FISHING POLE AND FISH	[136A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A3, 0x003F };
    uint32_t const ces[9] = { 0x136A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_439)
{
    // 1F3A3 0061;	
    // (üé£) FISHING POLE AND FISH	[136A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A3, 0x0061 };
    uint32_t const ces[9] = { 0x136A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_440)
{
    // 1F3A3 0041;	
    // (üé£) FISHING POLE AND FISH	[136A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3A3, 0x0041 };
    uint32_t const ces[9] = { 0x136A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_441)
{
    // 1F3A3 0062;	
    // (üé£) FISHING POLE AND FISH	[136A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A3, 0x0062 };
    uint32_t const ces[9] = { 0x136A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_442)
{
    // 1F3A4 0021;	
    // (üé§) MICROPHONE	[136B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A4, 0x0021 };
    uint32_t const ces[9] = { 0x136B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_443)
{
    // 1F3A4 003F;	
    // (üé§) MICROPHONE	[136B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A4, 0x003F };
    uint32_t const ces[9] = { 0x136B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_444)
{
    // 1F3A4 0061;	
    // (üé§) MICROPHONE	[136B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A4, 0x0061 };
    uint32_t const ces[9] = { 0x136B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_445)
{
    // 1F3A4 0041;	
    // (üé§) MICROPHONE	[136B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3A4, 0x0041 };
    uint32_t const ces[9] = { 0x136B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_446)
{
    // 1F3A4 0062;	
    // (üé§) MICROPHONE	[136B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A4, 0x0062 };
    uint32_t const ces[9] = { 0x136B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_447)
{
    // 1F3A5 0021;	
    // (üé•) MOVIE CAMERA	[136C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A5, 0x0021 };
    uint32_t const ces[9] = { 0x136C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_448)
{
    // 1F3A5 003F;	
    // (üé•) MOVIE CAMERA	[136C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A5, 0x003F };
    uint32_t const ces[9] = { 0x136C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_449)
{
    // 1F3A5 0061;	
    // (üé•) MOVIE CAMERA	[136C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A5, 0x0061 };
    uint32_t const ces[9] = { 0x136C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_450)
{
    // 1F3A5 0041;	
    // (üé•) MOVIE CAMERA	[136C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3A5, 0x0041 };
    uint32_t const ces[9] = { 0x136C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_451)
{
    // 1F3A5 0062;	
    // (üé•) MOVIE CAMERA	[136C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A5, 0x0062 };
    uint32_t const ces[9] = { 0x136C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_452)
{
    // 1F3A6 0021;	
    // (üé¶) CINEMA	[136D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A6, 0x0021 };
    uint32_t const ces[9] = { 0x136D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_453)
{
    // 1F3A6 003F;	
    // (üé¶) CINEMA	[136D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A6, 0x003F };
    uint32_t const ces[9] = { 0x136D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_454)
{
    // 1F3A6 0061;	
    // (üé¶) CINEMA	[136D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A6, 0x0061 };
    uint32_t const ces[9] = { 0x136D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_455)
{
    // 1F3A6 0041;	
    // (üé¶) CINEMA	[136D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3A6, 0x0041 };
    uint32_t const ces[9] = { 0x136D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_456)
{
    // 1F3A6 0062;	
    // (üé¶) CINEMA	[136D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A6, 0x0062 };
    uint32_t const ces[9] = { 0x136D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_457)
{
    // 1F3A7 0021;	
    // (üéß) HEADPHONE	[136E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A7, 0x0021 };
    uint32_t const ces[9] = { 0x136E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_458)
{
    // 1F3A7 003F;	
    // (üéß) HEADPHONE	[136E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A7, 0x003F };
    uint32_t const ces[9] = { 0x136E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_459)
{
    // 1F3A7 0061;	
    // (üéß) HEADPHONE	[136E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A7, 0x0061 };
    uint32_t const ces[9] = { 0x136E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_460)
{
    // 1F3A7 0041;	
    // (üéß) HEADPHONE	[136E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3A7, 0x0041 };
    uint32_t const ces[9] = { 0x136E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_461)
{
    // 1F3A7 0062;	
    // (üéß) HEADPHONE	[136E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A7, 0x0062 };
    uint32_t const ces[9] = { 0x136E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_462)
{
    // 1F3A8 0021;	
    // (üé®) ARTIST PALETTE	[136F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A8, 0x0021 };
    uint32_t const ces[9] = { 0x136F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_463)
{
    // 1F3A8 003F;	
    // (üé®) ARTIST PALETTE	[136F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A8, 0x003F };
    uint32_t const ces[9] = { 0x136F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_464)
{
    // 1F3A8 0061;	
    // (üé®) ARTIST PALETTE	[136F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A8, 0x0061 };
    uint32_t const ces[9] = { 0x136F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_465)
{
    // 1F3A8 0041;	
    // (üé®) ARTIST PALETTE	[136F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3A8, 0x0041 };
    uint32_t const ces[9] = { 0x136F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_466)
{
    // 1F3A8 0062;	
    // (üé®) ARTIST PALETTE	[136F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A8, 0x0062 };
    uint32_t const ces[9] = { 0x136F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_467)
{
    // 1F3A9 0021;	
    // (üé©) TOP HAT	[1370 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A9, 0x0021 };
    uint32_t const ces[9] = { 0x1370, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_468)
{
    // 1F3A9 003F;	
    // (üé©) TOP HAT	[1370 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A9, 0x003F };
    uint32_t const ces[9] = { 0x1370, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_469)
{
    // 1F3A9 0061;	
    // (üé©) TOP HAT	[1370 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A9, 0x0061 };
    uint32_t const ces[9] = { 0x1370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_470)
{
    // 1F3A9 0041;	
    // (üé©) TOP HAT	[1370 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3A9, 0x0041 };
    uint32_t const ces[9] = { 0x1370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_471)
{
    // 1F3A9 0062;	
    // (üé©) TOP HAT	[1370 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A9, 0x0062 };
    uint32_t const ces[9] = { 0x1370, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_472)
{
    // 1F3AA 0021;	
    // (üé™) CIRCUS TENT	[1371 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AA, 0x0021 };
    uint32_t const ces[9] = { 0x1371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_473)
{
    // 1F3AA 003F;	
    // (üé™) CIRCUS TENT	[1371 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AA, 0x003F };
    uint32_t const ces[9] = { 0x1371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_474)
{
    // 1F3AA 0061;	
    // (üé™) CIRCUS TENT	[1371 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AA, 0x0061 };
    uint32_t const ces[9] = { 0x1371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_475)
{
    // 1F3AA 0041;	
    // (üé™) CIRCUS TENT	[1371 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3AA, 0x0041 };
    uint32_t const ces[9] = { 0x1371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_476)
{
    // 1F3AA 0062;	
    // (üé™) CIRCUS TENT	[1371 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AA, 0x0062 };
    uint32_t const ces[9] = { 0x1371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_477)
{
    // 1F3AB 0021;	
    // (üé´) TICKET	[1372 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AB, 0x0021 };
    uint32_t const ces[9] = { 0x1372, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_478)
{
    // 1F3AB 003F;	
    // (üé´) TICKET	[1372 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AB, 0x003F };
    uint32_t const ces[9] = { 0x1372, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_479)
{
    // 1F3AB 0061;	
    // (üé´) TICKET	[1372 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AB, 0x0061 };
    uint32_t const ces[9] = { 0x1372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_480)
{
    // 1F3AB 0041;	
    // (üé´) TICKET	[1372 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3AB, 0x0041 };
    uint32_t const ces[9] = { 0x1372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_481)
{
    // 1F3AB 0062;	
    // (üé´) TICKET	[1372 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AB, 0x0062 };
    uint32_t const ces[9] = { 0x1372, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_482)
{
    // 1F3AC 0021;	
    // (üé¨) CLAPPER BOARD	[1373 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AC, 0x0021 };
    uint32_t const ces[9] = { 0x1373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_483)
{
    // 1F3AC 003F;	
    // (üé¨) CLAPPER BOARD	[1373 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AC, 0x003F };
    uint32_t const ces[9] = { 0x1373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_484)
{
    // 1F3AC 0061;	
    // (üé¨) CLAPPER BOARD	[1373 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AC, 0x0061 };
    uint32_t const ces[9] = { 0x1373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_485)
{
    // 1F3AC 0041;	
    // (üé¨) CLAPPER BOARD	[1373 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3AC, 0x0041 };
    uint32_t const ces[9] = { 0x1373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_486)
{
    // 1F3AC 0062;	
    // (üé¨) CLAPPER BOARD	[1373 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AC, 0x0062 };
    uint32_t const ces[9] = { 0x1373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_487)
{
    // 1F3AD 0021;	
    // (üé≠) PERFORMING ARTS	[1374 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AD, 0x0021 };
    uint32_t const ces[9] = { 0x1374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_488)
{
    // 1F3AD 003F;	
    // (üé≠) PERFORMING ARTS	[1374 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AD, 0x003F };
    uint32_t const ces[9] = { 0x1374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_489)
{
    // 1F3AD 0061;	
    // (üé≠) PERFORMING ARTS	[1374 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AD, 0x0061 };
    uint32_t const ces[9] = { 0x1374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_490)
{
    // 1F3AD 0041;	
    // (üé≠) PERFORMING ARTS	[1374 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3AD, 0x0041 };
    uint32_t const ces[9] = { 0x1374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_491)
{
    // 1F3AD 0062;	
    // (üé≠) PERFORMING ARTS	[1374 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AD, 0x0062 };
    uint32_t const ces[9] = { 0x1374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_492)
{
    // 1F3AE 0021;	
    // (üéÆ) VIDEO GAME	[1375 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AE, 0x0021 };
    uint32_t const ces[9] = { 0x1375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_493)
{
    // 1F3AE 003F;	
    // (üéÆ) VIDEO GAME	[1375 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AE, 0x003F };
    uint32_t const ces[9] = { 0x1375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_494)
{
    // 1F3AE 0061;	
    // (üéÆ) VIDEO GAME	[1375 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AE, 0x0061 };
    uint32_t const ces[9] = { 0x1375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_495)
{
    // 1F3AE 0041;	
    // (üéÆ) VIDEO GAME	[1375 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3AE, 0x0041 };
    uint32_t const ces[9] = { 0x1375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_496)
{
    // 1F3AE 0062;	
    // (üéÆ) VIDEO GAME	[1375 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AE, 0x0062 };
    uint32_t const ces[9] = { 0x1375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_497)
{
    // 1F3AF 0021;	
    // (üéØ) DIRECT HIT	[1376 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AF, 0x0021 };
    uint32_t const ces[9] = { 0x1376, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_498)
{
    // 1F3AF 003F;	
    // (üéØ) DIRECT HIT	[1376 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AF, 0x003F };
    uint32_t const ces[9] = { 0x1376, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_056_499)
{
    // 1F3AF 0061;	
    // (üéØ) DIRECT HIT	[1376 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AF, 0x0061 };
    uint32_t const ces[9] = { 0x1376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

