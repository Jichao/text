// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfd_025_000)
{
    // B618;B618;1104 1169 11AF;B618;1104 1169 11AF; 
    // (똘; 똘; 똘; 똘; 똘; ) HANGUL SYLLABLE DDOL
    {
        std::array<uint32_t, 1> const source = {{ 0xB618 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11AF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_001)
{
    // B619;B619;1104 1169 11B0;B619;1104 1169 11B0; 
    // (똙; 똙; 똙; 똙; 똙; ) HANGUL SYLLABLE DDOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xB619 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11B0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_002)
{
    // B61A;B61A;1104 1169 11B1;B61A;1104 1169 11B1; 
    // (똚; 똚; 똚; 똚; 똚; ) HANGUL SYLLABLE DDOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xB61A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11B1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_003)
{
    // B61B;B61B;1104 1169 11B2;B61B;1104 1169 11B2; 
    // (똛; 똛; 똛; 똛; 똛; ) HANGUL SYLLABLE DDOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xB61B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11B2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_004)
{
    // B61C;B61C;1104 1169 11B3;B61C;1104 1169 11B3; 
    // (똜; 똜; 똜; 똜; 똜; ) HANGUL SYLLABLE DDOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xB61C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11B3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_005)
{
    // B61D;B61D;1104 1169 11B4;B61D;1104 1169 11B4; 
    // (똝; 똝; 똝; 똝; 똝; ) HANGUL SYLLABLE DDOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xB61D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11B4 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_006)
{
    // B61E;B61E;1104 1169 11B5;B61E;1104 1169 11B5; 
    // (똞; 똞; 똞; 똞; 똞; ) HANGUL SYLLABLE DDOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xB61E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11B5 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_007)
{
    // B61F;B61F;1104 1169 11B6;B61F;1104 1169 11B6; 
    // (똟; 똟; 똟; 똟; 똟; ) HANGUL SYLLABLE DDOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xB61F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11B6 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_008)
{
    // B620;B620;1104 1169 11B7;B620;1104 1169 11B7; 
    // (똠; 똠; 똠; 똠; 똠; ) HANGUL SYLLABLE DDOM
    {
        std::array<uint32_t, 1> const source = {{ 0xB620 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11B7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_009)
{
    // B621;B621;1104 1169 11B8;B621;1104 1169 11B8; 
    // (똡; 똡; 똡; 똡; 똡; ) HANGUL SYLLABLE DDOB
    {
        std::array<uint32_t, 1> const source = {{ 0xB621 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11B8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_010)
{
    // B622;B622;1104 1169 11B9;B622;1104 1169 11B9; 
    // (똢; 똢; 똢; 똢; 똢; ) HANGUL SYLLABLE DDOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB622 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11B9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_011)
{
    // B623;B623;1104 1169 11BA;B623;1104 1169 11BA; 
    // (똣; 똣; 똣; 똣; 똣; ) HANGUL SYLLABLE DDOS
    {
        std::array<uint32_t, 1> const source = {{ 0xB623 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11BA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_012)
{
    // B624;B624;1104 1169 11BB;B624;1104 1169 11BB; 
    // (똤; 똤; 똤; 똤; 똤; ) HANGUL SYLLABLE DDOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xB624 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11BB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_013)
{
    // B625;B625;1104 1169 11BC;B625;1104 1169 11BC; 
    // (똥; 똥; 똥; 똥; 똥; ) HANGUL SYLLABLE DDONG
    {
        std::array<uint32_t, 1> const source = {{ 0xB625 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11BC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_014)
{
    // B626;B626;1104 1169 11BD;B626;1104 1169 11BD; 
    // (똦; 똦; 똦; 똦; 똦; ) HANGUL SYLLABLE DDOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB626 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11BD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_015)
{
    // B627;B627;1104 1169 11BE;B627;1104 1169 11BE; 
    // (똧; 똧; 똧; 똧; 똧; ) HANGUL SYLLABLE DDOC
    {
        std::array<uint32_t, 1> const source = {{ 0xB627 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11BE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_016)
{
    // B628;B628;1104 1169 11BF;B628;1104 1169 11BF; 
    // (똨; 똨; 똨; 똨; 똨; ) HANGUL SYLLABLE DDOK
    {
        std::array<uint32_t, 1> const source = {{ 0xB628 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11BF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_017)
{
    // B629;B629;1104 1169 11C0;B629;1104 1169 11C0; 
    // (똩; 똩; 똩; 똩; 똩; ) HANGUL SYLLABLE DDOT
    {
        std::array<uint32_t, 1> const source = {{ 0xB629 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11C0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_018)
{
    // B62A;B62A;1104 1169 11C1;B62A;1104 1169 11C1; 
    // (똪; 똪; 똪; 똪; 똪; ) HANGUL SYLLABLE DDOP
    {
        std::array<uint32_t, 1> const source = {{ 0xB62A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11C1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_019)
{
    // B62B;B62B;1104 1169 11C2;B62B;1104 1169 11C2; 
    // (똫; 똫; 똫; 똫; 똫; ) HANGUL SYLLABLE DDOH
    {
        std::array<uint32_t, 1> const source = {{ 0xB62B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1169, 0x11C2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_020)
{
    // B62C;B62C;1104 116A;B62C;1104 116A; 
    // (똬; 똬; 똬; 똬; 똬; ) HANGUL SYLLABLE DDWA
    {
        std::array<uint32_t, 1> const source = {{ 0xB62C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1104, 0x116A }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_021)
{
    // B62D;B62D;1104 116A 11A8;B62D;1104 116A 11A8; 
    // (똭; 똭; 똭; 똭; 똭; ) HANGUL SYLLABLE DDWAG
    {
        std::array<uint32_t, 1> const source = {{ 0xB62D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11A8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_022)
{
    // B62E;B62E;1104 116A 11A9;B62E;1104 116A 11A9; 
    // (똮; 똮; 똮; 똮; 똮; ) HANGUL SYLLABLE DDWAGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB62E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11A9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_023)
{
    // B62F;B62F;1104 116A 11AA;B62F;1104 116A 11AA; 
    // (똯; 똯; 똯; 똯; 똯; ) HANGUL SYLLABLE DDWAGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB62F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11AA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_024)
{
    // B630;B630;1104 116A 11AB;B630;1104 116A 11AB; 
    // (똰; 똰; 똰; 똰; 똰; ) HANGUL SYLLABLE DDWAN
    {
        std::array<uint32_t, 1> const source = {{ 0xB630 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11AB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_025)
{
    // B631;B631;1104 116A 11AC;B631;1104 116A 11AC; 
    // (똱; 똱; 똱; 똱; 똱; ) HANGUL SYLLABLE DDWANJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB631 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11AC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_026)
{
    // B632;B632;1104 116A 11AD;B632;1104 116A 11AD; 
    // (똲; 똲; 똲; 똲; 똲; ) HANGUL SYLLABLE DDWANH
    {
        std::array<uint32_t, 1> const source = {{ 0xB632 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11AD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_027)
{
    // B633;B633;1104 116A 11AE;B633;1104 116A 11AE; 
    // (똳; 똳; 똳; 똳; 똳; ) HANGUL SYLLABLE DDWAD
    {
        std::array<uint32_t, 1> const source = {{ 0xB633 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11AE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_028)
{
    // B634;B634;1104 116A 11AF;B634;1104 116A 11AF; 
    // (똴; 똴; 똴; 똴; 똴; ) HANGUL SYLLABLE DDWAL
    {
        std::array<uint32_t, 1> const source = {{ 0xB634 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11AF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_029)
{
    // B635;B635;1104 116A 11B0;B635;1104 116A 11B0; 
    // (똵; 똵; 똵; 똵; 똵; ) HANGUL SYLLABLE DDWALG
    {
        std::array<uint32_t, 1> const source = {{ 0xB635 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11B0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_030)
{
    // B636;B636;1104 116A 11B1;B636;1104 116A 11B1; 
    // (똶; 똶; 똶; 똶; 똶; ) HANGUL SYLLABLE DDWALM
    {
        std::array<uint32_t, 1> const source = {{ 0xB636 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11B1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_031)
{
    // B637;B637;1104 116A 11B2;B637;1104 116A 11B2; 
    // (똷; 똷; 똷; 똷; 똷; ) HANGUL SYLLABLE DDWALB
    {
        std::array<uint32_t, 1> const source = {{ 0xB637 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11B2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_032)
{
    // B638;B638;1104 116A 11B3;B638;1104 116A 11B3; 
    // (똸; 똸; 똸; 똸; 똸; ) HANGUL SYLLABLE DDWALS
    {
        std::array<uint32_t, 1> const source = {{ 0xB638 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11B3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_033)
{
    // B639;B639;1104 116A 11B4;B639;1104 116A 11B4; 
    // (똹; 똹; 똹; 똹; 똹; ) HANGUL SYLLABLE DDWALT
    {
        std::array<uint32_t, 1> const source = {{ 0xB639 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11B4 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_034)
{
    // B63A;B63A;1104 116A 11B5;B63A;1104 116A 11B5; 
    // (똺; 똺; 똺; 똺; 똺; ) HANGUL SYLLABLE DDWALP
    {
        std::array<uint32_t, 1> const source = {{ 0xB63A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11B5 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_035)
{
    // B63B;B63B;1104 116A 11B6;B63B;1104 116A 11B6; 
    // (똻; 똻; 똻; 똻; 똻; ) HANGUL SYLLABLE DDWALH
    {
        std::array<uint32_t, 1> const source = {{ 0xB63B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11B6 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_036)
{
    // B63C;B63C;1104 116A 11B7;B63C;1104 116A 11B7; 
    // (똼; 똼; 똼; 똼; 똼; ) HANGUL SYLLABLE DDWAM
    {
        std::array<uint32_t, 1> const source = {{ 0xB63C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11B7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_037)
{
    // B63D;B63D;1104 116A 11B8;B63D;1104 116A 11B8; 
    // (똽; 똽; 똽; 똽; 똽; ) HANGUL SYLLABLE DDWAB
    {
        std::array<uint32_t, 1> const source = {{ 0xB63D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11B8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_038)
{
    // B63E;B63E;1104 116A 11B9;B63E;1104 116A 11B9; 
    // (똾; 똾; 똾; 똾; 똾; ) HANGUL SYLLABLE DDWABS
    {
        std::array<uint32_t, 1> const source = {{ 0xB63E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11B9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_039)
{
    // B63F;B63F;1104 116A 11BA;B63F;1104 116A 11BA; 
    // (똿; 똿; 똿; 똿; 똿; ) HANGUL SYLLABLE DDWAS
    {
        std::array<uint32_t, 1> const source = {{ 0xB63F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11BA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_040)
{
    // B640;B640;1104 116A 11BB;B640;1104 116A 11BB; 
    // (뙀; 뙀; 뙀; 뙀; 뙀; ) HANGUL SYLLABLE DDWASS
    {
        std::array<uint32_t, 1> const source = {{ 0xB640 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11BB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_041)
{
    // B641;B641;1104 116A 11BC;B641;1104 116A 11BC; 
    // (뙁; 뙁; 뙁; 뙁; 뙁; ) HANGUL SYLLABLE DDWANG
    {
        std::array<uint32_t, 1> const source = {{ 0xB641 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11BC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_042)
{
    // B642;B642;1104 116A 11BD;B642;1104 116A 11BD; 
    // (뙂; 뙂; 뙂; 뙂; 뙂; ) HANGUL SYLLABLE DDWAJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB642 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11BD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_043)
{
    // B643;B643;1104 116A 11BE;B643;1104 116A 11BE; 
    // (뙃; 뙃; 뙃; 뙃; 뙃; ) HANGUL SYLLABLE DDWAC
    {
        std::array<uint32_t, 1> const source = {{ 0xB643 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11BE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_044)
{
    // B644;B644;1104 116A 11BF;B644;1104 116A 11BF; 
    // (뙄; 뙄; 뙄; 뙄; 뙄; ) HANGUL SYLLABLE DDWAK
    {
        std::array<uint32_t, 1> const source = {{ 0xB644 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11BF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_045)
{
    // B645;B645;1104 116A 11C0;B645;1104 116A 11C0; 
    // (뙅; 뙅; 뙅; 뙅; 뙅; ) HANGUL SYLLABLE DDWAT
    {
        std::array<uint32_t, 1> const source = {{ 0xB645 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11C0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_046)
{
    // B646;B646;1104 116A 11C1;B646;1104 116A 11C1; 
    // (뙆; 뙆; 뙆; 뙆; 뙆; ) HANGUL SYLLABLE DDWAP
    {
        std::array<uint32_t, 1> const source = {{ 0xB646 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11C1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_047)
{
    // B647;B647;1104 116A 11C2;B647;1104 116A 11C2; 
    // (뙇; 뙇; 뙇; 뙇; 뙇; ) HANGUL SYLLABLE DDWAH
    {
        std::array<uint32_t, 1> const source = {{ 0xB647 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116A, 0x11C2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_048)
{
    // B648;B648;1104 116B;B648;1104 116B; 
    // (뙈; 뙈; 뙈; 뙈; 뙈; ) HANGUL SYLLABLE DDWAE
    {
        std::array<uint32_t, 1> const source = {{ 0xB648 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1104, 0x116B }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_049)
{
    // B649;B649;1104 116B 11A8;B649;1104 116B 11A8; 
    // (뙉; 뙉; 뙉; 뙉; 뙉; ) HANGUL SYLLABLE DDWAEG
    {
        std::array<uint32_t, 1> const source = {{ 0xB649 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11A8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_050)
{
    // B64A;B64A;1104 116B 11A9;B64A;1104 116B 11A9; 
    // (뙊; 뙊; 뙊; 뙊; 뙊; ) HANGUL SYLLABLE DDWAEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB64A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11A9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_051)
{
    // B64B;B64B;1104 116B 11AA;B64B;1104 116B 11AA; 
    // (뙋; 뙋; 뙋; 뙋; 뙋; ) HANGUL SYLLABLE DDWAEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB64B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11AA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_052)
{
    // B64C;B64C;1104 116B 11AB;B64C;1104 116B 11AB; 
    // (뙌; 뙌; 뙌; 뙌; 뙌; ) HANGUL SYLLABLE DDWAEN
    {
        std::array<uint32_t, 1> const source = {{ 0xB64C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11AB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_053)
{
    // B64D;B64D;1104 116B 11AC;B64D;1104 116B 11AC; 
    // (뙍; 뙍; 뙍; 뙍; 뙍; ) HANGUL SYLLABLE DDWAENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB64D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11AC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_054)
{
    // B64E;B64E;1104 116B 11AD;B64E;1104 116B 11AD; 
    // (뙎; 뙎; 뙎; 뙎; 뙎; ) HANGUL SYLLABLE DDWAENH
    {
        std::array<uint32_t, 1> const source = {{ 0xB64E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11AD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_055)
{
    // B64F;B64F;1104 116B 11AE;B64F;1104 116B 11AE; 
    // (뙏; 뙏; 뙏; 뙏; 뙏; ) HANGUL SYLLABLE DDWAED
    {
        std::array<uint32_t, 1> const source = {{ 0xB64F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11AE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_056)
{
    // B650;B650;1104 116B 11AF;B650;1104 116B 11AF; 
    // (뙐; 뙐; 뙐; 뙐; 뙐; ) HANGUL SYLLABLE DDWAEL
    {
        std::array<uint32_t, 1> const source = {{ 0xB650 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11AF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_057)
{
    // B651;B651;1104 116B 11B0;B651;1104 116B 11B0; 
    // (뙑; 뙑; 뙑; 뙑; 뙑; ) HANGUL SYLLABLE DDWAELG
    {
        std::array<uint32_t, 1> const source = {{ 0xB651 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11B0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_058)
{
    // B652;B652;1104 116B 11B1;B652;1104 116B 11B1; 
    // (뙒; 뙒; 뙒; 뙒; 뙒; ) HANGUL SYLLABLE DDWAELM
    {
        std::array<uint32_t, 1> const source = {{ 0xB652 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11B1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_059)
{
    // B653;B653;1104 116B 11B2;B653;1104 116B 11B2; 
    // (뙓; 뙓; 뙓; 뙓; 뙓; ) HANGUL SYLLABLE DDWAELB
    {
        std::array<uint32_t, 1> const source = {{ 0xB653 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11B2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_060)
{
    // B654;B654;1104 116B 11B3;B654;1104 116B 11B3; 
    // (뙔; 뙔; 뙔; 뙔; 뙔; ) HANGUL SYLLABLE DDWAELS
    {
        std::array<uint32_t, 1> const source = {{ 0xB654 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11B3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_061)
{
    // B655;B655;1104 116B 11B4;B655;1104 116B 11B4; 
    // (뙕; 뙕; 뙕; 뙕; 뙕; ) HANGUL SYLLABLE DDWAELT
    {
        std::array<uint32_t, 1> const source = {{ 0xB655 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11B4 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_062)
{
    // B656;B656;1104 116B 11B5;B656;1104 116B 11B5; 
    // (뙖; 뙖; 뙖; 뙖; 뙖; ) HANGUL SYLLABLE DDWAELP
    {
        std::array<uint32_t, 1> const source = {{ 0xB656 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11B5 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_063)
{
    // B657;B657;1104 116B 11B6;B657;1104 116B 11B6; 
    // (뙗; 뙗; 뙗; 뙗; 뙗; ) HANGUL SYLLABLE DDWAELH
    {
        std::array<uint32_t, 1> const source = {{ 0xB657 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11B6 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_064)
{
    // B658;B658;1104 116B 11B7;B658;1104 116B 11B7; 
    // (뙘; 뙘; 뙘; 뙘; 뙘; ) HANGUL SYLLABLE DDWAEM
    {
        std::array<uint32_t, 1> const source = {{ 0xB658 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11B7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_065)
{
    // B659;B659;1104 116B 11B8;B659;1104 116B 11B8; 
    // (뙙; 뙙; 뙙; 뙙; 뙙; ) HANGUL SYLLABLE DDWAEB
    {
        std::array<uint32_t, 1> const source = {{ 0xB659 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11B8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_066)
{
    // B65A;B65A;1104 116B 11B9;B65A;1104 116B 11B9; 
    // (뙚; 뙚; 뙚; 뙚; 뙚; ) HANGUL SYLLABLE DDWAEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB65A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11B9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_067)
{
    // B65B;B65B;1104 116B 11BA;B65B;1104 116B 11BA; 
    // (뙛; 뙛; 뙛; 뙛; 뙛; ) HANGUL SYLLABLE DDWAES
    {
        std::array<uint32_t, 1> const source = {{ 0xB65B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11BA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_068)
{
    // B65C;B65C;1104 116B 11BB;B65C;1104 116B 11BB; 
    // (뙜; 뙜; 뙜; 뙜; 뙜; ) HANGUL SYLLABLE DDWAESS
    {
        std::array<uint32_t, 1> const source = {{ 0xB65C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11BB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_069)
{
    // B65D;B65D;1104 116B 11BC;B65D;1104 116B 11BC; 
    // (뙝; 뙝; 뙝; 뙝; 뙝; ) HANGUL SYLLABLE DDWAENG
    {
        std::array<uint32_t, 1> const source = {{ 0xB65D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11BC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_070)
{
    // B65E;B65E;1104 116B 11BD;B65E;1104 116B 11BD; 
    // (뙞; 뙞; 뙞; 뙞; 뙞; ) HANGUL SYLLABLE DDWAEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB65E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11BD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_071)
{
    // B65F;B65F;1104 116B 11BE;B65F;1104 116B 11BE; 
    // (뙟; 뙟; 뙟; 뙟; 뙟; ) HANGUL SYLLABLE DDWAEC
    {
        std::array<uint32_t, 1> const source = {{ 0xB65F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11BE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_072)
{
    // B660;B660;1104 116B 11BF;B660;1104 116B 11BF; 
    // (뙠; 뙠; 뙠; 뙠; 뙠; ) HANGUL SYLLABLE DDWAEK
    {
        std::array<uint32_t, 1> const source = {{ 0xB660 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11BF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_073)
{
    // B661;B661;1104 116B 11C0;B661;1104 116B 11C0; 
    // (뙡; 뙡; 뙡; 뙡; 뙡; ) HANGUL SYLLABLE DDWAET
    {
        std::array<uint32_t, 1> const source = {{ 0xB661 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11C0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_074)
{
    // B662;B662;1104 116B 11C1;B662;1104 116B 11C1; 
    // (뙢; 뙢; 뙢; 뙢; 뙢; ) HANGUL SYLLABLE DDWAEP
    {
        std::array<uint32_t, 1> const source = {{ 0xB662 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11C1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_075)
{
    // B663;B663;1104 116B 11C2;B663;1104 116B 11C2; 
    // (뙣; 뙣; 뙣; 뙣; 뙣; ) HANGUL SYLLABLE DDWAEH
    {
        std::array<uint32_t, 1> const source = {{ 0xB663 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116B, 0x11C2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_076)
{
    // B664;B664;1104 116C;B664;1104 116C; 
    // (뙤; 뙤; 뙤; 뙤; 뙤; ) HANGUL SYLLABLE DDOE
    {
        std::array<uint32_t, 1> const source = {{ 0xB664 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1104, 0x116C }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_077)
{
    // B665;B665;1104 116C 11A8;B665;1104 116C 11A8; 
    // (뙥; 뙥; 뙥; 뙥; 뙥; ) HANGUL SYLLABLE DDOEG
    {
        std::array<uint32_t, 1> const source = {{ 0xB665 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11A8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_078)
{
    // B666;B666;1104 116C 11A9;B666;1104 116C 11A9; 
    // (뙦; 뙦; 뙦; 뙦; 뙦; ) HANGUL SYLLABLE DDOEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB666 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11A9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_079)
{
    // B667;B667;1104 116C 11AA;B667;1104 116C 11AA; 
    // (뙧; 뙧; 뙧; 뙧; 뙧; ) HANGUL SYLLABLE DDOEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB667 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11AA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_080)
{
    // B668;B668;1104 116C 11AB;B668;1104 116C 11AB; 
    // (뙨; 뙨; 뙨; 뙨; 뙨; ) HANGUL SYLLABLE DDOEN
    {
        std::array<uint32_t, 1> const source = {{ 0xB668 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11AB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_081)
{
    // B669;B669;1104 116C 11AC;B669;1104 116C 11AC; 
    // (뙩; 뙩; 뙩; 뙩; 뙩; ) HANGUL SYLLABLE DDOENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB669 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11AC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_082)
{
    // B66A;B66A;1104 116C 11AD;B66A;1104 116C 11AD; 
    // (뙪; 뙪; 뙪; 뙪; 뙪; ) HANGUL SYLLABLE DDOENH
    {
        std::array<uint32_t, 1> const source = {{ 0xB66A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11AD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_083)
{
    // B66B;B66B;1104 116C 11AE;B66B;1104 116C 11AE; 
    // (뙫; 뙫; 뙫; 뙫; 뙫; ) HANGUL SYLLABLE DDOED
    {
        std::array<uint32_t, 1> const source = {{ 0xB66B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11AE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_084)
{
    // B66C;B66C;1104 116C 11AF;B66C;1104 116C 11AF; 
    // (뙬; 뙬; 뙬; 뙬; 뙬; ) HANGUL SYLLABLE DDOEL
    {
        std::array<uint32_t, 1> const source = {{ 0xB66C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11AF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_085)
{
    // B66D;B66D;1104 116C 11B0;B66D;1104 116C 11B0; 
    // (뙭; 뙭; 뙭; 뙭; 뙭; ) HANGUL SYLLABLE DDOELG
    {
        std::array<uint32_t, 1> const source = {{ 0xB66D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11B0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_086)
{
    // B66E;B66E;1104 116C 11B1;B66E;1104 116C 11B1; 
    // (뙮; 뙮; 뙮; 뙮; 뙮; ) HANGUL SYLLABLE DDOELM
    {
        std::array<uint32_t, 1> const source = {{ 0xB66E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11B1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_087)
{
    // B66F;B66F;1104 116C 11B2;B66F;1104 116C 11B2; 
    // (뙯; 뙯; 뙯; 뙯; 뙯; ) HANGUL SYLLABLE DDOELB
    {
        std::array<uint32_t, 1> const source = {{ 0xB66F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11B2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_088)
{
    // B670;B670;1104 116C 11B3;B670;1104 116C 11B3; 
    // (뙰; 뙰; 뙰; 뙰; 뙰; ) HANGUL SYLLABLE DDOELS
    {
        std::array<uint32_t, 1> const source = {{ 0xB670 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11B3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_089)
{
    // B671;B671;1104 116C 11B4;B671;1104 116C 11B4; 
    // (뙱; 뙱; 뙱; 뙱; 뙱; ) HANGUL SYLLABLE DDOELT
    {
        std::array<uint32_t, 1> const source = {{ 0xB671 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11B4 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_090)
{
    // B672;B672;1104 116C 11B5;B672;1104 116C 11B5; 
    // (뙲; 뙲; 뙲; 뙲; 뙲; ) HANGUL SYLLABLE DDOELP
    {
        std::array<uint32_t, 1> const source = {{ 0xB672 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11B5 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_091)
{
    // B673;B673;1104 116C 11B6;B673;1104 116C 11B6; 
    // (뙳; 뙳; 뙳; 뙳; 뙳; ) HANGUL SYLLABLE DDOELH
    {
        std::array<uint32_t, 1> const source = {{ 0xB673 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11B6 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_092)
{
    // B674;B674;1104 116C 11B7;B674;1104 116C 11B7; 
    // (뙴; 뙴; 뙴; 뙴; 뙴; ) HANGUL SYLLABLE DDOEM
    {
        std::array<uint32_t, 1> const source = {{ 0xB674 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11B7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_093)
{
    // B675;B675;1104 116C 11B8;B675;1104 116C 11B8; 
    // (뙵; 뙵; 뙵; 뙵; 뙵; ) HANGUL SYLLABLE DDOEB
    {
        std::array<uint32_t, 1> const source = {{ 0xB675 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11B8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_094)
{
    // B676;B676;1104 116C 11B9;B676;1104 116C 11B9; 
    // (뙶; 뙶; 뙶; 뙶; 뙶; ) HANGUL SYLLABLE DDOEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB676 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11B9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_095)
{
    // B677;B677;1104 116C 11BA;B677;1104 116C 11BA; 
    // (뙷; 뙷; 뙷; 뙷; 뙷; ) HANGUL SYLLABLE DDOES
    {
        std::array<uint32_t, 1> const source = {{ 0xB677 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11BA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_096)
{
    // B678;B678;1104 116C 11BB;B678;1104 116C 11BB; 
    // (뙸; 뙸; 뙸; 뙸; 뙸; ) HANGUL SYLLABLE DDOESS
    {
        std::array<uint32_t, 1> const source = {{ 0xB678 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11BB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_097)
{
    // B679;B679;1104 116C 11BC;B679;1104 116C 11BC; 
    // (뙹; 뙹; 뙹; 뙹; 뙹; ) HANGUL SYLLABLE DDOENG
    {
        std::array<uint32_t, 1> const source = {{ 0xB679 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11BC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_098)
{
    // B67A;B67A;1104 116C 11BD;B67A;1104 116C 11BD; 
    // (뙺; 뙺; 뙺; 뙺; 뙺; ) HANGUL SYLLABLE DDOEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB67A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11BD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_099)
{
    // B67B;B67B;1104 116C 11BE;B67B;1104 116C 11BE; 
    // (뙻; 뙻; 뙻; 뙻; 뙻; ) HANGUL SYLLABLE DDOEC
    {
        std::array<uint32_t, 1> const source = {{ 0xB67B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11BE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_100)
{
    // B67C;B67C;1104 116C 11BF;B67C;1104 116C 11BF; 
    // (뙼; 뙼; 뙼; 뙼; 뙼; ) HANGUL SYLLABLE DDOEK
    {
        std::array<uint32_t, 1> const source = {{ 0xB67C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11BF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_101)
{
    // B67D;B67D;1104 116C 11C0;B67D;1104 116C 11C0; 
    // (뙽; 뙽; 뙽; 뙽; 뙽; ) HANGUL SYLLABLE DDOET
    {
        std::array<uint32_t, 1> const source = {{ 0xB67D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11C0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_102)
{
    // B67E;B67E;1104 116C 11C1;B67E;1104 116C 11C1; 
    // (뙾; 뙾; 뙾; 뙾; 뙾; ) HANGUL SYLLABLE DDOEP
    {
        std::array<uint32_t, 1> const source = {{ 0xB67E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11C1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_103)
{
    // B67F;B67F;1104 116C 11C2;B67F;1104 116C 11C2; 
    // (뙿; 뙿; 뙿; 뙿; 뙿; ) HANGUL SYLLABLE DDOEH
    {
        std::array<uint32_t, 1> const source = {{ 0xB67F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116C, 0x11C2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_104)
{
    // B680;B680;1104 116D;B680;1104 116D; 
    // (뚀; 뚀; 뚀; 뚀; 뚀; ) HANGUL SYLLABLE DDYO
    {
        std::array<uint32_t, 1> const source = {{ 0xB680 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1104, 0x116D }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_105)
{
    // B681;B681;1104 116D 11A8;B681;1104 116D 11A8; 
    // (뚁; 뚁; 뚁; 뚁; 뚁; ) HANGUL SYLLABLE DDYOG
    {
        std::array<uint32_t, 1> const source = {{ 0xB681 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11A8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_106)
{
    // B682;B682;1104 116D 11A9;B682;1104 116D 11A9; 
    // (뚂; 뚂; 뚂; 뚂; 뚂; ) HANGUL SYLLABLE DDYOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB682 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11A9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_107)
{
    // B683;B683;1104 116D 11AA;B683;1104 116D 11AA; 
    // (뚃; 뚃; 뚃; 뚃; 뚃; ) HANGUL SYLLABLE DDYOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB683 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11AA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_108)
{
    // B684;B684;1104 116D 11AB;B684;1104 116D 11AB; 
    // (뚄; 뚄; 뚄; 뚄; 뚄; ) HANGUL SYLLABLE DDYON
    {
        std::array<uint32_t, 1> const source = {{ 0xB684 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11AB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_109)
{
    // B685;B685;1104 116D 11AC;B685;1104 116D 11AC; 
    // (뚅; 뚅; 뚅; 뚅; 뚅; ) HANGUL SYLLABLE DDYONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB685 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11AC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_110)
{
    // B686;B686;1104 116D 11AD;B686;1104 116D 11AD; 
    // (뚆; 뚆; 뚆; 뚆; 뚆; ) HANGUL SYLLABLE DDYONH
    {
        std::array<uint32_t, 1> const source = {{ 0xB686 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11AD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_111)
{
    // B687;B687;1104 116D 11AE;B687;1104 116D 11AE; 
    // (뚇; 뚇; 뚇; 뚇; 뚇; ) HANGUL SYLLABLE DDYOD
    {
        std::array<uint32_t, 1> const source = {{ 0xB687 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11AE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_112)
{
    // B688;B688;1104 116D 11AF;B688;1104 116D 11AF; 
    // (뚈; 뚈; 뚈; 뚈; 뚈; ) HANGUL SYLLABLE DDYOL
    {
        std::array<uint32_t, 1> const source = {{ 0xB688 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11AF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_113)
{
    // B689;B689;1104 116D 11B0;B689;1104 116D 11B0; 
    // (뚉; 뚉; 뚉; 뚉; 뚉; ) HANGUL SYLLABLE DDYOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xB689 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11B0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_114)
{
    // B68A;B68A;1104 116D 11B1;B68A;1104 116D 11B1; 
    // (뚊; 뚊; 뚊; 뚊; 뚊; ) HANGUL SYLLABLE DDYOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xB68A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11B1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_115)
{
    // B68B;B68B;1104 116D 11B2;B68B;1104 116D 11B2; 
    // (뚋; 뚋; 뚋; 뚋; 뚋; ) HANGUL SYLLABLE DDYOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xB68B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11B2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_116)
{
    // B68C;B68C;1104 116D 11B3;B68C;1104 116D 11B3; 
    // (뚌; 뚌; 뚌; 뚌; 뚌; ) HANGUL SYLLABLE DDYOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xB68C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11B3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_117)
{
    // B68D;B68D;1104 116D 11B4;B68D;1104 116D 11B4; 
    // (뚍; 뚍; 뚍; 뚍; 뚍; ) HANGUL SYLLABLE DDYOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xB68D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11B4 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_118)
{
    // B68E;B68E;1104 116D 11B5;B68E;1104 116D 11B5; 
    // (뚎; 뚎; 뚎; 뚎; 뚎; ) HANGUL SYLLABLE DDYOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xB68E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11B5 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_119)
{
    // B68F;B68F;1104 116D 11B6;B68F;1104 116D 11B6; 
    // (뚏; 뚏; 뚏; 뚏; 뚏; ) HANGUL SYLLABLE DDYOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xB68F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11B6 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_120)
{
    // B690;B690;1104 116D 11B7;B690;1104 116D 11B7; 
    // (뚐; 뚐; 뚐; 뚐; 뚐; ) HANGUL SYLLABLE DDYOM
    {
        std::array<uint32_t, 1> const source = {{ 0xB690 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11B7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_121)
{
    // B691;B691;1104 116D 11B8;B691;1104 116D 11B8; 
    // (뚑; 뚑; 뚑; 뚑; 뚑; ) HANGUL SYLLABLE DDYOB
    {
        std::array<uint32_t, 1> const source = {{ 0xB691 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11B8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_122)
{
    // B692;B692;1104 116D 11B9;B692;1104 116D 11B9; 
    // (뚒; 뚒; 뚒; 뚒; 뚒; ) HANGUL SYLLABLE DDYOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB692 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11B9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_123)
{
    // B693;B693;1104 116D 11BA;B693;1104 116D 11BA; 
    // (뚓; 뚓; 뚓; 뚓; 뚓; ) HANGUL SYLLABLE DDYOS
    {
        std::array<uint32_t, 1> const source = {{ 0xB693 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11BA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_124)
{
    // B694;B694;1104 116D 11BB;B694;1104 116D 11BB; 
    // (뚔; 뚔; 뚔; 뚔; 뚔; ) HANGUL SYLLABLE DDYOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xB694 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11BB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_125)
{
    // B695;B695;1104 116D 11BC;B695;1104 116D 11BC; 
    // (뚕; 뚕; 뚕; 뚕; 뚕; ) HANGUL SYLLABLE DDYONG
    {
        std::array<uint32_t, 1> const source = {{ 0xB695 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11BC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_126)
{
    // B696;B696;1104 116D 11BD;B696;1104 116D 11BD; 
    // (뚖; 뚖; 뚖; 뚖; 뚖; ) HANGUL SYLLABLE DDYOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB696 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11BD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_127)
{
    // B697;B697;1104 116D 11BE;B697;1104 116D 11BE; 
    // (뚗; 뚗; 뚗; 뚗; 뚗; ) HANGUL SYLLABLE DDYOC
    {
        std::array<uint32_t, 1> const source = {{ 0xB697 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11BE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_128)
{
    // B698;B698;1104 116D 11BF;B698;1104 116D 11BF; 
    // (뚘; 뚘; 뚘; 뚘; 뚘; ) HANGUL SYLLABLE DDYOK
    {
        std::array<uint32_t, 1> const source = {{ 0xB698 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11BF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_129)
{
    // B699;B699;1104 116D 11C0;B699;1104 116D 11C0; 
    // (뚙; 뚙; 뚙; 뚙; 뚙; ) HANGUL SYLLABLE DDYOT
    {
        std::array<uint32_t, 1> const source = {{ 0xB699 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11C0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_130)
{
    // B69A;B69A;1104 116D 11C1;B69A;1104 116D 11C1; 
    // (뚚; 뚚; 뚚; 뚚; 뚚; ) HANGUL SYLLABLE DDYOP
    {
        std::array<uint32_t, 1> const source = {{ 0xB69A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11C1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_131)
{
    // B69B;B69B;1104 116D 11C2;B69B;1104 116D 11C2; 
    // (뚛; 뚛; 뚛; 뚛; 뚛; ) HANGUL SYLLABLE DDYOH
    {
        std::array<uint32_t, 1> const source = {{ 0xB69B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116D, 0x11C2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_132)
{
    // B69C;B69C;1104 116E;B69C;1104 116E; 
    // (뚜; 뚜; 뚜; 뚜; 뚜; ) HANGUL SYLLABLE DDU
    {
        std::array<uint32_t, 1> const source = {{ 0xB69C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1104, 0x116E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_133)
{
    // B69D;B69D;1104 116E 11A8;B69D;1104 116E 11A8; 
    // (뚝; 뚝; 뚝; 뚝; 뚝; ) HANGUL SYLLABLE DDUG
    {
        std::array<uint32_t, 1> const source = {{ 0xB69D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11A8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_134)
{
    // B69E;B69E;1104 116E 11A9;B69E;1104 116E 11A9; 
    // (뚞; 뚞; 뚞; 뚞; 뚞; ) HANGUL SYLLABLE DDUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB69E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11A9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_135)
{
    // B69F;B69F;1104 116E 11AA;B69F;1104 116E 11AA; 
    // (뚟; 뚟; 뚟; 뚟; 뚟; ) HANGUL SYLLABLE DDUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB69F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11AA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_136)
{
    // B6A0;B6A0;1104 116E 11AB;B6A0;1104 116E 11AB; 
    // (뚠; 뚠; 뚠; 뚠; 뚠; ) HANGUL SYLLABLE DDUN
    {
        std::array<uint32_t, 1> const source = {{ 0xB6A0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11AB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_137)
{
    // B6A1;B6A1;1104 116E 11AC;B6A1;1104 116E 11AC; 
    // (뚡; 뚡; 뚡; 뚡; 뚡; ) HANGUL SYLLABLE DDUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB6A1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11AC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_138)
{
    // B6A2;B6A2;1104 116E 11AD;B6A2;1104 116E 11AD; 
    // (뚢; 뚢; 뚢; 뚢; 뚢; ) HANGUL SYLLABLE DDUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xB6A2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11AD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_139)
{
    // B6A3;B6A3;1104 116E 11AE;B6A3;1104 116E 11AE; 
    // (뚣; 뚣; 뚣; 뚣; 뚣; ) HANGUL SYLLABLE DDUD
    {
        std::array<uint32_t, 1> const source = {{ 0xB6A3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11AE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_140)
{
    // B6A4;B6A4;1104 116E 11AF;B6A4;1104 116E 11AF; 
    // (뚤; 뚤; 뚤; 뚤; 뚤; ) HANGUL SYLLABLE DDUL
    {
        std::array<uint32_t, 1> const source = {{ 0xB6A4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11AF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_141)
{
    // B6A5;B6A5;1104 116E 11B0;B6A5;1104 116E 11B0; 
    // (뚥; 뚥; 뚥; 뚥; 뚥; ) HANGUL SYLLABLE DDULG
    {
        std::array<uint32_t, 1> const source = {{ 0xB6A5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11B0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_142)
{
    // B6A6;B6A6;1104 116E 11B1;B6A6;1104 116E 11B1; 
    // (뚦; 뚦; 뚦; 뚦; 뚦; ) HANGUL SYLLABLE DDULM
    {
        std::array<uint32_t, 1> const source = {{ 0xB6A6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11B1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_143)
{
    // B6A7;B6A7;1104 116E 11B2;B6A7;1104 116E 11B2; 
    // (뚧; 뚧; 뚧; 뚧; 뚧; ) HANGUL SYLLABLE DDULB
    {
        std::array<uint32_t, 1> const source = {{ 0xB6A7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11B2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_144)
{
    // B6A8;B6A8;1104 116E 11B3;B6A8;1104 116E 11B3; 
    // (뚨; 뚨; 뚨; 뚨; 뚨; ) HANGUL SYLLABLE DDULS
    {
        std::array<uint32_t, 1> const source = {{ 0xB6A8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11B3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_145)
{
    // B6A9;B6A9;1104 116E 11B4;B6A9;1104 116E 11B4; 
    // (뚩; 뚩; 뚩; 뚩; 뚩; ) HANGUL SYLLABLE DDULT
    {
        std::array<uint32_t, 1> const source = {{ 0xB6A9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11B4 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_146)
{
    // B6AA;B6AA;1104 116E 11B5;B6AA;1104 116E 11B5; 
    // (뚪; 뚪; 뚪; 뚪; 뚪; ) HANGUL SYLLABLE DDULP
    {
        std::array<uint32_t, 1> const source = {{ 0xB6AA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11B5 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_147)
{
    // B6AB;B6AB;1104 116E 11B6;B6AB;1104 116E 11B6; 
    // (뚫; 뚫; 뚫; 뚫; 뚫; ) HANGUL SYLLABLE DDULH
    {
        std::array<uint32_t, 1> const source = {{ 0xB6AB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11B6 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_148)
{
    // B6AC;B6AC;1104 116E 11B7;B6AC;1104 116E 11B7; 
    // (뚬; 뚬; 뚬; 뚬; 뚬; ) HANGUL SYLLABLE DDUM
    {
        std::array<uint32_t, 1> const source = {{ 0xB6AC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11B7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_149)
{
    // B6AD;B6AD;1104 116E 11B8;B6AD;1104 116E 11B8; 
    // (뚭; 뚭; 뚭; 뚭; 뚭; ) HANGUL SYLLABLE DDUB
    {
        std::array<uint32_t, 1> const source = {{ 0xB6AD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11B8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_150)
{
    // B6AE;B6AE;1104 116E 11B9;B6AE;1104 116E 11B9; 
    // (뚮; 뚮; 뚮; 뚮; 뚮; ) HANGUL SYLLABLE DDUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB6AE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11B9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_151)
{
    // B6AF;B6AF;1104 116E 11BA;B6AF;1104 116E 11BA; 
    // (뚯; 뚯; 뚯; 뚯; 뚯; ) HANGUL SYLLABLE DDUS
    {
        std::array<uint32_t, 1> const source = {{ 0xB6AF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11BA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_152)
{
    // B6B0;B6B0;1104 116E 11BB;B6B0;1104 116E 11BB; 
    // (뚰; 뚰; 뚰; 뚰; 뚰; ) HANGUL SYLLABLE DDUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xB6B0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11BB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_153)
{
    // B6B1;B6B1;1104 116E 11BC;B6B1;1104 116E 11BC; 
    // (뚱; 뚱; 뚱; 뚱; 뚱; ) HANGUL SYLLABLE DDUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xB6B1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11BC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_154)
{
    // B6B2;B6B2;1104 116E 11BD;B6B2;1104 116E 11BD; 
    // (뚲; 뚲; 뚲; 뚲; 뚲; ) HANGUL SYLLABLE DDUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB6B2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11BD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_155)
{
    // B6B3;B6B3;1104 116E 11BE;B6B3;1104 116E 11BE; 
    // (뚳; 뚳; 뚳; 뚳; 뚳; ) HANGUL SYLLABLE DDUC
    {
        std::array<uint32_t, 1> const source = {{ 0xB6B3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11BE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_156)
{
    // B6B4;B6B4;1104 116E 11BF;B6B4;1104 116E 11BF; 
    // (뚴; 뚴; 뚴; 뚴; 뚴; ) HANGUL SYLLABLE DDUK
    {
        std::array<uint32_t, 1> const source = {{ 0xB6B4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11BF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_157)
{
    // B6B5;B6B5;1104 116E 11C0;B6B5;1104 116E 11C0; 
    // (뚵; 뚵; 뚵; 뚵; 뚵; ) HANGUL SYLLABLE DDUT
    {
        std::array<uint32_t, 1> const source = {{ 0xB6B5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11C0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_158)
{
    // B6B6;B6B6;1104 116E 11C1;B6B6;1104 116E 11C1; 
    // (뚶; 뚶; 뚶; 뚶; 뚶; ) HANGUL SYLLABLE DDUP
    {
        std::array<uint32_t, 1> const source = {{ 0xB6B6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11C1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_159)
{
    // B6B7;B6B7;1104 116E 11C2;B6B7;1104 116E 11C2; 
    // (뚷; 뚷; 뚷; 뚷; 뚷; ) HANGUL SYLLABLE DDUH
    {
        std::array<uint32_t, 1> const source = {{ 0xB6B7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116E, 0x11C2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_160)
{
    // B6B8;B6B8;1104 116F;B6B8;1104 116F; 
    // (뚸; 뚸; 뚸; 뚸; 뚸; ) HANGUL SYLLABLE DDWEO
    {
        std::array<uint32_t, 1> const source = {{ 0xB6B8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1104, 0x116F }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_161)
{
    // B6B9;B6B9;1104 116F 11A8;B6B9;1104 116F 11A8; 
    // (뚹; 뚹; 뚹; 뚹; 뚹; ) HANGUL SYLLABLE DDWEOG
    {
        std::array<uint32_t, 1> const source = {{ 0xB6B9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11A8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_162)
{
    // B6BA;B6BA;1104 116F 11A9;B6BA;1104 116F 11A9; 
    // (뚺; 뚺; 뚺; 뚺; 뚺; ) HANGUL SYLLABLE DDWEOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB6BA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11A9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_163)
{
    // B6BB;B6BB;1104 116F 11AA;B6BB;1104 116F 11AA; 
    // (뚻; 뚻; 뚻; 뚻; 뚻; ) HANGUL SYLLABLE DDWEOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB6BB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11AA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_164)
{
    // B6BC;B6BC;1104 116F 11AB;B6BC;1104 116F 11AB; 
    // (뚼; 뚼; 뚼; 뚼; 뚼; ) HANGUL SYLLABLE DDWEON
    {
        std::array<uint32_t, 1> const source = {{ 0xB6BC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11AB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_165)
{
    // B6BD;B6BD;1104 116F 11AC;B6BD;1104 116F 11AC; 
    // (뚽; 뚽; 뚽; 뚽; 뚽; ) HANGUL SYLLABLE DDWEONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB6BD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11AC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_166)
{
    // B6BE;B6BE;1104 116F 11AD;B6BE;1104 116F 11AD; 
    // (뚾; 뚾; 뚾; 뚾; 뚾; ) HANGUL SYLLABLE DDWEONH
    {
        std::array<uint32_t, 1> const source = {{ 0xB6BE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11AD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_167)
{
    // B6BF;B6BF;1104 116F 11AE;B6BF;1104 116F 11AE; 
    // (뚿; 뚿; 뚿; 뚿; 뚿; ) HANGUL SYLLABLE DDWEOD
    {
        std::array<uint32_t, 1> const source = {{ 0xB6BF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11AE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_168)
{
    // B6C0;B6C0;1104 116F 11AF;B6C0;1104 116F 11AF; 
    // (뛀; 뛀; 뛀; 뛀; 뛀; ) HANGUL SYLLABLE DDWEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xB6C0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11AF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_169)
{
    // B6C1;B6C1;1104 116F 11B0;B6C1;1104 116F 11B0; 
    // (뛁; 뛁; 뛁; 뛁; 뛁; ) HANGUL SYLLABLE DDWEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xB6C1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11B0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_170)
{
    // B6C2;B6C2;1104 116F 11B1;B6C2;1104 116F 11B1; 
    // (뛂; 뛂; 뛂; 뛂; 뛂; ) HANGUL SYLLABLE DDWEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xB6C2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11B1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_171)
{
    // B6C3;B6C3;1104 116F 11B2;B6C3;1104 116F 11B2; 
    // (뛃; 뛃; 뛃; 뛃; 뛃; ) HANGUL SYLLABLE DDWEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xB6C3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11B2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_172)
{
    // B6C4;B6C4;1104 116F 11B3;B6C4;1104 116F 11B3; 
    // (뛄; 뛄; 뛄; 뛄; 뛄; ) HANGUL SYLLABLE DDWEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xB6C4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11B3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_173)
{
    // B6C5;B6C5;1104 116F 11B4;B6C5;1104 116F 11B4; 
    // (뛅; 뛅; 뛅; 뛅; 뛅; ) HANGUL SYLLABLE DDWEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xB6C5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11B4 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_174)
{
    // B6C6;B6C6;1104 116F 11B5;B6C6;1104 116F 11B5; 
    // (뛆; 뛆; 뛆; 뛆; 뛆; ) HANGUL SYLLABLE DDWEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xB6C6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11B5 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_175)
{
    // B6C7;B6C7;1104 116F 11B6;B6C7;1104 116F 11B6; 
    // (뛇; 뛇; 뛇; 뛇; 뛇; ) HANGUL SYLLABLE DDWEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xB6C7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11B6 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_176)
{
    // B6C8;B6C8;1104 116F 11B7;B6C8;1104 116F 11B7; 
    // (뛈; 뛈; 뛈; 뛈; 뛈; ) HANGUL SYLLABLE DDWEOM
    {
        std::array<uint32_t, 1> const source = {{ 0xB6C8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11B7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_177)
{
    // B6C9;B6C9;1104 116F 11B8;B6C9;1104 116F 11B8; 
    // (뛉; 뛉; 뛉; 뛉; 뛉; ) HANGUL SYLLABLE DDWEOB
    {
        std::array<uint32_t, 1> const source = {{ 0xB6C9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11B8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_178)
{
    // B6CA;B6CA;1104 116F 11B9;B6CA;1104 116F 11B9; 
    // (뛊; 뛊; 뛊; 뛊; 뛊; ) HANGUL SYLLABLE DDWEOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB6CA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11B9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_179)
{
    // B6CB;B6CB;1104 116F 11BA;B6CB;1104 116F 11BA; 
    // (뛋; 뛋; 뛋; 뛋; 뛋; ) HANGUL SYLLABLE DDWEOS
    {
        std::array<uint32_t, 1> const source = {{ 0xB6CB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11BA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_180)
{
    // B6CC;B6CC;1104 116F 11BB;B6CC;1104 116F 11BB; 
    // (뛌; 뛌; 뛌; 뛌; 뛌; ) HANGUL SYLLABLE DDWEOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xB6CC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11BB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_181)
{
    // B6CD;B6CD;1104 116F 11BC;B6CD;1104 116F 11BC; 
    // (뛍; 뛍; 뛍; 뛍; 뛍; ) HANGUL SYLLABLE DDWEONG
    {
        std::array<uint32_t, 1> const source = {{ 0xB6CD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11BC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_182)
{
    // B6CE;B6CE;1104 116F 11BD;B6CE;1104 116F 11BD; 
    // (뛎; 뛎; 뛎; 뛎; 뛎; ) HANGUL SYLLABLE DDWEOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB6CE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11BD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_183)
{
    // B6CF;B6CF;1104 116F 11BE;B6CF;1104 116F 11BE; 
    // (뛏; 뛏; 뛏; 뛏; 뛏; ) HANGUL SYLLABLE DDWEOC
    {
        std::array<uint32_t, 1> const source = {{ 0xB6CF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11BE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_184)
{
    // B6D0;B6D0;1104 116F 11BF;B6D0;1104 116F 11BF; 
    // (뛐; 뛐; 뛐; 뛐; 뛐; ) HANGUL SYLLABLE DDWEOK
    {
        std::array<uint32_t, 1> const source = {{ 0xB6D0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11BF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_185)
{
    // B6D1;B6D1;1104 116F 11C0;B6D1;1104 116F 11C0; 
    // (뛑; 뛑; 뛑; 뛑; 뛑; ) HANGUL SYLLABLE DDWEOT
    {
        std::array<uint32_t, 1> const source = {{ 0xB6D1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11C0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_186)
{
    // B6D2;B6D2;1104 116F 11C1;B6D2;1104 116F 11C1; 
    // (뛒; 뛒; 뛒; 뛒; 뛒; ) HANGUL SYLLABLE DDWEOP
    {
        std::array<uint32_t, 1> const source = {{ 0xB6D2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11C1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_187)
{
    // B6D3;B6D3;1104 116F 11C2;B6D3;1104 116F 11C2; 
    // (뛓; 뛓; 뛓; 뛓; 뛓; ) HANGUL SYLLABLE DDWEOH
    {
        std::array<uint32_t, 1> const source = {{ 0xB6D3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x116F, 0x11C2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_188)
{
    // B6D4;B6D4;1104 1170;B6D4;1104 1170; 
    // (뛔; 뛔; 뛔; 뛔; 뛔; ) HANGUL SYLLABLE DDWE
    {
        std::array<uint32_t, 1> const source = {{ 0xB6D4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1104, 0x1170 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_189)
{
    // B6D5;B6D5;1104 1170 11A8;B6D5;1104 1170 11A8; 
    // (뛕; 뛕; 뛕; 뛕; 뛕; ) HANGUL SYLLABLE DDWEG
    {
        std::array<uint32_t, 1> const source = {{ 0xB6D5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1170, 0x11A8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_190)
{
    // B6D6;B6D6;1104 1170 11A9;B6D6;1104 1170 11A9; 
    // (뛖; 뛖; 뛖; 뛖; 뛖; ) HANGUL SYLLABLE DDWEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB6D6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1170, 0x11A9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_191)
{
    // B6D7;B6D7;1104 1170 11AA;B6D7;1104 1170 11AA; 
    // (뛗; 뛗; 뛗; 뛗; 뛗; ) HANGUL SYLLABLE DDWEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB6D7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1170, 0x11AA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_192)
{
    // B6D8;B6D8;1104 1170 11AB;B6D8;1104 1170 11AB; 
    // (뛘; 뛘; 뛘; 뛘; 뛘; ) HANGUL SYLLABLE DDWEN
    {
        std::array<uint32_t, 1> const source = {{ 0xB6D8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1170, 0x11AB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_193)
{
    // B6D9;B6D9;1104 1170 11AC;B6D9;1104 1170 11AC; 
    // (뛙; 뛙; 뛙; 뛙; 뛙; ) HANGUL SYLLABLE DDWENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB6D9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1170, 0x11AC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_194)
{
    // B6DA;B6DA;1104 1170 11AD;B6DA;1104 1170 11AD; 
    // (뛚; 뛚; 뛚; 뛚; 뛚; ) HANGUL SYLLABLE DDWENH
    {
        std::array<uint32_t, 1> const source = {{ 0xB6DA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1170, 0x11AD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_195)
{
    // B6DB;B6DB;1104 1170 11AE;B6DB;1104 1170 11AE; 
    // (뛛; 뛛; 뛛; 뛛; 뛛; ) HANGUL SYLLABLE DDWED
    {
        std::array<uint32_t, 1> const source = {{ 0xB6DB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1170, 0x11AE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_196)
{
    // B6DC;B6DC;1104 1170 11AF;B6DC;1104 1170 11AF; 
    // (뛜; 뛜; 뛜; 뛜; 뛜; ) HANGUL SYLLABLE DDWEL
    {
        std::array<uint32_t, 1> const source = {{ 0xB6DC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1170, 0x11AF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_197)
{
    // B6DD;B6DD;1104 1170 11B0;B6DD;1104 1170 11B0; 
    // (뛝; 뛝; 뛝; 뛝; 뛝; ) HANGUL SYLLABLE DDWELG
    {
        std::array<uint32_t, 1> const source = {{ 0xB6DD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1170, 0x11B0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_198)
{
    // B6DE;B6DE;1104 1170 11B1;B6DE;1104 1170 11B1; 
    // (뛞; 뛞; 뛞; 뛞; 뛞; ) HANGUL SYLLABLE DDWELM
    {
        std::array<uint32_t, 1> const source = {{ 0xB6DE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1170, 0x11B1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_025_199)
{
    // B6DF;B6DF;1104 1170 11B2;B6DF;1104 1170 11B2; 
    // (뛟; 뛟; 뛟; 뛟; 뛟; ) HANGUL SYLLABLE DDWELB
    {
        std::array<uint32_t, 1> const source = {{ 0xB6DF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1104, 0x1170, 0x11B2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


