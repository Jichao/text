// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_345_000)
{
    // 3B10 003F;	
    // (㬐) CJK UNIFIED IDEOGRAPH-3B10	[FB80 BB10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B10, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_001)
{
    // 3B10 0061;	
    // (㬐) CJK UNIFIED IDEOGRAPH-3B10	[FB80 BB10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B10, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_002)
{
    // 3B10 0041;	
    // (㬐) CJK UNIFIED IDEOGRAPH-3B10	[FB80 BB10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B10, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_003)
{
    // 3B10 0062;	
    // (㬐) CJK UNIFIED IDEOGRAPH-3B10	[FB80 BB10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B10, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_004)
{
    // 3B11 0021;	
    // (㬑) CJK UNIFIED IDEOGRAPH-3B11	[FB80 BB11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B11, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_005)
{
    // 3B11 003F;	
    // (㬑) CJK UNIFIED IDEOGRAPH-3B11	[FB80 BB11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B11, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_006)
{
    // 3B11 0061;	
    // (㬑) CJK UNIFIED IDEOGRAPH-3B11	[FB80 BB11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B11, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_007)
{
    // 3B11 0041;	
    // (㬑) CJK UNIFIED IDEOGRAPH-3B11	[FB80 BB11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B11, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_008)
{
    // 3B11 0062;	
    // (㬑) CJK UNIFIED IDEOGRAPH-3B11	[FB80 BB11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B11, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_009)
{
    // 3B12 0021;	
    // (㬒) CJK UNIFIED IDEOGRAPH-3B12	[FB80 BB12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B12, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_010)
{
    // 3B12 003F;	
    // (㬒) CJK UNIFIED IDEOGRAPH-3B12	[FB80 BB12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B12, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_011)
{
    // 3B12 0061;	
    // (㬒) CJK UNIFIED IDEOGRAPH-3B12	[FB80 BB12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B12, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_012)
{
    // 3B12 0041;	
    // (㬒) CJK UNIFIED IDEOGRAPH-3B12	[FB80 BB12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B12, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_013)
{
    // 3B12 0062;	
    // (㬒) CJK UNIFIED IDEOGRAPH-3B12	[FB80 BB12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B12, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_014)
{
    // 3B13 0021;	
    // (㬓) CJK UNIFIED IDEOGRAPH-3B13	[FB80 BB13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B13, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_015)
{
    // 3B13 003F;	
    // (㬓) CJK UNIFIED IDEOGRAPH-3B13	[FB80 BB13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B13, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_016)
{
    // 3B13 0061;	
    // (㬓) CJK UNIFIED IDEOGRAPH-3B13	[FB80 BB13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B13, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_017)
{
    // 3B13 0041;	
    // (㬓) CJK UNIFIED IDEOGRAPH-3B13	[FB80 BB13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B13, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_018)
{
    // 3B13 0062;	
    // (㬓) CJK UNIFIED IDEOGRAPH-3B13	[FB80 BB13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B13, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_019)
{
    // 3B14 0021;	
    // (㬔) CJK UNIFIED IDEOGRAPH-3B14	[FB80 BB14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B14, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_020)
{
    // 3B14 003F;	
    // (㬔) CJK UNIFIED IDEOGRAPH-3B14	[FB80 BB14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B14, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_021)
{
    // 3B14 0061;	
    // (㬔) CJK UNIFIED IDEOGRAPH-3B14	[FB80 BB14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B14, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_022)
{
    // 3B14 0041;	
    // (㬔) CJK UNIFIED IDEOGRAPH-3B14	[FB80 BB14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B14, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_023)
{
    // 3B14 0062;	
    // (㬔) CJK UNIFIED IDEOGRAPH-3B14	[FB80 BB14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B14, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_024)
{
    // 3B15 0021;	
    // (㬕) CJK UNIFIED IDEOGRAPH-3B15	[FB80 BB15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B15, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_025)
{
    // 3B15 003F;	
    // (㬕) CJK UNIFIED IDEOGRAPH-3B15	[FB80 BB15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B15, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_026)
{
    // 3B15 0061;	
    // (㬕) CJK UNIFIED IDEOGRAPH-3B15	[FB80 BB15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B15, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_027)
{
    // 3B15 0041;	
    // (㬕) CJK UNIFIED IDEOGRAPH-3B15	[FB80 BB15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B15, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_028)
{
    // 3B15 0062;	
    // (㬕) CJK UNIFIED IDEOGRAPH-3B15	[FB80 BB15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B15, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_029)
{
    // 3B16 0021;	
    // (㬖) CJK UNIFIED IDEOGRAPH-3B16	[FB80 BB16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B16, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_030)
{
    // 3B16 003F;	
    // (㬖) CJK UNIFIED IDEOGRAPH-3B16	[FB80 BB16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B16, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_031)
{
    // 3B16 0061;	
    // (㬖) CJK UNIFIED IDEOGRAPH-3B16	[FB80 BB16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B16, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_032)
{
    // 3B16 0041;	
    // (㬖) CJK UNIFIED IDEOGRAPH-3B16	[FB80 BB16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B16, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_033)
{
    // 3B16 0062;	
    // (㬖) CJK UNIFIED IDEOGRAPH-3B16	[FB80 BB16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B16, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_034)
{
    // 3B17 0021;	
    // (㬗) CJK UNIFIED IDEOGRAPH-3B17	[FB80 BB17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B17, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_035)
{
    // 3B17 003F;	
    // (㬗) CJK UNIFIED IDEOGRAPH-3B17	[FB80 BB17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B17, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_036)
{
    // 3B17 0061;	
    // (㬗) CJK UNIFIED IDEOGRAPH-3B17	[FB80 BB17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B17, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_037)
{
    // 3B17 0041;	
    // (㬗) CJK UNIFIED IDEOGRAPH-3B17	[FB80 BB17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B17, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_038)
{
    // 3B17 0062;	
    // (㬗) CJK UNIFIED IDEOGRAPH-3B17	[FB80 BB17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B17, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_039)
{
    // 3B18 0021;	
    // (㬘) CJK UNIFIED IDEOGRAPH-3B18	[FB80 BB18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B18, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_040)
{
    // 3B18 003F;	
    // (㬘) CJK UNIFIED IDEOGRAPH-3B18	[FB80 BB18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B18, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_041)
{
    // 3B18 0061;	
    // (㬘) CJK UNIFIED IDEOGRAPH-3B18	[FB80 BB18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B18, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_042)
{
    // 3B18 0041;	
    // (㬘) CJK UNIFIED IDEOGRAPH-3B18	[FB80 BB18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B18, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_043)
{
    // 3B18 0062;	
    // (㬘) CJK UNIFIED IDEOGRAPH-3B18	[FB80 BB18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B18, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_044)
{
    // 3B19 0021;	
    // (㬙) CJK UNIFIED IDEOGRAPH-3B19	[FB80 BB19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B19, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_045)
{
    // 2F8CE 0021;	
    // (㬙) CJK COMPATIBILITY IDEOGRAPH-2F8CE	[FB80 BB19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_046)
{
    // 3B19 003F;	
    // (㬙) CJK UNIFIED IDEOGRAPH-3B19	[FB80 BB19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B19, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_047)
{
    // 2F8CE 003F;	
    // (㬙) CJK COMPATIBILITY IDEOGRAPH-2F8CE	[FB80 BB19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_048)
{
    // 3B19 0061;	
    // (㬙) CJK UNIFIED IDEOGRAPH-3B19	[FB80 BB19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B19, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_049)
{
    // 2F8CE 0061;	
    // (㬙) CJK COMPATIBILITY IDEOGRAPH-2F8CE	[FB80 BB19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_050)
{
    // 3B19 0041;	
    // (㬙) CJK UNIFIED IDEOGRAPH-3B19	[FB80 BB19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B19, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_051)
{
    // 2F8CE 0041;	
    // (㬙) CJK COMPATIBILITY IDEOGRAPH-2F8CE	[FB80 BB19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_052)
{
    // 3B19 0062;	
    // (㬙) CJK UNIFIED IDEOGRAPH-3B19	[FB80 BB19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B19, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_053)
{
    // 2F8CE 0062;	
    // (㬙) CJK COMPATIBILITY IDEOGRAPH-2F8CE	[FB80 BB19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_054)
{
    // 3B1A 0021;	
    // (㬚) CJK UNIFIED IDEOGRAPH-3B1A	[FB80 BB1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_055)
{
    // 3B1A 003F;	
    // (㬚) CJK UNIFIED IDEOGRAPH-3B1A	[FB80 BB1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_056)
{
    // 3B1A 0061;	
    // (㬚) CJK UNIFIED IDEOGRAPH-3B1A	[FB80 BB1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_057)
{
    // 3B1A 0041;	
    // (㬚) CJK UNIFIED IDEOGRAPH-3B1A	[FB80 BB1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B1A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_058)
{
    // 3B1A 0062;	
    // (㬚) CJK UNIFIED IDEOGRAPH-3B1A	[FB80 BB1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_059)
{
    // 3B1B 0021;	
    // (㬛) CJK UNIFIED IDEOGRAPH-3B1B	[FB80 BB1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_060)
{
    // 3B1B 003F;	
    // (㬛) CJK UNIFIED IDEOGRAPH-3B1B	[FB80 BB1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_061)
{
    // 3B1B 0061;	
    // (㬛) CJK UNIFIED IDEOGRAPH-3B1B	[FB80 BB1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_062)
{
    // 3B1B 0041;	
    // (㬛) CJK UNIFIED IDEOGRAPH-3B1B	[FB80 BB1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B1B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_063)
{
    // 3B1B 0062;	
    // (㬛) CJK UNIFIED IDEOGRAPH-3B1B	[FB80 BB1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_064)
{
    // 3B1C 0021;	
    // (㬜) CJK UNIFIED IDEOGRAPH-3B1C	[FB80 BB1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_065)
{
    // 3B1C 003F;	
    // (㬜) CJK UNIFIED IDEOGRAPH-3B1C	[FB80 BB1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_066)
{
    // 3B1C 0061;	
    // (㬜) CJK UNIFIED IDEOGRAPH-3B1C	[FB80 BB1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_067)
{
    // 3B1C 0041;	
    // (㬜) CJK UNIFIED IDEOGRAPH-3B1C	[FB80 BB1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B1C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_068)
{
    // 3B1C 0062;	
    // (㬜) CJK UNIFIED IDEOGRAPH-3B1C	[FB80 BB1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_069)
{
    // 3B1D 0021;	
    // (㬝) CJK UNIFIED IDEOGRAPH-3B1D	[FB80 BB1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_070)
{
    // 3B1D 003F;	
    // (㬝) CJK UNIFIED IDEOGRAPH-3B1D	[FB80 BB1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_071)
{
    // 3B1D 0061;	
    // (㬝) CJK UNIFIED IDEOGRAPH-3B1D	[FB80 BB1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_072)
{
    // 3B1D 0041;	
    // (㬝) CJK UNIFIED IDEOGRAPH-3B1D	[FB80 BB1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B1D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_073)
{
    // 3B1D 0062;	
    // (㬝) CJK UNIFIED IDEOGRAPH-3B1D	[FB80 BB1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_074)
{
    // 3B1E 0021;	
    // (㬞) CJK UNIFIED IDEOGRAPH-3B1E	[FB80 BB1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_075)
{
    // 3B1E 003F;	
    // (㬞) CJK UNIFIED IDEOGRAPH-3B1E	[FB80 BB1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_076)
{
    // 3B1E 0061;	
    // (㬞) CJK UNIFIED IDEOGRAPH-3B1E	[FB80 BB1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_077)
{
    // 3B1E 0041;	
    // (㬞) CJK UNIFIED IDEOGRAPH-3B1E	[FB80 BB1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B1E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_078)
{
    // 3B1E 0062;	
    // (㬞) CJK UNIFIED IDEOGRAPH-3B1E	[FB80 BB1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_079)
{
    // 3B1F 0021;	
    // (㬟) CJK UNIFIED IDEOGRAPH-3B1F	[FB80 BB1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_080)
{
    // 3B1F 003F;	
    // (㬟) CJK UNIFIED IDEOGRAPH-3B1F	[FB80 BB1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_081)
{
    // 3B1F 0061;	
    // (㬟) CJK UNIFIED IDEOGRAPH-3B1F	[FB80 BB1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_082)
{
    // 3B1F 0041;	
    // (㬟) CJK UNIFIED IDEOGRAPH-3B1F	[FB80 BB1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B1F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_083)
{
    // 3B1F 0062;	
    // (㬟) CJK UNIFIED IDEOGRAPH-3B1F	[FB80 BB1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B1F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_084)
{
    // 3B20 0021;	
    // (㬠) CJK UNIFIED IDEOGRAPH-3B20	[FB80 BB20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B20, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_085)
{
    // 3B20 003F;	
    // (㬠) CJK UNIFIED IDEOGRAPH-3B20	[FB80 BB20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B20, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_086)
{
    // 3B20 0061;	
    // (㬠) CJK UNIFIED IDEOGRAPH-3B20	[FB80 BB20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B20, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_087)
{
    // 3B20 0041;	
    // (㬠) CJK UNIFIED IDEOGRAPH-3B20	[FB80 BB20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B20, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_088)
{
    // 3B20 0062;	
    // (㬠) CJK UNIFIED IDEOGRAPH-3B20	[FB80 BB20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B20, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_089)
{
    // 3B21 0021;	
    // (㬡) CJK UNIFIED IDEOGRAPH-3B21	[FB80 BB21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B21, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_090)
{
    // 3B21 003F;	
    // (㬡) CJK UNIFIED IDEOGRAPH-3B21	[FB80 BB21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B21, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_091)
{
    // 3B21 0061;	
    // (㬡) CJK UNIFIED IDEOGRAPH-3B21	[FB80 BB21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B21, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_092)
{
    // 3B21 0041;	
    // (㬡) CJK UNIFIED IDEOGRAPH-3B21	[FB80 BB21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B21, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_093)
{
    // 3B21 0062;	
    // (㬡) CJK UNIFIED IDEOGRAPH-3B21	[FB80 BB21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B21, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_094)
{
    // 3B22 0021;	
    // (㬢) CJK UNIFIED IDEOGRAPH-3B22	[FB80 BB22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B22, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_095)
{
    // 3B22 003F;	
    // (㬢) CJK UNIFIED IDEOGRAPH-3B22	[FB80 BB22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B22, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_096)
{
    // 3B22 0061;	
    // (㬢) CJK UNIFIED IDEOGRAPH-3B22	[FB80 BB22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B22, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_097)
{
    // 3B22 0041;	
    // (㬢) CJK UNIFIED IDEOGRAPH-3B22	[FB80 BB22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B22, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_098)
{
    // 3B22 0062;	
    // (㬢) CJK UNIFIED IDEOGRAPH-3B22	[FB80 BB22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B22, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_099)
{
    // 3B23 0021;	
    // (㬣) CJK UNIFIED IDEOGRAPH-3B23	[FB80 BB23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B23, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_100)
{
    // 3B23 003F;	
    // (㬣) CJK UNIFIED IDEOGRAPH-3B23	[FB80 BB23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B23, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_101)
{
    // 3B23 0061;	
    // (㬣) CJK UNIFIED IDEOGRAPH-3B23	[FB80 BB23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B23, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_102)
{
    // 3B23 0041;	
    // (㬣) CJK UNIFIED IDEOGRAPH-3B23	[FB80 BB23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B23, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_103)
{
    // 3B23 0062;	
    // (㬣) CJK UNIFIED IDEOGRAPH-3B23	[FB80 BB23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B23, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_104)
{
    // 3B24 0021;	
    // (㬤) CJK UNIFIED IDEOGRAPH-3B24	[FB80 BB24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B24, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_105)
{
    // 3B24 003F;	
    // (㬤) CJK UNIFIED IDEOGRAPH-3B24	[FB80 BB24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B24, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_106)
{
    // 3B24 0061;	
    // (㬤) CJK UNIFIED IDEOGRAPH-3B24	[FB80 BB24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B24, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_107)
{
    // 3B24 0041;	
    // (㬤) CJK UNIFIED IDEOGRAPH-3B24	[FB80 BB24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B24, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_108)
{
    // 3B24 0062;	
    // (㬤) CJK UNIFIED IDEOGRAPH-3B24	[FB80 BB24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B24, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_109)
{
    // 3B25 0021;	
    // (㬥) CJK UNIFIED IDEOGRAPH-3B25	[FB80 BB25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B25, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_110)
{
    // 3B25 003F;	
    // (㬥) CJK UNIFIED IDEOGRAPH-3B25	[FB80 BB25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B25, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_111)
{
    // 3B25 0061;	
    // (㬥) CJK UNIFIED IDEOGRAPH-3B25	[FB80 BB25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B25, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_112)
{
    // 3B25 0041;	
    // (㬥) CJK UNIFIED IDEOGRAPH-3B25	[FB80 BB25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B25, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_113)
{
    // 3B25 0062;	
    // (㬥) CJK UNIFIED IDEOGRAPH-3B25	[FB80 BB25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B25, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_114)
{
    // 3B26 0021;	
    // (㬦) CJK UNIFIED IDEOGRAPH-3B26	[FB80 BB26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B26, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_115)
{
    // 3B26 003F;	
    // (㬦) CJK UNIFIED IDEOGRAPH-3B26	[FB80 BB26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B26, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_116)
{
    // 3B26 0061;	
    // (㬦) CJK UNIFIED IDEOGRAPH-3B26	[FB80 BB26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B26, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_117)
{
    // 3B26 0041;	
    // (㬦) CJK UNIFIED IDEOGRAPH-3B26	[FB80 BB26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B26, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_118)
{
    // 3B26 0062;	
    // (㬦) CJK UNIFIED IDEOGRAPH-3B26	[FB80 BB26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B26, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_119)
{
    // 3B27 0021;	
    // (㬧) CJK UNIFIED IDEOGRAPH-3B27	[FB80 BB27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B27, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_120)
{
    // 3B27 003F;	
    // (㬧) CJK UNIFIED IDEOGRAPH-3B27	[FB80 BB27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B27, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_121)
{
    // 3B27 0061;	
    // (㬧) CJK UNIFIED IDEOGRAPH-3B27	[FB80 BB27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B27, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_122)
{
    // 3B27 0041;	
    // (㬧) CJK UNIFIED IDEOGRAPH-3B27	[FB80 BB27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B27, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_123)
{
    // 3B27 0062;	
    // (㬧) CJK UNIFIED IDEOGRAPH-3B27	[FB80 BB27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B27, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_124)
{
    // 3B28 0021;	
    // (㬨) CJK UNIFIED IDEOGRAPH-3B28	[FB80 BB28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B28, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_125)
{
    // 3B28 003F;	
    // (㬨) CJK UNIFIED IDEOGRAPH-3B28	[FB80 BB28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B28, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_126)
{
    // 3B28 0061;	
    // (㬨) CJK UNIFIED IDEOGRAPH-3B28	[FB80 BB28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B28, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_127)
{
    // 3B28 0041;	
    // (㬨) CJK UNIFIED IDEOGRAPH-3B28	[FB80 BB28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B28, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_128)
{
    // 3B28 0062;	
    // (㬨) CJK UNIFIED IDEOGRAPH-3B28	[FB80 BB28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B28, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_129)
{
    // 3B29 0021;	
    // (㬩) CJK UNIFIED IDEOGRAPH-3B29	[FB80 BB29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B29, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_130)
{
    // 3B29 003F;	
    // (㬩) CJK UNIFIED IDEOGRAPH-3B29	[FB80 BB29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B29, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_131)
{
    // 3B29 0061;	
    // (㬩) CJK UNIFIED IDEOGRAPH-3B29	[FB80 BB29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B29, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_132)
{
    // 3B29 0041;	
    // (㬩) CJK UNIFIED IDEOGRAPH-3B29	[FB80 BB29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B29, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_133)
{
    // 3B29 0062;	
    // (㬩) CJK UNIFIED IDEOGRAPH-3B29	[FB80 BB29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B29, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_134)
{
    // 3B2A 0021;	
    // (㬪) CJK UNIFIED IDEOGRAPH-3B2A	[FB80 BB2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_135)
{
    // 3B2A 003F;	
    // (㬪) CJK UNIFIED IDEOGRAPH-3B2A	[FB80 BB2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_136)
{
    // 3B2A 0061;	
    // (㬪) CJK UNIFIED IDEOGRAPH-3B2A	[FB80 BB2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_137)
{
    // 3B2A 0041;	
    // (㬪) CJK UNIFIED IDEOGRAPH-3B2A	[FB80 BB2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B2A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_138)
{
    // 3B2A 0062;	
    // (㬪) CJK UNIFIED IDEOGRAPH-3B2A	[FB80 BB2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_139)
{
    // 3B2B 0021;	
    // (㬫) CJK UNIFIED IDEOGRAPH-3B2B	[FB80 BB2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_140)
{
    // 3B2B 003F;	
    // (㬫) CJK UNIFIED IDEOGRAPH-3B2B	[FB80 BB2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_141)
{
    // 3B2B 0061;	
    // (㬫) CJK UNIFIED IDEOGRAPH-3B2B	[FB80 BB2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_142)
{
    // 3B2B 0041;	
    // (㬫) CJK UNIFIED IDEOGRAPH-3B2B	[FB80 BB2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B2B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_143)
{
    // 3B2B 0062;	
    // (㬫) CJK UNIFIED IDEOGRAPH-3B2B	[FB80 BB2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_144)
{
    // 3B2C 0021;	
    // (㬬) CJK UNIFIED IDEOGRAPH-3B2C	[FB80 BB2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_145)
{
    // 3B2C 003F;	
    // (㬬) CJK UNIFIED IDEOGRAPH-3B2C	[FB80 BB2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_146)
{
    // 3B2C 0061;	
    // (㬬) CJK UNIFIED IDEOGRAPH-3B2C	[FB80 BB2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_147)
{
    // 3B2C 0041;	
    // (㬬) CJK UNIFIED IDEOGRAPH-3B2C	[FB80 BB2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B2C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_148)
{
    // 3B2C 0062;	
    // (㬬) CJK UNIFIED IDEOGRAPH-3B2C	[FB80 BB2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_149)
{
    // 3B2D 0021;	
    // (㬭) CJK UNIFIED IDEOGRAPH-3B2D	[FB80 BB2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_150)
{
    // 3B2D 003F;	
    // (㬭) CJK UNIFIED IDEOGRAPH-3B2D	[FB80 BB2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_151)
{
    // 3B2D 0061;	
    // (㬭) CJK UNIFIED IDEOGRAPH-3B2D	[FB80 BB2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_152)
{
    // 3B2D 0041;	
    // (㬭) CJK UNIFIED IDEOGRAPH-3B2D	[FB80 BB2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B2D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_153)
{
    // 3B2D 0062;	
    // (㬭) CJK UNIFIED IDEOGRAPH-3B2D	[FB80 BB2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_154)
{
    // 3B2E 0021;	
    // (㬮) CJK UNIFIED IDEOGRAPH-3B2E	[FB80 BB2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_155)
{
    // 3B2E 003F;	
    // (㬮) CJK UNIFIED IDEOGRAPH-3B2E	[FB80 BB2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_156)
{
    // 3B2E 0061;	
    // (㬮) CJK UNIFIED IDEOGRAPH-3B2E	[FB80 BB2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_157)
{
    // 3B2E 0041;	
    // (㬮) CJK UNIFIED IDEOGRAPH-3B2E	[FB80 BB2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B2E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_158)
{
    // 3B2E 0062;	
    // (㬮) CJK UNIFIED IDEOGRAPH-3B2E	[FB80 BB2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_159)
{
    // 3B2F 0021;	
    // (㬯) CJK UNIFIED IDEOGRAPH-3B2F	[FB80 BB2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_160)
{
    // 3B2F 003F;	
    // (㬯) CJK UNIFIED IDEOGRAPH-3B2F	[FB80 BB2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_161)
{
    // 3B2F 0061;	
    // (㬯) CJK UNIFIED IDEOGRAPH-3B2F	[FB80 BB2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_162)
{
    // 3B2F 0041;	
    // (㬯) CJK UNIFIED IDEOGRAPH-3B2F	[FB80 BB2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B2F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_163)
{
    // 3B2F 0062;	
    // (㬯) CJK UNIFIED IDEOGRAPH-3B2F	[FB80 BB2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B2F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_164)
{
    // 3B30 0021;	
    // (㬰) CJK UNIFIED IDEOGRAPH-3B30	[FB80 BB30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B30, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_165)
{
    // 3B30 003F;	
    // (㬰) CJK UNIFIED IDEOGRAPH-3B30	[FB80 BB30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B30, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_166)
{
    // 3B30 0061;	
    // (㬰) CJK UNIFIED IDEOGRAPH-3B30	[FB80 BB30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B30, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_167)
{
    // 3B30 0041;	
    // (㬰) CJK UNIFIED IDEOGRAPH-3B30	[FB80 BB30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B30, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_168)
{
    // 3B30 0062;	
    // (㬰) CJK UNIFIED IDEOGRAPH-3B30	[FB80 BB30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B30, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_169)
{
    // 3B31 0021;	
    // (㬱) CJK UNIFIED IDEOGRAPH-3B31	[FB80 BB31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B31, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_170)
{
    // 3B31 003F;	
    // (㬱) CJK UNIFIED IDEOGRAPH-3B31	[FB80 BB31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B31, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_171)
{
    // 3B31 0061;	
    // (㬱) CJK UNIFIED IDEOGRAPH-3B31	[FB80 BB31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B31, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_172)
{
    // 3B31 0041;	
    // (㬱) CJK UNIFIED IDEOGRAPH-3B31	[FB80 BB31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B31, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_173)
{
    // 3B31 0062;	
    // (㬱) CJK UNIFIED IDEOGRAPH-3B31	[FB80 BB31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B31, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_174)
{
    // 3B32 0021;	
    // (㬲) CJK UNIFIED IDEOGRAPH-3B32	[FB80 BB32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B32, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_175)
{
    // 3B32 003F;	
    // (㬲) CJK UNIFIED IDEOGRAPH-3B32	[FB80 BB32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B32, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_176)
{
    // 3B32 0061;	
    // (㬲) CJK UNIFIED IDEOGRAPH-3B32	[FB80 BB32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B32, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_177)
{
    // 3B32 0041;	
    // (㬲) CJK UNIFIED IDEOGRAPH-3B32	[FB80 BB32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B32, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_178)
{
    // 3B32 0062;	
    // (㬲) CJK UNIFIED IDEOGRAPH-3B32	[FB80 BB32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B32, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_179)
{
    // 3B33 0021;	
    // (㬳) CJK UNIFIED IDEOGRAPH-3B33	[FB80 BB33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B33, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_180)
{
    // 3B33 003F;	
    // (㬳) CJK UNIFIED IDEOGRAPH-3B33	[FB80 BB33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B33, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_181)
{
    // 3B33 0061;	
    // (㬳) CJK UNIFIED IDEOGRAPH-3B33	[FB80 BB33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B33, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_182)
{
    // 3B33 0041;	
    // (㬳) CJK UNIFIED IDEOGRAPH-3B33	[FB80 BB33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B33, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_183)
{
    // 3B33 0062;	
    // (㬳) CJK UNIFIED IDEOGRAPH-3B33	[FB80 BB33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B33, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_184)
{
    // 3B34 0021;	
    // (㬴) CJK UNIFIED IDEOGRAPH-3B34	[FB80 BB34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B34, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_185)
{
    // 3B34 003F;	
    // (㬴) CJK UNIFIED IDEOGRAPH-3B34	[FB80 BB34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B34, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_186)
{
    // 3B34 0061;	
    // (㬴) CJK UNIFIED IDEOGRAPH-3B34	[FB80 BB34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B34, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_187)
{
    // 3B34 0041;	
    // (㬴) CJK UNIFIED IDEOGRAPH-3B34	[FB80 BB34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B34, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_188)
{
    // 3B34 0062;	
    // (㬴) CJK UNIFIED IDEOGRAPH-3B34	[FB80 BB34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B34, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_189)
{
    // 3B35 0021;	
    // (㬵) CJK UNIFIED IDEOGRAPH-3B35	[FB80 BB35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B35, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_190)
{
    // 3B35 003F;	
    // (㬵) CJK UNIFIED IDEOGRAPH-3B35	[FB80 BB35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B35, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_191)
{
    // 3B35 0061;	
    // (㬵) CJK UNIFIED IDEOGRAPH-3B35	[FB80 BB35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B35, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_192)
{
    // 3B35 0041;	
    // (㬵) CJK UNIFIED IDEOGRAPH-3B35	[FB80 BB35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B35, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_193)
{
    // 3B35 0062;	
    // (㬵) CJK UNIFIED IDEOGRAPH-3B35	[FB80 BB35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B35, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_194)
{
    // 3B36 0021;	
    // (㬶) CJK UNIFIED IDEOGRAPH-3B36	[FB80 BB36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B36, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_195)
{
    // 3B36 003F;	
    // (㬶) CJK UNIFIED IDEOGRAPH-3B36	[FB80 BB36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B36, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_196)
{
    // 3B36 0061;	
    // (㬶) CJK UNIFIED IDEOGRAPH-3B36	[FB80 BB36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B36, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_197)
{
    // 3B36 0041;	
    // (㬶) CJK UNIFIED IDEOGRAPH-3B36	[FB80 BB36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B36, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_198)
{
    // 3B36 0062;	
    // (㬶) CJK UNIFIED IDEOGRAPH-3B36	[FB80 BB36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B36, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_199)
{
    // 3B37 0021;	
    // (㬷) CJK UNIFIED IDEOGRAPH-3B37	[FB80 BB37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B37, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_200)
{
    // 3B37 003F;	
    // (㬷) CJK UNIFIED IDEOGRAPH-3B37	[FB80 BB37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B37, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_201)
{
    // 3B37 0061;	
    // (㬷) CJK UNIFIED IDEOGRAPH-3B37	[FB80 BB37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B37, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_202)
{
    // 3B37 0041;	
    // (㬷) CJK UNIFIED IDEOGRAPH-3B37	[FB80 BB37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B37, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_203)
{
    // 3B37 0062;	
    // (㬷) CJK UNIFIED IDEOGRAPH-3B37	[FB80 BB37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B37, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_204)
{
    // 3B38 0021;	
    // (㬸) CJK UNIFIED IDEOGRAPH-3B38	[FB80 BB38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B38, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_205)
{
    // 3B38 003F;	
    // (㬸) CJK UNIFIED IDEOGRAPH-3B38	[FB80 BB38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B38, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_206)
{
    // 3B38 0061;	
    // (㬸) CJK UNIFIED IDEOGRAPH-3B38	[FB80 BB38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B38, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_207)
{
    // 3B38 0041;	
    // (㬸) CJK UNIFIED IDEOGRAPH-3B38	[FB80 BB38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B38, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_208)
{
    // 3B38 0062;	
    // (㬸) CJK UNIFIED IDEOGRAPH-3B38	[FB80 BB38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B38, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_209)
{
    // 3B39 0021;	
    // (㬹) CJK UNIFIED IDEOGRAPH-3B39	[FB80 BB39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B39, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_210)
{
    // 3B39 003F;	
    // (㬹) CJK UNIFIED IDEOGRAPH-3B39	[FB80 BB39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B39, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_211)
{
    // 3B39 0061;	
    // (㬹) CJK UNIFIED IDEOGRAPH-3B39	[FB80 BB39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B39, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_212)
{
    // 3B39 0041;	
    // (㬹) CJK UNIFIED IDEOGRAPH-3B39	[FB80 BB39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B39, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_213)
{
    // 3B39 0062;	
    // (㬹) CJK UNIFIED IDEOGRAPH-3B39	[FB80 BB39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B39, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_214)
{
    // 3B3A 0021;	
    // (㬺) CJK UNIFIED IDEOGRAPH-3B3A	[FB80 BB3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_215)
{
    // 3B3A 003F;	
    // (㬺) CJK UNIFIED IDEOGRAPH-3B3A	[FB80 BB3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_216)
{
    // 3B3A 0061;	
    // (㬺) CJK UNIFIED IDEOGRAPH-3B3A	[FB80 BB3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_217)
{
    // 3B3A 0041;	
    // (㬺) CJK UNIFIED IDEOGRAPH-3B3A	[FB80 BB3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B3A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_218)
{
    // 3B3A 0062;	
    // (㬺) CJK UNIFIED IDEOGRAPH-3B3A	[FB80 BB3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_219)
{
    // 3B3B 0021;	
    // (㬻) CJK UNIFIED IDEOGRAPH-3B3B	[FB80 BB3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_220)
{
    // 3B3B 003F;	
    // (㬻) CJK UNIFIED IDEOGRAPH-3B3B	[FB80 BB3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_221)
{
    // 3B3B 0061;	
    // (㬻) CJK UNIFIED IDEOGRAPH-3B3B	[FB80 BB3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_222)
{
    // 3B3B 0041;	
    // (㬻) CJK UNIFIED IDEOGRAPH-3B3B	[FB80 BB3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B3B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_223)
{
    // 3B3B 0062;	
    // (㬻) CJK UNIFIED IDEOGRAPH-3B3B	[FB80 BB3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_224)
{
    // 3B3C 0021;	
    // (㬼) CJK UNIFIED IDEOGRAPH-3B3C	[FB80 BB3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_225)
{
    // 3B3C 003F;	
    // (㬼) CJK UNIFIED IDEOGRAPH-3B3C	[FB80 BB3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_226)
{
    // 3B3C 0061;	
    // (㬼) CJK UNIFIED IDEOGRAPH-3B3C	[FB80 BB3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_227)
{
    // 3B3C 0041;	
    // (㬼) CJK UNIFIED IDEOGRAPH-3B3C	[FB80 BB3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B3C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_228)
{
    // 3B3C 0062;	
    // (㬼) CJK UNIFIED IDEOGRAPH-3B3C	[FB80 BB3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_229)
{
    // 3B3D 0021;	
    // (㬽) CJK UNIFIED IDEOGRAPH-3B3D	[FB80 BB3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_230)
{
    // 3B3D 003F;	
    // (㬽) CJK UNIFIED IDEOGRAPH-3B3D	[FB80 BB3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_231)
{
    // 3B3D 0061;	
    // (㬽) CJK UNIFIED IDEOGRAPH-3B3D	[FB80 BB3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_232)
{
    // 3B3D 0041;	
    // (㬽) CJK UNIFIED IDEOGRAPH-3B3D	[FB80 BB3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B3D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_233)
{
    // 3B3D 0062;	
    // (㬽) CJK UNIFIED IDEOGRAPH-3B3D	[FB80 BB3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_234)
{
    // 3B3E 0021;	
    // (㬾) CJK UNIFIED IDEOGRAPH-3B3E	[FB80 BB3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_235)
{
    // 3B3E 003F;	
    // (㬾) CJK UNIFIED IDEOGRAPH-3B3E	[FB80 BB3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_236)
{
    // 3B3E 0061;	
    // (㬾) CJK UNIFIED IDEOGRAPH-3B3E	[FB80 BB3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_237)
{
    // 3B3E 0041;	
    // (㬾) CJK UNIFIED IDEOGRAPH-3B3E	[FB80 BB3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B3E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_238)
{
    // 3B3E 0062;	
    // (㬾) CJK UNIFIED IDEOGRAPH-3B3E	[FB80 BB3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_239)
{
    // 3B3F 0021;	
    // (㬿) CJK UNIFIED IDEOGRAPH-3B3F	[FB80 BB3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_240)
{
    // 3B3F 003F;	
    // (㬿) CJK UNIFIED IDEOGRAPH-3B3F	[FB80 BB3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_241)
{
    // 3B3F 0061;	
    // (㬿) CJK UNIFIED IDEOGRAPH-3B3F	[FB80 BB3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_242)
{
    // 3B3F 0041;	
    // (㬿) CJK UNIFIED IDEOGRAPH-3B3F	[FB80 BB3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B3F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_243)
{
    // 3B3F 0062;	
    // (㬿) CJK UNIFIED IDEOGRAPH-3B3F	[FB80 BB3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B3F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_244)
{
    // 3B40 0021;	
    // (㭀) CJK UNIFIED IDEOGRAPH-3B40	[FB80 BB40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B40, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_245)
{
    // 3B40 003F;	
    // (㭀) CJK UNIFIED IDEOGRAPH-3B40	[FB80 BB40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B40, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_246)
{
    // 3B40 0061;	
    // (㭀) CJK UNIFIED IDEOGRAPH-3B40	[FB80 BB40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B40, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_247)
{
    // 3B40 0041;	
    // (㭀) CJK UNIFIED IDEOGRAPH-3B40	[FB80 BB40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B40, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_248)
{
    // 3B40 0062;	
    // (㭀) CJK UNIFIED IDEOGRAPH-3B40	[FB80 BB40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B40, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_249)
{
    // 3B41 0021;	
    // (㭁) CJK UNIFIED IDEOGRAPH-3B41	[FB80 BB41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B41, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_250)
{
    // 3B41 003F;	
    // (㭁) CJK UNIFIED IDEOGRAPH-3B41	[FB80 BB41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B41, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_251)
{
    // 3B41 0061;	
    // (㭁) CJK UNIFIED IDEOGRAPH-3B41	[FB80 BB41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B41, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_252)
{
    // 3B41 0041;	
    // (㭁) CJK UNIFIED IDEOGRAPH-3B41	[FB80 BB41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B41, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_253)
{
    // 3B41 0062;	
    // (㭁) CJK UNIFIED IDEOGRAPH-3B41	[FB80 BB41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B41, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_254)
{
    // 3B42 0021;	
    // (㭂) CJK UNIFIED IDEOGRAPH-3B42	[FB80 BB42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B42, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_255)
{
    // 3B42 003F;	
    // (㭂) CJK UNIFIED IDEOGRAPH-3B42	[FB80 BB42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B42, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_256)
{
    // 3B42 0061;	
    // (㭂) CJK UNIFIED IDEOGRAPH-3B42	[FB80 BB42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B42, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_257)
{
    // 3B42 0041;	
    // (㭂) CJK UNIFIED IDEOGRAPH-3B42	[FB80 BB42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B42, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_258)
{
    // 3B42 0062;	
    // (㭂) CJK UNIFIED IDEOGRAPH-3B42	[FB80 BB42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B42, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_259)
{
    // 3B43 0021;	
    // (㭃) CJK UNIFIED IDEOGRAPH-3B43	[FB80 BB43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B43, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_260)
{
    // 3B43 003F;	
    // (㭃) CJK UNIFIED IDEOGRAPH-3B43	[FB80 BB43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B43, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_261)
{
    // 3B43 0061;	
    // (㭃) CJK UNIFIED IDEOGRAPH-3B43	[FB80 BB43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B43, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_262)
{
    // 3B43 0041;	
    // (㭃) CJK UNIFIED IDEOGRAPH-3B43	[FB80 BB43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B43, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_263)
{
    // 3B43 0062;	
    // (㭃) CJK UNIFIED IDEOGRAPH-3B43	[FB80 BB43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B43, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_264)
{
    // 3B44 0021;	
    // (㭄) CJK UNIFIED IDEOGRAPH-3B44	[FB80 BB44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B44, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_265)
{
    // 3B44 003F;	
    // (㭄) CJK UNIFIED IDEOGRAPH-3B44	[FB80 BB44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B44, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_266)
{
    // 3B44 0061;	
    // (㭄) CJK UNIFIED IDEOGRAPH-3B44	[FB80 BB44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B44, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_267)
{
    // 3B44 0041;	
    // (㭄) CJK UNIFIED IDEOGRAPH-3B44	[FB80 BB44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B44, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_268)
{
    // 3B44 0062;	
    // (㭄) CJK UNIFIED IDEOGRAPH-3B44	[FB80 BB44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B44, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_269)
{
    // 3B45 0021;	
    // (㭅) CJK UNIFIED IDEOGRAPH-3B45	[FB80 BB45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B45, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_270)
{
    // 3B45 003F;	
    // (㭅) CJK UNIFIED IDEOGRAPH-3B45	[FB80 BB45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B45, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_271)
{
    // 3B45 0061;	
    // (㭅) CJK UNIFIED IDEOGRAPH-3B45	[FB80 BB45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B45, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_272)
{
    // 3B45 0041;	
    // (㭅) CJK UNIFIED IDEOGRAPH-3B45	[FB80 BB45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B45, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_273)
{
    // 3B45 0062;	
    // (㭅) CJK UNIFIED IDEOGRAPH-3B45	[FB80 BB45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B45, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_274)
{
    // 3B46 0021;	
    // (㭆) CJK UNIFIED IDEOGRAPH-3B46	[FB80 BB46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B46, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_275)
{
    // 3B46 003F;	
    // (㭆) CJK UNIFIED IDEOGRAPH-3B46	[FB80 BB46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B46, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_276)
{
    // 3B46 0061;	
    // (㭆) CJK UNIFIED IDEOGRAPH-3B46	[FB80 BB46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B46, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_277)
{
    // 3B46 0041;	
    // (㭆) CJK UNIFIED IDEOGRAPH-3B46	[FB80 BB46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B46, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_278)
{
    // 3B46 0062;	
    // (㭆) CJK UNIFIED IDEOGRAPH-3B46	[FB80 BB46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B46, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_279)
{
    // 3B47 0021;	
    // (㭇) CJK UNIFIED IDEOGRAPH-3B47	[FB80 BB47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B47, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_280)
{
    // 3B47 003F;	
    // (㭇) CJK UNIFIED IDEOGRAPH-3B47	[FB80 BB47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B47, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_281)
{
    // 3B47 0061;	
    // (㭇) CJK UNIFIED IDEOGRAPH-3B47	[FB80 BB47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B47, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_282)
{
    // 3B47 0041;	
    // (㭇) CJK UNIFIED IDEOGRAPH-3B47	[FB80 BB47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B47, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_283)
{
    // 3B47 0062;	
    // (㭇) CJK UNIFIED IDEOGRAPH-3B47	[FB80 BB47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B47, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_284)
{
    // 3B48 0021;	
    // (㭈) CJK UNIFIED IDEOGRAPH-3B48	[FB80 BB48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B48, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_285)
{
    // 3B48 003F;	
    // (㭈) CJK UNIFIED IDEOGRAPH-3B48	[FB80 BB48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B48, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_286)
{
    // 3B48 0061;	
    // (㭈) CJK UNIFIED IDEOGRAPH-3B48	[FB80 BB48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B48, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_287)
{
    // 3B48 0041;	
    // (㭈) CJK UNIFIED IDEOGRAPH-3B48	[FB80 BB48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B48, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_288)
{
    // 3B48 0062;	
    // (㭈) CJK UNIFIED IDEOGRAPH-3B48	[FB80 BB48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B48, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_289)
{
    // 3B49 0021;	
    // (㭉) CJK UNIFIED IDEOGRAPH-3B49	[FB80 BB49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B49, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_290)
{
    // 2F8DE 0021;	
    // (㭉) CJK COMPATIBILITY IDEOGRAPH-2F8DE	[FB80 BB49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_291)
{
    // 3B49 003F;	
    // (㭉) CJK UNIFIED IDEOGRAPH-3B49	[FB80 BB49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B49, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_292)
{
    // 2F8DE 003F;	
    // (㭉) CJK COMPATIBILITY IDEOGRAPH-2F8DE	[FB80 BB49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_293)
{
    // 3B49 0061;	
    // (㭉) CJK UNIFIED IDEOGRAPH-3B49	[FB80 BB49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B49, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_294)
{
    // 2F8DE 0061;	
    // (㭉) CJK COMPATIBILITY IDEOGRAPH-2F8DE	[FB80 BB49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_295)
{
    // 3B49 0041;	
    // (㭉) CJK UNIFIED IDEOGRAPH-3B49	[FB80 BB49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B49, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_296)
{
    // 2F8DE 0041;	
    // (㭉) CJK COMPATIBILITY IDEOGRAPH-2F8DE	[FB80 BB49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_297)
{
    // 3B49 0062;	
    // (㭉) CJK UNIFIED IDEOGRAPH-3B49	[FB80 BB49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B49, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_298)
{
    // 2F8DE 0062;	
    // (㭉) CJK COMPATIBILITY IDEOGRAPH-2F8DE	[FB80 BB49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_299)
{
    // 3B4A 0021;	
    // (㭊) CJK UNIFIED IDEOGRAPH-3B4A	[FB80 BB4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_300)
{
    // 3B4A 003F;	
    // (㭊) CJK UNIFIED IDEOGRAPH-3B4A	[FB80 BB4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_301)
{
    // 3B4A 0061;	
    // (㭊) CJK UNIFIED IDEOGRAPH-3B4A	[FB80 BB4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_302)
{
    // 3B4A 0041;	
    // (㭊) CJK UNIFIED IDEOGRAPH-3B4A	[FB80 BB4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B4A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_303)
{
    // 3B4A 0062;	
    // (㭊) CJK UNIFIED IDEOGRAPH-3B4A	[FB80 BB4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_304)
{
    // 3B4B 0021;	
    // (㭋) CJK UNIFIED IDEOGRAPH-3B4B	[FB80 BB4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_305)
{
    // 3B4B 003F;	
    // (㭋) CJK UNIFIED IDEOGRAPH-3B4B	[FB80 BB4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_306)
{
    // 3B4B 0061;	
    // (㭋) CJK UNIFIED IDEOGRAPH-3B4B	[FB80 BB4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_307)
{
    // 3B4B 0041;	
    // (㭋) CJK UNIFIED IDEOGRAPH-3B4B	[FB80 BB4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B4B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_308)
{
    // 3B4B 0062;	
    // (㭋) CJK UNIFIED IDEOGRAPH-3B4B	[FB80 BB4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_309)
{
    // 3B4C 0021;	
    // (㭌) CJK UNIFIED IDEOGRAPH-3B4C	[FB80 BB4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_310)
{
    // 3B4C 003F;	
    // (㭌) CJK UNIFIED IDEOGRAPH-3B4C	[FB80 BB4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_311)
{
    // 3B4C 0061;	
    // (㭌) CJK UNIFIED IDEOGRAPH-3B4C	[FB80 BB4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_312)
{
    // 3B4C 0041;	
    // (㭌) CJK UNIFIED IDEOGRAPH-3B4C	[FB80 BB4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B4C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_313)
{
    // 3B4C 0062;	
    // (㭌) CJK UNIFIED IDEOGRAPH-3B4C	[FB80 BB4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_314)
{
    // 3B4D 0021;	
    // (㭍) CJK UNIFIED IDEOGRAPH-3B4D	[FB80 BB4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_315)
{
    // 3B4D 003F;	
    // (㭍) CJK UNIFIED IDEOGRAPH-3B4D	[FB80 BB4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_316)
{
    // 3B4D 0061;	
    // (㭍) CJK UNIFIED IDEOGRAPH-3B4D	[FB80 BB4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_317)
{
    // 3B4D 0041;	
    // (㭍) CJK UNIFIED IDEOGRAPH-3B4D	[FB80 BB4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B4D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_318)
{
    // 3B4D 0062;	
    // (㭍) CJK UNIFIED IDEOGRAPH-3B4D	[FB80 BB4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_319)
{
    // 3B4E 0021;	
    // (㭎) CJK UNIFIED IDEOGRAPH-3B4E	[FB80 BB4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_320)
{
    // 3B4E 003F;	
    // (㭎) CJK UNIFIED IDEOGRAPH-3B4E	[FB80 BB4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_321)
{
    // 3B4E 0061;	
    // (㭎) CJK UNIFIED IDEOGRAPH-3B4E	[FB80 BB4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_322)
{
    // 3B4E 0041;	
    // (㭎) CJK UNIFIED IDEOGRAPH-3B4E	[FB80 BB4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B4E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_323)
{
    // 3B4E 0062;	
    // (㭎) CJK UNIFIED IDEOGRAPH-3B4E	[FB80 BB4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_324)
{
    // 3B4F 0021;	
    // (㭏) CJK UNIFIED IDEOGRAPH-3B4F	[FB80 BB4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_325)
{
    // 3B4F 003F;	
    // (㭏) CJK UNIFIED IDEOGRAPH-3B4F	[FB80 BB4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_326)
{
    // 3B4F 0061;	
    // (㭏) CJK UNIFIED IDEOGRAPH-3B4F	[FB80 BB4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_327)
{
    // 3B4F 0041;	
    // (㭏) CJK UNIFIED IDEOGRAPH-3B4F	[FB80 BB4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B4F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_328)
{
    // 3B4F 0062;	
    // (㭏) CJK UNIFIED IDEOGRAPH-3B4F	[FB80 BB4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B4F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_329)
{
    // 3B50 0021;	
    // (㭐) CJK UNIFIED IDEOGRAPH-3B50	[FB80 BB50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B50, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_330)
{
    // 3B50 003F;	
    // (㭐) CJK UNIFIED IDEOGRAPH-3B50	[FB80 BB50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B50, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_331)
{
    // 3B50 0061;	
    // (㭐) CJK UNIFIED IDEOGRAPH-3B50	[FB80 BB50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B50, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_332)
{
    // 3B50 0041;	
    // (㭐) CJK UNIFIED IDEOGRAPH-3B50	[FB80 BB50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B50, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_333)
{
    // 3B50 0062;	
    // (㭐) CJK UNIFIED IDEOGRAPH-3B50	[FB80 BB50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B50, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_334)
{
    // 3B51 0021;	
    // (㭑) CJK UNIFIED IDEOGRAPH-3B51	[FB80 BB51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B51, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_335)
{
    // 3B51 003F;	
    // (㭑) CJK UNIFIED IDEOGRAPH-3B51	[FB80 BB51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B51, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_336)
{
    // 3B51 0061;	
    // (㭑) CJK UNIFIED IDEOGRAPH-3B51	[FB80 BB51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B51, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_337)
{
    // 3B51 0041;	
    // (㭑) CJK UNIFIED IDEOGRAPH-3B51	[FB80 BB51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B51, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_338)
{
    // 3B51 0062;	
    // (㭑) CJK UNIFIED IDEOGRAPH-3B51	[FB80 BB51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B51, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_339)
{
    // 3B52 0021;	
    // (㭒) CJK UNIFIED IDEOGRAPH-3B52	[FB80 BB52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B52, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_340)
{
    // 3B52 003F;	
    // (㭒) CJK UNIFIED IDEOGRAPH-3B52	[FB80 BB52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B52, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_341)
{
    // 3B52 0061;	
    // (㭒) CJK UNIFIED IDEOGRAPH-3B52	[FB80 BB52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B52, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_342)
{
    // 3B52 0041;	
    // (㭒) CJK UNIFIED IDEOGRAPH-3B52	[FB80 BB52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B52, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_343)
{
    // 3B52 0062;	
    // (㭒) CJK UNIFIED IDEOGRAPH-3B52	[FB80 BB52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B52, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_344)
{
    // 3B53 0021;	
    // (㭓) CJK UNIFIED IDEOGRAPH-3B53	[FB80 BB53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B53, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_345)
{
    // 3B53 003F;	
    // (㭓) CJK UNIFIED IDEOGRAPH-3B53	[FB80 BB53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B53, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_346)
{
    // 3B53 0061;	
    // (㭓) CJK UNIFIED IDEOGRAPH-3B53	[FB80 BB53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B53, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_347)
{
    // 3B53 0041;	
    // (㭓) CJK UNIFIED IDEOGRAPH-3B53	[FB80 BB53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B53, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_348)
{
    // 3B53 0062;	
    // (㭓) CJK UNIFIED IDEOGRAPH-3B53	[FB80 BB53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B53, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_349)
{
    // 3B54 0021;	
    // (㭔) CJK UNIFIED IDEOGRAPH-3B54	[FB80 BB54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B54, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_350)
{
    // 3B54 003F;	
    // (㭔) CJK UNIFIED IDEOGRAPH-3B54	[FB80 BB54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B54, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_351)
{
    // 3B54 0061;	
    // (㭔) CJK UNIFIED IDEOGRAPH-3B54	[FB80 BB54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B54, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_352)
{
    // 3B54 0041;	
    // (㭔) CJK UNIFIED IDEOGRAPH-3B54	[FB80 BB54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B54, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_353)
{
    // 3B54 0062;	
    // (㭔) CJK UNIFIED IDEOGRAPH-3B54	[FB80 BB54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B54, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_354)
{
    // 3B55 0021;	
    // (㭕) CJK UNIFIED IDEOGRAPH-3B55	[FB80 BB55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B55, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_355)
{
    // 3B55 003F;	
    // (㭕) CJK UNIFIED IDEOGRAPH-3B55	[FB80 BB55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B55, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_356)
{
    // 3B55 0061;	
    // (㭕) CJK UNIFIED IDEOGRAPH-3B55	[FB80 BB55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B55, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_357)
{
    // 3B55 0041;	
    // (㭕) CJK UNIFIED IDEOGRAPH-3B55	[FB80 BB55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B55, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_358)
{
    // 3B55 0062;	
    // (㭕) CJK UNIFIED IDEOGRAPH-3B55	[FB80 BB55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B55, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_359)
{
    // 3B56 0021;	
    // (㭖) CJK UNIFIED IDEOGRAPH-3B56	[FB80 BB56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B56, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_360)
{
    // 3B56 003F;	
    // (㭖) CJK UNIFIED IDEOGRAPH-3B56	[FB80 BB56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B56, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_361)
{
    // 3B56 0061;	
    // (㭖) CJK UNIFIED IDEOGRAPH-3B56	[FB80 BB56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B56, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_362)
{
    // 3B56 0041;	
    // (㭖) CJK UNIFIED IDEOGRAPH-3B56	[FB80 BB56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B56, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_363)
{
    // 3B56 0062;	
    // (㭖) CJK UNIFIED IDEOGRAPH-3B56	[FB80 BB56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B56, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_364)
{
    // 3B57 0021;	
    // (㭗) CJK UNIFIED IDEOGRAPH-3B57	[FB80 BB57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B57, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_365)
{
    // 3B57 003F;	
    // (㭗) CJK UNIFIED IDEOGRAPH-3B57	[FB80 BB57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B57, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_366)
{
    // 3B57 0061;	
    // (㭗) CJK UNIFIED IDEOGRAPH-3B57	[FB80 BB57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B57, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_367)
{
    // 3B57 0041;	
    // (㭗) CJK UNIFIED IDEOGRAPH-3B57	[FB80 BB57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B57, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_368)
{
    // 3B57 0062;	
    // (㭗) CJK UNIFIED IDEOGRAPH-3B57	[FB80 BB57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B57, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_369)
{
    // 3B58 0021;	
    // (㭘) CJK UNIFIED IDEOGRAPH-3B58	[FB80 BB58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B58, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_370)
{
    // 3B58 003F;	
    // (㭘) CJK UNIFIED IDEOGRAPH-3B58	[FB80 BB58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B58, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_371)
{
    // 3B58 0061;	
    // (㭘) CJK UNIFIED IDEOGRAPH-3B58	[FB80 BB58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B58, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_372)
{
    // 3B58 0041;	
    // (㭘) CJK UNIFIED IDEOGRAPH-3B58	[FB80 BB58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B58, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_373)
{
    // 3B58 0062;	
    // (㭘) CJK UNIFIED IDEOGRAPH-3B58	[FB80 BB58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B58, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_374)
{
    // 3B59 0021;	
    // (㭙) CJK UNIFIED IDEOGRAPH-3B59	[FB80 BB59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B59, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_375)
{
    // 3B59 003F;	
    // (㭙) CJK UNIFIED IDEOGRAPH-3B59	[FB80 BB59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B59, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_376)
{
    // 3B59 0061;	
    // (㭙) CJK UNIFIED IDEOGRAPH-3B59	[FB80 BB59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B59, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_377)
{
    // 3B59 0041;	
    // (㭙) CJK UNIFIED IDEOGRAPH-3B59	[FB80 BB59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B59, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_378)
{
    // 3B59 0062;	
    // (㭙) CJK UNIFIED IDEOGRAPH-3B59	[FB80 BB59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B59, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_379)
{
    // 3B5A 0021;	
    // (㭚) CJK UNIFIED IDEOGRAPH-3B5A	[FB80 BB5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_380)
{
    // 3B5A 003F;	
    // (㭚) CJK UNIFIED IDEOGRAPH-3B5A	[FB80 BB5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_381)
{
    // 3B5A 0061;	
    // (㭚) CJK UNIFIED IDEOGRAPH-3B5A	[FB80 BB5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_382)
{
    // 3B5A 0041;	
    // (㭚) CJK UNIFIED IDEOGRAPH-3B5A	[FB80 BB5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_383)
{
    // 3B5A 0062;	
    // (㭚) CJK UNIFIED IDEOGRAPH-3B5A	[FB80 BB5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_384)
{
    // 3B5B 0021;	
    // (㭛) CJK UNIFIED IDEOGRAPH-3B5B	[FB80 BB5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_385)
{
    // 3B5B 003F;	
    // (㭛) CJK UNIFIED IDEOGRAPH-3B5B	[FB80 BB5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_386)
{
    // 3B5B 0061;	
    // (㭛) CJK UNIFIED IDEOGRAPH-3B5B	[FB80 BB5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_387)
{
    // 3B5B 0041;	
    // (㭛) CJK UNIFIED IDEOGRAPH-3B5B	[FB80 BB5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_388)
{
    // 3B5B 0062;	
    // (㭛) CJK UNIFIED IDEOGRAPH-3B5B	[FB80 BB5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_389)
{
    // 3B5C 0021;	
    // (㭜) CJK UNIFIED IDEOGRAPH-3B5C	[FB80 BB5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_390)
{
    // 3B5C 003F;	
    // (㭜) CJK UNIFIED IDEOGRAPH-3B5C	[FB80 BB5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_391)
{
    // 3B5C 0061;	
    // (㭜) CJK UNIFIED IDEOGRAPH-3B5C	[FB80 BB5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_392)
{
    // 3B5C 0041;	
    // (㭜) CJK UNIFIED IDEOGRAPH-3B5C	[FB80 BB5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_393)
{
    // 3B5C 0062;	
    // (㭜) CJK UNIFIED IDEOGRAPH-3B5C	[FB80 BB5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_394)
{
    // 3B5D 0021;	
    // (㭝) CJK UNIFIED IDEOGRAPH-3B5D	[FB80 BB5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_395)
{
    // 3B5D 003F;	
    // (㭝) CJK UNIFIED IDEOGRAPH-3B5D	[FB80 BB5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_396)
{
    // 3B5D 0061;	
    // (㭝) CJK UNIFIED IDEOGRAPH-3B5D	[FB80 BB5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_397)
{
    // 3B5D 0041;	
    // (㭝) CJK UNIFIED IDEOGRAPH-3B5D	[FB80 BB5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_398)
{
    // 3B5D 0062;	
    // (㭝) CJK UNIFIED IDEOGRAPH-3B5D	[FB80 BB5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_399)
{
    // 3B5E 0021;	
    // (㭞) CJK UNIFIED IDEOGRAPH-3B5E	[FB80 BB5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_400)
{
    // 3B5E 003F;	
    // (㭞) CJK UNIFIED IDEOGRAPH-3B5E	[FB80 BB5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_401)
{
    // 3B5E 0061;	
    // (㭞) CJK UNIFIED IDEOGRAPH-3B5E	[FB80 BB5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_402)
{
    // 3B5E 0041;	
    // (㭞) CJK UNIFIED IDEOGRAPH-3B5E	[FB80 BB5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_403)
{
    // 3B5E 0062;	
    // (㭞) CJK UNIFIED IDEOGRAPH-3B5E	[FB80 BB5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_404)
{
    // 3B5F 0021;	
    // (㭟) CJK UNIFIED IDEOGRAPH-3B5F	[FB80 BB5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_405)
{
    // 3B5F 003F;	
    // (㭟) CJK UNIFIED IDEOGRAPH-3B5F	[FB80 BB5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_406)
{
    // 3B5F 0061;	
    // (㭟) CJK UNIFIED IDEOGRAPH-3B5F	[FB80 BB5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_407)
{
    // 3B5F 0041;	
    // (㭟) CJK UNIFIED IDEOGRAPH-3B5F	[FB80 BB5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_408)
{
    // 3B5F 0062;	
    // (㭟) CJK UNIFIED IDEOGRAPH-3B5F	[FB80 BB5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_409)
{
    // 3B60 0021;	
    // (㭠) CJK UNIFIED IDEOGRAPH-3B60	[FB80 BB60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B60, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_410)
{
    // 3B60 003F;	
    // (㭠) CJK UNIFIED IDEOGRAPH-3B60	[FB80 BB60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B60, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_411)
{
    // 3B60 0061;	
    // (㭠) CJK UNIFIED IDEOGRAPH-3B60	[FB80 BB60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B60, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_412)
{
    // 3B60 0041;	
    // (㭠) CJK UNIFIED IDEOGRAPH-3B60	[FB80 BB60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B60, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_413)
{
    // 3B60 0062;	
    // (㭠) CJK UNIFIED IDEOGRAPH-3B60	[FB80 BB60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B60, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_414)
{
    // 3B61 0021;	
    // (㭡) CJK UNIFIED IDEOGRAPH-3B61	[FB80 BB61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B61, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_415)
{
    // 3B61 003F;	
    // (㭡) CJK UNIFIED IDEOGRAPH-3B61	[FB80 BB61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B61, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_416)
{
    // 3B61 0061;	
    // (㭡) CJK UNIFIED IDEOGRAPH-3B61	[FB80 BB61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B61, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_417)
{
    // 3B61 0041;	
    // (㭡) CJK UNIFIED IDEOGRAPH-3B61	[FB80 BB61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B61, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_418)
{
    // 3B61 0062;	
    // (㭡) CJK UNIFIED IDEOGRAPH-3B61	[FB80 BB61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B61, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_419)
{
    // 3B62 0021;	
    // (㭢) CJK UNIFIED IDEOGRAPH-3B62	[FB80 BB62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B62, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_420)
{
    // 3B62 003F;	
    // (㭢) CJK UNIFIED IDEOGRAPH-3B62	[FB80 BB62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B62, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_421)
{
    // 3B62 0061;	
    // (㭢) CJK UNIFIED IDEOGRAPH-3B62	[FB80 BB62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B62, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_422)
{
    // 3B62 0041;	
    // (㭢) CJK UNIFIED IDEOGRAPH-3B62	[FB80 BB62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B62, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_423)
{
    // 3B62 0062;	
    // (㭢) CJK UNIFIED IDEOGRAPH-3B62	[FB80 BB62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B62, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_424)
{
    // 3B63 0021;	
    // (㭣) CJK UNIFIED IDEOGRAPH-3B63	[FB80 BB63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B63, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_425)
{
    // 3B63 003F;	
    // (㭣) CJK UNIFIED IDEOGRAPH-3B63	[FB80 BB63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B63, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_426)
{
    // 3B63 0061;	
    // (㭣) CJK UNIFIED IDEOGRAPH-3B63	[FB80 BB63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B63, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_427)
{
    // 3B63 0041;	
    // (㭣) CJK UNIFIED IDEOGRAPH-3B63	[FB80 BB63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B63, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_428)
{
    // 3B63 0062;	
    // (㭣) CJK UNIFIED IDEOGRAPH-3B63	[FB80 BB63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B63, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_429)
{
    // 3B64 0021;	
    // (㭤) CJK UNIFIED IDEOGRAPH-3B64	[FB80 BB64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B64, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_430)
{
    // 3B64 003F;	
    // (㭤) CJK UNIFIED IDEOGRAPH-3B64	[FB80 BB64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B64, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_431)
{
    // 3B64 0061;	
    // (㭤) CJK UNIFIED IDEOGRAPH-3B64	[FB80 BB64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B64, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_432)
{
    // 3B64 0041;	
    // (㭤) CJK UNIFIED IDEOGRAPH-3B64	[FB80 BB64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B64, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_433)
{
    // 3B64 0062;	
    // (㭤) CJK UNIFIED IDEOGRAPH-3B64	[FB80 BB64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B64, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_434)
{
    // 3B65 0021;	
    // (㭥) CJK UNIFIED IDEOGRAPH-3B65	[FB80 BB65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B65, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_435)
{
    // 3B65 003F;	
    // (㭥) CJK UNIFIED IDEOGRAPH-3B65	[FB80 BB65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B65, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_436)
{
    // 3B65 0061;	
    // (㭥) CJK UNIFIED IDEOGRAPH-3B65	[FB80 BB65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B65, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_437)
{
    // 3B65 0041;	
    // (㭥) CJK UNIFIED IDEOGRAPH-3B65	[FB80 BB65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B65, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_438)
{
    // 3B65 0062;	
    // (㭥) CJK UNIFIED IDEOGRAPH-3B65	[FB80 BB65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B65, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_439)
{
    // 3B66 0021;	
    // (㭦) CJK UNIFIED IDEOGRAPH-3B66	[FB80 BB66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B66, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_440)
{
    // 3B66 003F;	
    // (㭦) CJK UNIFIED IDEOGRAPH-3B66	[FB80 BB66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B66, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_441)
{
    // 3B66 0061;	
    // (㭦) CJK UNIFIED IDEOGRAPH-3B66	[FB80 BB66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B66, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_442)
{
    // 3B66 0041;	
    // (㭦) CJK UNIFIED IDEOGRAPH-3B66	[FB80 BB66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B66, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_443)
{
    // 3B66 0062;	
    // (㭦) CJK UNIFIED IDEOGRAPH-3B66	[FB80 BB66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B66, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_444)
{
    // 3B67 0021;	
    // (㭧) CJK UNIFIED IDEOGRAPH-3B67	[FB80 BB67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B67, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_445)
{
    // 3B67 003F;	
    // (㭧) CJK UNIFIED IDEOGRAPH-3B67	[FB80 BB67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B67, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_446)
{
    // 3B67 0061;	
    // (㭧) CJK UNIFIED IDEOGRAPH-3B67	[FB80 BB67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B67, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_447)
{
    // 3B67 0041;	
    // (㭧) CJK UNIFIED IDEOGRAPH-3B67	[FB80 BB67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B67, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_448)
{
    // 3B67 0062;	
    // (㭧) CJK UNIFIED IDEOGRAPH-3B67	[FB80 BB67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B67, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_449)
{
    // 3B68 0021;	
    // (㭨) CJK UNIFIED IDEOGRAPH-3B68	[FB80 BB68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B68, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_450)
{
    // 3B68 003F;	
    // (㭨) CJK UNIFIED IDEOGRAPH-3B68	[FB80 BB68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B68, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_451)
{
    // 3B68 0061;	
    // (㭨) CJK UNIFIED IDEOGRAPH-3B68	[FB80 BB68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B68, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_452)
{
    // 3B68 0041;	
    // (㭨) CJK UNIFIED IDEOGRAPH-3B68	[FB80 BB68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B68, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_453)
{
    // 3B68 0062;	
    // (㭨) CJK UNIFIED IDEOGRAPH-3B68	[FB80 BB68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B68, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_454)
{
    // 3B69 0021;	
    // (㭩) CJK UNIFIED IDEOGRAPH-3B69	[FB80 BB69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B69, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_455)
{
    // 3B69 003F;	
    // (㭩) CJK UNIFIED IDEOGRAPH-3B69	[FB80 BB69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B69, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_456)
{
    // 3B69 0061;	
    // (㭩) CJK UNIFIED IDEOGRAPH-3B69	[FB80 BB69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B69, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_457)
{
    // 3B69 0041;	
    // (㭩) CJK UNIFIED IDEOGRAPH-3B69	[FB80 BB69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B69, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_458)
{
    // 3B69 0062;	
    // (㭩) CJK UNIFIED IDEOGRAPH-3B69	[FB80 BB69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B69, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_459)
{
    // 3B6A 0021;	
    // (㭪) CJK UNIFIED IDEOGRAPH-3B6A	[FB80 BB6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_460)
{
    // 3B6A 003F;	
    // (㭪) CJK UNIFIED IDEOGRAPH-3B6A	[FB80 BB6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_461)
{
    // 3B6A 0061;	
    // (㭪) CJK UNIFIED IDEOGRAPH-3B6A	[FB80 BB6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_462)
{
    // 3B6A 0041;	
    // (㭪) CJK UNIFIED IDEOGRAPH-3B6A	[FB80 BB6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B6A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_463)
{
    // 3B6A 0062;	
    // (㭪) CJK UNIFIED IDEOGRAPH-3B6A	[FB80 BB6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_464)
{
    // 3B6B 0021;	
    // (㭫) CJK UNIFIED IDEOGRAPH-3B6B	[FB80 BB6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_465)
{
    // 3B6B 003F;	
    // (㭫) CJK UNIFIED IDEOGRAPH-3B6B	[FB80 BB6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_466)
{
    // 3B6B 0061;	
    // (㭫) CJK UNIFIED IDEOGRAPH-3B6B	[FB80 BB6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_467)
{
    // 3B6B 0041;	
    // (㭫) CJK UNIFIED IDEOGRAPH-3B6B	[FB80 BB6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B6B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_468)
{
    // 3B6B 0062;	
    // (㭫) CJK UNIFIED IDEOGRAPH-3B6B	[FB80 BB6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_469)
{
    // 3B6C 0021;	
    // (㭬) CJK UNIFIED IDEOGRAPH-3B6C	[FB80 BB6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_470)
{
    // 3B6C 003F;	
    // (㭬) CJK UNIFIED IDEOGRAPH-3B6C	[FB80 BB6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_471)
{
    // 3B6C 0061;	
    // (㭬) CJK UNIFIED IDEOGRAPH-3B6C	[FB80 BB6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_472)
{
    // 3B6C 0041;	
    // (㭬) CJK UNIFIED IDEOGRAPH-3B6C	[FB80 BB6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B6C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_473)
{
    // 3B6C 0062;	
    // (㭬) CJK UNIFIED IDEOGRAPH-3B6C	[FB80 BB6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_474)
{
    // 3B6D 0021;	
    // (㭭) CJK UNIFIED IDEOGRAPH-3B6D	[FB80 BB6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_475)
{
    // 3B6D 003F;	
    // (㭭) CJK UNIFIED IDEOGRAPH-3B6D	[FB80 BB6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_476)
{
    // 3B6D 0061;	
    // (㭭) CJK UNIFIED IDEOGRAPH-3B6D	[FB80 BB6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_477)
{
    // 3B6D 0041;	
    // (㭭) CJK UNIFIED IDEOGRAPH-3B6D	[FB80 BB6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B6D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_478)
{
    // 3B6D 0062;	
    // (㭭) CJK UNIFIED IDEOGRAPH-3B6D	[FB80 BB6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_479)
{
    // 3B6E 0021;	
    // (㭮) CJK UNIFIED IDEOGRAPH-3B6E	[FB80 BB6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_480)
{
    // 3B6E 003F;	
    // (㭮) CJK UNIFIED IDEOGRAPH-3B6E	[FB80 BB6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_481)
{
    // 3B6E 0061;	
    // (㭮) CJK UNIFIED IDEOGRAPH-3B6E	[FB80 BB6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_482)
{
    // 3B6E 0041;	
    // (㭮) CJK UNIFIED IDEOGRAPH-3B6E	[FB80 BB6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B6E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_483)
{
    // 3B6E 0062;	
    // (㭮) CJK UNIFIED IDEOGRAPH-3B6E	[FB80 BB6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_484)
{
    // 3B6F 0021;	
    // (㭯) CJK UNIFIED IDEOGRAPH-3B6F	[FB80 BB6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_485)
{
    // 3B6F 003F;	
    // (㭯) CJK UNIFIED IDEOGRAPH-3B6F	[FB80 BB6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_486)
{
    // 3B6F 0061;	
    // (㭯) CJK UNIFIED IDEOGRAPH-3B6F	[FB80 BB6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_487)
{
    // 3B6F 0041;	
    // (㭯) CJK UNIFIED IDEOGRAPH-3B6F	[FB80 BB6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B6F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_488)
{
    // 3B6F 0062;	
    // (㭯) CJK UNIFIED IDEOGRAPH-3B6F	[FB80 BB6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B6F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_489)
{
    // 3B70 0021;	
    // (㭰) CJK UNIFIED IDEOGRAPH-3B70	[FB80 BB70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B70, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_490)
{
    // 3B70 003F;	
    // (㭰) CJK UNIFIED IDEOGRAPH-3B70	[FB80 BB70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B70, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_491)
{
    // 3B70 0061;	
    // (㭰) CJK UNIFIED IDEOGRAPH-3B70	[FB80 BB70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B70, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_492)
{
    // 3B70 0041;	
    // (㭰) CJK UNIFIED IDEOGRAPH-3B70	[FB80 BB70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B70, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_493)
{
    // 3B70 0062;	
    // (㭰) CJK UNIFIED IDEOGRAPH-3B70	[FB80 BB70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B70, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_494)
{
    // 3B71 0021;	
    // (㭱) CJK UNIFIED IDEOGRAPH-3B71	[FB80 BB71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B71, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_495)
{
    // 3B71 003F;	
    // (㭱) CJK UNIFIED IDEOGRAPH-3B71	[FB80 BB71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B71, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_496)
{
    // 3B71 0061;	
    // (㭱) CJK UNIFIED IDEOGRAPH-3B71	[FB80 BB71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B71, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_497)
{
    // 3B71 0041;	
    // (㭱) CJK UNIFIED IDEOGRAPH-3B71	[FB80 BB71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B71, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_498)
{
    // 3B71 0062;	
    // (㭱) CJK UNIFIED IDEOGRAPH-3B71	[FB80 BB71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B71, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_345_499)
{
    // 3B72 0021;	
    // (㭲) CJK UNIFIED IDEOGRAPH-3B72	[FB80 BB72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B72, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

