
// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/table_serialization.hpp>
#include <boost/text/data/all.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

collation_table make_save_load_table()
{
    collation_table table =
        tailored_collation_table(
            data::hu::standard_collation_tailoring(),
            "hu::standard_collation_tailoring()", error, warning);
    save_table(table, "table.bin");
    return load_table("table.bin");
}
collation_table const & table()
{
    static collation_table retval = make_save_load_table();
    return retval;
}
TEST(tailoring, hu_standard_000_001)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0043),
        std::vector<uint32_t>{0x0063, 0x0073},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0063, 0x0073},
        std::vector<uint32_t>{0x0043, 0x0073},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0063, 0x0073},
        std::vector<uint32_t>{0x0043, 0x0073},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0043, 0x0073},
        std::vector<uint32_t>{0x0043, 0x0053},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0043, 0x0073},
        std::vector<uint32_t>{0x0043, 0x0053},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0044),
        std::vector<uint32_t>{0x0064, 0x007a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0064, 0x007a},
        std::vector<uint32_t>{0x0044, 0x007a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0064, 0x007a},
        std::vector<uint32_t>{0x0044, 0x007a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x007a},
        std::vector<uint32_t>{0x0044, 0x005a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x007a},
        std::vector<uint32_t>{0x0044, 0x005a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x005a},
        std::vector<uint32_t>{0x0064, 0x007a, 0x0073},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0064, 0x007a, 0x0073},
        std::vector<uint32_t>{0x0044, 0x007a, 0x0073},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0064, 0x007a, 0x0073},
        std::vector<uint32_t>{0x0044, 0x007a, 0x0073},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x007a, 0x0073},
        std::vector<uint32_t>{0x0044, 0x005a, 0x0053},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x007a, 0x0073},
        std::vector<uint32_t>{0x0044, 0x005a, 0x0053},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0047),
        std::vector<uint32_t>{0x0067, 0x0079},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0067, 0x0079},
        std::vector<uint32_t>{0x0047, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0067, 0x0079},
        std::vector<uint32_t>{0x0047, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0047, 0x0079},
        std::vector<uint32_t>{0x0047, 0x0059},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0047, 0x0079},
        std::vector<uint32_t>{0x0047, 0x0059},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x004c),
        std::vector<uint32_t>{0x006c, 0x0079},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x006c, 0x0079},
        std::vector<uint32_t>{0x004c, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x006c, 0x0079},
        std::vector<uint32_t>{0x004c, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004c, 0x0079},
        std::vector<uint32_t>{0x004c, 0x0059},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004c, 0x0079},
        std::vector<uint32_t>{0x004c, 0x0059},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x004e),
        std::vector<uint32_t>{0x006e, 0x0079},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x006e, 0x0079},
        std::vector<uint32_t>{0x004e, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x006e, 0x0079},
        std::vector<uint32_t>{0x004e, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004e, 0x0079},
        std::vector<uint32_t>{0x004e, 0x0059},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004e, 0x0079},
        std::vector<uint32_t>{0x004e, 0x0059},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0053),
        std::vector<uint32_t>{0x0073, 0x007a},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0073, 0x007a},
        std::vector<uint32_t>{0x0053, 0x007a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0073, 0x007a},
        std::vector<uint32_t>{0x0053, 0x007a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0053, 0x007a},
        std::vector<uint32_t>{0x0053, 0x005a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0053, 0x007a},
        std::vector<uint32_t>{0x0053, 0x005a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0054),
        std::vector<uint32_t>{0x0074, 0x0079},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0074, 0x0079},
        std::vector<uint32_t>{0x0054, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0074, 0x0079},
        std::vector<uint32_t>{0x0054, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0054, 0x0079},
        std::vector<uint32_t>{0x0054, 0x0059},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0054, 0x0079},
        std::vector<uint32_t>{0x0054, 0x0059},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x005a),
        std::vector<uint32_t>{0x007a, 0x0073},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x007a, 0x0073},
        std::vector<uint32_t>{0x005a, 0x0073},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x007a, 0x0073},
        std::vector<uint32_t>{0x005a, 0x0073},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x005a, 0x0073},
        std::vector<uint32_t>{0x005a, 0x0053},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x005a, 0x0073},
        std::vector<uint32_t>{0x005a, 0x0053},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x004f),
        std::vector<uint32_t>(1, 0x00f6),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00f6),
        std::vector<uint32_t>(1, 0x00d6),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00f6),
        std::vector<uint32_t>(1, 0x00d6),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00d6),
        std::vector<uint32_t>(1, 0x0151),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00d6),
        std::vector<uint32_t>(1, 0x0151),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0151),
        std::vector<uint32_t>(1, 0x0150),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0151),
        std::vector<uint32_t>(1, 0x0150),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0055),
        std::vector<uint32_t>(1, 0x00fc),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00fc),
        std::vector<uint32_t>(1, 0x00dc),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00fc),
        std::vector<uint32_t>(1, 0x00dc),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00dc),
        std::vector<uint32_t>(1, 0x0171),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00dc),
        std::vector<uint32_t>(1, 0x0171),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0171),
        std::vector<uint32_t>(1, 0x0170),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0171),
        std::vector<uint32_t>(1, 0x0170),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0063, 0x0073, 0x0063, 0x0073},
        std::vector<uint32_t>{0x0063, 0x0063, 0x0073},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0063, 0x0073, 0x0063, 0x0073},
        std::vector<uint32_t>{0x0063, 0x0063, 0x0073},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0043, 0x0073, 0x0063, 0x0073},
        std::vector<uint32_t>{0x0043, 0x0063, 0x0073},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0043, 0x0073, 0x0063, 0x0073},
        std::vector<uint32_t>{0x0043, 0x0063, 0x0073},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, hu_standard_000_002)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0043, 0x0053, 0x0043, 0x0053},
        std::vector<uint32_t>{0x0043, 0x0043, 0x0053},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0043, 0x0053, 0x0043, 0x0053},
        std::vector<uint32_t>{0x0043, 0x0043, 0x0053},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0064, 0x007a, 0x0064, 0x007a},
        std::vector<uint32_t>{0x0064, 0x0064, 0x007a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0064, 0x007a, 0x0064, 0x007a},
        std::vector<uint32_t>{0x0064, 0x0064, 0x007a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x007a, 0x0064, 0x007a},
        std::vector<uint32_t>{0x0044, 0x0064, 0x007a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x007a, 0x0064, 0x007a},
        std::vector<uint32_t>{0x0044, 0x0064, 0x007a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x005a, 0x0044, 0x005a},
        std::vector<uint32_t>{0x0044, 0x0044, 0x005a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x005a, 0x0044, 0x005a},
        std::vector<uint32_t>{0x0044, 0x0044, 0x005a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0064, 0x007a, 0x0073, 0x0064, 0x007a, 0x0073},
        std::vector<uint32_t>{0x0064, 0x0064, 0x007a, 0x0073},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0064, 0x007a, 0x0073, 0x0064, 0x007a, 0x0073},
        std::vector<uint32_t>{0x0064, 0x0064, 0x007a, 0x0073},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x007a, 0x0073, 0x0064, 0x007a, 0x0073},
        std::vector<uint32_t>{0x0044, 0x0064, 0x007a, 0x0073},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x007a, 0x0073, 0x0064, 0x007a, 0x0073},
        std::vector<uint32_t>{0x0044, 0x0064, 0x007a, 0x0073},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x005a, 0x0053, 0x0044, 0x005a, 0x0053},
        std::vector<uint32_t>{0x0044, 0x0044, 0x005a, 0x0053},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0044, 0x005a, 0x0053, 0x0044, 0x005a, 0x0053},
        std::vector<uint32_t>{0x0044, 0x0044, 0x005a, 0x0053},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0067, 0x0079, 0x0067, 0x0079},
        std::vector<uint32_t>{0x0067, 0x0067, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0067, 0x0079, 0x0067, 0x0079},
        std::vector<uint32_t>{0x0067, 0x0067, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0047, 0x0079, 0x0067, 0x0079},
        std::vector<uint32_t>{0x0047, 0x0067, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0047, 0x0079, 0x0067, 0x0079},
        std::vector<uint32_t>{0x0047, 0x0067, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0047, 0x0059, 0x0047, 0x0059},
        std::vector<uint32_t>{0x0047, 0x0047, 0x0059},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0047, 0x0059, 0x0047, 0x0059},
        std::vector<uint32_t>{0x0047, 0x0047, 0x0059},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x006c, 0x0079, 0x006c, 0x0079},
        std::vector<uint32_t>{0x006c, 0x006c, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x006c, 0x0079, 0x006c, 0x0079},
        std::vector<uint32_t>{0x006c, 0x006c, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004c, 0x0079, 0x006c, 0x0079},
        std::vector<uint32_t>{0x004c, 0x006c, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004c, 0x0079, 0x006c, 0x0079},
        std::vector<uint32_t>{0x004c, 0x006c, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004c, 0x0059, 0x004c, 0x0059},
        std::vector<uint32_t>{0x004c, 0x004c, 0x0059},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004c, 0x0059, 0x004c, 0x0059},
        std::vector<uint32_t>{0x004c, 0x004c, 0x0059},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x006e, 0x0079, 0x006e, 0x0079},
        std::vector<uint32_t>{0x006e, 0x006e, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x006e, 0x0079, 0x006e, 0x0079},
        std::vector<uint32_t>{0x006e, 0x006e, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004e, 0x0079, 0x006e, 0x0079},
        std::vector<uint32_t>{0x004e, 0x006e, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004e, 0x0079, 0x006e, 0x0079},
        std::vector<uint32_t>{0x004e, 0x006e, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004e, 0x0059, 0x004e, 0x0059},
        std::vector<uint32_t>{0x004e, 0x004e, 0x0059},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x004e, 0x0059, 0x004e, 0x0059},
        std::vector<uint32_t>{0x004e, 0x004e, 0x0059},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0073, 0x007a, 0x0073, 0x007a},
        std::vector<uint32_t>{0x0073, 0x0073, 0x007a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0073, 0x007a, 0x0073, 0x007a},
        std::vector<uint32_t>{0x0073, 0x0073, 0x007a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0053, 0x007a, 0x0073, 0x007a},
        std::vector<uint32_t>{0x0053, 0x0073, 0x007a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0053, 0x007a, 0x0073, 0x007a},
        std::vector<uint32_t>{0x0053, 0x0073, 0x007a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0053, 0x005a, 0x0053, 0x005a},
        std::vector<uint32_t>{0x0053, 0x0053, 0x005a},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0053, 0x005a, 0x0053, 0x005a},
        std::vector<uint32_t>{0x0053, 0x0053, 0x005a},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0074, 0x0079, 0x0074, 0x0079},
        std::vector<uint32_t>{0x0074, 0x0074, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0074, 0x0079, 0x0074, 0x0079},
        std::vector<uint32_t>{0x0074, 0x0074, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0054, 0x0079, 0x0074, 0x0079},
        std::vector<uint32_t>{0x0054, 0x0074, 0x0079},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0054, 0x0079, 0x0074, 0x0079},
        std::vector<uint32_t>{0x0054, 0x0074, 0x0079},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0054, 0x0059, 0x0054, 0x0059},
        std::vector<uint32_t>{0x0054, 0x0054, 0x0059},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0054, 0x0059, 0x0054, 0x0059},
        std::vector<uint32_t>{0x0054, 0x0054, 0x0059},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x007a, 0x0073, 0x007a, 0x0073},
        std::vector<uint32_t>{0x007a, 0x007a, 0x0073},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x007a, 0x0073, 0x007a, 0x0073},
        std::vector<uint32_t>{0x007a, 0x007a, 0x0073},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x005a, 0x0073, 0x007a, 0x0073},
        std::vector<uint32_t>{0x005a, 0x007a, 0x0073},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x005a, 0x0073, 0x007a, 0x0073},
        std::vector<uint32_t>{0x005a, 0x007a, 0x0073},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x005a, 0x0053, 0x005a, 0x0053},
        std::vector<uint32_t>{0x005a, 0x005a, 0x0053},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x005a, 0x0053, 0x005a, 0x0053},
        std::vector<uint32_t>{0x005a, 0x005a, 0x0053},
        table(), collation_strength::secondary),
        0);
}
