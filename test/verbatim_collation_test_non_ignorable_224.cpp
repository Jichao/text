// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_224_000)
{
    // 163C 0041;	
    // (ᘼ) CANADIAN SYLLABICS CARRIER TLE	[3753 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x163C, 0x0041 };
    uint32_t const ces[9] = { 0x3753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_001)
{
    // 163C 0062;	
    // (ᘼ) CANADIAN SYLLABICS CARRIER TLE	[3753 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163C, 0x0062 };
    uint32_t const ces[9] = { 0x3753, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_002)
{
    // 163D 0021;	
    // (ᘽ) CANADIAN SYLLABICS CARRIER TLEE	[3754 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163D, 0x0021 };
    uint32_t const ces[9] = { 0x3754, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_003)
{
    // 163D 003F;	
    // (ᘽ) CANADIAN SYLLABICS CARRIER TLEE	[3754 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163D, 0x003F };
    uint32_t const ces[9] = { 0x3754, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_004)
{
    // 163D 0061;	
    // (ᘽ) CANADIAN SYLLABICS CARRIER TLEE	[3754 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163D, 0x0061 };
    uint32_t const ces[9] = { 0x3754, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_005)
{
    // 163D 0041;	
    // (ᘽ) CANADIAN SYLLABICS CARRIER TLEE	[3754 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x163D, 0x0041 };
    uint32_t const ces[9] = { 0x3754, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_006)
{
    // 163D 0062;	
    // (ᘽ) CANADIAN SYLLABICS CARRIER TLEE	[3754 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163D, 0x0062 };
    uint32_t const ces[9] = { 0x3754, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_007)
{
    // 163E 0021;	
    // (ᘾ) CANADIAN SYLLABICS CARRIER TLI	[3755 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163E, 0x0021 };
    uint32_t const ces[9] = { 0x3755, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_008)
{
    // 163E 003F;	
    // (ᘾ) CANADIAN SYLLABICS CARRIER TLI	[3755 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163E, 0x003F };
    uint32_t const ces[9] = { 0x3755, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_009)
{
    // 163E 0061;	
    // (ᘾ) CANADIAN SYLLABICS CARRIER TLI	[3755 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163E, 0x0061 };
    uint32_t const ces[9] = { 0x3755, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_010)
{
    // 163E 0041;	
    // (ᘾ) CANADIAN SYLLABICS CARRIER TLI	[3755 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x163E, 0x0041 };
    uint32_t const ces[9] = { 0x3755, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_011)
{
    // 163E 0062;	
    // (ᘾ) CANADIAN SYLLABICS CARRIER TLI	[3755 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163E, 0x0062 };
    uint32_t const ces[9] = { 0x3755, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_012)
{
    // 163F 0021;	
    // (ᘿ) CANADIAN SYLLABICS CARRIER TLA	[3756 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163F, 0x0021 };
    uint32_t const ces[9] = { 0x3756, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_013)
{
    // 163F 003F;	
    // (ᘿ) CANADIAN SYLLABICS CARRIER TLA	[3756 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163F, 0x003F };
    uint32_t const ces[9] = { 0x3756, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_014)
{
    // 163F 0061;	
    // (ᘿ) CANADIAN SYLLABICS CARRIER TLA	[3756 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163F, 0x0061 };
    uint32_t const ces[9] = { 0x3756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_015)
{
    // 163F 0041;	
    // (ᘿ) CANADIAN SYLLABICS CARRIER TLA	[3756 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x163F, 0x0041 };
    uint32_t const ces[9] = { 0x3756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_016)
{
    // 163F 0062;	
    // (ᘿ) CANADIAN SYLLABICS CARRIER TLA	[3756 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x163F, 0x0062 };
    uint32_t const ces[9] = { 0x3756, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_017)
{
    // 1640 0021;	
    // (ᙀ) CANADIAN SYLLABICS CARRIER ZU	[3757 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1640, 0x0021 };
    uint32_t const ces[9] = { 0x3757, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_018)
{
    // 1640 003F;	
    // (ᙀ) CANADIAN SYLLABICS CARRIER ZU	[3757 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1640, 0x003F };
    uint32_t const ces[9] = { 0x3757, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_019)
{
    // 1640 0061;	
    // (ᙀ) CANADIAN SYLLABICS CARRIER ZU	[3757 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1640, 0x0061 };
    uint32_t const ces[9] = { 0x3757, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_020)
{
    // 1640 0041;	
    // (ᙀ) CANADIAN SYLLABICS CARRIER ZU	[3757 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1640, 0x0041 };
    uint32_t const ces[9] = { 0x3757, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_021)
{
    // 1640 0062;	
    // (ᙀ) CANADIAN SYLLABICS CARRIER ZU	[3757 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1640, 0x0062 };
    uint32_t const ces[9] = { 0x3757, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_022)
{
    // 1641 0021;	
    // (ᙁ) CANADIAN SYLLABICS CARRIER ZO	[3758 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1641, 0x0021 };
    uint32_t const ces[9] = { 0x3758, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_023)
{
    // 1641 003F;	
    // (ᙁ) CANADIAN SYLLABICS CARRIER ZO	[3758 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1641, 0x003F };
    uint32_t const ces[9] = { 0x3758, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_024)
{
    // 1641 0061;	
    // (ᙁ) CANADIAN SYLLABICS CARRIER ZO	[3758 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1641, 0x0061 };
    uint32_t const ces[9] = { 0x3758, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_025)
{
    // 1641 0041;	
    // (ᙁ) CANADIAN SYLLABICS CARRIER ZO	[3758 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1641, 0x0041 };
    uint32_t const ces[9] = { 0x3758, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_026)
{
    // 1641 0062;	
    // (ᙁ) CANADIAN SYLLABICS CARRIER ZO	[3758 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1641, 0x0062 };
    uint32_t const ces[9] = { 0x3758, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_027)
{
    // 1642 0021;	
    // (ᙂ) CANADIAN SYLLABICS CARRIER ZE	[3759 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1642, 0x0021 };
    uint32_t const ces[9] = { 0x3759, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_028)
{
    // 1642 003F;	
    // (ᙂ) CANADIAN SYLLABICS CARRIER ZE	[3759 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1642, 0x003F };
    uint32_t const ces[9] = { 0x3759, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_029)
{
    // 1642 0061;	
    // (ᙂ) CANADIAN SYLLABICS CARRIER ZE	[3759 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1642, 0x0061 };
    uint32_t const ces[9] = { 0x3759, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_030)
{
    // 1642 0041;	
    // (ᙂ) CANADIAN SYLLABICS CARRIER ZE	[3759 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1642, 0x0041 };
    uint32_t const ces[9] = { 0x3759, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_031)
{
    // 1642 0062;	
    // (ᙂ) CANADIAN SYLLABICS CARRIER ZE	[3759 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1642, 0x0062 };
    uint32_t const ces[9] = { 0x3759, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_032)
{
    // 1643 0021;	
    // (ᙃ) CANADIAN SYLLABICS CARRIER ZEE	[375A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1643, 0x0021 };
    uint32_t const ces[9] = { 0x375A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_033)
{
    // 1643 003F;	
    // (ᙃ) CANADIAN SYLLABICS CARRIER ZEE	[375A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1643, 0x003F };
    uint32_t const ces[9] = { 0x375A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_034)
{
    // 1643 0061;	
    // (ᙃ) CANADIAN SYLLABICS CARRIER ZEE	[375A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1643, 0x0061 };
    uint32_t const ces[9] = { 0x375A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_035)
{
    // 1643 0041;	
    // (ᙃ) CANADIAN SYLLABICS CARRIER ZEE	[375A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1643, 0x0041 };
    uint32_t const ces[9] = { 0x375A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_036)
{
    // 1643 0062;	
    // (ᙃ) CANADIAN SYLLABICS CARRIER ZEE	[375A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1643, 0x0062 };
    uint32_t const ces[9] = { 0x375A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_037)
{
    // 1644 0021;	
    // (ᙄ) CANADIAN SYLLABICS CARRIER ZI	[375B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1644, 0x0021 };
    uint32_t const ces[9] = { 0x375B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_038)
{
    // 1644 003F;	
    // (ᙄ) CANADIAN SYLLABICS CARRIER ZI	[375B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1644, 0x003F };
    uint32_t const ces[9] = { 0x375B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_039)
{
    // 1644 0061;	
    // (ᙄ) CANADIAN SYLLABICS CARRIER ZI	[375B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1644, 0x0061 };
    uint32_t const ces[9] = { 0x375B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_040)
{
    // 1644 0041;	
    // (ᙄ) CANADIAN SYLLABICS CARRIER ZI	[375B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1644, 0x0041 };
    uint32_t const ces[9] = { 0x375B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_041)
{
    // 1644 0062;	
    // (ᙄ) CANADIAN SYLLABICS CARRIER ZI	[375B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1644, 0x0062 };
    uint32_t const ces[9] = { 0x375B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_042)
{
    // 1645 0021;	
    // (ᙅ) CANADIAN SYLLABICS CARRIER ZA	[375C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1645, 0x0021 };
    uint32_t const ces[9] = { 0x375C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_043)
{
    // 1645 003F;	
    // (ᙅ) CANADIAN SYLLABICS CARRIER ZA	[375C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1645, 0x003F };
    uint32_t const ces[9] = { 0x375C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_044)
{
    // 1645 0061;	
    // (ᙅ) CANADIAN SYLLABICS CARRIER ZA	[375C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1645, 0x0061 };
    uint32_t const ces[9] = { 0x375C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_045)
{
    // 1645 0041;	
    // (ᙅ) CANADIAN SYLLABICS CARRIER ZA	[375C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1645, 0x0041 };
    uint32_t const ces[9] = { 0x375C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_046)
{
    // 1645 0062;	
    // (ᙅ) CANADIAN SYLLABICS CARRIER ZA	[375C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1645, 0x0062 };
    uint32_t const ces[9] = { 0x375C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_047)
{
    // 1646 0021;	
    // (ᙆ) CANADIAN SYLLABICS CARRIER Z	[375D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1646, 0x0021 };
    uint32_t const ces[9] = { 0x375D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_048)
{
    // 1646 003F;	
    // (ᙆ) CANADIAN SYLLABICS CARRIER Z	[375D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1646, 0x003F };
    uint32_t const ces[9] = { 0x375D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_049)
{
    // 1646 0061;	
    // (ᙆ) CANADIAN SYLLABICS CARRIER Z	[375D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1646, 0x0061 };
    uint32_t const ces[9] = { 0x375D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_050)
{
    // 1646 0041;	
    // (ᙆ) CANADIAN SYLLABICS CARRIER Z	[375D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1646, 0x0041 };
    uint32_t const ces[9] = { 0x375D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_051)
{
    // 1646 0062;	
    // (ᙆ) CANADIAN SYLLABICS CARRIER Z	[375D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1646, 0x0062 };
    uint32_t const ces[9] = { 0x375D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_052)
{
    // 1647 0021;	
    // (ᙇ) CANADIAN SYLLABICS CARRIER INITIAL Z	[375E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1647, 0x0021 };
    uint32_t const ces[9] = { 0x375E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_053)
{
    // 1647 003F;	
    // (ᙇ) CANADIAN SYLLABICS CARRIER INITIAL Z	[375E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1647, 0x003F };
    uint32_t const ces[9] = { 0x375E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_054)
{
    // 1647 0061;	
    // (ᙇ) CANADIAN SYLLABICS CARRIER INITIAL Z	[375E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1647, 0x0061 };
    uint32_t const ces[9] = { 0x375E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_055)
{
    // 1647 0041;	
    // (ᙇ) CANADIAN SYLLABICS CARRIER INITIAL Z	[375E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1647, 0x0041 };
    uint32_t const ces[9] = { 0x375E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_056)
{
    // 1647 0062;	
    // (ᙇ) CANADIAN SYLLABICS CARRIER INITIAL Z	[375E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1647, 0x0062 };
    uint32_t const ces[9] = { 0x375E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_057)
{
    // 1648 0021;	
    // (ᙈ) CANADIAN SYLLABICS CARRIER DZU	[375F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1648, 0x0021 };
    uint32_t const ces[9] = { 0x375F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_058)
{
    // 1648 003F;	
    // (ᙈ) CANADIAN SYLLABICS CARRIER DZU	[375F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1648, 0x003F };
    uint32_t const ces[9] = { 0x375F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_059)
{
    // 1648 0061;	
    // (ᙈ) CANADIAN SYLLABICS CARRIER DZU	[375F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1648, 0x0061 };
    uint32_t const ces[9] = { 0x375F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_060)
{
    // 1648 0041;	
    // (ᙈ) CANADIAN SYLLABICS CARRIER DZU	[375F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1648, 0x0041 };
    uint32_t const ces[9] = { 0x375F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_061)
{
    // 1648 0062;	
    // (ᙈ) CANADIAN SYLLABICS CARRIER DZU	[375F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1648, 0x0062 };
    uint32_t const ces[9] = { 0x375F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_062)
{
    // 1649 0021;	
    // (ᙉ) CANADIAN SYLLABICS CARRIER DZO	[3760 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1649, 0x0021 };
    uint32_t const ces[9] = { 0x3760, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_063)
{
    // 1649 003F;	
    // (ᙉ) CANADIAN SYLLABICS CARRIER DZO	[3760 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1649, 0x003F };
    uint32_t const ces[9] = { 0x3760, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_064)
{
    // 1649 0061;	
    // (ᙉ) CANADIAN SYLLABICS CARRIER DZO	[3760 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1649, 0x0061 };
    uint32_t const ces[9] = { 0x3760, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_065)
{
    // 1649 0041;	
    // (ᙉ) CANADIAN SYLLABICS CARRIER DZO	[3760 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1649, 0x0041 };
    uint32_t const ces[9] = { 0x3760, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_066)
{
    // 1649 0062;	
    // (ᙉ) CANADIAN SYLLABICS CARRIER DZO	[3760 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1649, 0x0062 };
    uint32_t const ces[9] = { 0x3760, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_067)
{
    // 164A 0021;	
    // (ᙊ) CANADIAN SYLLABICS CARRIER DZE	[3761 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164A, 0x0021 };
    uint32_t const ces[9] = { 0x3761, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_068)
{
    // 164A 003F;	
    // (ᙊ) CANADIAN SYLLABICS CARRIER DZE	[3761 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164A, 0x003F };
    uint32_t const ces[9] = { 0x3761, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_069)
{
    // 164A 0061;	
    // (ᙊ) CANADIAN SYLLABICS CARRIER DZE	[3761 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164A, 0x0061 };
    uint32_t const ces[9] = { 0x3761, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_070)
{
    // 164A 0041;	
    // (ᙊ) CANADIAN SYLLABICS CARRIER DZE	[3761 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x164A, 0x0041 };
    uint32_t const ces[9] = { 0x3761, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_071)
{
    // 164A 0062;	
    // (ᙊ) CANADIAN SYLLABICS CARRIER DZE	[3761 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164A, 0x0062 };
    uint32_t const ces[9] = { 0x3761, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_072)
{
    // 164B 0021;	
    // (ᙋ) CANADIAN SYLLABICS CARRIER DZEE	[3762 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164B, 0x0021 };
    uint32_t const ces[9] = { 0x3762, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_073)
{
    // 164B 003F;	
    // (ᙋ) CANADIAN SYLLABICS CARRIER DZEE	[3762 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164B, 0x003F };
    uint32_t const ces[9] = { 0x3762, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_074)
{
    // 164B 0061;	
    // (ᙋ) CANADIAN SYLLABICS CARRIER DZEE	[3762 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164B, 0x0061 };
    uint32_t const ces[9] = { 0x3762, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_075)
{
    // 164B 0041;	
    // (ᙋ) CANADIAN SYLLABICS CARRIER DZEE	[3762 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x164B, 0x0041 };
    uint32_t const ces[9] = { 0x3762, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_076)
{
    // 164B 0062;	
    // (ᙋ) CANADIAN SYLLABICS CARRIER DZEE	[3762 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164B, 0x0062 };
    uint32_t const ces[9] = { 0x3762, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_077)
{
    // 164C 0021;	
    // (ᙌ) CANADIAN SYLLABICS CARRIER DZI	[3763 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164C, 0x0021 };
    uint32_t const ces[9] = { 0x3763, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_078)
{
    // 164C 003F;	
    // (ᙌ) CANADIAN SYLLABICS CARRIER DZI	[3763 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164C, 0x003F };
    uint32_t const ces[9] = { 0x3763, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_079)
{
    // 164C 0061;	
    // (ᙌ) CANADIAN SYLLABICS CARRIER DZI	[3763 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164C, 0x0061 };
    uint32_t const ces[9] = { 0x3763, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_080)
{
    // 164C 0041;	
    // (ᙌ) CANADIAN SYLLABICS CARRIER DZI	[3763 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x164C, 0x0041 };
    uint32_t const ces[9] = { 0x3763, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_081)
{
    // 164C 0062;	
    // (ᙌ) CANADIAN SYLLABICS CARRIER DZI	[3763 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164C, 0x0062 };
    uint32_t const ces[9] = { 0x3763, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_082)
{
    // 164D 0021;	
    // (ᙍ) CANADIAN SYLLABICS CARRIER DZA	[3764 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164D, 0x0021 };
    uint32_t const ces[9] = { 0x3764, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_083)
{
    // 164D 003F;	
    // (ᙍ) CANADIAN SYLLABICS CARRIER DZA	[3764 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164D, 0x003F };
    uint32_t const ces[9] = { 0x3764, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_084)
{
    // 164D 0061;	
    // (ᙍ) CANADIAN SYLLABICS CARRIER DZA	[3764 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164D, 0x0061 };
    uint32_t const ces[9] = { 0x3764, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_085)
{
    // 164D 0041;	
    // (ᙍ) CANADIAN SYLLABICS CARRIER DZA	[3764 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x164D, 0x0041 };
    uint32_t const ces[9] = { 0x3764, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_086)
{
    // 164D 0062;	
    // (ᙍ) CANADIAN SYLLABICS CARRIER DZA	[3764 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164D, 0x0062 };
    uint32_t const ces[9] = { 0x3764, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_087)
{
    // 164E 0021;	
    // (ᙎ) CANADIAN SYLLABICS CARRIER SU	[3765 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164E, 0x0021 };
    uint32_t const ces[9] = { 0x3765, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_088)
{
    // 164E 003F;	
    // (ᙎ) CANADIAN SYLLABICS CARRIER SU	[3765 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164E, 0x003F };
    uint32_t const ces[9] = { 0x3765, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_089)
{
    // 164E 0061;	
    // (ᙎ) CANADIAN SYLLABICS CARRIER SU	[3765 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164E, 0x0061 };
    uint32_t const ces[9] = { 0x3765, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_090)
{
    // 164E 0041;	
    // (ᙎ) CANADIAN SYLLABICS CARRIER SU	[3765 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x164E, 0x0041 };
    uint32_t const ces[9] = { 0x3765, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_091)
{
    // 164E 0062;	
    // (ᙎ) CANADIAN SYLLABICS CARRIER SU	[3765 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164E, 0x0062 };
    uint32_t const ces[9] = { 0x3765, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_092)
{
    // 164F 0021;	
    // (ᙏ) CANADIAN SYLLABICS CARRIER SO	[3766 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164F, 0x0021 };
    uint32_t const ces[9] = { 0x3766, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_093)
{
    // 164F 003F;	
    // (ᙏ) CANADIAN SYLLABICS CARRIER SO	[3766 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164F, 0x003F };
    uint32_t const ces[9] = { 0x3766, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_094)
{
    // 164F 0061;	
    // (ᙏ) CANADIAN SYLLABICS CARRIER SO	[3766 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164F, 0x0061 };
    uint32_t const ces[9] = { 0x3766, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_095)
{
    // 164F 0041;	
    // (ᙏ) CANADIAN SYLLABICS CARRIER SO	[3766 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x164F, 0x0041 };
    uint32_t const ces[9] = { 0x3766, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_096)
{
    // 164F 0062;	
    // (ᙏ) CANADIAN SYLLABICS CARRIER SO	[3766 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x164F, 0x0062 };
    uint32_t const ces[9] = { 0x3766, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_097)
{
    // 1650 0021;	
    // (ᙐ) CANADIAN SYLLABICS CARRIER SE	[3767 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1650, 0x0021 };
    uint32_t const ces[9] = { 0x3767, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_098)
{
    // 1650 003F;	
    // (ᙐ) CANADIAN SYLLABICS CARRIER SE	[3767 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1650, 0x003F };
    uint32_t const ces[9] = { 0x3767, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_099)
{
    // 1650 0061;	
    // (ᙐ) CANADIAN SYLLABICS CARRIER SE	[3767 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1650, 0x0061 };
    uint32_t const ces[9] = { 0x3767, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_100)
{
    // 1650 0041;	
    // (ᙐ) CANADIAN SYLLABICS CARRIER SE	[3767 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1650, 0x0041 };
    uint32_t const ces[9] = { 0x3767, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_101)
{
    // 1650 0062;	
    // (ᙐ) CANADIAN SYLLABICS CARRIER SE	[3767 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1650, 0x0062 };
    uint32_t const ces[9] = { 0x3767, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_102)
{
    // 1651 0021;	
    // (ᙑ) CANADIAN SYLLABICS CARRIER SEE	[3768 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1651, 0x0021 };
    uint32_t const ces[9] = { 0x3768, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_103)
{
    // 1651 003F;	
    // (ᙑ) CANADIAN SYLLABICS CARRIER SEE	[3768 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1651, 0x003F };
    uint32_t const ces[9] = { 0x3768, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_104)
{
    // 1651 0061;	
    // (ᙑ) CANADIAN SYLLABICS CARRIER SEE	[3768 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1651, 0x0061 };
    uint32_t const ces[9] = { 0x3768, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_105)
{
    // 1651 0041;	
    // (ᙑ) CANADIAN SYLLABICS CARRIER SEE	[3768 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1651, 0x0041 };
    uint32_t const ces[9] = { 0x3768, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_106)
{
    // 1651 0062;	
    // (ᙑ) CANADIAN SYLLABICS CARRIER SEE	[3768 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1651, 0x0062 };
    uint32_t const ces[9] = { 0x3768, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_107)
{
    // 1652 0021;	
    // (ᙒ) CANADIAN SYLLABICS CARRIER SI	[3769 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1652, 0x0021 };
    uint32_t const ces[9] = { 0x3769, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_108)
{
    // 1652 003F;	
    // (ᙒ) CANADIAN SYLLABICS CARRIER SI	[3769 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1652, 0x003F };
    uint32_t const ces[9] = { 0x3769, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_109)
{
    // 1652 0061;	
    // (ᙒ) CANADIAN SYLLABICS CARRIER SI	[3769 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1652, 0x0061 };
    uint32_t const ces[9] = { 0x3769, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_110)
{
    // 1652 0041;	
    // (ᙒ) CANADIAN SYLLABICS CARRIER SI	[3769 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1652, 0x0041 };
    uint32_t const ces[9] = { 0x3769, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_111)
{
    // 1652 0062;	
    // (ᙒ) CANADIAN SYLLABICS CARRIER SI	[3769 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1652, 0x0062 };
    uint32_t const ces[9] = { 0x3769, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_112)
{
    // 1653 0021;	
    // (ᙓ) CANADIAN SYLLABICS CARRIER SA	[376A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1653, 0x0021 };
    uint32_t const ces[9] = { 0x376A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_113)
{
    // 1653 003F;	
    // (ᙓ) CANADIAN SYLLABICS CARRIER SA	[376A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1653, 0x003F };
    uint32_t const ces[9] = { 0x376A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_114)
{
    // 1653 0061;	
    // (ᙓ) CANADIAN SYLLABICS CARRIER SA	[376A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1653, 0x0061 };
    uint32_t const ces[9] = { 0x376A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_115)
{
    // 1653 0041;	
    // (ᙓ) CANADIAN SYLLABICS CARRIER SA	[376A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1653, 0x0041 };
    uint32_t const ces[9] = { 0x376A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_116)
{
    // 1653 0062;	
    // (ᙓ) CANADIAN SYLLABICS CARRIER SA	[376A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1653, 0x0062 };
    uint32_t const ces[9] = { 0x376A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_117)
{
    // 1654 0021;	
    // (ᙔ) CANADIAN SYLLABICS CARRIER SHU	[376B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1654, 0x0021 };
    uint32_t const ces[9] = { 0x376B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_118)
{
    // 1654 003F;	
    // (ᙔ) CANADIAN SYLLABICS CARRIER SHU	[376B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1654, 0x003F };
    uint32_t const ces[9] = { 0x376B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_119)
{
    // 1654 0061;	
    // (ᙔ) CANADIAN SYLLABICS CARRIER SHU	[376B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1654, 0x0061 };
    uint32_t const ces[9] = { 0x376B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_120)
{
    // 1654 0041;	
    // (ᙔ) CANADIAN SYLLABICS CARRIER SHU	[376B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1654, 0x0041 };
    uint32_t const ces[9] = { 0x376B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_121)
{
    // 1654 0062;	
    // (ᙔ) CANADIAN SYLLABICS CARRIER SHU	[376B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1654, 0x0062 };
    uint32_t const ces[9] = { 0x376B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_122)
{
    // 1655 0021;	
    // (ᙕ) CANADIAN SYLLABICS CARRIER SHO	[376C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1655, 0x0021 };
    uint32_t const ces[9] = { 0x376C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_123)
{
    // 1655 003F;	
    // (ᙕ) CANADIAN SYLLABICS CARRIER SHO	[376C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1655, 0x003F };
    uint32_t const ces[9] = { 0x376C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_124)
{
    // 1655 0061;	
    // (ᙕ) CANADIAN SYLLABICS CARRIER SHO	[376C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1655, 0x0061 };
    uint32_t const ces[9] = { 0x376C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_125)
{
    // 1655 0041;	
    // (ᙕ) CANADIAN SYLLABICS CARRIER SHO	[376C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1655, 0x0041 };
    uint32_t const ces[9] = { 0x376C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_126)
{
    // 1655 0062;	
    // (ᙕ) CANADIAN SYLLABICS CARRIER SHO	[376C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1655, 0x0062 };
    uint32_t const ces[9] = { 0x376C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_127)
{
    // 1656 0021;	
    // (ᙖ) CANADIAN SYLLABICS CARRIER SHE	[376D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1656, 0x0021 };
    uint32_t const ces[9] = { 0x376D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_128)
{
    // 1656 003F;	
    // (ᙖ) CANADIAN SYLLABICS CARRIER SHE	[376D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1656, 0x003F };
    uint32_t const ces[9] = { 0x376D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_129)
{
    // 1656 0061;	
    // (ᙖ) CANADIAN SYLLABICS CARRIER SHE	[376D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1656, 0x0061 };
    uint32_t const ces[9] = { 0x376D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_130)
{
    // 1656 0041;	
    // (ᙖ) CANADIAN SYLLABICS CARRIER SHE	[376D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1656, 0x0041 };
    uint32_t const ces[9] = { 0x376D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_131)
{
    // 1656 0062;	
    // (ᙖ) CANADIAN SYLLABICS CARRIER SHE	[376D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1656, 0x0062 };
    uint32_t const ces[9] = { 0x376D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_132)
{
    // 1657 0021;	
    // (ᙗ) CANADIAN SYLLABICS CARRIER SHEE	[376E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1657, 0x0021 };
    uint32_t const ces[9] = { 0x376E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_133)
{
    // 1657 003F;	
    // (ᙗ) CANADIAN SYLLABICS CARRIER SHEE	[376E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1657, 0x003F };
    uint32_t const ces[9] = { 0x376E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_134)
{
    // 1657 0061;	
    // (ᙗ) CANADIAN SYLLABICS CARRIER SHEE	[376E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1657, 0x0061 };
    uint32_t const ces[9] = { 0x376E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_135)
{
    // 1657 0041;	
    // (ᙗ) CANADIAN SYLLABICS CARRIER SHEE	[376E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1657, 0x0041 };
    uint32_t const ces[9] = { 0x376E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_136)
{
    // 1657 0062;	
    // (ᙗ) CANADIAN SYLLABICS CARRIER SHEE	[376E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1657, 0x0062 };
    uint32_t const ces[9] = { 0x376E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_137)
{
    // 1658 0021;	
    // (ᙘ) CANADIAN SYLLABICS CARRIER SHI	[376F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1658, 0x0021 };
    uint32_t const ces[9] = { 0x376F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_138)
{
    // 1658 003F;	
    // (ᙘ) CANADIAN SYLLABICS CARRIER SHI	[376F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1658, 0x003F };
    uint32_t const ces[9] = { 0x376F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_139)
{
    // 1658 0061;	
    // (ᙘ) CANADIAN SYLLABICS CARRIER SHI	[376F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1658, 0x0061 };
    uint32_t const ces[9] = { 0x376F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_140)
{
    // 1658 0041;	
    // (ᙘ) CANADIAN SYLLABICS CARRIER SHI	[376F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1658, 0x0041 };
    uint32_t const ces[9] = { 0x376F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_141)
{
    // 1658 0062;	
    // (ᙘ) CANADIAN SYLLABICS CARRIER SHI	[376F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1658, 0x0062 };
    uint32_t const ces[9] = { 0x376F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_142)
{
    // 1659 0021;	
    // (ᙙ) CANADIAN SYLLABICS CARRIER SHA	[3770 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1659, 0x0021 };
    uint32_t const ces[9] = { 0x3770, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_143)
{
    // 1659 003F;	
    // (ᙙ) CANADIAN SYLLABICS CARRIER SHA	[3770 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1659, 0x003F };
    uint32_t const ces[9] = { 0x3770, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_144)
{
    // 1659 0061;	
    // (ᙙ) CANADIAN SYLLABICS CARRIER SHA	[3770 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1659, 0x0061 };
    uint32_t const ces[9] = { 0x3770, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_145)
{
    // 1659 0041;	
    // (ᙙ) CANADIAN SYLLABICS CARRIER SHA	[3770 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1659, 0x0041 };
    uint32_t const ces[9] = { 0x3770, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_146)
{
    // 1659 0062;	
    // (ᙙ) CANADIAN SYLLABICS CARRIER SHA	[3770 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1659, 0x0062 };
    uint32_t const ces[9] = { 0x3770, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_147)
{
    // 165A 0021;	
    // (ᙚ) CANADIAN SYLLABICS CARRIER SH	[3771 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165A, 0x0021 };
    uint32_t const ces[9] = { 0x3771, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_148)
{
    // 165A 003F;	
    // (ᙚ) CANADIAN SYLLABICS CARRIER SH	[3771 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165A, 0x003F };
    uint32_t const ces[9] = { 0x3771, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_149)
{
    // 165A 0061;	
    // (ᙚ) CANADIAN SYLLABICS CARRIER SH	[3771 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165A, 0x0061 };
    uint32_t const ces[9] = { 0x3771, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_150)
{
    // 165A 0041;	
    // (ᙚ) CANADIAN SYLLABICS CARRIER SH	[3771 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x165A, 0x0041 };
    uint32_t const ces[9] = { 0x3771, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_151)
{
    // 165A 0062;	
    // (ᙚ) CANADIAN SYLLABICS CARRIER SH	[3771 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165A, 0x0062 };
    uint32_t const ces[9] = { 0x3771, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_152)
{
    // 165B 0021;	
    // (ᙛ) CANADIAN SYLLABICS CARRIER TSU	[3772 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165B, 0x0021 };
    uint32_t const ces[9] = { 0x3772, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_153)
{
    // 165B 003F;	
    // (ᙛ) CANADIAN SYLLABICS CARRIER TSU	[3772 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165B, 0x003F };
    uint32_t const ces[9] = { 0x3772, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_154)
{
    // 165B 0061;	
    // (ᙛ) CANADIAN SYLLABICS CARRIER TSU	[3772 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165B, 0x0061 };
    uint32_t const ces[9] = { 0x3772, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_155)
{
    // 165B 0041;	
    // (ᙛ) CANADIAN SYLLABICS CARRIER TSU	[3772 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x165B, 0x0041 };
    uint32_t const ces[9] = { 0x3772, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_156)
{
    // 165B 0062;	
    // (ᙛ) CANADIAN SYLLABICS CARRIER TSU	[3772 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165B, 0x0062 };
    uint32_t const ces[9] = { 0x3772, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_157)
{
    // 165C 0021;	
    // (ᙜ) CANADIAN SYLLABICS CARRIER TSO	[3773 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165C, 0x0021 };
    uint32_t const ces[9] = { 0x3773, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_158)
{
    // 165C 003F;	
    // (ᙜ) CANADIAN SYLLABICS CARRIER TSO	[3773 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165C, 0x003F };
    uint32_t const ces[9] = { 0x3773, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_159)
{
    // 165C 0061;	
    // (ᙜ) CANADIAN SYLLABICS CARRIER TSO	[3773 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165C, 0x0061 };
    uint32_t const ces[9] = { 0x3773, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_160)
{
    // 165C 0041;	
    // (ᙜ) CANADIAN SYLLABICS CARRIER TSO	[3773 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x165C, 0x0041 };
    uint32_t const ces[9] = { 0x3773, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_161)
{
    // 165C 0062;	
    // (ᙜ) CANADIAN SYLLABICS CARRIER TSO	[3773 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165C, 0x0062 };
    uint32_t const ces[9] = { 0x3773, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_162)
{
    // 165D 0021;	
    // (ᙝ) CANADIAN SYLLABICS CARRIER TSE	[3774 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165D, 0x0021 };
    uint32_t const ces[9] = { 0x3774, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_163)
{
    // 165D 003F;	
    // (ᙝ) CANADIAN SYLLABICS CARRIER TSE	[3774 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165D, 0x003F };
    uint32_t const ces[9] = { 0x3774, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_164)
{
    // 165D 0061;	
    // (ᙝ) CANADIAN SYLLABICS CARRIER TSE	[3774 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165D, 0x0061 };
    uint32_t const ces[9] = { 0x3774, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_165)
{
    // 165D 0041;	
    // (ᙝ) CANADIAN SYLLABICS CARRIER TSE	[3774 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x165D, 0x0041 };
    uint32_t const ces[9] = { 0x3774, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_166)
{
    // 165D 0062;	
    // (ᙝ) CANADIAN SYLLABICS CARRIER TSE	[3774 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165D, 0x0062 };
    uint32_t const ces[9] = { 0x3774, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_167)
{
    // 165E 0021;	
    // (ᙞ) CANADIAN SYLLABICS CARRIER TSEE	[3775 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165E, 0x0021 };
    uint32_t const ces[9] = { 0x3775, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_168)
{
    // 165E 003F;	
    // (ᙞ) CANADIAN SYLLABICS CARRIER TSEE	[3775 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165E, 0x003F };
    uint32_t const ces[9] = { 0x3775, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_169)
{
    // 165E 0061;	
    // (ᙞ) CANADIAN SYLLABICS CARRIER TSEE	[3775 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165E, 0x0061 };
    uint32_t const ces[9] = { 0x3775, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_170)
{
    // 165E 0041;	
    // (ᙞ) CANADIAN SYLLABICS CARRIER TSEE	[3775 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x165E, 0x0041 };
    uint32_t const ces[9] = { 0x3775, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_171)
{
    // 165E 0062;	
    // (ᙞ) CANADIAN SYLLABICS CARRIER TSEE	[3775 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165E, 0x0062 };
    uint32_t const ces[9] = { 0x3775, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_172)
{
    // 165F 0021;	
    // (ᙟ) CANADIAN SYLLABICS CARRIER TSI	[3776 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165F, 0x0021 };
    uint32_t const ces[9] = { 0x3776, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_173)
{
    // 165F 003F;	
    // (ᙟ) CANADIAN SYLLABICS CARRIER TSI	[3776 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165F, 0x003F };
    uint32_t const ces[9] = { 0x3776, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_174)
{
    // 165F 0061;	
    // (ᙟ) CANADIAN SYLLABICS CARRIER TSI	[3776 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165F, 0x0061 };
    uint32_t const ces[9] = { 0x3776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_175)
{
    // 165F 0041;	
    // (ᙟ) CANADIAN SYLLABICS CARRIER TSI	[3776 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x165F, 0x0041 };
    uint32_t const ces[9] = { 0x3776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_176)
{
    // 165F 0062;	
    // (ᙟ) CANADIAN SYLLABICS CARRIER TSI	[3776 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x165F, 0x0062 };
    uint32_t const ces[9] = { 0x3776, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_177)
{
    // 1660 0021;	
    // (ᙠ) CANADIAN SYLLABICS CARRIER TSA	[3777 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1660, 0x0021 };
    uint32_t const ces[9] = { 0x3777, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_178)
{
    // 1660 003F;	
    // (ᙠ) CANADIAN SYLLABICS CARRIER TSA	[3777 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1660, 0x003F };
    uint32_t const ces[9] = { 0x3777, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_179)
{
    // 1660 0061;	
    // (ᙠ) CANADIAN SYLLABICS CARRIER TSA	[3777 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1660, 0x0061 };
    uint32_t const ces[9] = { 0x3777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_180)
{
    // 1660 0041;	
    // (ᙠ) CANADIAN SYLLABICS CARRIER TSA	[3777 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1660, 0x0041 };
    uint32_t const ces[9] = { 0x3777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_181)
{
    // 1660 0062;	
    // (ᙠ) CANADIAN SYLLABICS CARRIER TSA	[3777 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1660, 0x0062 };
    uint32_t const ces[9] = { 0x3777, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_182)
{
    // 1661 0021;	
    // (ᙡ) CANADIAN SYLLABICS CARRIER CHU	[3778 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1661, 0x0021 };
    uint32_t const ces[9] = { 0x3778, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_183)
{
    // 1661 003F;	
    // (ᙡ) CANADIAN SYLLABICS CARRIER CHU	[3778 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1661, 0x003F };
    uint32_t const ces[9] = { 0x3778, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_184)
{
    // 1661 0061;	
    // (ᙡ) CANADIAN SYLLABICS CARRIER CHU	[3778 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1661, 0x0061 };
    uint32_t const ces[9] = { 0x3778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_185)
{
    // 1661 0041;	
    // (ᙡ) CANADIAN SYLLABICS CARRIER CHU	[3778 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1661, 0x0041 };
    uint32_t const ces[9] = { 0x3778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_186)
{
    // 1661 0062;	
    // (ᙡ) CANADIAN SYLLABICS CARRIER CHU	[3778 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1661, 0x0062 };
    uint32_t const ces[9] = { 0x3778, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_187)
{
    // 1662 0021;	
    // (ᙢ) CANADIAN SYLLABICS CARRIER CHO	[3779 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1662, 0x0021 };
    uint32_t const ces[9] = { 0x3779, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_188)
{
    // 1662 003F;	
    // (ᙢ) CANADIAN SYLLABICS CARRIER CHO	[3779 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1662, 0x003F };
    uint32_t const ces[9] = { 0x3779, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_189)
{
    // 1662 0061;	
    // (ᙢ) CANADIAN SYLLABICS CARRIER CHO	[3779 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1662, 0x0061 };
    uint32_t const ces[9] = { 0x3779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_190)
{
    // 1662 0041;	
    // (ᙢ) CANADIAN SYLLABICS CARRIER CHO	[3779 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1662, 0x0041 };
    uint32_t const ces[9] = { 0x3779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_191)
{
    // 1662 0062;	
    // (ᙢ) CANADIAN SYLLABICS CARRIER CHO	[3779 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1662, 0x0062 };
    uint32_t const ces[9] = { 0x3779, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_192)
{
    // 1663 0021;	
    // (ᙣ) CANADIAN SYLLABICS CARRIER CHE	[377A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1663, 0x0021 };
    uint32_t const ces[9] = { 0x377A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_193)
{
    // 1663 003F;	
    // (ᙣ) CANADIAN SYLLABICS CARRIER CHE	[377A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1663, 0x003F };
    uint32_t const ces[9] = { 0x377A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_194)
{
    // 1663 0061;	
    // (ᙣ) CANADIAN SYLLABICS CARRIER CHE	[377A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1663, 0x0061 };
    uint32_t const ces[9] = { 0x377A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_195)
{
    // 1663 0041;	
    // (ᙣ) CANADIAN SYLLABICS CARRIER CHE	[377A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1663, 0x0041 };
    uint32_t const ces[9] = { 0x377A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_196)
{
    // 1663 0062;	
    // (ᙣ) CANADIAN SYLLABICS CARRIER CHE	[377A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1663, 0x0062 };
    uint32_t const ces[9] = { 0x377A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_197)
{
    // 1664 0021;	
    // (ᙤ) CANADIAN SYLLABICS CARRIER CHEE	[377B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1664, 0x0021 };
    uint32_t const ces[9] = { 0x377B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_198)
{
    // 1664 003F;	
    // (ᙤ) CANADIAN SYLLABICS CARRIER CHEE	[377B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1664, 0x003F };
    uint32_t const ces[9] = { 0x377B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_199)
{
    // 1664 0061;	
    // (ᙤ) CANADIAN SYLLABICS CARRIER CHEE	[377B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1664, 0x0061 };
    uint32_t const ces[9] = { 0x377B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_200)
{
    // 1664 0041;	
    // (ᙤ) CANADIAN SYLLABICS CARRIER CHEE	[377B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1664, 0x0041 };
    uint32_t const ces[9] = { 0x377B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_201)
{
    // 1664 0062;	
    // (ᙤ) CANADIAN SYLLABICS CARRIER CHEE	[377B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1664, 0x0062 };
    uint32_t const ces[9] = { 0x377B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_202)
{
    // 1665 0021;	
    // (ᙥ) CANADIAN SYLLABICS CARRIER CHI	[377C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1665, 0x0021 };
    uint32_t const ces[9] = { 0x377C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_203)
{
    // 1665 003F;	
    // (ᙥ) CANADIAN SYLLABICS CARRIER CHI	[377C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1665, 0x003F };
    uint32_t const ces[9] = { 0x377C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_204)
{
    // 1665 0061;	
    // (ᙥ) CANADIAN SYLLABICS CARRIER CHI	[377C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1665, 0x0061 };
    uint32_t const ces[9] = { 0x377C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_205)
{
    // 1665 0041;	
    // (ᙥ) CANADIAN SYLLABICS CARRIER CHI	[377C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1665, 0x0041 };
    uint32_t const ces[9] = { 0x377C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_206)
{
    // 1665 0062;	
    // (ᙥ) CANADIAN SYLLABICS CARRIER CHI	[377C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1665, 0x0062 };
    uint32_t const ces[9] = { 0x377C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_207)
{
    // 1666 0021;	
    // (ᙦ) CANADIAN SYLLABICS CARRIER CHA	[377D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1666, 0x0021 };
    uint32_t const ces[9] = { 0x377D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_208)
{
    // 1666 003F;	
    // (ᙦ) CANADIAN SYLLABICS CARRIER CHA	[377D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1666, 0x003F };
    uint32_t const ces[9] = { 0x377D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_209)
{
    // 1666 0061;	
    // (ᙦ) CANADIAN SYLLABICS CARRIER CHA	[377D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1666, 0x0061 };
    uint32_t const ces[9] = { 0x377D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_210)
{
    // 1666 0041;	
    // (ᙦ) CANADIAN SYLLABICS CARRIER CHA	[377D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1666, 0x0041 };
    uint32_t const ces[9] = { 0x377D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_211)
{
    // 1666 0062;	
    // (ᙦ) CANADIAN SYLLABICS CARRIER CHA	[377D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1666, 0x0062 };
    uint32_t const ces[9] = { 0x377D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_212)
{
    // 1667 0021;	
    // (ᙧ) CANADIAN SYLLABICS CARRIER TTSU	[377E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1667, 0x0021 };
    uint32_t const ces[9] = { 0x377E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_213)
{
    // 1667 003F;	
    // (ᙧ) CANADIAN SYLLABICS CARRIER TTSU	[377E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1667, 0x003F };
    uint32_t const ces[9] = { 0x377E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_214)
{
    // 1667 0061;	
    // (ᙧ) CANADIAN SYLLABICS CARRIER TTSU	[377E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1667, 0x0061 };
    uint32_t const ces[9] = { 0x377E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_215)
{
    // 1667 0041;	
    // (ᙧ) CANADIAN SYLLABICS CARRIER TTSU	[377E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1667, 0x0041 };
    uint32_t const ces[9] = { 0x377E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_216)
{
    // 1667 0062;	
    // (ᙧ) CANADIAN SYLLABICS CARRIER TTSU	[377E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1667, 0x0062 };
    uint32_t const ces[9] = { 0x377E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_217)
{
    // 1668 0021;	
    // (ᙨ) CANADIAN SYLLABICS CARRIER TTSO	[377F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1668, 0x0021 };
    uint32_t const ces[9] = { 0x377F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_218)
{
    // 1668 003F;	
    // (ᙨ) CANADIAN SYLLABICS CARRIER TTSO	[377F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1668, 0x003F };
    uint32_t const ces[9] = { 0x377F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_219)
{
    // 1668 0061;	
    // (ᙨ) CANADIAN SYLLABICS CARRIER TTSO	[377F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1668, 0x0061 };
    uint32_t const ces[9] = { 0x377F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_220)
{
    // 1668 0041;	
    // (ᙨ) CANADIAN SYLLABICS CARRIER TTSO	[377F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1668, 0x0041 };
    uint32_t const ces[9] = { 0x377F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_221)
{
    // 1668 0062;	
    // (ᙨ) CANADIAN SYLLABICS CARRIER TTSO	[377F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1668, 0x0062 };
    uint32_t const ces[9] = { 0x377F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_222)
{
    // 1669 0021;	
    // (ᙩ) CANADIAN SYLLABICS CARRIER TTSE	[3780 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1669, 0x0021 };
    uint32_t const ces[9] = { 0x3780, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_223)
{
    // 1669 003F;	
    // (ᙩ) CANADIAN SYLLABICS CARRIER TTSE	[3780 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1669, 0x003F };
    uint32_t const ces[9] = { 0x3780, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_224)
{
    // 1669 0061;	
    // (ᙩ) CANADIAN SYLLABICS CARRIER TTSE	[3780 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1669, 0x0061 };
    uint32_t const ces[9] = { 0x3780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_225)
{
    // 1669 0041;	
    // (ᙩ) CANADIAN SYLLABICS CARRIER TTSE	[3780 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1669, 0x0041 };
    uint32_t const ces[9] = { 0x3780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_226)
{
    // 1669 0062;	
    // (ᙩ) CANADIAN SYLLABICS CARRIER TTSE	[3780 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1669, 0x0062 };
    uint32_t const ces[9] = { 0x3780, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_227)
{
    // 166A 0021;	
    // (ᙪ) CANADIAN SYLLABICS CARRIER TTSEE	[3781 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166A, 0x0021 };
    uint32_t const ces[9] = { 0x3781, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_228)
{
    // 166A 003F;	
    // (ᙪ) CANADIAN SYLLABICS CARRIER TTSEE	[3781 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166A, 0x003F };
    uint32_t const ces[9] = { 0x3781, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_229)
{
    // 166A 0061;	
    // (ᙪ) CANADIAN SYLLABICS CARRIER TTSEE	[3781 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166A, 0x0061 };
    uint32_t const ces[9] = { 0x3781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_230)
{
    // 166A 0041;	
    // (ᙪ) CANADIAN SYLLABICS CARRIER TTSEE	[3781 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x166A, 0x0041 };
    uint32_t const ces[9] = { 0x3781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_231)
{
    // 166A 0062;	
    // (ᙪ) CANADIAN SYLLABICS CARRIER TTSEE	[3781 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166A, 0x0062 };
    uint32_t const ces[9] = { 0x3781, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_232)
{
    // 166B 0021;	
    // (ᙫ) CANADIAN SYLLABICS CARRIER TTSI	[3782 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166B, 0x0021 };
    uint32_t const ces[9] = { 0x3782, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_233)
{
    // 166B 003F;	
    // (ᙫ) CANADIAN SYLLABICS CARRIER TTSI	[3782 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166B, 0x003F };
    uint32_t const ces[9] = { 0x3782, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_234)
{
    // 166B 0061;	
    // (ᙫ) CANADIAN SYLLABICS CARRIER TTSI	[3782 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166B, 0x0061 };
    uint32_t const ces[9] = { 0x3782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_235)
{
    // 166B 0041;	
    // (ᙫ) CANADIAN SYLLABICS CARRIER TTSI	[3782 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x166B, 0x0041 };
    uint32_t const ces[9] = { 0x3782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_236)
{
    // 166B 0062;	
    // (ᙫ) CANADIAN SYLLABICS CARRIER TTSI	[3782 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166B, 0x0062 };
    uint32_t const ces[9] = { 0x3782, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_237)
{
    // 166C 0021;	
    // (ᙬ) CANADIAN SYLLABICS CARRIER TTSA	[3783 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166C, 0x0021 };
    uint32_t const ces[9] = { 0x3783, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_238)
{
    // 166C 003F;	
    // (ᙬ) CANADIAN SYLLABICS CARRIER TTSA	[3783 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166C, 0x003F };
    uint32_t const ces[9] = { 0x3783, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_239)
{
    // 166C 0061;	
    // (ᙬ) CANADIAN SYLLABICS CARRIER TTSA	[3783 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166C, 0x0061 };
    uint32_t const ces[9] = { 0x3783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_240)
{
    // 166C 0041;	
    // (ᙬ) CANADIAN SYLLABICS CARRIER TTSA	[3783 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x166C, 0x0041 };
    uint32_t const ces[9] = { 0x3783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_241)
{
    // 166C 0062;	
    // (ᙬ) CANADIAN SYLLABICS CARRIER TTSA	[3783 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166C, 0x0062 };
    uint32_t const ces[9] = { 0x3783, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_242)
{
    // 1677 0021;	
    // (ᙷ) CANADIAN SYLLABICS WOODS-CREE THWEE	[3784 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1677, 0x0021 };
    uint32_t const ces[9] = { 0x3784, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_243)
{
    // 1677 003F;	
    // (ᙷ) CANADIAN SYLLABICS WOODS-CREE THWEE	[3784 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1677, 0x003F };
    uint32_t const ces[9] = { 0x3784, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_244)
{
    // 1677 0061;	
    // (ᙷ) CANADIAN SYLLABICS WOODS-CREE THWEE	[3784 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1677, 0x0061 };
    uint32_t const ces[9] = { 0x3784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_245)
{
    // 1677 0041;	
    // (ᙷ) CANADIAN SYLLABICS WOODS-CREE THWEE	[3784 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1677, 0x0041 };
    uint32_t const ces[9] = { 0x3784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_246)
{
    // 1677 0062;	
    // (ᙷ) CANADIAN SYLLABICS WOODS-CREE THWEE	[3784 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1677, 0x0062 };
    uint32_t const ces[9] = { 0x3784, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_247)
{
    // 1678 0021;	
    // (ᙸ) CANADIAN SYLLABICS WOODS-CREE THWI	[3785 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1678, 0x0021 };
    uint32_t const ces[9] = { 0x3785, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_248)
{
    // 1678 003F;	
    // (ᙸ) CANADIAN SYLLABICS WOODS-CREE THWI	[3785 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1678, 0x003F };
    uint32_t const ces[9] = { 0x3785, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_249)
{
    // 1678 0061;	
    // (ᙸ) CANADIAN SYLLABICS WOODS-CREE THWI	[3785 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1678, 0x0061 };
    uint32_t const ces[9] = { 0x3785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_250)
{
    // 1678 0041;	
    // (ᙸ) CANADIAN SYLLABICS WOODS-CREE THWI	[3785 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1678, 0x0041 };
    uint32_t const ces[9] = { 0x3785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_251)
{
    // 1678 0062;	
    // (ᙸ) CANADIAN SYLLABICS WOODS-CREE THWI	[3785 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1678, 0x0062 };
    uint32_t const ces[9] = { 0x3785, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_252)
{
    // 1679 0021;	
    // (ᙹ) CANADIAN SYLLABICS WOODS-CREE THWII	[3786 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1679, 0x0021 };
    uint32_t const ces[9] = { 0x3786, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_253)
{
    // 1679 003F;	
    // (ᙹ) CANADIAN SYLLABICS WOODS-CREE THWII	[3786 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1679, 0x003F };
    uint32_t const ces[9] = { 0x3786, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_254)
{
    // 1679 0061;	
    // (ᙹ) CANADIAN SYLLABICS WOODS-CREE THWII	[3786 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1679, 0x0061 };
    uint32_t const ces[9] = { 0x3786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_255)
{
    // 1679 0041;	
    // (ᙹ) CANADIAN SYLLABICS WOODS-CREE THWII	[3786 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1679, 0x0041 };
    uint32_t const ces[9] = { 0x3786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_256)
{
    // 1679 0062;	
    // (ᙹ) CANADIAN SYLLABICS WOODS-CREE THWII	[3786 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1679, 0x0062 };
    uint32_t const ces[9] = { 0x3786, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_257)
{
    // 167A 0021;	
    // (ᙺ) CANADIAN SYLLABICS WOODS-CREE THWO	[3787 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167A, 0x0021 };
    uint32_t const ces[9] = { 0x3787, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_258)
{
    // 167A 003F;	
    // (ᙺ) CANADIAN SYLLABICS WOODS-CREE THWO	[3787 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167A, 0x003F };
    uint32_t const ces[9] = { 0x3787, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_259)
{
    // 167A 0061;	
    // (ᙺ) CANADIAN SYLLABICS WOODS-CREE THWO	[3787 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167A, 0x0061 };
    uint32_t const ces[9] = { 0x3787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_260)
{
    // 167A 0041;	
    // (ᙺ) CANADIAN SYLLABICS WOODS-CREE THWO	[3787 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x167A, 0x0041 };
    uint32_t const ces[9] = { 0x3787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_261)
{
    // 167A 0062;	
    // (ᙺ) CANADIAN SYLLABICS WOODS-CREE THWO	[3787 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167A, 0x0062 };
    uint32_t const ces[9] = { 0x3787, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_262)
{
    // 167B 0021;	
    // (ᙻ) CANADIAN SYLLABICS WOODS-CREE THWOO	[3788 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167B, 0x0021 };
    uint32_t const ces[9] = { 0x3788, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_263)
{
    // 167B 003F;	
    // (ᙻ) CANADIAN SYLLABICS WOODS-CREE THWOO	[3788 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167B, 0x003F };
    uint32_t const ces[9] = { 0x3788, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_264)
{
    // 167B 0061;	
    // (ᙻ) CANADIAN SYLLABICS WOODS-CREE THWOO	[3788 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167B, 0x0061 };
    uint32_t const ces[9] = { 0x3788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_265)
{
    // 167B 0041;	
    // (ᙻ) CANADIAN SYLLABICS WOODS-CREE THWOO	[3788 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x167B, 0x0041 };
    uint32_t const ces[9] = { 0x3788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_266)
{
    // 167B 0062;	
    // (ᙻ) CANADIAN SYLLABICS WOODS-CREE THWOO	[3788 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167B, 0x0062 };
    uint32_t const ces[9] = { 0x3788, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_267)
{
    // 167C 0021;	
    // (ᙼ) CANADIAN SYLLABICS WOODS-CREE THWA	[3789 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167C, 0x0021 };
    uint32_t const ces[9] = { 0x3789, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_268)
{
    // 167C 003F;	
    // (ᙼ) CANADIAN SYLLABICS WOODS-CREE THWA	[3789 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167C, 0x003F };
    uint32_t const ces[9] = { 0x3789, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_269)
{
    // 167C 0061;	
    // (ᙼ) CANADIAN SYLLABICS WOODS-CREE THWA	[3789 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167C, 0x0061 };
    uint32_t const ces[9] = { 0x3789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_270)
{
    // 167C 0041;	
    // (ᙼ) CANADIAN SYLLABICS WOODS-CREE THWA	[3789 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x167C, 0x0041 };
    uint32_t const ces[9] = { 0x3789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_271)
{
    // 167C 0062;	
    // (ᙼ) CANADIAN SYLLABICS WOODS-CREE THWA	[3789 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167C, 0x0062 };
    uint32_t const ces[9] = { 0x3789, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_272)
{
    // 167D 0021;	
    // (ᙽ) CANADIAN SYLLABICS WOODS-CREE THWAA	[378A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167D, 0x0021 };
    uint32_t const ces[9] = { 0x378A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_273)
{
    // 167D 003F;	
    // (ᙽ) CANADIAN SYLLABICS WOODS-CREE THWAA	[378A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167D, 0x003F };
    uint32_t const ces[9] = { 0x378A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_274)
{
    // 167D 0061;	
    // (ᙽ) CANADIAN SYLLABICS WOODS-CREE THWAA	[378A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167D, 0x0061 };
    uint32_t const ces[9] = { 0x378A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_275)
{
    // 167D 0041;	
    // (ᙽ) CANADIAN SYLLABICS WOODS-CREE THWAA	[378A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x167D, 0x0041 };
    uint32_t const ces[9] = { 0x378A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_276)
{
    // 167D 0062;	
    // (ᙽ) CANADIAN SYLLABICS WOODS-CREE THWAA	[378A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167D, 0x0062 };
    uint32_t const ces[9] = { 0x378A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_277)
{
    // 167E 0021;	
    // (ᙾ) CANADIAN SYLLABICS WOODS-CREE FINAL TH	[378B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167E, 0x0021 };
    uint32_t const ces[9] = { 0x378B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_278)
{
    // 167E 003F;	
    // (ᙾ) CANADIAN SYLLABICS WOODS-CREE FINAL TH	[378B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167E, 0x003F };
    uint32_t const ces[9] = { 0x378B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_279)
{
    // 167E 0061;	
    // (ᙾ) CANADIAN SYLLABICS WOODS-CREE FINAL TH	[378B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167E, 0x0061 };
    uint32_t const ces[9] = { 0x378B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_280)
{
    // 167E 0041;	
    // (ᙾ) CANADIAN SYLLABICS WOODS-CREE FINAL TH	[378B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x167E, 0x0041 };
    uint32_t const ces[9] = { 0x378B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_281)
{
    // 167E 0062;	
    // (ᙾ) CANADIAN SYLLABICS WOODS-CREE FINAL TH	[378B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167E, 0x0062 };
    uint32_t const ces[9] = { 0x378B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_282)
{
    // 167F 0021;	
    // (ᙿ) CANADIAN SYLLABICS BLACKFOOT W	[378C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167F, 0x0021 };
    uint32_t const ces[9] = { 0x378C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_283)
{
    // 167F 003F;	
    // (ᙿ) CANADIAN SYLLABICS BLACKFOOT W	[378C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167F, 0x003F };
    uint32_t const ces[9] = { 0x378C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_284)
{
    // 167F 0061;	
    // (ᙿ) CANADIAN SYLLABICS BLACKFOOT W	[378C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167F, 0x0061 };
    uint32_t const ces[9] = { 0x378C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_285)
{
    // 167F 0041;	
    // (ᙿ) CANADIAN SYLLABICS BLACKFOOT W	[378C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x167F, 0x0041 };
    uint32_t const ces[9] = { 0x378C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_286)
{
    // 167F 0062;	
    // (ᙿ) CANADIAN SYLLABICS BLACKFOOT W	[378C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x167F, 0x0062 };
    uint32_t const ces[9] = { 0x378C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_287)
{
    // 18B0 0021;	
    // (ᢰ) CANADIAN SYLLABICS OY	[378D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B0, 0x0021 };
    uint32_t const ces[9] = { 0x378D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_288)
{
    // 18B0 003F;	
    // (ᢰ) CANADIAN SYLLABICS OY	[378D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B0, 0x003F };
    uint32_t const ces[9] = { 0x378D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_289)
{
    // 18B0 0061;	
    // (ᢰ) CANADIAN SYLLABICS OY	[378D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B0, 0x0061 };
    uint32_t const ces[9] = { 0x378D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_290)
{
    // 18B0 0041;	
    // (ᢰ) CANADIAN SYLLABICS OY	[378D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18B0, 0x0041 };
    uint32_t const ces[9] = { 0x378D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_291)
{
    // 18B0 0062;	
    // (ᢰ) CANADIAN SYLLABICS OY	[378D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B0, 0x0062 };
    uint32_t const ces[9] = { 0x378D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_292)
{
    // 18B1 0021;	
    // (ᢱ) CANADIAN SYLLABICS AY	[378E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B1, 0x0021 };
    uint32_t const ces[9] = { 0x378E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_293)
{
    // 18B1 003F;	
    // (ᢱ) CANADIAN SYLLABICS AY	[378E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B1, 0x003F };
    uint32_t const ces[9] = { 0x378E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_294)
{
    // 18B1 0061;	
    // (ᢱ) CANADIAN SYLLABICS AY	[378E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B1, 0x0061 };
    uint32_t const ces[9] = { 0x378E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_295)
{
    // 18B1 0041;	
    // (ᢱ) CANADIAN SYLLABICS AY	[378E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18B1, 0x0041 };
    uint32_t const ces[9] = { 0x378E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_296)
{
    // 18B1 0062;	
    // (ᢱ) CANADIAN SYLLABICS AY	[378E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B1, 0x0062 };
    uint32_t const ces[9] = { 0x378E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_297)
{
    // 18B2 0021;	
    // (ᢲ) CANADIAN SYLLABICS AAY	[378F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B2, 0x0021 };
    uint32_t const ces[9] = { 0x378F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_298)
{
    // 18B2 003F;	
    // (ᢲ) CANADIAN SYLLABICS AAY	[378F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B2, 0x003F };
    uint32_t const ces[9] = { 0x378F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_299)
{
    // 18B2 0061;	
    // (ᢲ) CANADIAN SYLLABICS AAY	[378F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B2, 0x0061 };
    uint32_t const ces[9] = { 0x378F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_300)
{
    // 18B2 0041;	
    // (ᢲ) CANADIAN SYLLABICS AAY	[378F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18B2, 0x0041 };
    uint32_t const ces[9] = { 0x378F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_301)
{
    // 18B2 0062;	
    // (ᢲ) CANADIAN SYLLABICS AAY	[378F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B2, 0x0062 };
    uint32_t const ces[9] = { 0x378F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_302)
{
    // 18B3 0021;	
    // (ᢳ) CANADIAN SYLLABICS WAY	[3790 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B3, 0x0021 };
    uint32_t const ces[9] = { 0x3790, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_303)
{
    // 18B3 003F;	
    // (ᢳ) CANADIAN SYLLABICS WAY	[3790 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B3, 0x003F };
    uint32_t const ces[9] = { 0x3790, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_304)
{
    // 18B3 0061;	
    // (ᢳ) CANADIAN SYLLABICS WAY	[3790 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B3, 0x0061 };
    uint32_t const ces[9] = { 0x3790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_305)
{
    // 18B3 0041;	
    // (ᢳ) CANADIAN SYLLABICS WAY	[3790 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18B3, 0x0041 };
    uint32_t const ces[9] = { 0x3790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_306)
{
    // 18B3 0062;	
    // (ᢳ) CANADIAN SYLLABICS WAY	[3790 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B3, 0x0062 };
    uint32_t const ces[9] = { 0x3790, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_307)
{
    // 18B4 0021;	
    // (ᢴ) CANADIAN SYLLABICS POY	[3791 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B4, 0x0021 };
    uint32_t const ces[9] = { 0x3791, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_308)
{
    // 18B4 003F;	
    // (ᢴ) CANADIAN SYLLABICS POY	[3791 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B4, 0x003F };
    uint32_t const ces[9] = { 0x3791, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_309)
{
    // 18B4 0061;	
    // (ᢴ) CANADIAN SYLLABICS POY	[3791 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B4, 0x0061 };
    uint32_t const ces[9] = { 0x3791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_310)
{
    // 18B4 0041;	
    // (ᢴ) CANADIAN SYLLABICS POY	[3791 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18B4, 0x0041 };
    uint32_t const ces[9] = { 0x3791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_311)
{
    // 18B4 0062;	
    // (ᢴ) CANADIAN SYLLABICS POY	[3791 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B4, 0x0062 };
    uint32_t const ces[9] = { 0x3791, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_312)
{
    // 18B5 0021;	
    // (ᢵ) CANADIAN SYLLABICS PAY	[3792 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B5, 0x0021 };
    uint32_t const ces[9] = { 0x3792, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_313)
{
    // 18B5 003F;	
    // (ᢵ) CANADIAN SYLLABICS PAY	[3792 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B5, 0x003F };
    uint32_t const ces[9] = { 0x3792, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_314)
{
    // 18B5 0061;	
    // (ᢵ) CANADIAN SYLLABICS PAY	[3792 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B5, 0x0061 };
    uint32_t const ces[9] = { 0x3792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_315)
{
    // 18B5 0041;	
    // (ᢵ) CANADIAN SYLLABICS PAY	[3792 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18B5, 0x0041 };
    uint32_t const ces[9] = { 0x3792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_316)
{
    // 18B5 0062;	
    // (ᢵ) CANADIAN SYLLABICS PAY	[3792 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B5, 0x0062 };
    uint32_t const ces[9] = { 0x3792, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_317)
{
    // 18B6 0021;	
    // (ᢶ) CANADIAN SYLLABICS PWOY	[3793 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B6, 0x0021 };
    uint32_t const ces[9] = { 0x3793, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_318)
{
    // 18B6 003F;	
    // (ᢶ) CANADIAN SYLLABICS PWOY	[3793 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B6, 0x003F };
    uint32_t const ces[9] = { 0x3793, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_319)
{
    // 18B6 0061;	
    // (ᢶ) CANADIAN SYLLABICS PWOY	[3793 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B6, 0x0061 };
    uint32_t const ces[9] = { 0x3793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_320)
{
    // 18B6 0041;	
    // (ᢶ) CANADIAN SYLLABICS PWOY	[3793 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18B6, 0x0041 };
    uint32_t const ces[9] = { 0x3793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_321)
{
    // 18B6 0062;	
    // (ᢶ) CANADIAN SYLLABICS PWOY	[3793 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B6, 0x0062 };
    uint32_t const ces[9] = { 0x3793, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_322)
{
    // 18B7 0021;	
    // (ᢷ) CANADIAN SYLLABICS TAY	[3794 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B7, 0x0021 };
    uint32_t const ces[9] = { 0x3794, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_323)
{
    // 18B7 003F;	
    // (ᢷ) CANADIAN SYLLABICS TAY	[3794 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B7, 0x003F };
    uint32_t const ces[9] = { 0x3794, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_324)
{
    // 18B7 0061;	
    // (ᢷ) CANADIAN SYLLABICS TAY	[3794 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B7, 0x0061 };
    uint32_t const ces[9] = { 0x3794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_325)
{
    // 18B7 0041;	
    // (ᢷ) CANADIAN SYLLABICS TAY	[3794 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18B7, 0x0041 };
    uint32_t const ces[9] = { 0x3794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_326)
{
    // 18B7 0062;	
    // (ᢷ) CANADIAN SYLLABICS TAY	[3794 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B7, 0x0062 };
    uint32_t const ces[9] = { 0x3794, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_327)
{
    // 18B8 0021;	
    // (ᢸ) CANADIAN SYLLABICS KAY	[3795 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B8, 0x0021 };
    uint32_t const ces[9] = { 0x3795, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_328)
{
    // 18B8 003F;	
    // (ᢸ) CANADIAN SYLLABICS KAY	[3795 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B8, 0x003F };
    uint32_t const ces[9] = { 0x3795, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_329)
{
    // 18B8 0061;	
    // (ᢸ) CANADIAN SYLLABICS KAY	[3795 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B8, 0x0061 };
    uint32_t const ces[9] = { 0x3795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_330)
{
    // 18B8 0041;	
    // (ᢸ) CANADIAN SYLLABICS KAY	[3795 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18B8, 0x0041 };
    uint32_t const ces[9] = { 0x3795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_331)
{
    // 18B8 0062;	
    // (ᢸ) CANADIAN SYLLABICS KAY	[3795 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B8, 0x0062 };
    uint32_t const ces[9] = { 0x3795, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_332)
{
    // 18B9 0021;	
    // (ᢹ) CANADIAN SYLLABICS KWAY	[3796 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B9, 0x0021 };
    uint32_t const ces[9] = { 0x3796, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_333)
{
    // 18B9 003F;	
    // (ᢹ) CANADIAN SYLLABICS KWAY	[3796 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B9, 0x003F };
    uint32_t const ces[9] = { 0x3796, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_334)
{
    // 18B9 0061;	
    // (ᢹ) CANADIAN SYLLABICS KWAY	[3796 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B9, 0x0061 };
    uint32_t const ces[9] = { 0x3796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_335)
{
    // 18B9 0041;	
    // (ᢹ) CANADIAN SYLLABICS KWAY	[3796 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18B9, 0x0041 };
    uint32_t const ces[9] = { 0x3796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_336)
{
    // 18B9 0062;	
    // (ᢹ) CANADIAN SYLLABICS KWAY	[3796 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18B9, 0x0062 };
    uint32_t const ces[9] = { 0x3796, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_337)
{
    // 18BA 0021;	
    // (ᢺ) CANADIAN SYLLABICS MAY	[3797 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BA, 0x0021 };
    uint32_t const ces[9] = { 0x3797, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_338)
{
    // 18BA 003F;	
    // (ᢺ) CANADIAN SYLLABICS MAY	[3797 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BA, 0x003F };
    uint32_t const ces[9] = { 0x3797, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_339)
{
    // 18BA 0061;	
    // (ᢺ) CANADIAN SYLLABICS MAY	[3797 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BA, 0x0061 };
    uint32_t const ces[9] = { 0x3797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_340)
{
    // 18BA 0041;	
    // (ᢺ) CANADIAN SYLLABICS MAY	[3797 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18BA, 0x0041 };
    uint32_t const ces[9] = { 0x3797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_341)
{
    // 18BA 0062;	
    // (ᢺ) CANADIAN SYLLABICS MAY	[3797 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BA, 0x0062 };
    uint32_t const ces[9] = { 0x3797, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_342)
{
    // 18BB 0021;	
    // (ᢻ) CANADIAN SYLLABICS NOY	[3798 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BB, 0x0021 };
    uint32_t const ces[9] = { 0x3798, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_343)
{
    // 18BB 003F;	
    // (ᢻ) CANADIAN SYLLABICS NOY	[3798 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BB, 0x003F };
    uint32_t const ces[9] = { 0x3798, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_344)
{
    // 18BB 0061;	
    // (ᢻ) CANADIAN SYLLABICS NOY	[3798 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BB, 0x0061 };
    uint32_t const ces[9] = { 0x3798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_345)
{
    // 18BB 0041;	
    // (ᢻ) CANADIAN SYLLABICS NOY	[3798 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18BB, 0x0041 };
    uint32_t const ces[9] = { 0x3798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_346)
{
    // 18BB 0062;	
    // (ᢻ) CANADIAN SYLLABICS NOY	[3798 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BB, 0x0062 };
    uint32_t const ces[9] = { 0x3798, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_347)
{
    // 18BC 0021;	
    // (ᢼ) CANADIAN SYLLABICS NAY	[3799 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BC, 0x0021 };
    uint32_t const ces[9] = { 0x3799, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_348)
{
    // 18BC 003F;	
    // (ᢼ) CANADIAN SYLLABICS NAY	[3799 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BC, 0x003F };
    uint32_t const ces[9] = { 0x3799, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_349)
{
    // 18BC 0061;	
    // (ᢼ) CANADIAN SYLLABICS NAY	[3799 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BC, 0x0061 };
    uint32_t const ces[9] = { 0x3799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_350)
{
    // 18BC 0041;	
    // (ᢼ) CANADIAN SYLLABICS NAY	[3799 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18BC, 0x0041 };
    uint32_t const ces[9] = { 0x3799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_351)
{
    // 18BC 0062;	
    // (ᢼ) CANADIAN SYLLABICS NAY	[3799 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BC, 0x0062 };
    uint32_t const ces[9] = { 0x3799, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_352)
{
    // 18BD 0021;	
    // (ᢽ) CANADIAN SYLLABICS LAY	[379A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BD, 0x0021 };
    uint32_t const ces[9] = { 0x379A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_353)
{
    // 18BD 003F;	
    // (ᢽ) CANADIAN SYLLABICS LAY	[379A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BD, 0x003F };
    uint32_t const ces[9] = { 0x379A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_354)
{
    // 18BD 0061;	
    // (ᢽ) CANADIAN SYLLABICS LAY	[379A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BD, 0x0061 };
    uint32_t const ces[9] = { 0x379A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_355)
{
    // 18BD 0041;	
    // (ᢽ) CANADIAN SYLLABICS LAY	[379A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18BD, 0x0041 };
    uint32_t const ces[9] = { 0x379A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_356)
{
    // 18BD 0062;	
    // (ᢽ) CANADIAN SYLLABICS LAY	[379A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BD, 0x0062 };
    uint32_t const ces[9] = { 0x379A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_357)
{
    // 18BE 0021;	
    // (ᢾ) CANADIAN SYLLABICS SOY	[379B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BE, 0x0021 };
    uint32_t const ces[9] = { 0x379B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_358)
{
    // 18BE 003F;	
    // (ᢾ) CANADIAN SYLLABICS SOY	[379B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BE, 0x003F };
    uint32_t const ces[9] = { 0x379B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_359)
{
    // 18BE 0061;	
    // (ᢾ) CANADIAN SYLLABICS SOY	[379B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BE, 0x0061 };
    uint32_t const ces[9] = { 0x379B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_360)
{
    // 18BE 0041;	
    // (ᢾ) CANADIAN SYLLABICS SOY	[379B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18BE, 0x0041 };
    uint32_t const ces[9] = { 0x379B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_361)
{
    // 18BE 0062;	
    // (ᢾ) CANADIAN SYLLABICS SOY	[379B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BE, 0x0062 };
    uint32_t const ces[9] = { 0x379B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_362)
{
    // 18BF 0021;	
    // (ᢿ) CANADIAN SYLLABICS SAY	[379C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BF, 0x0021 };
    uint32_t const ces[9] = { 0x379C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_363)
{
    // 18BF 003F;	
    // (ᢿ) CANADIAN SYLLABICS SAY	[379C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BF, 0x003F };
    uint32_t const ces[9] = { 0x379C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_364)
{
    // 18BF 0061;	
    // (ᢿ) CANADIAN SYLLABICS SAY	[379C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BF, 0x0061 };
    uint32_t const ces[9] = { 0x379C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_365)
{
    // 18BF 0041;	
    // (ᢿ) CANADIAN SYLLABICS SAY	[379C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18BF, 0x0041 };
    uint32_t const ces[9] = { 0x379C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_366)
{
    // 18BF 0062;	
    // (ᢿ) CANADIAN SYLLABICS SAY	[379C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18BF, 0x0062 };
    uint32_t const ces[9] = { 0x379C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_367)
{
    // 18C0 0021;	
    // (ᣀ) CANADIAN SYLLABICS SHOY	[379D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C0, 0x0021 };
    uint32_t const ces[9] = { 0x379D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_368)
{
    // 18C0 003F;	
    // (ᣀ) CANADIAN SYLLABICS SHOY	[379D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C0, 0x003F };
    uint32_t const ces[9] = { 0x379D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_369)
{
    // 18C0 0061;	
    // (ᣀ) CANADIAN SYLLABICS SHOY	[379D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C0, 0x0061 };
    uint32_t const ces[9] = { 0x379D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_370)
{
    // 18C0 0041;	
    // (ᣀ) CANADIAN SYLLABICS SHOY	[379D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18C0, 0x0041 };
    uint32_t const ces[9] = { 0x379D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_371)
{
    // 18C0 0062;	
    // (ᣀ) CANADIAN SYLLABICS SHOY	[379D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C0, 0x0062 };
    uint32_t const ces[9] = { 0x379D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_372)
{
    // 18C1 0021;	
    // (ᣁ) CANADIAN SYLLABICS SHAY	[379E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C1, 0x0021 };
    uint32_t const ces[9] = { 0x379E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_373)
{
    // 18C1 003F;	
    // (ᣁ) CANADIAN SYLLABICS SHAY	[379E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C1, 0x003F };
    uint32_t const ces[9] = { 0x379E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_374)
{
    // 18C1 0061;	
    // (ᣁ) CANADIAN SYLLABICS SHAY	[379E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C1, 0x0061 };
    uint32_t const ces[9] = { 0x379E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_375)
{
    // 18C1 0041;	
    // (ᣁ) CANADIAN SYLLABICS SHAY	[379E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18C1, 0x0041 };
    uint32_t const ces[9] = { 0x379E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_376)
{
    // 18C1 0062;	
    // (ᣁ) CANADIAN SYLLABICS SHAY	[379E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C1, 0x0062 };
    uint32_t const ces[9] = { 0x379E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_377)
{
    // 18C2 0021;	
    // (ᣂ) CANADIAN SYLLABICS SHWOY	[379F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C2, 0x0021 };
    uint32_t const ces[9] = { 0x379F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_378)
{
    // 18C2 003F;	
    // (ᣂ) CANADIAN SYLLABICS SHWOY	[379F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C2, 0x003F };
    uint32_t const ces[9] = { 0x379F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_379)
{
    // 18C2 0061;	
    // (ᣂ) CANADIAN SYLLABICS SHWOY	[379F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C2, 0x0061 };
    uint32_t const ces[9] = { 0x379F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_380)
{
    // 18C2 0041;	
    // (ᣂ) CANADIAN SYLLABICS SHWOY	[379F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18C2, 0x0041 };
    uint32_t const ces[9] = { 0x379F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_381)
{
    // 18C2 0062;	
    // (ᣂ) CANADIAN SYLLABICS SHWOY	[379F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C2, 0x0062 };
    uint32_t const ces[9] = { 0x379F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_382)
{
    // 18C3 0021;	
    // (ᣃ) CANADIAN SYLLABICS YOY	[37A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C3, 0x0021 };
    uint32_t const ces[9] = { 0x37A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_383)
{
    // 18C3 003F;	
    // (ᣃ) CANADIAN SYLLABICS YOY	[37A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C3, 0x003F };
    uint32_t const ces[9] = { 0x37A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_384)
{
    // 18C3 0061;	
    // (ᣃ) CANADIAN SYLLABICS YOY	[37A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C3, 0x0061 };
    uint32_t const ces[9] = { 0x37A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_385)
{
    // 18C3 0041;	
    // (ᣃ) CANADIAN SYLLABICS YOY	[37A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18C3, 0x0041 };
    uint32_t const ces[9] = { 0x37A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_386)
{
    // 18C3 0062;	
    // (ᣃ) CANADIAN SYLLABICS YOY	[37A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C3, 0x0062 };
    uint32_t const ces[9] = { 0x37A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_387)
{
    // 18C4 0021;	
    // (ᣄ) CANADIAN SYLLABICS YAY	[37A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C4, 0x0021 };
    uint32_t const ces[9] = { 0x37A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_388)
{
    // 18C4 003F;	
    // (ᣄ) CANADIAN SYLLABICS YAY	[37A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C4, 0x003F };
    uint32_t const ces[9] = { 0x37A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_389)
{
    // 18C4 0061;	
    // (ᣄ) CANADIAN SYLLABICS YAY	[37A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C4, 0x0061 };
    uint32_t const ces[9] = { 0x37A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_390)
{
    // 18C4 0041;	
    // (ᣄ) CANADIAN SYLLABICS YAY	[37A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18C4, 0x0041 };
    uint32_t const ces[9] = { 0x37A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_391)
{
    // 18C4 0062;	
    // (ᣄ) CANADIAN SYLLABICS YAY	[37A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C4, 0x0062 };
    uint32_t const ces[9] = { 0x37A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_392)
{
    // 18C5 0021;	
    // (ᣅ) CANADIAN SYLLABICS RAY	[37A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C5, 0x0021 };
    uint32_t const ces[9] = { 0x37A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_393)
{
    // 18C5 003F;	
    // (ᣅ) CANADIAN SYLLABICS RAY	[37A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C5, 0x003F };
    uint32_t const ces[9] = { 0x37A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_394)
{
    // 18C5 0061;	
    // (ᣅ) CANADIAN SYLLABICS RAY	[37A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C5, 0x0061 };
    uint32_t const ces[9] = { 0x37A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_395)
{
    // 18C5 0041;	
    // (ᣅ) CANADIAN SYLLABICS RAY	[37A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18C5, 0x0041 };
    uint32_t const ces[9] = { 0x37A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_396)
{
    // 18C5 0062;	
    // (ᣅ) CANADIAN SYLLABICS RAY	[37A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C5, 0x0062 };
    uint32_t const ces[9] = { 0x37A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_397)
{
    // 18C6 0021;	
    // (ᣆ) CANADIAN SYLLABICS NWI	[37A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C6, 0x0021 };
    uint32_t const ces[9] = { 0x37A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_398)
{
    // 18C6 003F;	
    // (ᣆ) CANADIAN SYLLABICS NWI	[37A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C6, 0x003F };
    uint32_t const ces[9] = { 0x37A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_399)
{
    // 18C6 0061;	
    // (ᣆ) CANADIAN SYLLABICS NWI	[37A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C6, 0x0061 };
    uint32_t const ces[9] = { 0x37A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_400)
{
    // 18C6 0041;	
    // (ᣆ) CANADIAN SYLLABICS NWI	[37A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18C6, 0x0041 };
    uint32_t const ces[9] = { 0x37A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_401)
{
    // 18C6 0062;	
    // (ᣆ) CANADIAN SYLLABICS NWI	[37A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C6, 0x0062 };
    uint32_t const ces[9] = { 0x37A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_402)
{
    // 18C7 0021;	
    // (ᣇ) CANADIAN SYLLABICS OJIBWAY NWI	[37A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C7, 0x0021 };
    uint32_t const ces[9] = { 0x37A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_403)
{
    // 18C7 003F;	
    // (ᣇ) CANADIAN SYLLABICS OJIBWAY NWI	[37A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C7, 0x003F };
    uint32_t const ces[9] = { 0x37A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_404)
{
    // 18C7 0061;	
    // (ᣇ) CANADIAN SYLLABICS OJIBWAY NWI	[37A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C7, 0x0061 };
    uint32_t const ces[9] = { 0x37A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_405)
{
    // 18C7 0041;	
    // (ᣇ) CANADIAN SYLLABICS OJIBWAY NWI	[37A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18C7, 0x0041 };
    uint32_t const ces[9] = { 0x37A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_406)
{
    // 18C7 0062;	
    // (ᣇ) CANADIAN SYLLABICS OJIBWAY NWI	[37A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C7, 0x0062 };
    uint32_t const ces[9] = { 0x37A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_407)
{
    // 18C8 0021;	
    // (ᣈ) CANADIAN SYLLABICS NWII	[37A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C8, 0x0021 };
    uint32_t const ces[9] = { 0x37A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_408)
{
    // 18C8 003F;	
    // (ᣈ) CANADIAN SYLLABICS NWII	[37A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C8, 0x003F };
    uint32_t const ces[9] = { 0x37A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_409)
{
    // 18C8 0061;	
    // (ᣈ) CANADIAN SYLLABICS NWII	[37A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C8, 0x0061 };
    uint32_t const ces[9] = { 0x37A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_410)
{
    // 18C8 0041;	
    // (ᣈ) CANADIAN SYLLABICS NWII	[37A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18C8, 0x0041 };
    uint32_t const ces[9] = { 0x37A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_411)
{
    // 18C8 0062;	
    // (ᣈ) CANADIAN SYLLABICS NWII	[37A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C8, 0x0062 };
    uint32_t const ces[9] = { 0x37A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_412)
{
    // 18C9 0021;	
    // (ᣉ) CANADIAN SYLLABICS OJIBWAY NWII	[37A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C9, 0x0021 };
    uint32_t const ces[9] = { 0x37A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_413)
{
    // 18C9 003F;	
    // (ᣉ) CANADIAN SYLLABICS OJIBWAY NWII	[37A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C9, 0x003F };
    uint32_t const ces[9] = { 0x37A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_414)
{
    // 18C9 0061;	
    // (ᣉ) CANADIAN SYLLABICS OJIBWAY NWII	[37A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C9, 0x0061 };
    uint32_t const ces[9] = { 0x37A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_415)
{
    // 18C9 0041;	
    // (ᣉ) CANADIAN SYLLABICS OJIBWAY NWII	[37A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18C9, 0x0041 };
    uint32_t const ces[9] = { 0x37A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_416)
{
    // 18C9 0062;	
    // (ᣉ) CANADIAN SYLLABICS OJIBWAY NWII	[37A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18C9, 0x0062 };
    uint32_t const ces[9] = { 0x37A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_417)
{
    // 18CA 0021;	
    // (ᣊ) CANADIAN SYLLABICS NWO	[37A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CA, 0x0021 };
    uint32_t const ces[9] = { 0x37A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_418)
{
    // 18CA 003F;	
    // (ᣊ) CANADIAN SYLLABICS NWO	[37A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CA, 0x003F };
    uint32_t const ces[9] = { 0x37A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_419)
{
    // 18CA 0061;	
    // (ᣊ) CANADIAN SYLLABICS NWO	[37A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CA, 0x0061 };
    uint32_t const ces[9] = { 0x37A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_420)
{
    // 18CA 0041;	
    // (ᣊ) CANADIAN SYLLABICS NWO	[37A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18CA, 0x0041 };
    uint32_t const ces[9] = { 0x37A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_421)
{
    // 18CA 0062;	
    // (ᣊ) CANADIAN SYLLABICS NWO	[37A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CA, 0x0062 };
    uint32_t const ces[9] = { 0x37A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_422)
{
    // 18CB 0021;	
    // (ᣋ) CANADIAN SYLLABICS OJIBWAY NWO	[37A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CB, 0x0021 };
    uint32_t const ces[9] = { 0x37A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_423)
{
    // 18CB 003F;	
    // (ᣋ) CANADIAN SYLLABICS OJIBWAY NWO	[37A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CB, 0x003F };
    uint32_t const ces[9] = { 0x37A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_424)
{
    // 18CB 0061;	
    // (ᣋ) CANADIAN SYLLABICS OJIBWAY NWO	[37A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CB, 0x0061 };
    uint32_t const ces[9] = { 0x37A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_425)
{
    // 18CB 0041;	
    // (ᣋ) CANADIAN SYLLABICS OJIBWAY NWO	[37A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18CB, 0x0041 };
    uint32_t const ces[9] = { 0x37A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_426)
{
    // 18CB 0062;	
    // (ᣋ) CANADIAN SYLLABICS OJIBWAY NWO	[37A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CB, 0x0062 };
    uint32_t const ces[9] = { 0x37A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_427)
{
    // 18CC 0021;	
    // (ᣌ) CANADIAN SYLLABICS NWOO	[37A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CC, 0x0021 };
    uint32_t const ces[9] = { 0x37A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_428)
{
    // 18CC 003F;	
    // (ᣌ) CANADIAN SYLLABICS NWOO	[37A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CC, 0x003F };
    uint32_t const ces[9] = { 0x37A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_429)
{
    // 18CC 0061;	
    // (ᣌ) CANADIAN SYLLABICS NWOO	[37A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CC, 0x0061 };
    uint32_t const ces[9] = { 0x37A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_430)
{
    // 18CC 0041;	
    // (ᣌ) CANADIAN SYLLABICS NWOO	[37A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18CC, 0x0041 };
    uint32_t const ces[9] = { 0x37A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_431)
{
    // 18CC 0062;	
    // (ᣌ) CANADIAN SYLLABICS NWOO	[37A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CC, 0x0062 };
    uint32_t const ces[9] = { 0x37A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_432)
{
    // 18CD 0021;	
    // (ᣍ) CANADIAN SYLLABICS OJIBWAY NWOO	[37AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CD, 0x0021 };
    uint32_t const ces[9] = { 0x37AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_433)
{
    // 18CD 003F;	
    // (ᣍ) CANADIAN SYLLABICS OJIBWAY NWOO	[37AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CD, 0x003F };
    uint32_t const ces[9] = { 0x37AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_434)
{
    // 18CD 0061;	
    // (ᣍ) CANADIAN SYLLABICS OJIBWAY NWOO	[37AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CD, 0x0061 };
    uint32_t const ces[9] = { 0x37AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_435)
{
    // 18CD 0041;	
    // (ᣍ) CANADIAN SYLLABICS OJIBWAY NWOO	[37AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18CD, 0x0041 };
    uint32_t const ces[9] = { 0x37AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_436)
{
    // 18CD 0062;	
    // (ᣍ) CANADIAN SYLLABICS OJIBWAY NWOO	[37AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CD, 0x0062 };
    uint32_t const ces[9] = { 0x37AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_437)
{
    // 18CE 0021;	
    // (ᣎ) CANADIAN SYLLABICS RWEE	[37AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CE, 0x0021 };
    uint32_t const ces[9] = { 0x37AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_438)
{
    // 18CE 003F;	
    // (ᣎ) CANADIAN SYLLABICS RWEE	[37AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CE, 0x003F };
    uint32_t const ces[9] = { 0x37AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_439)
{
    // 18CE 0061;	
    // (ᣎ) CANADIAN SYLLABICS RWEE	[37AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CE, 0x0061 };
    uint32_t const ces[9] = { 0x37AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_440)
{
    // 18CE 0041;	
    // (ᣎ) CANADIAN SYLLABICS RWEE	[37AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18CE, 0x0041 };
    uint32_t const ces[9] = { 0x37AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_441)
{
    // 18CE 0062;	
    // (ᣎ) CANADIAN SYLLABICS RWEE	[37AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CE, 0x0062 };
    uint32_t const ces[9] = { 0x37AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_442)
{
    // 18CF 0021;	
    // (ᣏ) CANADIAN SYLLABICS RWI	[37AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CF, 0x0021 };
    uint32_t const ces[9] = { 0x37AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_443)
{
    // 18CF 003F;	
    // (ᣏ) CANADIAN SYLLABICS RWI	[37AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CF, 0x003F };
    uint32_t const ces[9] = { 0x37AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_444)
{
    // 18CF 0061;	
    // (ᣏ) CANADIAN SYLLABICS RWI	[37AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CF, 0x0061 };
    uint32_t const ces[9] = { 0x37AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_445)
{
    // 18CF 0041;	
    // (ᣏ) CANADIAN SYLLABICS RWI	[37AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18CF, 0x0041 };
    uint32_t const ces[9] = { 0x37AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_446)
{
    // 18CF 0062;	
    // (ᣏ) CANADIAN SYLLABICS RWI	[37AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18CF, 0x0062 };
    uint32_t const ces[9] = { 0x37AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_447)
{
    // 18D0 0021;	
    // (ᣐ) CANADIAN SYLLABICS RWII	[37AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D0, 0x0021 };
    uint32_t const ces[9] = { 0x37AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_448)
{
    // 18D0 003F;	
    // (ᣐ) CANADIAN SYLLABICS RWII	[37AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D0, 0x003F };
    uint32_t const ces[9] = { 0x37AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_449)
{
    // 18D0 0061;	
    // (ᣐ) CANADIAN SYLLABICS RWII	[37AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D0, 0x0061 };
    uint32_t const ces[9] = { 0x37AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_450)
{
    // 18D0 0041;	
    // (ᣐ) CANADIAN SYLLABICS RWII	[37AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18D0, 0x0041 };
    uint32_t const ces[9] = { 0x37AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_451)
{
    // 18D0 0062;	
    // (ᣐ) CANADIAN SYLLABICS RWII	[37AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D0, 0x0062 };
    uint32_t const ces[9] = { 0x37AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_452)
{
    // 18D1 0021;	
    // (ᣑ) CANADIAN SYLLABICS RWO	[37AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D1, 0x0021 };
    uint32_t const ces[9] = { 0x37AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_453)
{
    // 18D1 003F;	
    // (ᣑ) CANADIAN SYLLABICS RWO	[37AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D1, 0x003F };
    uint32_t const ces[9] = { 0x37AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_454)
{
    // 18D1 0061;	
    // (ᣑ) CANADIAN SYLLABICS RWO	[37AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D1, 0x0061 };
    uint32_t const ces[9] = { 0x37AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_455)
{
    // 18D1 0041;	
    // (ᣑ) CANADIAN SYLLABICS RWO	[37AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18D1, 0x0041 };
    uint32_t const ces[9] = { 0x37AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_456)
{
    // 18D1 0062;	
    // (ᣑ) CANADIAN SYLLABICS RWO	[37AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D1, 0x0062 };
    uint32_t const ces[9] = { 0x37AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_457)
{
    // 18D2 0021;	
    // (ᣒ) CANADIAN SYLLABICS RWOO	[37AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D2, 0x0021 };
    uint32_t const ces[9] = { 0x37AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_458)
{
    // 18D2 003F;	
    // (ᣒ) CANADIAN SYLLABICS RWOO	[37AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D2, 0x003F };
    uint32_t const ces[9] = { 0x37AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_459)
{
    // 18D2 0061;	
    // (ᣒ) CANADIAN SYLLABICS RWOO	[37AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D2, 0x0061 };
    uint32_t const ces[9] = { 0x37AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_460)
{
    // 18D2 0041;	
    // (ᣒ) CANADIAN SYLLABICS RWOO	[37AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18D2, 0x0041 };
    uint32_t const ces[9] = { 0x37AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_461)
{
    // 18D2 0062;	
    // (ᣒ) CANADIAN SYLLABICS RWOO	[37AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D2, 0x0062 };
    uint32_t const ces[9] = { 0x37AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_462)
{
    // 18D3 0021;	
    // (ᣓ) CANADIAN SYLLABICS RWA	[37B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D3, 0x0021 };
    uint32_t const ces[9] = { 0x37B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_463)
{
    // 18D3 003F;	
    // (ᣓ) CANADIAN SYLLABICS RWA	[37B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D3, 0x003F };
    uint32_t const ces[9] = { 0x37B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_464)
{
    // 18D3 0061;	
    // (ᣓ) CANADIAN SYLLABICS RWA	[37B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D3, 0x0061 };
    uint32_t const ces[9] = { 0x37B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_465)
{
    // 18D3 0041;	
    // (ᣓ) CANADIAN SYLLABICS RWA	[37B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18D3, 0x0041 };
    uint32_t const ces[9] = { 0x37B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_466)
{
    // 18D3 0062;	
    // (ᣓ) CANADIAN SYLLABICS RWA	[37B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D3, 0x0062 };
    uint32_t const ces[9] = { 0x37B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_467)
{
    // 18D4 0021;	
    // (ᣔ) CANADIAN SYLLABICS OJIBWAY P	[37B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D4, 0x0021 };
    uint32_t const ces[9] = { 0x37B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_468)
{
    // 18D4 003F;	
    // (ᣔ) CANADIAN SYLLABICS OJIBWAY P	[37B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D4, 0x003F };
    uint32_t const ces[9] = { 0x37B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_469)
{
    // 18D4 0061;	
    // (ᣔ) CANADIAN SYLLABICS OJIBWAY P	[37B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D4, 0x0061 };
    uint32_t const ces[9] = { 0x37B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_470)
{
    // 18D4 0041;	
    // (ᣔ) CANADIAN SYLLABICS OJIBWAY P	[37B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18D4, 0x0041 };
    uint32_t const ces[9] = { 0x37B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_471)
{
    // 18D4 0062;	
    // (ᣔ) CANADIAN SYLLABICS OJIBWAY P	[37B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D4, 0x0062 };
    uint32_t const ces[9] = { 0x37B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_472)
{
    // 18D5 0021;	
    // (ᣕ) CANADIAN SYLLABICS OJIBWAY T	[37B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D5, 0x0021 };
    uint32_t const ces[9] = { 0x37B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_473)
{
    // 18D5 003F;	
    // (ᣕ) CANADIAN SYLLABICS OJIBWAY T	[37B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D5, 0x003F };
    uint32_t const ces[9] = { 0x37B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_474)
{
    // 18D5 0061;	
    // (ᣕ) CANADIAN SYLLABICS OJIBWAY T	[37B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D5, 0x0061 };
    uint32_t const ces[9] = { 0x37B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_475)
{
    // 18D5 0041;	
    // (ᣕ) CANADIAN SYLLABICS OJIBWAY T	[37B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18D5, 0x0041 };
    uint32_t const ces[9] = { 0x37B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_476)
{
    // 18D5 0062;	
    // (ᣕ) CANADIAN SYLLABICS OJIBWAY T	[37B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D5, 0x0062 };
    uint32_t const ces[9] = { 0x37B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_477)
{
    // 18D6 0021;	
    // (ᣖ) CANADIAN SYLLABICS OJIBWAY K	[37B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D6, 0x0021 };
    uint32_t const ces[9] = { 0x37B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_478)
{
    // 18D6 003F;	
    // (ᣖ) CANADIAN SYLLABICS OJIBWAY K	[37B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D6, 0x003F };
    uint32_t const ces[9] = { 0x37B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_479)
{
    // 18D6 0061;	
    // (ᣖ) CANADIAN SYLLABICS OJIBWAY K	[37B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D6, 0x0061 };
    uint32_t const ces[9] = { 0x37B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_480)
{
    // 18D6 0041;	
    // (ᣖ) CANADIAN SYLLABICS OJIBWAY K	[37B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18D6, 0x0041 };
    uint32_t const ces[9] = { 0x37B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_481)
{
    // 18D6 0062;	
    // (ᣖ) CANADIAN SYLLABICS OJIBWAY K	[37B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D6, 0x0062 };
    uint32_t const ces[9] = { 0x37B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_482)
{
    // 18D7 0021;	
    // (ᣗ) CANADIAN SYLLABICS OJIBWAY C	[37B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D7, 0x0021 };
    uint32_t const ces[9] = { 0x37B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_483)
{
    // 18D7 003F;	
    // (ᣗ) CANADIAN SYLLABICS OJIBWAY C	[37B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D7, 0x003F };
    uint32_t const ces[9] = { 0x37B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_484)
{
    // 18D7 0061;	
    // (ᣗ) CANADIAN SYLLABICS OJIBWAY C	[37B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D7, 0x0061 };
    uint32_t const ces[9] = { 0x37B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_485)
{
    // 18D7 0041;	
    // (ᣗ) CANADIAN SYLLABICS OJIBWAY C	[37B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18D7, 0x0041 };
    uint32_t const ces[9] = { 0x37B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_486)
{
    // 18D7 0062;	
    // (ᣗ) CANADIAN SYLLABICS OJIBWAY C	[37B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D7, 0x0062 };
    uint32_t const ces[9] = { 0x37B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_487)
{
    // 18D8 0021;	
    // (ᣘ) CANADIAN SYLLABICS OJIBWAY M	[37B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D8, 0x0021 };
    uint32_t const ces[9] = { 0x37B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_488)
{
    // 18D8 003F;	
    // (ᣘ) CANADIAN SYLLABICS OJIBWAY M	[37B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D8, 0x003F };
    uint32_t const ces[9] = { 0x37B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_489)
{
    // 18D8 0061;	
    // (ᣘ) CANADIAN SYLLABICS OJIBWAY M	[37B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D8, 0x0061 };
    uint32_t const ces[9] = { 0x37B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_490)
{
    // 18D8 0041;	
    // (ᣘ) CANADIAN SYLLABICS OJIBWAY M	[37B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18D8, 0x0041 };
    uint32_t const ces[9] = { 0x37B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_491)
{
    // 18D8 0062;	
    // (ᣘ) CANADIAN SYLLABICS OJIBWAY M	[37B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D8, 0x0062 };
    uint32_t const ces[9] = { 0x37B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_492)
{
    // 18D9 0021;	
    // (ᣙ) CANADIAN SYLLABICS OJIBWAY N	[37B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D9, 0x0021 };
    uint32_t const ces[9] = { 0x37B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_493)
{
    // 18D9 003F;	
    // (ᣙ) CANADIAN SYLLABICS OJIBWAY N	[37B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D9, 0x003F };
    uint32_t const ces[9] = { 0x37B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_494)
{
    // 18D9 0061;	
    // (ᣙ) CANADIAN SYLLABICS OJIBWAY N	[37B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D9, 0x0061 };
    uint32_t const ces[9] = { 0x37B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_495)
{
    // 18D9 0041;	
    // (ᣙ) CANADIAN SYLLABICS OJIBWAY N	[37B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18D9, 0x0041 };
    uint32_t const ces[9] = { 0x37B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_496)
{
    // 18D9 0062;	
    // (ᣙ) CANADIAN SYLLABICS OJIBWAY N	[37B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18D9, 0x0062 };
    uint32_t const ces[9] = { 0x37B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_497)
{
    // 18DA 0021;	
    // (ᣚ) CANADIAN SYLLABICS OJIBWAY S	[37B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DA, 0x0021 };
    uint32_t const ces[9] = { 0x37B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_498)
{
    // 18DA 003F;	
    // (ᣚ) CANADIAN SYLLABICS OJIBWAY S	[37B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DA, 0x003F };
    uint32_t const ces[9] = { 0x37B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_224_499)
{
    // 18DA 0061;	
    // (ᣚ) CANADIAN SYLLABICS OJIBWAY S	[37B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18DA, 0x0061 };
    uint32_t const ces[9] = { 0x37B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

