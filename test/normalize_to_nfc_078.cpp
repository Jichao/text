// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfc_078_000)
{
    // 1D5D8;1D5D8;1D5D8;0045;0045; 
    // (ùóò; ùóò; ùóò; E; E; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL E
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5D8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5D8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_001)
{
    // 1D5D9;1D5D9;1D5D9;0046;0046; 
    // (ùóô; ùóô; ùóô; F; F; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL F
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5D9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5D9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_002)
{
    // 1D5DA;1D5DA;1D5DA;0047;0047; 
    // (ùóö; ùóö; ùóö; G; G; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL G
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5DA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5DA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_003)
{
    // 1D5DB;1D5DB;1D5DB;0048;0048; 
    // (ùóõ; ùóõ; ùóõ; H; H; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL H
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5DB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5DB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_004)
{
    // 1D5DC;1D5DC;1D5DC;0049;0049; 
    // (ùóú; ùóú; ùóú; I; I; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL I
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5DC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5DC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_005)
{
    // 1D5DD;1D5DD;1D5DD;004A;004A; 
    // (ùóù; ùóù; ùóù; J; J; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL J
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5DD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5DD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_006)
{
    // 1D5DE;1D5DE;1D5DE;004B;004B; 
    // (ùóû; ùóû; ùóû; K; K; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL K
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5DE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5DE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_007)
{
    // 1D5DF;1D5DF;1D5DF;004C;004C; 
    // (ùóü; ùóü; ùóü; L; L; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL L
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5DF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5DF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_008)
{
    // 1D5E0;1D5E0;1D5E0;004D;004D; 
    // (ùó†; ùó†; ùó†; M; M; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL M
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5E0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5E0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_009)
{
    // 1D5E1;1D5E1;1D5E1;004E;004E; 
    // (ùó°; ùó°; ùó°; N; N; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL N
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5E1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5E1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_010)
{
    // 1D5E2;1D5E2;1D5E2;004F;004F; 
    // (ùó¢; ùó¢; ùó¢; O; O; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL O
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5E2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5E2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_011)
{
    // 1D5E3;1D5E3;1D5E3;0050;0050; 
    // (ùó£; ùó£; ùó£; P; P; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL P
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5E3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5E3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_012)
{
    // 1D5E4;1D5E4;1D5E4;0051;0051; 
    // (ùó§; ùó§; ùó§; Q; Q; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL Q
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5E4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5E4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_013)
{
    // 1D5E5;1D5E5;1D5E5;0052;0052; 
    // (ùó•; ùó•; ùó•; R; R; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL R
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5E5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5E5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_014)
{
    // 1D5E6;1D5E6;1D5E6;0053;0053; 
    // (ùó¶; ùó¶; ùó¶; S; S; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL S
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5E6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5E6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_015)
{
    // 1D5E7;1D5E7;1D5E7;0054;0054; 
    // (ùóß; ùóß; ùóß; T; T; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL T
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5E7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5E7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_016)
{
    // 1D5E8;1D5E8;1D5E8;0055;0055; 
    // (ùó®; ùó®; ùó®; U; U; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL U
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5E8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5E8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_017)
{
    // 1D5E9;1D5E9;1D5E9;0056;0056; 
    // (ùó©; ùó©; ùó©; V; V; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL V
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5E9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5E9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_018)
{
    // 1D5EA;1D5EA;1D5EA;0057;0057; 
    // (ùó™; ùó™; ùó™; W; W; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL W
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5EA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5EA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_019)
{
    // 1D5EB;1D5EB;1D5EB;0058;0058; 
    // (ùó´; ùó´; ùó´; X; X; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL X
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5EB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5EB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_020)
{
    // 1D5EC;1D5EC;1D5EC;0059;0059; 
    // (ùó¨; ùó¨; ùó¨; Y; Y; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL Y
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5EC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5EC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_021)
{
    // 1D5ED;1D5ED;1D5ED;005A;005A; 
    // (ùó≠; ùó≠; ùó≠; Z; Z; ) MATHEMATICAL SANS-SERIF BOLD CAPITAL Z
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5ED }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5ED }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_022)
{
    // 1D5EE;1D5EE;1D5EE;0061;0061; 
    // (ùóÆ; ùóÆ; ùóÆ; a; a; ) MATHEMATICAL SANS-SERIF BOLD SMALL A
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5EE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5EE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_023)
{
    // 1D5EF;1D5EF;1D5EF;0062;0062; 
    // (ùóØ; ùóØ; ùóØ; b; b; ) MATHEMATICAL SANS-SERIF BOLD SMALL B
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5EF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5EF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_024)
{
    // 1D5F0;1D5F0;1D5F0;0063;0063; 
    // (ùó∞; ùó∞; ùó∞; c; c; ) MATHEMATICAL SANS-SERIF BOLD SMALL C
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5F0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5F0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_025)
{
    // 1D5F1;1D5F1;1D5F1;0064;0064; 
    // (ùó±; ùó±; ùó±; d; d; ) MATHEMATICAL SANS-SERIF BOLD SMALL D
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5F1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5F1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_026)
{
    // 1D5F2;1D5F2;1D5F2;0065;0065; 
    // (ùó≤; ùó≤; ùó≤; e; e; ) MATHEMATICAL SANS-SERIF BOLD SMALL E
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5F2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5F2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_027)
{
    // 1D5F3;1D5F3;1D5F3;0066;0066; 
    // (ùó≥; ùó≥; ùó≥; f; f; ) MATHEMATICAL SANS-SERIF BOLD SMALL F
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5F3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5F3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_028)
{
    // 1D5F4;1D5F4;1D5F4;0067;0067; 
    // (ùó¥; ùó¥; ùó¥; g; g; ) MATHEMATICAL SANS-SERIF BOLD SMALL G
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5F4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5F4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_029)
{
    // 1D5F5;1D5F5;1D5F5;0068;0068; 
    // (ùóµ; ùóµ; ùóµ; h; h; ) MATHEMATICAL SANS-SERIF BOLD SMALL H
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5F5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5F5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_030)
{
    // 1D5F6;1D5F6;1D5F6;0069;0069; 
    // (ùó∂; ùó∂; ùó∂; i; i; ) MATHEMATICAL SANS-SERIF BOLD SMALL I
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5F6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5F6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_031)
{
    // 1D5F7;1D5F7;1D5F7;006A;006A; 
    // (ùó∑; ùó∑; ùó∑; j; j; ) MATHEMATICAL SANS-SERIF BOLD SMALL J
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5F7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5F7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_032)
{
    // 1D5F8;1D5F8;1D5F8;006B;006B; 
    // (ùó∏; ùó∏; ùó∏; k; k; ) MATHEMATICAL SANS-SERIF BOLD SMALL K
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5F8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5F8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_033)
{
    // 1D5F9;1D5F9;1D5F9;006C;006C; 
    // (ùóπ; ùóπ; ùóπ; l; l; ) MATHEMATICAL SANS-SERIF BOLD SMALL L
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5F9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5F9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_034)
{
    // 1D5FA;1D5FA;1D5FA;006D;006D; 
    // (ùó∫; ùó∫; ùó∫; m; m; ) MATHEMATICAL SANS-SERIF BOLD SMALL M
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5FA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5FA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_035)
{
    // 1D5FB;1D5FB;1D5FB;006E;006E; 
    // (ùóª; ùóª; ùóª; n; n; ) MATHEMATICAL SANS-SERIF BOLD SMALL N
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5FB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5FB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_036)
{
    // 1D5FC;1D5FC;1D5FC;006F;006F; 
    // (ùóº; ùóº; ùóº; o; o; ) MATHEMATICAL SANS-SERIF BOLD SMALL O
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5FC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5FC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_037)
{
    // 1D5FD;1D5FD;1D5FD;0070;0070; 
    // (ùóΩ; ùóΩ; ùóΩ; p; p; ) MATHEMATICAL SANS-SERIF BOLD SMALL P
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5FD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5FD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_038)
{
    // 1D5FE;1D5FE;1D5FE;0071;0071; 
    // (ùóæ; ùóæ; ùóæ; q; q; ) MATHEMATICAL SANS-SERIF BOLD SMALL Q
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5FE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5FE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_039)
{
    // 1D5FF;1D5FF;1D5FF;0072;0072; 
    // (ùóø; ùóø; ùóø; r; r; ) MATHEMATICAL SANS-SERIF BOLD SMALL R
    {
        std::array<uint32_t, 1> const source = {{ 0x1D5FF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D5FF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_040)
{
    // 1D600;1D600;1D600;0073;0073; 
    // (ùòÄ; ùòÄ; ùòÄ; s; s; ) MATHEMATICAL SANS-SERIF BOLD SMALL S
    {
        std::array<uint32_t, 1> const source = {{ 0x1D600 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D600 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_041)
{
    // 1D601;1D601;1D601;0074;0074; 
    // (ùòÅ; ùòÅ; ùòÅ; t; t; ) MATHEMATICAL SANS-SERIF BOLD SMALL T
    {
        std::array<uint32_t, 1> const source = {{ 0x1D601 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D601 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_042)
{
    // 1D602;1D602;1D602;0075;0075; 
    // (ùòÇ; ùòÇ; ùòÇ; u; u; ) MATHEMATICAL SANS-SERIF BOLD SMALL U
    {
        std::array<uint32_t, 1> const source = {{ 0x1D602 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D602 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_043)
{
    // 1D603;1D603;1D603;0076;0076; 
    // (ùòÉ; ùòÉ; ùòÉ; v; v; ) MATHEMATICAL SANS-SERIF BOLD SMALL V
    {
        std::array<uint32_t, 1> const source = {{ 0x1D603 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D603 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_044)
{
    // 1D604;1D604;1D604;0077;0077; 
    // (ùòÑ; ùòÑ; ùòÑ; w; w; ) MATHEMATICAL SANS-SERIF BOLD SMALL W
    {
        std::array<uint32_t, 1> const source = {{ 0x1D604 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D604 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_045)
{
    // 1D605;1D605;1D605;0078;0078; 
    // (ùòÖ; ùòÖ; ùòÖ; x; x; ) MATHEMATICAL SANS-SERIF BOLD SMALL X
    {
        std::array<uint32_t, 1> const source = {{ 0x1D605 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D605 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_046)
{
    // 1D606;1D606;1D606;0079;0079; 
    // (ùòÜ; ùòÜ; ùòÜ; y; y; ) MATHEMATICAL SANS-SERIF BOLD SMALL Y
    {
        std::array<uint32_t, 1> const source = {{ 0x1D606 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D606 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_047)
{
    // 1D607;1D607;1D607;007A;007A; 
    // (ùòá; ùòá; ùòá; z; z; ) MATHEMATICAL SANS-SERIF BOLD SMALL Z
    {
        std::array<uint32_t, 1> const source = {{ 0x1D607 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D607 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_048)
{
    // 1D608;1D608;1D608;0041;0041; 
    // (ùòà; ùòà; ùòà; A; A; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL A
    {
        std::array<uint32_t, 1> const source = {{ 0x1D608 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D608 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_049)
{
    // 1D609;1D609;1D609;0042;0042; 
    // (ùòâ; ùòâ; ùòâ; B; B; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL B
    {
        std::array<uint32_t, 1> const source = {{ 0x1D609 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D609 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_050)
{
    // 1D60A;1D60A;1D60A;0043;0043; 
    // (ùòä; ùòä; ùòä; C; C; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL C
    {
        std::array<uint32_t, 1> const source = {{ 0x1D60A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D60A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_051)
{
    // 1D60B;1D60B;1D60B;0044;0044; 
    // (ùòã; ùòã; ùòã; D; D; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL D
    {
        std::array<uint32_t, 1> const source = {{ 0x1D60B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D60B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_052)
{
    // 1D60C;1D60C;1D60C;0045;0045; 
    // (ùòå; ùòå; ùòå; E; E; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL E
    {
        std::array<uint32_t, 1> const source = {{ 0x1D60C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D60C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_053)
{
    // 1D60D;1D60D;1D60D;0046;0046; 
    // (ùòç; ùòç; ùòç; F; F; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL F
    {
        std::array<uint32_t, 1> const source = {{ 0x1D60D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D60D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_054)
{
    // 1D60E;1D60E;1D60E;0047;0047; 
    // (ùòé; ùòé; ùòé; G; G; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL G
    {
        std::array<uint32_t, 1> const source = {{ 0x1D60E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D60E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_055)
{
    // 1D60F;1D60F;1D60F;0048;0048; 
    // (ùòè; ùòè; ùòè; H; H; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL H
    {
        std::array<uint32_t, 1> const source = {{ 0x1D60F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D60F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_056)
{
    // 1D610;1D610;1D610;0049;0049; 
    // (ùòê; ùòê; ùòê; I; I; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL I
    {
        std::array<uint32_t, 1> const source = {{ 0x1D610 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D610 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_057)
{
    // 1D611;1D611;1D611;004A;004A; 
    // (ùòë; ùòë; ùòë; J; J; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL J
    {
        std::array<uint32_t, 1> const source = {{ 0x1D611 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D611 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_058)
{
    // 1D612;1D612;1D612;004B;004B; 
    // (ùòí; ùòí; ùòí; K; K; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL K
    {
        std::array<uint32_t, 1> const source = {{ 0x1D612 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D612 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_059)
{
    // 1D613;1D613;1D613;004C;004C; 
    // (ùòì; ùòì; ùòì; L; L; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL L
    {
        std::array<uint32_t, 1> const source = {{ 0x1D613 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D613 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_060)
{
    // 1D614;1D614;1D614;004D;004D; 
    // (ùòî; ùòî; ùòî; M; M; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL M
    {
        std::array<uint32_t, 1> const source = {{ 0x1D614 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D614 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_061)
{
    // 1D615;1D615;1D615;004E;004E; 
    // (ùòï; ùòï; ùòï; N; N; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL N
    {
        std::array<uint32_t, 1> const source = {{ 0x1D615 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D615 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_062)
{
    // 1D616;1D616;1D616;004F;004F; 
    // (ùòñ; ùòñ; ùòñ; O; O; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL O
    {
        std::array<uint32_t, 1> const source = {{ 0x1D616 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D616 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_063)
{
    // 1D617;1D617;1D617;0050;0050; 
    // (ùòó; ùòó; ùòó; P; P; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL P
    {
        std::array<uint32_t, 1> const source = {{ 0x1D617 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D617 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_064)
{
    // 1D618;1D618;1D618;0051;0051; 
    // (ùòò; ùòò; ùòò; Q; Q; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Q
    {
        std::array<uint32_t, 1> const source = {{ 0x1D618 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D618 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_065)
{
    // 1D619;1D619;1D619;0052;0052; 
    // (ùòô; ùòô; ùòô; R; R; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL R
    {
        std::array<uint32_t, 1> const source = {{ 0x1D619 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D619 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_066)
{
    // 1D61A;1D61A;1D61A;0053;0053; 
    // (ùòö; ùòö; ùòö; S; S; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL S
    {
        std::array<uint32_t, 1> const source = {{ 0x1D61A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D61A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_067)
{
    // 1D61B;1D61B;1D61B;0054;0054; 
    // (ùòõ; ùòõ; ùòõ; T; T; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL T
    {
        std::array<uint32_t, 1> const source = {{ 0x1D61B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D61B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_068)
{
    // 1D61C;1D61C;1D61C;0055;0055; 
    // (ùòú; ùòú; ùòú; U; U; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL U
    {
        std::array<uint32_t, 1> const source = {{ 0x1D61C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D61C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_069)
{
    // 1D61D;1D61D;1D61D;0056;0056; 
    // (ùòù; ùòù; ùòù; V; V; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL V
    {
        std::array<uint32_t, 1> const source = {{ 0x1D61D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D61D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_070)
{
    // 1D61E;1D61E;1D61E;0057;0057; 
    // (ùòû; ùòû; ùòû; W; W; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL W
    {
        std::array<uint32_t, 1> const source = {{ 0x1D61E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D61E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_071)
{
    // 1D61F;1D61F;1D61F;0058;0058; 
    // (ùòü; ùòü; ùòü; X; X; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL X
    {
        std::array<uint32_t, 1> const source = {{ 0x1D61F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D61F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_072)
{
    // 1D620;1D620;1D620;0059;0059; 
    // (ùò†; ùò†; ùò†; Y; Y; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Y
    {
        std::array<uint32_t, 1> const source = {{ 0x1D620 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D620 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_073)
{
    // 1D621;1D621;1D621;005A;005A; 
    // (ùò°; ùò°; ùò°; Z; Z; ) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Z
    {
        std::array<uint32_t, 1> const source = {{ 0x1D621 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D621 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_074)
{
    // 1D622;1D622;1D622;0061;0061; 
    // (ùò¢; ùò¢; ùò¢; a; a; ) MATHEMATICAL SANS-SERIF ITALIC SMALL A
    {
        std::array<uint32_t, 1> const source = {{ 0x1D622 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D622 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_075)
{
    // 1D623;1D623;1D623;0062;0062; 
    // (ùò£; ùò£; ùò£; b; b; ) MATHEMATICAL SANS-SERIF ITALIC SMALL B
    {
        std::array<uint32_t, 1> const source = {{ 0x1D623 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D623 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_076)
{
    // 1D624;1D624;1D624;0063;0063; 
    // (ùò§; ùò§; ùò§; c; c; ) MATHEMATICAL SANS-SERIF ITALIC SMALL C
    {
        std::array<uint32_t, 1> const source = {{ 0x1D624 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D624 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_077)
{
    // 1D625;1D625;1D625;0064;0064; 
    // (ùò•; ùò•; ùò•; d; d; ) MATHEMATICAL SANS-SERIF ITALIC SMALL D
    {
        std::array<uint32_t, 1> const source = {{ 0x1D625 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D625 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_078)
{
    // 1D626;1D626;1D626;0065;0065; 
    // (ùò¶; ùò¶; ùò¶; e; e; ) MATHEMATICAL SANS-SERIF ITALIC SMALL E
    {
        std::array<uint32_t, 1> const source = {{ 0x1D626 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D626 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_079)
{
    // 1D627;1D627;1D627;0066;0066; 
    // (ùòß; ùòß; ùòß; f; f; ) MATHEMATICAL SANS-SERIF ITALIC SMALL F
    {
        std::array<uint32_t, 1> const source = {{ 0x1D627 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D627 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_080)
{
    // 1D628;1D628;1D628;0067;0067; 
    // (ùò®; ùò®; ùò®; g; g; ) MATHEMATICAL SANS-SERIF ITALIC SMALL G
    {
        std::array<uint32_t, 1> const source = {{ 0x1D628 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D628 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_081)
{
    // 1D629;1D629;1D629;0068;0068; 
    // (ùò©; ùò©; ùò©; h; h; ) MATHEMATICAL SANS-SERIF ITALIC SMALL H
    {
        std::array<uint32_t, 1> const source = {{ 0x1D629 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D629 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_082)
{
    // 1D62A;1D62A;1D62A;0069;0069; 
    // (ùò™; ùò™; ùò™; i; i; ) MATHEMATICAL SANS-SERIF ITALIC SMALL I
    {
        std::array<uint32_t, 1> const source = {{ 0x1D62A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D62A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_083)
{
    // 1D62B;1D62B;1D62B;006A;006A; 
    // (ùò´; ùò´; ùò´; j; j; ) MATHEMATICAL SANS-SERIF ITALIC SMALL J
    {
        std::array<uint32_t, 1> const source = {{ 0x1D62B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D62B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_084)
{
    // 1D62C;1D62C;1D62C;006B;006B; 
    // (ùò¨; ùò¨; ùò¨; k; k; ) MATHEMATICAL SANS-SERIF ITALIC SMALL K
    {
        std::array<uint32_t, 1> const source = {{ 0x1D62C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D62C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_085)
{
    // 1D62D;1D62D;1D62D;006C;006C; 
    // (ùò≠; ùò≠; ùò≠; l; l; ) MATHEMATICAL SANS-SERIF ITALIC SMALL L
    {
        std::array<uint32_t, 1> const source = {{ 0x1D62D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D62D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_086)
{
    // 1D62E;1D62E;1D62E;006D;006D; 
    // (ùòÆ; ùòÆ; ùòÆ; m; m; ) MATHEMATICAL SANS-SERIF ITALIC SMALL M
    {
        std::array<uint32_t, 1> const source = {{ 0x1D62E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D62E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_087)
{
    // 1D62F;1D62F;1D62F;006E;006E; 
    // (ùòØ; ùòØ; ùòØ; n; n; ) MATHEMATICAL SANS-SERIF ITALIC SMALL N
    {
        std::array<uint32_t, 1> const source = {{ 0x1D62F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D62F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_088)
{
    // 1D630;1D630;1D630;006F;006F; 
    // (ùò∞; ùò∞; ùò∞; o; o; ) MATHEMATICAL SANS-SERIF ITALIC SMALL O
    {
        std::array<uint32_t, 1> const source = {{ 0x1D630 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D630 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_089)
{
    // 1D631;1D631;1D631;0070;0070; 
    // (ùò±; ùò±; ùò±; p; p; ) MATHEMATICAL SANS-SERIF ITALIC SMALL P
    {
        std::array<uint32_t, 1> const source = {{ 0x1D631 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D631 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_090)
{
    // 1D632;1D632;1D632;0071;0071; 
    // (ùò≤; ùò≤; ùò≤; q; q; ) MATHEMATICAL SANS-SERIF ITALIC SMALL Q
    {
        std::array<uint32_t, 1> const source = {{ 0x1D632 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D632 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_091)
{
    // 1D633;1D633;1D633;0072;0072; 
    // (ùò≥; ùò≥; ùò≥; r; r; ) MATHEMATICAL SANS-SERIF ITALIC SMALL R
    {
        std::array<uint32_t, 1> const source = {{ 0x1D633 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D633 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_092)
{
    // 1D634;1D634;1D634;0073;0073; 
    // (ùò¥; ùò¥; ùò¥; s; s; ) MATHEMATICAL SANS-SERIF ITALIC SMALL S
    {
        std::array<uint32_t, 1> const source = {{ 0x1D634 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D634 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_093)
{
    // 1D635;1D635;1D635;0074;0074; 
    // (ùòµ; ùòµ; ùòµ; t; t; ) MATHEMATICAL SANS-SERIF ITALIC SMALL T
    {
        std::array<uint32_t, 1> const source = {{ 0x1D635 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D635 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_094)
{
    // 1D636;1D636;1D636;0075;0075; 
    // (ùò∂; ùò∂; ùò∂; u; u; ) MATHEMATICAL SANS-SERIF ITALIC SMALL U
    {
        std::array<uint32_t, 1> const source = {{ 0x1D636 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D636 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_095)
{
    // 1D637;1D637;1D637;0076;0076; 
    // (ùò∑; ùò∑; ùò∑; v; v; ) MATHEMATICAL SANS-SERIF ITALIC SMALL V
    {
        std::array<uint32_t, 1> const source = {{ 0x1D637 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D637 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_096)
{
    // 1D638;1D638;1D638;0077;0077; 
    // (ùò∏; ùò∏; ùò∏; w; w; ) MATHEMATICAL SANS-SERIF ITALIC SMALL W
    {
        std::array<uint32_t, 1> const source = {{ 0x1D638 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D638 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_097)
{
    // 1D639;1D639;1D639;0078;0078; 
    // (ùòπ; ùòπ; ùòπ; x; x; ) MATHEMATICAL SANS-SERIF ITALIC SMALL X
    {
        std::array<uint32_t, 1> const source = {{ 0x1D639 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D639 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_098)
{
    // 1D63A;1D63A;1D63A;0079;0079; 
    // (ùò∫; ùò∫; ùò∫; y; y; ) MATHEMATICAL SANS-SERIF ITALIC SMALL Y
    {
        std::array<uint32_t, 1> const source = {{ 0x1D63A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D63A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_099)
{
    // 1D63B;1D63B;1D63B;007A;007A; 
    // (ùòª; ùòª; ùòª; z; z; ) MATHEMATICAL SANS-SERIF ITALIC SMALL Z
    {
        std::array<uint32_t, 1> const source = {{ 0x1D63B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D63B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_100)
{
    // 1D63C;1D63C;1D63C;0041;0041; 
    // (ùòº; ùòº; ùòº; A; A; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL A
    {
        std::array<uint32_t, 1> const source = {{ 0x1D63C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D63C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_101)
{
    // 1D63D;1D63D;1D63D;0042;0042; 
    // (ùòΩ; ùòΩ; ùòΩ; B; B; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL B
    {
        std::array<uint32_t, 1> const source = {{ 0x1D63D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D63D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_102)
{
    // 1D63E;1D63E;1D63E;0043;0043; 
    // (ùòæ; ùòæ; ùòæ; C; C; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL C
    {
        std::array<uint32_t, 1> const source = {{ 0x1D63E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D63E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_103)
{
    // 1D63F;1D63F;1D63F;0044;0044; 
    // (ùòø; ùòø; ùòø; D; D; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D
    {
        std::array<uint32_t, 1> const source = {{ 0x1D63F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D63F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_104)
{
    // 1D640;1D640;1D640;0045;0045; 
    // (ùôÄ; ùôÄ; ùôÄ; E; E; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL E
    {
        std::array<uint32_t, 1> const source = {{ 0x1D640 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D640 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_105)
{
    // 1D641;1D641;1D641;0046;0046; 
    // (ùôÅ; ùôÅ; ùôÅ; F; F; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL F
    {
        std::array<uint32_t, 1> const source = {{ 0x1D641 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D641 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_106)
{
    // 1D642;1D642;1D642;0047;0047; 
    // (ùôÇ; ùôÇ; ùôÇ; G; G; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G
    {
        std::array<uint32_t, 1> const source = {{ 0x1D642 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D642 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_107)
{
    // 1D643;1D643;1D643;0048;0048; 
    // (ùôÉ; ùôÉ; ùôÉ; H; H; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL H
    {
        std::array<uint32_t, 1> const source = {{ 0x1D643 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D643 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_108)
{
    // 1D644;1D644;1D644;0049;0049; 
    // (ùôÑ; ùôÑ; ùôÑ; I; I; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I
    {
        std::array<uint32_t, 1> const source = {{ 0x1D644 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D644 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_109)
{
    // 1D645;1D645;1D645;004A;004A; 
    // (ùôÖ; ùôÖ; ùôÖ; J; J; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL J
    {
        std::array<uint32_t, 1> const source = {{ 0x1D645 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D645 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_110)
{
    // 1D646;1D646;1D646;004B;004B; 
    // (ùôÜ; ùôÜ; ùôÜ; K; K; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL K
    {
        std::array<uint32_t, 1> const source = {{ 0x1D646 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D646 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_111)
{
    // 1D647;1D647;1D647;004C;004C; 
    // (ùôá; ùôá; ùôá; L; L; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL L
    {
        std::array<uint32_t, 1> const source = {{ 0x1D647 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D647 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_112)
{
    // 1D648;1D648;1D648;004D;004D; 
    // (ùôà; ùôà; ùôà; M; M; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M
    {
        std::array<uint32_t, 1> const source = {{ 0x1D648 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D648 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_113)
{
    // 1D649;1D649;1D649;004E;004E; 
    // (ùôâ; ùôâ; ùôâ; N; N; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL N
    {
        std::array<uint32_t, 1> const source = {{ 0x1D649 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D649 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_114)
{
    // 1D64A;1D64A;1D64A;004F;004F; 
    // (ùôä; ùôä; ùôä; O; O; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O
    {
        std::array<uint32_t, 1> const source = {{ 0x1D64A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D64A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_115)
{
    // 1D64B;1D64B;1D64B;0050;0050; 
    // (ùôã; ùôã; ùôã; P; P; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P
    {
        std::array<uint32_t, 1> const source = {{ 0x1D64B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D64B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_116)
{
    // 1D64C;1D64C;1D64C;0051;0051; 
    // (ùôå; ùôå; ùôå; Q; Q; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Q
    {
        std::array<uint32_t, 1> const source = {{ 0x1D64C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D64C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_117)
{
    // 1D64D;1D64D;1D64D;0052;0052; 
    // (ùôç; ùôç; ùôç; R; R; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL R
    {
        std::array<uint32_t, 1> const source = {{ 0x1D64D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D64D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_118)
{
    // 1D64E;1D64E;1D64E;0053;0053; 
    // (ùôé; ùôé; ùôé; S; S; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL S
    {
        std::array<uint32_t, 1> const source = {{ 0x1D64E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D64E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_119)
{
    // 1D64F;1D64F;1D64F;0054;0054; 
    // (ùôè; ùôè; ùôè; T; T; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL T
    {
        std::array<uint32_t, 1> const source = {{ 0x1D64F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D64F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_120)
{
    // 1D650;1D650;1D650;0055;0055; 
    // (ùôê; ùôê; ùôê; U; U; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL U
    {
        std::array<uint32_t, 1> const source = {{ 0x1D650 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D650 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_121)
{
    // 1D651;1D651;1D651;0056;0056; 
    // (ùôë; ùôë; ùôë; V; V; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V
    {
        std::array<uint32_t, 1> const source = {{ 0x1D651 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D651 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_122)
{
    // 1D652;1D652;1D652;0057;0057; 
    // (ùôí; ùôí; ùôí; W; W; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL W
    {
        std::array<uint32_t, 1> const source = {{ 0x1D652 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D652 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_123)
{
    // 1D653;1D653;1D653;0058;0058; 
    // (ùôì; ùôì; ùôì; X; X; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL X
    {
        std::array<uint32_t, 1> const source = {{ 0x1D653 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D653 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_124)
{
    // 1D654;1D654;1D654;0059;0059; 
    // (ùôî; ùôî; ùôî; Y; Y; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y
    {
        std::array<uint32_t, 1> const source = {{ 0x1D654 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D654 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_125)
{
    // 1D655;1D655;1D655;005A;005A; 
    // (ùôï; ùôï; ùôï; Z; Z; ) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z
    {
        std::array<uint32_t, 1> const source = {{ 0x1D655 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D655 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_126)
{
    // 1D656;1D656;1D656;0061;0061; 
    // (ùôñ; ùôñ; ùôñ; a; a; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL A
    {
        std::array<uint32_t, 1> const source = {{ 0x1D656 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D656 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_127)
{
    // 1D657;1D657;1D657;0062;0062; 
    // (ùôó; ùôó; ùôó; b; b; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL B
    {
        std::array<uint32_t, 1> const source = {{ 0x1D657 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D657 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_128)
{
    // 1D658;1D658;1D658;0063;0063; 
    // (ùôò; ùôò; ùôò; c; c; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL C
    {
        std::array<uint32_t, 1> const source = {{ 0x1D658 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D658 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_129)
{
    // 1D659;1D659;1D659;0064;0064; 
    // (ùôô; ùôô; ùôô; d; d; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D
    {
        std::array<uint32_t, 1> const source = {{ 0x1D659 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D659 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_130)
{
    // 1D65A;1D65A;1D65A;0065;0065; 
    // (ùôö; ùôö; ùôö; e; e; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E
    {
        std::array<uint32_t, 1> const source = {{ 0x1D65A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D65A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_131)
{
    // 1D65B;1D65B;1D65B;0066;0066; 
    // (ùôõ; ùôõ; ùôõ; f; f; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F
    {
        std::array<uint32_t, 1> const source = {{ 0x1D65B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D65B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_132)
{
    // 1D65C;1D65C;1D65C;0067;0067; 
    // (ùôú; ùôú; ùôú; g; g; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G
    {
        std::array<uint32_t, 1> const source = {{ 0x1D65C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D65C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_133)
{
    // 1D65D;1D65D;1D65D;0068;0068; 
    // (ùôù; ùôù; ùôù; h; h; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL H
    {
        std::array<uint32_t, 1> const source = {{ 0x1D65D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D65D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_134)
{
    // 1D65E;1D65E;1D65E;0069;0069; 
    // (ùôû; ùôû; ùôû; i; i; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I
    {
        std::array<uint32_t, 1> const source = {{ 0x1D65E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D65E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_135)
{
    // 1D65F;1D65F;1D65F;006A;006A; 
    // (ùôü; ùôü; ùôü; j; j; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL J
    {
        std::array<uint32_t, 1> const source = {{ 0x1D65F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D65F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_136)
{
    // 1D660;1D660;1D660;006B;006B; 
    // (ùô†; ùô†; ùô†; k; k; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL K
    {
        std::array<uint32_t, 1> const source = {{ 0x1D660 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D660 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_137)
{
    // 1D661;1D661;1D661;006C;006C; 
    // (ùô°; ùô°; ùô°; l; l; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL L
    {
        std::array<uint32_t, 1> const source = {{ 0x1D661 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D661 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_138)
{
    // 1D662;1D662;1D662;006D;006D; 
    // (ùô¢; ùô¢; ùô¢; m; m; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M
    {
        std::array<uint32_t, 1> const source = {{ 0x1D662 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D662 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_139)
{
    // 1D663;1D663;1D663;006E;006E; 
    // (ùô£; ùô£; ùô£; n; n; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL N
    {
        std::array<uint32_t, 1> const source = {{ 0x1D663 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D663 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_140)
{
    // 1D664;1D664;1D664;006F;006F; 
    // (ùô§; ùô§; ùô§; o; o; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O
    {
        std::array<uint32_t, 1> const source = {{ 0x1D664 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D664 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_141)
{
    // 1D665;1D665;1D665;0070;0070; 
    // (ùô•; ùô•; ùô•; p; p; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL P
    {
        std::array<uint32_t, 1> const source = {{ 0x1D665 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D665 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_142)
{
    // 1D666;1D666;1D666;0071;0071; 
    // (ùô¶; ùô¶; ùô¶; q; q; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Q
    {
        std::array<uint32_t, 1> const source = {{ 0x1D666 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D666 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_143)
{
    // 1D667;1D667;1D667;0072;0072; 
    // (ùôß; ùôß; ùôß; r; r; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL R
    {
        std::array<uint32_t, 1> const source = {{ 0x1D667 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D667 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_144)
{
    // 1D668;1D668;1D668;0073;0073; 
    // (ùô®; ùô®; ùô®; s; s; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL S
    {
        std::array<uint32_t, 1> const source = {{ 0x1D668 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D668 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_145)
{
    // 1D669;1D669;1D669;0074;0074; 
    // (ùô©; ùô©; ùô©; t; t; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL T
    {
        std::array<uint32_t, 1> const source = {{ 0x1D669 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D669 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_146)
{
    // 1D66A;1D66A;1D66A;0075;0075; 
    // (ùô™; ùô™; ùô™; u; u; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL U
    {
        std::array<uint32_t, 1> const source = {{ 0x1D66A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D66A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_147)
{
    // 1D66B;1D66B;1D66B;0076;0076; 
    // (ùô´; ùô´; ùô´; v; v; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V
    {
        std::array<uint32_t, 1> const source = {{ 0x1D66B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D66B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_148)
{
    // 1D66C;1D66C;1D66C;0077;0077; 
    // (ùô¨; ùô¨; ùô¨; w; w; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL W
    {
        std::array<uint32_t, 1> const source = {{ 0x1D66C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D66C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_149)
{
    // 1D66D;1D66D;1D66D;0078;0078; 
    // (ùô≠; ùô≠; ùô≠; x; x; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL X
    {
        std::array<uint32_t, 1> const source = {{ 0x1D66D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D66D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_150)
{
    // 1D66E;1D66E;1D66E;0079;0079; 
    // (ùôÆ; ùôÆ; ùôÆ; y; y; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Y
    {
        std::array<uint32_t, 1> const source = {{ 0x1D66E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D66E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_151)
{
    // 1D66F;1D66F;1D66F;007A;007A; 
    // (ùôØ; ùôØ; ùôØ; z; z; ) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Z
    {
        std::array<uint32_t, 1> const source = {{ 0x1D66F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D66F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_152)
{
    // 1D670;1D670;1D670;0041;0041; 
    // (ùô∞; ùô∞; ùô∞; A; A; ) MATHEMATICAL MONOSPACE CAPITAL A
    {
        std::array<uint32_t, 1> const source = {{ 0x1D670 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D670 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_153)
{
    // 1D671;1D671;1D671;0042;0042; 
    // (ùô±; ùô±; ùô±; B; B; ) MATHEMATICAL MONOSPACE CAPITAL B
    {
        std::array<uint32_t, 1> const source = {{ 0x1D671 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D671 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_154)
{
    // 1D672;1D672;1D672;0043;0043; 
    // (ùô≤; ùô≤; ùô≤; C; C; ) MATHEMATICAL MONOSPACE CAPITAL C
    {
        std::array<uint32_t, 1> const source = {{ 0x1D672 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D672 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_155)
{
    // 1D673;1D673;1D673;0044;0044; 
    // (ùô≥; ùô≥; ùô≥; D; D; ) MATHEMATICAL MONOSPACE CAPITAL D
    {
        std::array<uint32_t, 1> const source = {{ 0x1D673 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D673 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_156)
{
    // 1D674;1D674;1D674;0045;0045; 
    // (ùô¥; ùô¥; ùô¥; E; E; ) MATHEMATICAL MONOSPACE CAPITAL E
    {
        std::array<uint32_t, 1> const source = {{ 0x1D674 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D674 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_157)
{
    // 1D675;1D675;1D675;0046;0046; 
    // (ùôµ; ùôµ; ùôµ; F; F; ) MATHEMATICAL MONOSPACE CAPITAL F
    {
        std::array<uint32_t, 1> const source = {{ 0x1D675 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D675 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_158)
{
    // 1D676;1D676;1D676;0047;0047; 
    // (ùô∂; ùô∂; ùô∂; G; G; ) MATHEMATICAL MONOSPACE CAPITAL G
    {
        std::array<uint32_t, 1> const source = {{ 0x1D676 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D676 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_159)
{
    // 1D677;1D677;1D677;0048;0048; 
    // (ùô∑; ùô∑; ùô∑; H; H; ) MATHEMATICAL MONOSPACE CAPITAL H
    {
        std::array<uint32_t, 1> const source = {{ 0x1D677 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D677 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_160)
{
    // 1D678;1D678;1D678;0049;0049; 
    // (ùô∏; ùô∏; ùô∏; I; I; ) MATHEMATICAL MONOSPACE CAPITAL I
    {
        std::array<uint32_t, 1> const source = {{ 0x1D678 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D678 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_161)
{
    // 1D679;1D679;1D679;004A;004A; 
    // (ùôπ; ùôπ; ùôπ; J; J; ) MATHEMATICAL MONOSPACE CAPITAL J
    {
        std::array<uint32_t, 1> const source = {{ 0x1D679 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D679 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_162)
{
    // 1D67A;1D67A;1D67A;004B;004B; 
    // (ùô∫; ùô∫; ùô∫; K; K; ) MATHEMATICAL MONOSPACE CAPITAL K
    {
        std::array<uint32_t, 1> const source = {{ 0x1D67A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D67A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_163)
{
    // 1D67B;1D67B;1D67B;004C;004C; 
    // (ùôª; ùôª; ùôª; L; L; ) MATHEMATICAL MONOSPACE CAPITAL L
    {
        std::array<uint32_t, 1> const source = {{ 0x1D67B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D67B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_164)
{
    // 1D67C;1D67C;1D67C;004D;004D; 
    // (ùôº; ùôº; ùôº; M; M; ) MATHEMATICAL MONOSPACE CAPITAL M
    {
        std::array<uint32_t, 1> const source = {{ 0x1D67C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D67C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_165)
{
    // 1D67D;1D67D;1D67D;004E;004E; 
    // (ùôΩ; ùôΩ; ùôΩ; N; N; ) MATHEMATICAL MONOSPACE CAPITAL N
    {
        std::array<uint32_t, 1> const source = {{ 0x1D67D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D67D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_166)
{
    // 1D67E;1D67E;1D67E;004F;004F; 
    // (ùôæ; ùôæ; ùôæ; O; O; ) MATHEMATICAL MONOSPACE CAPITAL O
    {
        std::array<uint32_t, 1> const source = {{ 0x1D67E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D67E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_167)
{
    // 1D67F;1D67F;1D67F;0050;0050; 
    // (ùôø; ùôø; ùôø; P; P; ) MATHEMATICAL MONOSPACE CAPITAL P
    {
        std::array<uint32_t, 1> const source = {{ 0x1D67F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D67F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_168)
{
    // 1D680;1D680;1D680;0051;0051; 
    // (ùöÄ; ùöÄ; ùöÄ; Q; Q; ) MATHEMATICAL MONOSPACE CAPITAL Q
    {
        std::array<uint32_t, 1> const source = {{ 0x1D680 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D680 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_169)
{
    // 1D681;1D681;1D681;0052;0052; 
    // (ùöÅ; ùöÅ; ùöÅ; R; R; ) MATHEMATICAL MONOSPACE CAPITAL R
    {
        std::array<uint32_t, 1> const source = {{ 0x1D681 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D681 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_170)
{
    // 1D682;1D682;1D682;0053;0053; 
    // (ùöÇ; ùöÇ; ùöÇ; S; S; ) MATHEMATICAL MONOSPACE CAPITAL S
    {
        std::array<uint32_t, 1> const source = {{ 0x1D682 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D682 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_171)
{
    // 1D683;1D683;1D683;0054;0054; 
    // (ùöÉ; ùöÉ; ùöÉ; T; T; ) MATHEMATICAL MONOSPACE CAPITAL T
    {
        std::array<uint32_t, 1> const source = {{ 0x1D683 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D683 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_172)
{
    // 1D684;1D684;1D684;0055;0055; 
    // (ùöÑ; ùöÑ; ùöÑ; U; U; ) MATHEMATICAL MONOSPACE CAPITAL U
    {
        std::array<uint32_t, 1> const source = {{ 0x1D684 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D684 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_173)
{
    // 1D685;1D685;1D685;0056;0056; 
    // (ùöÖ; ùöÖ; ùöÖ; V; V; ) MATHEMATICAL MONOSPACE CAPITAL V
    {
        std::array<uint32_t, 1> const source = {{ 0x1D685 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D685 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_174)
{
    // 1D686;1D686;1D686;0057;0057; 
    // (ùöÜ; ùöÜ; ùöÜ; W; W; ) MATHEMATICAL MONOSPACE CAPITAL W
    {
        std::array<uint32_t, 1> const source = {{ 0x1D686 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D686 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_175)
{
    // 1D687;1D687;1D687;0058;0058; 
    // (ùöá; ùöá; ùöá; X; X; ) MATHEMATICAL MONOSPACE CAPITAL X
    {
        std::array<uint32_t, 1> const source = {{ 0x1D687 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D687 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_176)
{
    // 1D688;1D688;1D688;0059;0059; 
    // (ùöà; ùöà; ùöà; Y; Y; ) MATHEMATICAL MONOSPACE CAPITAL Y
    {
        std::array<uint32_t, 1> const source = {{ 0x1D688 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D688 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_177)
{
    // 1D689;1D689;1D689;005A;005A; 
    // (ùöâ; ùöâ; ùöâ; Z; Z; ) MATHEMATICAL MONOSPACE CAPITAL Z
    {
        std::array<uint32_t, 1> const source = {{ 0x1D689 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D689 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_178)
{
    // 1D68A;1D68A;1D68A;0061;0061; 
    // (ùöä; ùöä; ùöä; a; a; ) MATHEMATICAL MONOSPACE SMALL A
    {
        std::array<uint32_t, 1> const source = {{ 0x1D68A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D68A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_179)
{
    // 1D68B;1D68B;1D68B;0062;0062; 
    // (ùöã; ùöã; ùöã; b; b; ) MATHEMATICAL MONOSPACE SMALL B
    {
        std::array<uint32_t, 1> const source = {{ 0x1D68B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D68B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_180)
{
    // 1D68C;1D68C;1D68C;0063;0063; 
    // (ùöå; ùöå; ùöå; c; c; ) MATHEMATICAL MONOSPACE SMALL C
    {
        std::array<uint32_t, 1> const source = {{ 0x1D68C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D68C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_181)
{
    // 1D68D;1D68D;1D68D;0064;0064; 
    // (ùöç; ùöç; ùöç; d; d; ) MATHEMATICAL MONOSPACE SMALL D
    {
        std::array<uint32_t, 1> const source = {{ 0x1D68D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D68D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_182)
{
    // 1D68E;1D68E;1D68E;0065;0065; 
    // (ùöé; ùöé; ùöé; e; e; ) MATHEMATICAL MONOSPACE SMALL E
    {
        std::array<uint32_t, 1> const source = {{ 0x1D68E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D68E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_183)
{
    // 1D68F;1D68F;1D68F;0066;0066; 
    // (ùöè; ùöè; ùöè; f; f; ) MATHEMATICAL MONOSPACE SMALL F
    {
        std::array<uint32_t, 1> const source = {{ 0x1D68F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D68F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_184)
{
    // 1D690;1D690;1D690;0067;0067; 
    // (ùöê; ùöê; ùöê; g; g; ) MATHEMATICAL MONOSPACE SMALL G
    {
        std::array<uint32_t, 1> const source = {{ 0x1D690 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D690 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_185)
{
    // 1D691;1D691;1D691;0068;0068; 
    // (ùöë; ùöë; ùöë; h; h; ) MATHEMATICAL MONOSPACE SMALL H
    {
        std::array<uint32_t, 1> const source = {{ 0x1D691 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D691 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_186)
{
    // 1D692;1D692;1D692;0069;0069; 
    // (ùöí; ùöí; ùöí; i; i; ) MATHEMATICAL MONOSPACE SMALL I
    {
        std::array<uint32_t, 1> const source = {{ 0x1D692 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D692 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_187)
{
    // 1D693;1D693;1D693;006A;006A; 
    // (ùöì; ùöì; ùöì; j; j; ) MATHEMATICAL MONOSPACE SMALL J
    {
        std::array<uint32_t, 1> const source = {{ 0x1D693 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D693 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_188)
{
    // 1D694;1D694;1D694;006B;006B; 
    // (ùöî; ùöî; ùöî; k; k; ) MATHEMATICAL MONOSPACE SMALL K
    {
        std::array<uint32_t, 1> const source = {{ 0x1D694 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D694 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_189)
{
    // 1D695;1D695;1D695;006C;006C; 
    // (ùöï; ùöï; ùöï; l; l; ) MATHEMATICAL MONOSPACE SMALL L
    {
        std::array<uint32_t, 1> const source = {{ 0x1D695 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D695 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_190)
{
    // 1D696;1D696;1D696;006D;006D; 
    // (ùöñ; ùöñ; ùöñ; m; m; ) MATHEMATICAL MONOSPACE SMALL M
    {
        std::array<uint32_t, 1> const source = {{ 0x1D696 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D696 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_191)
{
    // 1D697;1D697;1D697;006E;006E; 
    // (ùöó; ùöó; ùöó; n; n; ) MATHEMATICAL MONOSPACE SMALL N
    {
        std::array<uint32_t, 1> const source = {{ 0x1D697 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D697 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_192)
{
    // 1D698;1D698;1D698;006F;006F; 
    // (ùöò; ùöò; ùöò; o; o; ) MATHEMATICAL MONOSPACE SMALL O
    {
        std::array<uint32_t, 1> const source = {{ 0x1D698 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D698 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_193)
{
    // 1D699;1D699;1D699;0070;0070; 
    // (ùöô; ùöô; ùöô; p; p; ) MATHEMATICAL MONOSPACE SMALL P
    {
        std::array<uint32_t, 1> const source = {{ 0x1D699 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D699 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_194)
{
    // 1D69A;1D69A;1D69A;0071;0071; 
    // (ùöö; ùöö; ùöö; q; q; ) MATHEMATICAL MONOSPACE SMALL Q
    {
        std::array<uint32_t, 1> const source = {{ 0x1D69A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D69A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_195)
{
    // 1D69B;1D69B;1D69B;0072;0072; 
    // (ùöõ; ùöõ; ùöõ; r; r; ) MATHEMATICAL MONOSPACE SMALL R
    {
        std::array<uint32_t, 1> const source = {{ 0x1D69B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D69B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_196)
{
    // 1D69C;1D69C;1D69C;0073;0073; 
    // (ùöú; ùöú; ùöú; s; s; ) MATHEMATICAL MONOSPACE SMALL S
    {
        std::array<uint32_t, 1> const source = {{ 0x1D69C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D69C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_197)
{
    // 1D69D;1D69D;1D69D;0074;0074; 
    // (ùöù; ùöù; ùöù; t; t; ) MATHEMATICAL MONOSPACE SMALL T
    {
        std::array<uint32_t, 1> const source = {{ 0x1D69D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D69D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_198)
{
    // 1D69E;1D69E;1D69E;0075;0075; 
    // (ùöû; ùöû; ùöû; u; u; ) MATHEMATICAL MONOSPACE SMALL U
    {
        std::array<uint32_t, 1> const source = {{ 0x1D69E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D69E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_078_199)
{
    // 1D69F;1D69F;1D69F;0076;0076; 
    // (ùöü; ùöü; ùöü; v; v; ) MATHEMATICAL MONOSPACE SMALL V
    {
        std::array<uint32_t, 1> const source = {{ 0x1D69F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1D69F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


