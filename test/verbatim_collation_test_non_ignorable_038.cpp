// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_038_000)
{
    // 2A3F 0041;	
    // (⨿) AMALGAMATION OR COPRODUCT	[0C22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A3F, 0x0041 };
    uint32_t const ces[9] = { 0x0C22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_001)
{
    // 2A3F 0062;	
    // (⨿) AMALGAMATION OR COPRODUCT	[0C22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3F, 0x0062 };
    uint32_t const ces[9] = { 0x0C22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_002)
{
    // 2A40 0021;	
    // (⩀) INTERSECTION WITH DOT	[0C23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A40, 0x0021 };
    uint32_t const ces[9] = { 0x0C23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_003)
{
    // 2A40 003F;	
    // (⩀) INTERSECTION WITH DOT	[0C23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A40, 0x003F };
    uint32_t const ces[9] = { 0x0C23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_004)
{
    // 2A40 0061;	
    // (⩀) INTERSECTION WITH DOT	[0C23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A40, 0x0061 };
    uint32_t const ces[9] = { 0x0C23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_005)
{
    // 2A40 0041;	
    // (⩀) INTERSECTION WITH DOT	[0C23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A40, 0x0041 };
    uint32_t const ces[9] = { 0x0C23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_006)
{
    // 2A40 0062;	
    // (⩀) INTERSECTION WITH DOT	[0C23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A40, 0x0062 };
    uint32_t const ces[9] = { 0x0C23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_007)
{
    // 2A41 0021;	
    // (⩁) UNION WITH MINUS SIGN	[0C24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A41, 0x0021 };
    uint32_t const ces[9] = { 0x0C24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_008)
{
    // 2A41 003F;	
    // (⩁) UNION WITH MINUS SIGN	[0C24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A41, 0x003F };
    uint32_t const ces[9] = { 0x0C24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_009)
{
    // 2A41 0061;	
    // (⩁) UNION WITH MINUS SIGN	[0C24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A41, 0x0061 };
    uint32_t const ces[9] = { 0x0C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_010)
{
    // 2A41 0041;	
    // (⩁) UNION WITH MINUS SIGN	[0C24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A41, 0x0041 };
    uint32_t const ces[9] = { 0x0C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_011)
{
    // 2A41 0062;	
    // (⩁) UNION WITH MINUS SIGN	[0C24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A41, 0x0062 };
    uint32_t const ces[9] = { 0x0C24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_012)
{
    // 2A42 0021;	
    // (⩂) UNION WITH OVERBAR	[0C25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A42, 0x0021 };
    uint32_t const ces[9] = { 0x0C25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_013)
{
    // 2A42 003F;	
    // (⩂) UNION WITH OVERBAR	[0C25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A42, 0x003F };
    uint32_t const ces[9] = { 0x0C25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_014)
{
    // 2A42 0061;	
    // (⩂) UNION WITH OVERBAR	[0C25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A42, 0x0061 };
    uint32_t const ces[9] = { 0x0C25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_015)
{
    // 2A42 0041;	
    // (⩂) UNION WITH OVERBAR	[0C25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A42, 0x0041 };
    uint32_t const ces[9] = { 0x0C25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_016)
{
    // 2A42 0062;	
    // (⩂) UNION WITH OVERBAR	[0C25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A42, 0x0062 };
    uint32_t const ces[9] = { 0x0C25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_017)
{
    // 2A43 0021;	
    // (⩃) INTERSECTION WITH OVERBAR	[0C26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A43, 0x0021 };
    uint32_t const ces[9] = { 0x0C26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_018)
{
    // 2A43 003F;	
    // (⩃) INTERSECTION WITH OVERBAR	[0C26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A43, 0x003F };
    uint32_t const ces[9] = { 0x0C26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_019)
{
    // 2A43 0061;	
    // (⩃) INTERSECTION WITH OVERBAR	[0C26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A43, 0x0061 };
    uint32_t const ces[9] = { 0x0C26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_020)
{
    // 2A43 0041;	
    // (⩃) INTERSECTION WITH OVERBAR	[0C26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A43, 0x0041 };
    uint32_t const ces[9] = { 0x0C26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_021)
{
    // 2A43 0062;	
    // (⩃) INTERSECTION WITH OVERBAR	[0C26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A43, 0x0062 };
    uint32_t const ces[9] = { 0x0C26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_022)
{
    // 2A44 0021;	
    // (⩄) INTERSECTION WITH LOGICAL AND	[0C27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A44, 0x0021 };
    uint32_t const ces[9] = { 0x0C27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_023)
{
    // 2A44 003F;	
    // (⩄) INTERSECTION WITH LOGICAL AND	[0C27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A44, 0x003F };
    uint32_t const ces[9] = { 0x0C27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_024)
{
    // 2A44 0061;	
    // (⩄) INTERSECTION WITH LOGICAL AND	[0C27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A44, 0x0061 };
    uint32_t const ces[9] = { 0x0C27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_025)
{
    // 2A44 0041;	
    // (⩄) INTERSECTION WITH LOGICAL AND	[0C27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A44, 0x0041 };
    uint32_t const ces[9] = { 0x0C27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_026)
{
    // 2A44 0062;	
    // (⩄) INTERSECTION WITH LOGICAL AND	[0C27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A44, 0x0062 };
    uint32_t const ces[9] = { 0x0C27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_027)
{
    // 2A45 0021;	
    // (⩅) UNION WITH LOGICAL OR	[0C28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A45, 0x0021 };
    uint32_t const ces[9] = { 0x0C28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_028)
{
    // 2A45 003F;	
    // (⩅) UNION WITH LOGICAL OR	[0C28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A45, 0x003F };
    uint32_t const ces[9] = { 0x0C28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_029)
{
    // 2A45 0061;	
    // (⩅) UNION WITH LOGICAL OR	[0C28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A45, 0x0061 };
    uint32_t const ces[9] = { 0x0C28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_030)
{
    // 2A45 0041;	
    // (⩅) UNION WITH LOGICAL OR	[0C28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A45, 0x0041 };
    uint32_t const ces[9] = { 0x0C28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_031)
{
    // 2A45 0062;	
    // (⩅) UNION WITH LOGICAL OR	[0C28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A45, 0x0062 };
    uint32_t const ces[9] = { 0x0C28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_032)
{
    // 2A46 0021;	
    // (⩆) UNION ABOVE INTERSECTION	[0C29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A46, 0x0021 };
    uint32_t const ces[9] = { 0x0C29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_033)
{
    // 2A46 003F;	
    // (⩆) UNION ABOVE INTERSECTION	[0C29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A46, 0x003F };
    uint32_t const ces[9] = { 0x0C29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_034)
{
    // 2A46 0061;	
    // (⩆) UNION ABOVE INTERSECTION	[0C29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A46, 0x0061 };
    uint32_t const ces[9] = { 0x0C29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_035)
{
    // 2A46 0041;	
    // (⩆) UNION ABOVE INTERSECTION	[0C29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A46, 0x0041 };
    uint32_t const ces[9] = { 0x0C29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_036)
{
    // 2A46 0062;	
    // (⩆) UNION ABOVE INTERSECTION	[0C29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A46, 0x0062 };
    uint32_t const ces[9] = { 0x0C29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_037)
{
    // 2A47 0021;	
    // (⩇) INTERSECTION ABOVE UNION	[0C2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A47, 0x0021 };
    uint32_t const ces[9] = { 0x0C2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_038)
{
    // 2A47 003F;	
    // (⩇) INTERSECTION ABOVE UNION	[0C2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A47, 0x003F };
    uint32_t const ces[9] = { 0x0C2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_039)
{
    // 2A47 0061;	
    // (⩇) INTERSECTION ABOVE UNION	[0C2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A47, 0x0061 };
    uint32_t const ces[9] = { 0x0C2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_040)
{
    // 2A47 0041;	
    // (⩇) INTERSECTION ABOVE UNION	[0C2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A47, 0x0041 };
    uint32_t const ces[9] = { 0x0C2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_041)
{
    // 2A47 0062;	
    // (⩇) INTERSECTION ABOVE UNION	[0C2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A47, 0x0062 };
    uint32_t const ces[9] = { 0x0C2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_042)
{
    // 2A48 0021;	
    // (⩈) UNION ABOVE BAR ABOVE INTERSECTION	[0C2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A48, 0x0021 };
    uint32_t const ces[9] = { 0x0C2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_043)
{
    // 2A48 003F;	
    // (⩈) UNION ABOVE BAR ABOVE INTERSECTION	[0C2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A48, 0x003F };
    uint32_t const ces[9] = { 0x0C2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_044)
{
    // 2A48 0061;	
    // (⩈) UNION ABOVE BAR ABOVE INTERSECTION	[0C2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A48, 0x0061 };
    uint32_t const ces[9] = { 0x0C2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_045)
{
    // 2A48 0041;	
    // (⩈) UNION ABOVE BAR ABOVE INTERSECTION	[0C2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A48, 0x0041 };
    uint32_t const ces[9] = { 0x0C2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_046)
{
    // 2A48 0062;	
    // (⩈) UNION ABOVE BAR ABOVE INTERSECTION	[0C2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A48, 0x0062 };
    uint32_t const ces[9] = { 0x0C2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_047)
{
    // 2A49 0021;	
    // (⩉) INTERSECTION ABOVE BAR ABOVE UNION	[0C2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A49, 0x0021 };
    uint32_t const ces[9] = { 0x0C2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_048)
{
    // 2A49 003F;	
    // (⩉) INTERSECTION ABOVE BAR ABOVE UNION	[0C2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A49, 0x003F };
    uint32_t const ces[9] = { 0x0C2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_049)
{
    // 2A49 0061;	
    // (⩉) INTERSECTION ABOVE BAR ABOVE UNION	[0C2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A49, 0x0061 };
    uint32_t const ces[9] = { 0x0C2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_050)
{
    // 2A49 0041;	
    // (⩉) INTERSECTION ABOVE BAR ABOVE UNION	[0C2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A49, 0x0041 };
    uint32_t const ces[9] = { 0x0C2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_051)
{
    // 2A49 0062;	
    // (⩉) INTERSECTION ABOVE BAR ABOVE UNION	[0C2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A49, 0x0062 };
    uint32_t const ces[9] = { 0x0C2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_052)
{
    // 2A4A 0021;	
    // (⩊) UNION BESIDE AND JOINED WITH UNION	[0C2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4A, 0x0021 };
    uint32_t const ces[9] = { 0x0C2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_053)
{
    // 2A4A 003F;	
    // (⩊) UNION BESIDE AND JOINED WITH UNION	[0C2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4A, 0x003F };
    uint32_t const ces[9] = { 0x0C2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_054)
{
    // 2A4A 0061;	
    // (⩊) UNION BESIDE AND JOINED WITH UNION	[0C2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4A, 0x0061 };
    uint32_t const ces[9] = { 0x0C2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_055)
{
    // 2A4A 0041;	
    // (⩊) UNION BESIDE AND JOINED WITH UNION	[0C2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A4A, 0x0041 };
    uint32_t const ces[9] = { 0x0C2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_056)
{
    // 2A4A 0062;	
    // (⩊) UNION BESIDE AND JOINED WITH UNION	[0C2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4A, 0x0062 };
    uint32_t const ces[9] = { 0x0C2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_057)
{
    // 2A4B 0021;	
    // (⩋) INTERSECTION BESIDE AND JOINED WITH INTERSECTION	[0C2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4B, 0x0021 };
    uint32_t const ces[9] = { 0x0C2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_058)
{
    // 2A4B 003F;	
    // (⩋) INTERSECTION BESIDE AND JOINED WITH INTERSECTION	[0C2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4B, 0x003F };
    uint32_t const ces[9] = { 0x0C2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_059)
{
    // 2A4B 0061;	
    // (⩋) INTERSECTION BESIDE AND JOINED WITH INTERSECTION	[0C2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4B, 0x0061 };
    uint32_t const ces[9] = { 0x0C2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_060)
{
    // 2A4B 0041;	
    // (⩋) INTERSECTION BESIDE AND JOINED WITH INTERSECTION	[0C2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A4B, 0x0041 };
    uint32_t const ces[9] = { 0x0C2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_061)
{
    // 2A4B 0062;	
    // (⩋) INTERSECTION BESIDE AND JOINED WITH INTERSECTION	[0C2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4B, 0x0062 };
    uint32_t const ces[9] = { 0x0C2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_062)
{
    // 2A4C 0021;	
    // (⩌) CLOSED UNION WITH SERIFS	[0C2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4C, 0x0021 };
    uint32_t const ces[9] = { 0x0C2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_063)
{
    // 2A4C 003F;	
    // (⩌) CLOSED UNION WITH SERIFS	[0C2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4C, 0x003F };
    uint32_t const ces[9] = { 0x0C2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_064)
{
    // 2A4C 0061;	
    // (⩌) CLOSED UNION WITH SERIFS	[0C2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4C, 0x0061 };
    uint32_t const ces[9] = { 0x0C2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_065)
{
    // 2A4C 0041;	
    // (⩌) CLOSED UNION WITH SERIFS	[0C2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A4C, 0x0041 };
    uint32_t const ces[9] = { 0x0C2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_066)
{
    // 2A4C 0062;	
    // (⩌) CLOSED UNION WITH SERIFS	[0C2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4C, 0x0062 };
    uint32_t const ces[9] = { 0x0C2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_067)
{
    // 2A4D 0021;	
    // (⩍) CLOSED INTERSECTION WITH SERIFS	[0C30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4D, 0x0021 };
    uint32_t const ces[9] = { 0x0C30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_068)
{
    // 2A4D 003F;	
    // (⩍) CLOSED INTERSECTION WITH SERIFS	[0C30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4D, 0x003F };
    uint32_t const ces[9] = { 0x0C30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_069)
{
    // 2A4D 0061;	
    // (⩍) CLOSED INTERSECTION WITH SERIFS	[0C30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4D, 0x0061 };
    uint32_t const ces[9] = { 0x0C30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_070)
{
    // 2A4D 0041;	
    // (⩍) CLOSED INTERSECTION WITH SERIFS	[0C30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A4D, 0x0041 };
    uint32_t const ces[9] = { 0x0C30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_071)
{
    // 2A4D 0062;	
    // (⩍) CLOSED INTERSECTION WITH SERIFS	[0C30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4D, 0x0062 };
    uint32_t const ces[9] = { 0x0C30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_072)
{
    // 2A4E 0021;	
    // (⩎) DOUBLE SQUARE INTERSECTION	[0C31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4E, 0x0021 };
    uint32_t const ces[9] = { 0x0C31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_073)
{
    // 2A4E 003F;	
    // (⩎) DOUBLE SQUARE INTERSECTION	[0C31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4E, 0x003F };
    uint32_t const ces[9] = { 0x0C31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_074)
{
    // 2A4E 0061;	
    // (⩎) DOUBLE SQUARE INTERSECTION	[0C31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4E, 0x0061 };
    uint32_t const ces[9] = { 0x0C31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_075)
{
    // 2A4E 0041;	
    // (⩎) DOUBLE SQUARE INTERSECTION	[0C31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A4E, 0x0041 };
    uint32_t const ces[9] = { 0x0C31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_076)
{
    // 2A4E 0062;	
    // (⩎) DOUBLE SQUARE INTERSECTION	[0C31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4E, 0x0062 };
    uint32_t const ces[9] = { 0x0C31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_077)
{
    // 2A4F 0021;	
    // (⩏) DOUBLE SQUARE UNION	[0C32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4F, 0x0021 };
    uint32_t const ces[9] = { 0x0C32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_078)
{
    // 2A4F 003F;	
    // (⩏) DOUBLE SQUARE UNION	[0C32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4F, 0x003F };
    uint32_t const ces[9] = { 0x0C32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_079)
{
    // 2A4F 0061;	
    // (⩏) DOUBLE SQUARE UNION	[0C32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4F, 0x0061 };
    uint32_t const ces[9] = { 0x0C32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_080)
{
    // 2A4F 0041;	
    // (⩏) DOUBLE SQUARE UNION	[0C32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A4F, 0x0041 };
    uint32_t const ces[9] = { 0x0C32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_081)
{
    // 2A4F 0062;	
    // (⩏) DOUBLE SQUARE UNION	[0C32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A4F, 0x0062 };
    uint32_t const ces[9] = { 0x0C32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_082)
{
    // 2A50 0021;	
    // (⩐) CLOSED UNION WITH SERIFS AND SMASH PRODUCT	[0C33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A50, 0x0021 };
    uint32_t const ces[9] = { 0x0C33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_083)
{
    // 2A50 003F;	
    // (⩐) CLOSED UNION WITH SERIFS AND SMASH PRODUCT	[0C33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A50, 0x003F };
    uint32_t const ces[9] = { 0x0C33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_084)
{
    // 2A50 0061;	
    // (⩐) CLOSED UNION WITH SERIFS AND SMASH PRODUCT	[0C33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A50, 0x0061 };
    uint32_t const ces[9] = { 0x0C33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_085)
{
    // 2A50 0041;	
    // (⩐) CLOSED UNION WITH SERIFS AND SMASH PRODUCT	[0C33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A50, 0x0041 };
    uint32_t const ces[9] = { 0x0C33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_086)
{
    // 2A50 0062;	
    // (⩐) CLOSED UNION WITH SERIFS AND SMASH PRODUCT	[0C33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A50, 0x0062 };
    uint32_t const ces[9] = { 0x0C33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_087)
{
    // 2A51 0021;	
    // (⩑) LOGICAL AND WITH DOT ABOVE	[0C34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A51, 0x0021 };
    uint32_t const ces[9] = { 0x0C34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_088)
{
    // 2A51 003F;	
    // (⩑) LOGICAL AND WITH DOT ABOVE	[0C34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A51, 0x003F };
    uint32_t const ces[9] = { 0x0C34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_089)
{
    // 2A51 0061;	
    // (⩑) LOGICAL AND WITH DOT ABOVE	[0C34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A51, 0x0061 };
    uint32_t const ces[9] = { 0x0C34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_090)
{
    // 2A51 0041;	
    // (⩑) LOGICAL AND WITH DOT ABOVE	[0C34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A51, 0x0041 };
    uint32_t const ces[9] = { 0x0C34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_091)
{
    // 2A51 0062;	
    // (⩑) LOGICAL AND WITH DOT ABOVE	[0C34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A51, 0x0062 };
    uint32_t const ces[9] = { 0x0C34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_092)
{
    // 2A52 0021;	
    // (⩒) LOGICAL OR WITH DOT ABOVE	[0C35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A52, 0x0021 };
    uint32_t const ces[9] = { 0x0C35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_093)
{
    // 2A52 003F;	
    // (⩒) LOGICAL OR WITH DOT ABOVE	[0C35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A52, 0x003F };
    uint32_t const ces[9] = { 0x0C35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_094)
{
    // 2A52 0061;	
    // (⩒) LOGICAL OR WITH DOT ABOVE	[0C35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A52, 0x0061 };
    uint32_t const ces[9] = { 0x0C35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_095)
{
    // 2A52 0041;	
    // (⩒) LOGICAL OR WITH DOT ABOVE	[0C35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A52, 0x0041 };
    uint32_t const ces[9] = { 0x0C35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_096)
{
    // 2A52 0062;	
    // (⩒) LOGICAL OR WITH DOT ABOVE	[0C35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A52, 0x0062 };
    uint32_t const ces[9] = { 0x0C35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_097)
{
    // 2A53 0021;	
    // (⩓) DOUBLE LOGICAL AND	[0C36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A53, 0x0021 };
    uint32_t const ces[9] = { 0x0C36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_098)
{
    // 2A53 003F;	
    // (⩓) DOUBLE LOGICAL AND	[0C36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A53, 0x003F };
    uint32_t const ces[9] = { 0x0C36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_099)
{
    // 2A53 0061;	
    // (⩓) DOUBLE LOGICAL AND	[0C36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A53, 0x0061 };
    uint32_t const ces[9] = { 0x0C36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_100)
{
    // 2A53 0041;	
    // (⩓) DOUBLE LOGICAL AND	[0C36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A53, 0x0041 };
    uint32_t const ces[9] = { 0x0C36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_101)
{
    // 2A53 0062;	
    // (⩓) DOUBLE LOGICAL AND	[0C36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A53, 0x0062 };
    uint32_t const ces[9] = { 0x0C36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_102)
{
    // 2A54 0021;	
    // (⩔) DOUBLE LOGICAL OR	[0C37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A54, 0x0021 };
    uint32_t const ces[9] = { 0x0C37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_103)
{
    // 2A54 003F;	
    // (⩔) DOUBLE LOGICAL OR	[0C37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A54, 0x003F };
    uint32_t const ces[9] = { 0x0C37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_104)
{
    // 2A54 0061;	
    // (⩔) DOUBLE LOGICAL OR	[0C37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A54, 0x0061 };
    uint32_t const ces[9] = { 0x0C37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_105)
{
    // 2A54 0041;	
    // (⩔) DOUBLE LOGICAL OR	[0C37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A54, 0x0041 };
    uint32_t const ces[9] = { 0x0C37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_106)
{
    // 2A54 0062;	
    // (⩔) DOUBLE LOGICAL OR	[0C37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A54, 0x0062 };
    uint32_t const ces[9] = { 0x0C37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_107)
{
    // 2A55 0021;	
    // (⩕) TWO INTERSECTING LOGICAL AND	[0C38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A55, 0x0021 };
    uint32_t const ces[9] = { 0x0C38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_108)
{
    // 2A55 003F;	
    // (⩕) TWO INTERSECTING LOGICAL AND	[0C38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A55, 0x003F };
    uint32_t const ces[9] = { 0x0C38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_109)
{
    // 2A55 0061;	
    // (⩕) TWO INTERSECTING LOGICAL AND	[0C38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A55, 0x0061 };
    uint32_t const ces[9] = { 0x0C38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_110)
{
    // 2A55 0041;	
    // (⩕) TWO INTERSECTING LOGICAL AND	[0C38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A55, 0x0041 };
    uint32_t const ces[9] = { 0x0C38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_111)
{
    // 2A55 0062;	
    // (⩕) TWO INTERSECTING LOGICAL AND	[0C38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A55, 0x0062 };
    uint32_t const ces[9] = { 0x0C38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_112)
{
    // 2A56 0021;	
    // (⩖) TWO INTERSECTING LOGICAL OR	[0C39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A56, 0x0021 };
    uint32_t const ces[9] = { 0x0C39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_113)
{
    // 2A56 003F;	
    // (⩖) TWO INTERSECTING LOGICAL OR	[0C39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A56, 0x003F };
    uint32_t const ces[9] = { 0x0C39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_114)
{
    // 2A56 0061;	
    // (⩖) TWO INTERSECTING LOGICAL OR	[0C39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A56, 0x0061 };
    uint32_t const ces[9] = { 0x0C39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_115)
{
    // 2A56 0041;	
    // (⩖) TWO INTERSECTING LOGICAL OR	[0C39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A56, 0x0041 };
    uint32_t const ces[9] = { 0x0C39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_116)
{
    // 2A56 0062;	
    // (⩖) TWO INTERSECTING LOGICAL OR	[0C39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A56, 0x0062 };
    uint32_t const ces[9] = { 0x0C39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_117)
{
    // 2A57 0021;	
    // (⩗) SLOPING LARGE OR	[0C3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A57, 0x0021 };
    uint32_t const ces[9] = { 0x0C3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_118)
{
    // 2A57 003F;	
    // (⩗) SLOPING LARGE OR	[0C3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A57, 0x003F };
    uint32_t const ces[9] = { 0x0C3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_119)
{
    // 2A57 0061;	
    // (⩗) SLOPING LARGE OR	[0C3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A57, 0x0061 };
    uint32_t const ces[9] = { 0x0C3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_120)
{
    // 2A57 0041;	
    // (⩗) SLOPING LARGE OR	[0C3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A57, 0x0041 };
    uint32_t const ces[9] = { 0x0C3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_121)
{
    // 2A57 0062;	
    // (⩗) SLOPING LARGE OR	[0C3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A57, 0x0062 };
    uint32_t const ces[9] = { 0x0C3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_122)
{
    // 2A58 0021;	
    // (⩘) SLOPING LARGE AND	[0C3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A58, 0x0021 };
    uint32_t const ces[9] = { 0x0C3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_123)
{
    // 2A58 003F;	
    // (⩘) SLOPING LARGE AND	[0C3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A58, 0x003F };
    uint32_t const ces[9] = { 0x0C3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_124)
{
    // 2A58 0061;	
    // (⩘) SLOPING LARGE AND	[0C3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A58, 0x0061 };
    uint32_t const ces[9] = { 0x0C3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_125)
{
    // 2A58 0041;	
    // (⩘) SLOPING LARGE AND	[0C3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A58, 0x0041 };
    uint32_t const ces[9] = { 0x0C3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_126)
{
    // 2A58 0062;	
    // (⩘) SLOPING LARGE AND	[0C3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A58, 0x0062 };
    uint32_t const ces[9] = { 0x0C3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_127)
{
    // 2A59 0021;	
    // (⩙) LOGICAL OR OVERLAPPING LOGICAL AND	[0C3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A59, 0x0021 };
    uint32_t const ces[9] = { 0x0C3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_128)
{
    // 2A59 003F;	
    // (⩙) LOGICAL OR OVERLAPPING LOGICAL AND	[0C3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A59, 0x003F };
    uint32_t const ces[9] = { 0x0C3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_129)
{
    // 2A59 0061;	
    // (⩙) LOGICAL OR OVERLAPPING LOGICAL AND	[0C3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A59, 0x0061 };
    uint32_t const ces[9] = { 0x0C3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_130)
{
    // 2A59 0041;	
    // (⩙) LOGICAL OR OVERLAPPING LOGICAL AND	[0C3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A59, 0x0041 };
    uint32_t const ces[9] = { 0x0C3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_131)
{
    // 2A59 0062;	
    // (⩙) LOGICAL OR OVERLAPPING LOGICAL AND	[0C3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A59, 0x0062 };
    uint32_t const ces[9] = { 0x0C3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_132)
{
    // 2A5A 0021;	
    // (⩚) LOGICAL AND WITH MIDDLE STEM	[0C3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5A, 0x0021 };
    uint32_t const ces[9] = { 0x0C3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_133)
{
    // 2A5A 003F;	
    // (⩚) LOGICAL AND WITH MIDDLE STEM	[0C3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5A, 0x003F };
    uint32_t const ces[9] = { 0x0C3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_134)
{
    // 2A5A 0061;	
    // (⩚) LOGICAL AND WITH MIDDLE STEM	[0C3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5A, 0x0061 };
    uint32_t const ces[9] = { 0x0C3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_135)
{
    // 2A5A 0041;	
    // (⩚) LOGICAL AND WITH MIDDLE STEM	[0C3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A5A, 0x0041 };
    uint32_t const ces[9] = { 0x0C3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_136)
{
    // 2A5A 0062;	
    // (⩚) LOGICAL AND WITH MIDDLE STEM	[0C3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5A, 0x0062 };
    uint32_t const ces[9] = { 0x0C3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_137)
{
    // 2A5B 0021;	
    // (⩛) LOGICAL OR WITH MIDDLE STEM	[0C3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5B, 0x0021 };
    uint32_t const ces[9] = { 0x0C3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_138)
{
    // 2A5B 003F;	
    // (⩛) LOGICAL OR WITH MIDDLE STEM	[0C3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5B, 0x003F };
    uint32_t const ces[9] = { 0x0C3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_139)
{
    // 2A5B 0061;	
    // (⩛) LOGICAL OR WITH MIDDLE STEM	[0C3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5B, 0x0061 };
    uint32_t const ces[9] = { 0x0C3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_140)
{
    // 2A5B 0041;	
    // (⩛) LOGICAL OR WITH MIDDLE STEM	[0C3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A5B, 0x0041 };
    uint32_t const ces[9] = { 0x0C3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_141)
{
    // 2A5B 0062;	
    // (⩛) LOGICAL OR WITH MIDDLE STEM	[0C3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5B, 0x0062 };
    uint32_t const ces[9] = { 0x0C3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_142)
{
    // 2A5C 0021;	
    // (⩜) LOGICAL AND WITH HORIZONTAL DASH	[0C3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5C, 0x0021 };
    uint32_t const ces[9] = { 0x0C3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_143)
{
    // 2A5C 003F;	
    // (⩜) LOGICAL AND WITH HORIZONTAL DASH	[0C3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5C, 0x003F };
    uint32_t const ces[9] = { 0x0C3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_144)
{
    // 2A5C 0061;	
    // (⩜) LOGICAL AND WITH HORIZONTAL DASH	[0C3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5C, 0x0061 };
    uint32_t const ces[9] = { 0x0C3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_145)
{
    // 2A5C 0041;	
    // (⩜) LOGICAL AND WITH HORIZONTAL DASH	[0C3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A5C, 0x0041 };
    uint32_t const ces[9] = { 0x0C3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_146)
{
    // 2A5C 0062;	
    // (⩜) LOGICAL AND WITH HORIZONTAL DASH	[0C3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5C, 0x0062 };
    uint32_t const ces[9] = { 0x0C3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_147)
{
    // 2A5D 0021;	
    // (⩝) LOGICAL OR WITH HORIZONTAL DASH	[0C40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5D, 0x0021 };
    uint32_t const ces[9] = { 0x0C40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_148)
{
    // 2A5D 003F;	
    // (⩝) LOGICAL OR WITH HORIZONTAL DASH	[0C40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5D, 0x003F };
    uint32_t const ces[9] = { 0x0C40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_149)
{
    // 2A5D 0061;	
    // (⩝) LOGICAL OR WITH HORIZONTAL DASH	[0C40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5D, 0x0061 };
    uint32_t const ces[9] = { 0x0C40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_150)
{
    // 2A5D 0041;	
    // (⩝) LOGICAL OR WITH HORIZONTAL DASH	[0C40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A5D, 0x0041 };
    uint32_t const ces[9] = { 0x0C40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_151)
{
    // 2A5D 0062;	
    // (⩝) LOGICAL OR WITH HORIZONTAL DASH	[0C40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5D, 0x0062 };
    uint32_t const ces[9] = { 0x0C40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_152)
{
    // 2A5E 0021;	
    // (⩞) LOGICAL AND WITH DOUBLE OVERBAR	[0C41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5E, 0x0021 };
    uint32_t const ces[9] = { 0x0C41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_153)
{
    // 2A5E 003F;	
    // (⩞) LOGICAL AND WITH DOUBLE OVERBAR	[0C41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5E, 0x003F };
    uint32_t const ces[9] = { 0x0C41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_154)
{
    // 2A5E 0061;	
    // (⩞) LOGICAL AND WITH DOUBLE OVERBAR	[0C41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5E, 0x0061 };
    uint32_t const ces[9] = { 0x0C41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_155)
{
    // 2A5E 0041;	
    // (⩞) LOGICAL AND WITH DOUBLE OVERBAR	[0C41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A5E, 0x0041 };
    uint32_t const ces[9] = { 0x0C41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_156)
{
    // 2A5E 0062;	
    // (⩞) LOGICAL AND WITH DOUBLE OVERBAR	[0C41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5E, 0x0062 };
    uint32_t const ces[9] = { 0x0C41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_157)
{
    // 2A5F 0021;	
    // (⩟) LOGICAL AND WITH UNDERBAR	[0C42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5F, 0x0021 };
    uint32_t const ces[9] = { 0x0C42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_158)
{
    // 2A5F 003F;	
    // (⩟) LOGICAL AND WITH UNDERBAR	[0C42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5F, 0x003F };
    uint32_t const ces[9] = { 0x0C42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_159)
{
    // 2A5F 0061;	
    // (⩟) LOGICAL AND WITH UNDERBAR	[0C42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5F, 0x0061 };
    uint32_t const ces[9] = { 0x0C42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_160)
{
    // 2A5F 0041;	
    // (⩟) LOGICAL AND WITH UNDERBAR	[0C42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A5F, 0x0041 };
    uint32_t const ces[9] = { 0x0C42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_161)
{
    // 2A5F 0062;	
    // (⩟) LOGICAL AND WITH UNDERBAR	[0C42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A5F, 0x0062 };
    uint32_t const ces[9] = { 0x0C42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_162)
{
    // 2A60 0021;	
    // (⩠) LOGICAL AND WITH DOUBLE UNDERBAR	[0C43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A60, 0x0021 };
    uint32_t const ces[9] = { 0x0C43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_163)
{
    // 2A60 003F;	
    // (⩠) LOGICAL AND WITH DOUBLE UNDERBAR	[0C43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A60, 0x003F };
    uint32_t const ces[9] = { 0x0C43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_164)
{
    // 2A60 0061;	
    // (⩠) LOGICAL AND WITH DOUBLE UNDERBAR	[0C43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A60, 0x0061 };
    uint32_t const ces[9] = { 0x0C43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_165)
{
    // 2A60 0041;	
    // (⩠) LOGICAL AND WITH DOUBLE UNDERBAR	[0C43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A60, 0x0041 };
    uint32_t const ces[9] = { 0x0C43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_166)
{
    // 2A60 0062;	
    // (⩠) LOGICAL AND WITH DOUBLE UNDERBAR	[0C43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A60, 0x0062 };
    uint32_t const ces[9] = { 0x0C43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_167)
{
    // 2A61 0021;	
    // (⩡) SMALL VEE WITH UNDERBAR	[0C44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A61, 0x0021 };
    uint32_t const ces[9] = { 0x0C44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_168)
{
    // 2A61 003F;	
    // (⩡) SMALL VEE WITH UNDERBAR	[0C44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A61, 0x003F };
    uint32_t const ces[9] = { 0x0C44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_169)
{
    // 2A61 0061;	
    // (⩡) SMALL VEE WITH UNDERBAR	[0C44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A61, 0x0061 };
    uint32_t const ces[9] = { 0x0C44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_170)
{
    // 2A61 0041;	
    // (⩡) SMALL VEE WITH UNDERBAR	[0C44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A61, 0x0041 };
    uint32_t const ces[9] = { 0x0C44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_171)
{
    // 2A61 0062;	
    // (⩡) SMALL VEE WITH UNDERBAR	[0C44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A61, 0x0062 };
    uint32_t const ces[9] = { 0x0C44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_172)
{
    // 2A62 0021;	
    // (⩢) LOGICAL OR WITH DOUBLE OVERBAR	[0C45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A62, 0x0021 };
    uint32_t const ces[9] = { 0x0C45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_173)
{
    // 2A62 003F;	
    // (⩢) LOGICAL OR WITH DOUBLE OVERBAR	[0C45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A62, 0x003F };
    uint32_t const ces[9] = { 0x0C45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_174)
{
    // 2A62 0061;	
    // (⩢) LOGICAL OR WITH DOUBLE OVERBAR	[0C45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A62, 0x0061 };
    uint32_t const ces[9] = { 0x0C45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_175)
{
    // 2A62 0041;	
    // (⩢) LOGICAL OR WITH DOUBLE OVERBAR	[0C45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A62, 0x0041 };
    uint32_t const ces[9] = { 0x0C45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_176)
{
    // 2A62 0062;	
    // (⩢) LOGICAL OR WITH DOUBLE OVERBAR	[0C45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A62, 0x0062 };
    uint32_t const ces[9] = { 0x0C45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_177)
{
    // 2A63 0021;	
    // (⩣) LOGICAL OR WITH DOUBLE UNDERBAR	[0C46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A63, 0x0021 };
    uint32_t const ces[9] = { 0x0C46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_178)
{
    // 2A63 003F;	
    // (⩣) LOGICAL OR WITH DOUBLE UNDERBAR	[0C46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A63, 0x003F };
    uint32_t const ces[9] = { 0x0C46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_179)
{
    // 2A63 0061;	
    // (⩣) LOGICAL OR WITH DOUBLE UNDERBAR	[0C46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A63, 0x0061 };
    uint32_t const ces[9] = { 0x0C46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_180)
{
    // 2A63 0041;	
    // (⩣) LOGICAL OR WITH DOUBLE UNDERBAR	[0C46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A63, 0x0041 };
    uint32_t const ces[9] = { 0x0C46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_181)
{
    // 2A63 0062;	
    // (⩣) LOGICAL OR WITH DOUBLE UNDERBAR	[0C46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A63, 0x0062 };
    uint32_t const ces[9] = { 0x0C46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_182)
{
    // 2A64 0021;	
    // (⩤) Z NOTATION DOMAIN ANTIRESTRICTION	[0C47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A64, 0x0021 };
    uint32_t const ces[9] = { 0x0C47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_183)
{
    // 2A64 003F;	
    // (⩤) Z NOTATION DOMAIN ANTIRESTRICTION	[0C47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A64, 0x003F };
    uint32_t const ces[9] = { 0x0C47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_184)
{
    // 2A64 0061;	
    // (⩤) Z NOTATION DOMAIN ANTIRESTRICTION	[0C47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A64, 0x0061 };
    uint32_t const ces[9] = { 0x0C47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_185)
{
    // 2A64 0041;	
    // (⩤) Z NOTATION DOMAIN ANTIRESTRICTION	[0C47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A64, 0x0041 };
    uint32_t const ces[9] = { 0x0C47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_186)
{
    // 2A64 0062;	
    // (⩤) Z NOTATION DOMAIN ANTIRESTRICTION	[0C47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A64, 0x0062 };
    uint32_t const ces[9] = { 0x0C47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_187)
{
    // 2A65 0021;	
    // (⩥) Z NOTATION RANGE ANTIRESTRICTION	[0C48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A65, 0x0021 };
    uint32_t const ces[9] = { 0x0C48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_188)
{
    // 2A65 003F;	
    // (⩥) Z NOTATION RANGE ANTIRESTRICTION	[0C48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A65, 0x003F };
    uint32_t const ces[9] = { 0x0C48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_189)
{
    // 2A65 0061;	
    // (⩥) Z NOTATION RANGE ANTIRESTRICTION	[0C48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A65, 0x0061 };
    uint32_t const ces[9] = { 0x0C48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_190)
{
    // 2A65 0041;	
    // (⩥) Z NOTATION RANGE ANTIRESTRICTION	[0C48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A65, 0x0041 };
    uint32_t const ces[9] = { 0x0C48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_191)
{
    // 2A65 0062;	
    // (⩥) Z NOTATION RANGE ANTIRESTRICTION	[0C48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A65, 0x0062 };
    uint32_t const ces[9] = { 0x0C48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_192)
{
    // 2A66 0021;	
    // (⩦) EQUALS SIGN WITH DOT BELOW	[0C49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A66, 0x0021 };
    uint32_t const ces[9] = { 0x0C49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_193)
{
    // 2A66 003F;	
    // (⩦) EQUALS SIGN WITH DOT BELOW	[0C49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A66, 0x003F };
    uint32_t const ces[9] = { 0x0C49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_194)
{
    // 2A66 0061;	
    // (⩦) EQUALS SIGN WITH DOT BELOW	[0C49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A66, 0x0061 };
    uint32_t const ces[9] = { 0x0C49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_195)
{
    // 2A66 0041;	
    // (⩦) EQUALS SIGN WITH DOT BELOW	[0C49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A66, 0x0041 };
    uint32_t const ces[9] = { 0x0C49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_196)
{
    // 2A66 0062;	
    // (⩦) EQUALS SIGN WITH DOT BELOW	[0C49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A66, 0x0062 };
    uint32_t const ces[9] = { 0x0C49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_197)
{
    // 2A67 0021;	
    // (⩧) IDENTICAL WITH DOT ABOVE	[0C4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A67, 0x0021 };
    uint32_t const ces[9] = { 0x0C4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_198)
{
    // 2A67 003F;	
    // (⩧) IDENTICAL WITH DOT ABOVE	[0C4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A67, 0x003F };
    uint32_t const ces[9] = { 0x0C4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_199)
{
    // 2A67 0061;	
    // (⩧) IDENTICAL WITH DOT ABOVE	[0C4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A67, 0x0061 };
    uint32_t const ces[9] = { 0x0C4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_200)
{
    // 2A67 0041;	
    // (⩧) IDENTICAL WITH DOT ABOVE	[0C4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A67, 0x0041 };
    uint32_t const ces[9] = { 0x0C4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_201)
{
    // 2A67 0062;	
    // (⩧) IDENTICAL WITH DOT ABOVE	[0C4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A67, 0x0062 };
    uint32_t const ces[9] = { 0x0C4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_202)
{
    // 2A68 0021;	
    // (⩨) TRIPLE HORIZONTAL BAR WITH DOUBLE VERTICAL STROKE	[0C4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A68, 0x0021 };
    uint32_t const ces[9] = { 0x0C4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_203)
{
    // 2A68 003F;	
    // (⩨) TRIPLE HORIZONTAL BAR WITH DOUBLE VERTICAL STROKE	[0C4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A68, 0x003F };
    uint32_t const ces[9] = { 0x0C4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_204)
{
    // 2A68 0061;	
    // (⩨) TRIPLE HORIZONTAL BAR WITH DOUBLE VERTICAL STROKE	[0C4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A68, 0x0061 };
    uint32_t const ces[9] = { 0x0C4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_205)
{
    // 2A68 0041;	
    // (⩨) TRIPLE HORIZONTAL BAR WITH DOUBLE VERTICAL STROKE	[0C4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A68, 0x0041 };
    uint32_t const ces[9] = { 0x0C4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_206)
{
    // 2A68 0062;	
    // (⩨) TRIPLE HORIZONTAL BAR WITH DOUBLE VERTICAL STROKE	[0C4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A68, 0x0062 };
    uint32_t const ces[9] = { 0x0C4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_207)
{
    // 2A69 0021;	
    // (⩩) TRIPLE HORIZONTAL BAR WITH TRIPLE VERTICAL STROKE	[0C4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A69, 0x0021 };
    uint32_t const ces[9] = { 0x0C4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_208)
{
    // 2A69 003F;	
    // (⩩) TRIPLE HORIZONTAL BAR WITH TRIPLE VERTICAL STROKE	[0C4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A69, 0x003F };
    uint32_t const ces[9] = { 0x0C4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_209)
{
    // 2A69 0061;	
    // (⩩) TRIPLE HORIZONTAL BAR WITH TRIPLE VERTICAL STROKE	[0C4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A69, 0x0061 };
    uint32_t const ces[9] = { 0x0C4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_210)
{
    // 2A69 0041;	
    // (⩩) TRIPLE HORIZONTAL BAR WITH TRIPLE VERTICAL STROKE	[0C4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A69, 0x0041 };
    uint32_t const ces[9] = { 0x0C4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_211)
{
    // 2A69 0062;	
    // (⩩) TRIPLE HORIZONTAL BAR WITH TRIPLE VERTICAL STROKE	[0C4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A69, 0x0062 };
    uint32_t const ces[9] = { 0x0C4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_212)
{
    // 2A6A 0021;	
    // (⩪) TILDE OPERATOR WITH DOT ABOVE	[0C4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6A, 0x0021 };
    uint32_t const ces[9] = { 0x0C4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_213)
{
    // 2A6A 003F;	
    // (⩪) TILDE OPERATOR WITH DOT ABOVE	[0C4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6A, 0x003F };
    uint32_t const ces[9] = { 0x0C4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_214)
{
    // 2A6A 0061;	
    // (⩪) TILDE OPERATOR WITH DOT ABOVE	[0C4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6A, 0x0061 };
    uint32_t const ces[9] = { 0x0C4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_215)
{
    // 2A6A 0041;	
    // (⩪) TILDE OPERATOR WITH DOT ABOVE	[0C4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A6A, 0x0041 };
    uint32_t const ces[9] = { 0x0C4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_216)
{
    // 2A6A 0062;	
    // (⩪) TILDE OPERATOR WITH DOT ABOVE	[0C4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6A, 0x0062 };
    uint32_t const ces[9] = { 0x0C4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_217)
{
    // 2A6B 0021;	
    // (⩫) TILDE OPERATOR WITH RISING DOTS	[0C4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6B, 0x0021 };
    uint32_t const ces[9] = { 0x0C4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_218)
{
    // 2A6B 003F;	
    // (⩫) TILDE OPERATOR WITH RISING DOTS	[0C4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6B, 0x003F };
    uint32_t const ces[9] = { 0x0C4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_219)
{
    // 2A6B 0061;	
    // (⩫) TILDE OPERATOR WITH RISING DOTS	[0C4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6B, 0x0061 };
    uint32_t const ces[9] = { 0x0C4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_220)
{
    // 2A6B 0041;	
    // (⩫) TILDE OPERATOR WITH RISING DOTS	[0C4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A6B, 0x0041 };
    uint32_t const ces[9] = { 0x0C4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_221)
{
    // 2A6B 0062;	
    // (⩫) TILDE OPERATOR WITH RISING DOTS	[0C4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6B, 0x0062 };
    uint32_t const ces[9] = { 0x0C4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_222)
{
    // 2A6C 0021;	
    // (⩬) SIMILAR MINUS SIMILAR	[0C4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6C, 0x0021 };
    uint32_t const ces[9] = { 0x0C4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_223)
{
    // 2A6C 003F;	
    // (⩬) SIMILAR MINUS SIMILAR	[0C4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6C, 0x003F };
    uint32_t const ces[9] = { 0x0C4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_224)
{
    // 2A6C 0061;	
    // (⩬) SIMILAR MINUS SIMILAR	[0C4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6C, 0x0061 };
    uint32_t const ces[9] = { 0x0C4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_225)
{
    // 2A6C 0041;	
    // (⩬) SIMILAR MINUS SIMILAR	[0C4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A6C, 0x0041 };
    uint32_t const ces[9] = { 0x0C4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_226)
{
    // 2A6C 0062;	
    // (⩬) SIMILAR MINUS SIMILAR	[0C4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6C, 0x0062 };
    uint32_t const ces[9] = { 0x0C4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_227)
{
    // 2A6D 0021;	
    // (⩭) CONGRUENT WITH DOT ABOVE	[0C50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6D, 0x0021 };
    uint32_t const ces[9] = { 0x0C50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_228)
{
    // 2A6D 003F;	
    // (⩭) CONGRUENT WITH DOT ABOVE	[0C50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6D, 0x003F };
    uint32_t const ces[9] = { 0x0C50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_229)
{
    // 2A6D 0061;	
    // (⩭) CONGRUENT WITH DOT ABOVE	[0C50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6D, 0x0061 };
    uint32_t const ces[9] = { 0x0C50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_230)
{
    // 2A6D 0041;	
    // (⩭) CONGRUENT WITH DOT ABOVE	[0C50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A6D, 0x0041 };
    uint32_t const ces[9] = { 0x0C50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_231)
{
    // 2A6D 0062;	
    // (⩭) CONGRUENT WITH DOT ABOVE	[0C50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6D, 0x0062 };
    uint32_t const ces[9] = { 0x0C50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_232)
{
    // 2A6E 0021;	
    // (⩮) EQUALS WITH ASTERISK	[0C51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6E, 0x0021 };
    uint32_t const ces[9] = { 0x0C51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_233)
{
    // 2A6E 003F;	
    // (⩮) EQUALS WITH ASTERISK	[0C51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6E, 0x003F };
    uint32_t const ces[9] = { 0x0C51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_234)
{
    // 2A6E 0061;	
    // (⩮) EQUALS WITH ASTERISK	[0C51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6E, 0x0061 };
    uint32_t const ces[9] = { 0x0C51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_235)
{
    // 2A6E 0041;	
    // (⩮) EQUALS WITH ASTERISK	[0C51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A6E, 0x0041 };
    uint32_t const ces[9] = { 0x0C51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_236)
{
    // 2A6E 0062;	
    // (⩮) EQUALS WITH ASTERISK	[0C51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6E, 0x0062 };
    uint32_t const ces[9] = { 0x0C51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_237)
{
    // 2A6F 0021;	
    // (⩯) ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT	[0C52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6F, 0x0021 };
    uint32_t const ces[9] = { 0x0C52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_238)
{
    // 2A6F 003F;	
    // (⩯) ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT	[0C52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6F, 0x003F };
    uint32_t const ces[9] = { 0x0C52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_239)
{
    // 2A6F 0061;	
    // (⩯) ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT	[0C52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6F, 0x0061 };
    uint32_t const ces[9] = { 0x0C52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_240)
{
    // 2A6F 0041;	
    // (⩯) ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT	[0C52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A6F, 0x0041 };
    uint32_t const ces[9] = { 0x0C52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_241)
{
    // 2A6F 0062;	
    // (⩯) ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT	[0C52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6F, 0x0062 };
    uint32_t const ces[9] = { 0x0C52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_242)
{
    // 2A70 0021;	
    // (⩰) APPROXIMATELY EQUAL OR EQUAL TO	[0C53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A70, 0x0021 };
    uint32_t const ces[9] = { 0x0C53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_243)
{
    // 2A70 003F;	
    // (⩰) APPROXIMATELY EQUAL OR EQUAL TO	[0C53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A70, 0x003F };
    uint32_t const ces[9] = { 0x0C53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_244)
{
    // 2A70 0061;	
    // (⩰) APPROXIMATELY EQUAL OR EQUAL TO	[0C53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A70, 0x0061 };
    uint32_t const ces[9] = { 0x0C53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_245)
{
    // 2A70 0041;	
    // (⩰) APPROXIMATELY EQUAL OR EQUAL TO	[0C53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A70, 0x0041 };
    uint32_t const ces[9] = { 0x0C53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_246)
{
    // 2A70 0062;	
    // (⩰) APPROXIMATELY EQUAL OR EQUAL TO	[0C53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A70, 0x0062 };
    uint32_t const ces[9] = { 0x0C53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_247)
{
    // 2A71 0021;	
    // (⩱) EQUALS SIGN ABOVE PLUS SIGN	[0C54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A71, 0x0021 };
    uint32_t const ces[9] = { 0x0C54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_248)
{
    // 2A71 003F;	
    // (⩱) EQUALS SIGN ABOVE PLUS SIGN	[0C54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A71, 0x003F };
    uint32_t const ces[9] = { 0x0C54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_249)
{
    // 2A71 0061;	
    // (⩱) EQUALS SIGN ABOVE PLUS SIGN	[0C54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A71, 0x0061 };
    uint32_t const ces[9] = { 0x0C54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_250)
{
    // 2A71 0041;	
    // (⩱) EQUALS SIGN ABOVE PLUS SIGN	[0C54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A71, 0x0041 };
    uint32_t const ces[9] = { 0x0C54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_251)
{
    // 2A71 0062;	
    // (⩱) EQUALS SIGN ABOVE PLUS SIGN	[0C54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A71, 0x0062 };
    uint32_t const ces[9] = { 0x0C54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_252)
{
    // 2A72 0021;	
    // (⩲) PLUS SIGN ABOVE EQUALS SIGN	[0C55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A72, 0x0021 };
    uint32_t const ces[9] = { 0x0C55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_253)
{
    // 2A72 003F;	
    // (⩲) PLUS SIGN ABOVE EQUALS SIGN	[0C55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A72, 0x003F };
    uint32_t const ces[9] = { 0x0C55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_254)
{
    // 2A72 0061;	
    // (⩲) PLUS SIGN ABOVE EQUALS SIGN	[0C55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A72, 0x0061 };
    uint32_t const ces[9] = { 0x0C55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_255)
{
    // 2A72 0041;	
    // (⩲) PLUS SIGN ABOVE EQUALS SIGN	[0C55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A72, 0x0041 };
    uint32_t const ces[9] = { 0x0C55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_256)
{
    // 2A72 0062;	
    // (⩲) PLUS SIGN ABOVE EQUALS SIGN	[0C55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A72, 0x0062 };
    uint32_t const ces[9] = { 0x0C55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_257)
{
    // 2A73 0021;	
    // (⩳) EQUALS SIGN ABOVE TILDE OPERATOR	[0C56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A73, 0x0021 };
    uint32_t const ces[9] = { 0x0C56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_258)
{
    // 2A73 003F;	
    // (⩳) EQUALS SIGN ABOVE TILDE OPERATOR	[0C56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A73, 0x003F };
    uint32_t const ces[9] = { 0x0C56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_259)
{
    // 2A73 0061;	
    // (⩳) EQUALS SIGN ABOVE TILDE OPERATOR	[0C56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A73, 0x0061 };
    uint32_t const ces[9] = { 0x0C56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_260)
{
    // 2A73 0041;	
    // (⩳) EQUALS SIGN ABOVE TILDE OPERATOR	[0C56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A73, 0x0041 };
    uint32_t const ces[9] = { 0x0C56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_261)
{
    // 2A73 0062;	
    // (⩳) EQUALS SIGN ABOVE TILDE OPERATOR	[0C56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A73, 0x0062 };
    uint32_t const ces[9] = { 0x0C56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_262)
{
    // 2A77 0021;	
    // (⩷) EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW	[0C57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A77, 0x0021 };
    uint32_t const ces[9] = { 0x0C57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_263)
{
    // 2A77 003F;	
    // (⩷) EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW	[0C57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A77, 0x003F };
    uint32_t const ces[9] = { 0x0C57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_264)
{
    // 2A77 0061;	
    // (⩷) EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW	[0C57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A77, 0x0061 };
    uint32_t const ces[9] = { 0x0C57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_265)
{
    // 2A77 0041;	
    // (⩷) EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW	[0C57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A77, 0x0041 };
    uint32_t const ces[9] = { 0x0C57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_266)
{
    // 2A77 0062;	
    // (⩷) EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW	[0C57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A77, 0x0062 };
    uint32_t const ces[9] = { 0x0C57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_267)
{
    // 2A78 0021;	
    // (⩸) EQUIVALENT WITH FOUR DOTS ABOVE	[0C58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A78, 0x0021 };
    uint32_t const ces[9] = { 0x0C58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_268)
{
    // 2A78 003F;	
    // (⩸) EQUIVALENT WITH FOUR DOTS ABOVE	[0C58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A78, 0x003F };
    uint32_t const ces[9] = { 0x0C58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_269)
{
    // 2A78 0061;	
    // (⩸) EQUIVALENT WITH FOUR DOTS ABOVE	[0C58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A78, 0x0061 };
    uint32_t const ces[9] = { 0x0C58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_270)
{
    // 2A78 0041;	
    // (⩸) EQUIVALENT WITH FOUR DOTS ABOVE	[0C58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A78, 0x0041 };
    uint32_t const ces[9] = { 0x0C58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_271)
{
    // 2A78 0062;	
    // (⩸) EQUIVALENT WITH FOUR DOTS ABOVE	[0C58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A78, 0x0062 };
    uint32_t const ces[9] = { 0x0C58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_272)
{
    // 2A79 0021;	
    // (⩹) LESS-THAN WITH CIRCLE INSIDE	[0C59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A79, 0x0021 };
    uint32_t const ces[9] = { 0x0C59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_273)
{
    // 2A79 003F;	
    // (⩹) LESS-THAN WITH CIRCLE INSIDE	[0C59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A79, 0x003F };
    uint32_t const ces[9] = { 0x0C59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_274)
{
    // 2A79 0061;	
    // (⩹) LESS-THAN WITH CIRCLE INSIDE	[0C59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A79, 0x0061 };
    uint32_t const ces[9] = { 0x0C59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_275)
{
    // 2A79 0041;	
    // (⩹) LESS-THAN WITH CIRCLE INSIDE	[0C59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A79, 0x0041 };
    uint32_t const ces[9] = { 0x0C59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_276)
{
    // 2A79 0062;	
    // (⩹) LESS-THAN WITH CIRCLE INSIDE	[0C59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A79, 0x0062 };
    uint32_t const ces[9] = { 0x0C59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_277)
{
    // 2A7A 0021;	
    // (⩺) GREATER-THAN WITH CIRCLE INSIDE	[0C5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7A, 0x0021 };
    uint32_t const ces[9] = { 0x0C5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_278)
{
    // 2A7A 003F;	
    // (⩺) GREATER-THAN WITH CIRCLE INSIDE	[0C5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7A, 0x003F };
    uint32_t const ces[9] = { 0x0C5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_279)
{
    // 2A7A 0061;	
    // (⩺) GREATER-THAN WITH CIRCLE INSIDE	[0C5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7A, 0x0061 };
    uint32_t const ces[9] = { 0x0C5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_280)
{
    // 2A7A 0041;	
    // (⩺) GREATER-THAN WITH CIRCLE INSIDE	[0C5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A7A, 0x0041 };
    uint32_t const ces[9] = { 0x0C5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_281)
{
    // 2A7A 0062;	
    // (⩺) GREATER-THAN WITH CIRCLE INSIDE	[0C5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7A, 0x0062 };
    uint32_t const ces[9] = { 0x0C5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_282)
{
    // 2A7B 0021;	
    // (⩻) LESS-THAN WITH QUESTION MARK ABOVE	[0C5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7B, 0x0021 };
    uint32_t const ces[9] = { 0x0C5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_283)
{
    // 2A7B 003F;	
    // (⩻) LESS-THAN WITH QUESTION MARK ABOVE	[0C5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7B, 0x003F };
    uint32_t const ces[9] = { 0x0C5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_284)
{
    // 2A7B 0061;	
    // (⩻) LESS-THAN WITH QUESTION MARK ABOVE	[0C5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7B, 0x0061 };
    uint32_t const ces[9] = { 0x0C5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_285)
{
    // 2A7B 0041;	
    // (⩻) LESS-THAN WITH QUESTION MARK ABOVE	[0C5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A7B, 0x0041 };
    uint32_t const ces[9] = { 0x0C5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_286)
{
    // 2A7B 0062;	
    // (⩻) LESS-THAN WITH QUESTION MARK ABOVE	[0C5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7B, 0x0062 };
    uint32_t const ces[9] = { 0x0C5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_287)
{
    // 2A7C 0021;	
    // (⩼) GREATER-THAN WITH QUESTION MARK ABOVE	[0C5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7C, 0x0021 };
    uint32_t const ces[9] = { 0x0C5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_288)
{
    // 2A7C 003F;	
    // (⩼) GREATER-THAN WITH QUESTION MARK ABOVE	[0C5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7C, 0x003F };
    uint32_t const ces[9] = { 0x0C5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_289)
{
    // 2A7C 0061;	
    // (⩼) GREATER-THAN WITH QUESTION MARK ABOVE	[0C5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7C, 0x0061 };
    uint32_t const ces[9] = { 0x0C5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_290)
{
    // 2A7C 0041;	
    // (⩼) GREATER-THAN WITH QUESTION MARK ABOVE	[0C5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A7C, 0x0041 };
    uint32_t const ces[9] = { 0x0C5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_291)
{
    // 2A7C 0062;	
    // (⩼) GREATER-THAN WITH QUESTION MARK ABOVE	[0C5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7C, 0x0062 };
    uint32_t const ces[9] = { 0x0C5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_292)
{
    // 2A7D 0021;	
    // (⩽) LESS-THAN OR SLANTED EQUAL TO	[0C5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7D, 0x0021 };
    uint32_t const ces[9] = { 0x0C5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_293)
{
    // 2A7D 003F;	
    // (⩽) LESS-THAN OR SLANTED EQUAL TO	[0C5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7D, 0x003F };
    uint32_t const ces[9] = { 0x0C5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_294)
{
    // 2A7D 0061;	
    // (⩽) LESS-THAN OR SLANTED EQUAL TO	[0C5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7D, 0x0061 };
    uint32_t const ces[9] = { 0x0C5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_295)
{
    // 2A7D 0041;	
    // (⩽) LESS-THAN OR SLANTED EQUAL TO	[0C5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A7D, 0x0041 };
    uint32_t const ces[9] = { 0x0C5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_296)
{
    // 2A7D 0062;	
    // (⩽) LESS-THAN OR SLANTED EQUAL TO	[0C5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7D, 0x0062 };
    uint32_t const ces[9] = { 0x0C5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_297)
{
    // 2A7E 0021;	
    // (⩾) GREATER-THAN OR SLANTED EQUAL TO	[0C5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7E, 0x0021 };
    uint32_t const ces[9] = { 0x0C5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_298)
{
    // 2A7E 003F;	
    // (⩾) GREATER-THAN OR SLANTED EQUAL TO	[0C5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7E, 0x003F };
    uint32_t const ces[9] = { 0x0C5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_299)
{
    // 2A7E 0061;	
    // (⩾) GREATER-THAN OR SLANTED EQUAL TO	[0C5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7E, 0x0061 };
    uint32_t const ces[9] = { 0x0C5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_300)
{
    // 2A7E 0041;	
    // (⩾) GREATER-THAN OR SLANTED EQUAL TO	[0C5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A7E, 0x0041 };
    uint32_t const ces[9] = { 0x0C5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_301)
{
    // 2A7E 0062;	
    // (⩾) GREATER-THAN OR SLANTED EQUAL TO	[0C5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7E, 0x0062 };
    uint32_t const ces[9] = { 0x0C5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_302)
{
    // 2A7F 0021;	
    // (⩿) LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE	[0C5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7F, 0x0021 };
    uint32_t const ces[9] = { 0x0C5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_303)
{
    // 2A7F 003F;	
    // (⩿) LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE	[0C5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7F, 0x003F };
    uint32_t const ces[9] = { 0x0C5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_304)
{
    // 2A7F 0061;	
    // (⩿) LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE	[0C5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7F, 0x0061 };
    uint32_t const ces[9] = { 0x0C5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_305)
{
    // 2A7F 0041;	
    // (⩿) LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE	[0C5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A7F, 0x0041 };
    uint32_t const ces[9] = { 0x0C5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_306)
{
    // 2A7F 0062;	
    // (⩿) LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE	[0C5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A7F, 0x0062 };
    uint32_t const ces[9] = { 0x0C5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_307)
{
    // 2A80 0021;	
    // (⪀) GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE	[0C60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A80, 0x0021 };
    uint32_t const ces[9] = { 0x0C60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_308)
{
    // 2A80 003F;	
    // (⪀) GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE	[0C60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A80, 0x003F };
    uint32_t const ces[9] = { 0x0C60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_309)
{
    // 2A80 0061;	
    // (⪀) GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE	[0C60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A80, 0x0061 };
    uint32_t const ces[9] = { 0x0C60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_310)
{
    // 2A80 0041;	
    // (⪀) GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE	[0C60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A80, 0x0041 };
    uint32_t const ces[9] = { 0x0C60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_311)
{
    // 2A80 0062;	
    // (⪀) GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE	[0C60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A80, 0x0062 };
    uint32_t const ces[9] = { 0x0C60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_312)
{
    // 2A81 0021;	
    // (⪁) LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE	[0C61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A81, 0x0021 };
    uint32_t const ces[9] = { 0x0C61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_313)
{
    // 2A81 003F;	
    // (⪁) LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE	[0C61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A81, 0x003F };
    uint32_t const ces[9] = { 0x0C61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_314)
{
    // 2A81 0061;	
    // (⪁) LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE	[0C61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A81, 0x0061 };
    uint32_t const ces[9] = { 0x0C61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_315)
{
    // 2A81 0041;	
    // (⪁) LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE	[0C61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A81, 0x0041 };
    uint32_t const ces[9] = { 0x0C61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_316)
{
    // 2A81 0062;	
    // (⪁) LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE	[0C61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A81, 0x0062 };
    uint32_t const ces[9] = { 0x0C61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_317)
{
    // 2A82 0021;	
    // (⪂) GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE	[0C62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A82, 0x0021 };
    uint32_t const ces[9] = { 0x0C62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_318)
{
    // 2A82 003F;	
    // (⪂) GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE	[0C62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A82, 0x003F };
    uint32_t const ces[9] = { 0x0C62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_319)
{
    // 2A82 0061;	
    // (⪂) GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE	[0C62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A82, 0x0061 };
    uint32_t const ces[9] = { 0x0C62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_320)
{
    // 2A82 0041;	
    // (⪂) GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE	[0C62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A82, 0x0041 };
    uint32_t const ces[9] = { 0x0C62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_321)
{
    // 2A82 0062;	
    // (⪂) GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE	[0C62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A82, 0x0062 };
    uint32_t const ces[9] = { 0x0C62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_322)
{
    // 2A83 0021;	
    // (⪃) LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT	[0C63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A83, 0x0021 };
    uint32_t const ces[9] = { 0x0C63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_323)
{
    // 2A83 003F;	
    // (⪃) LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT	[0C63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A83, 0x003F };
    uint32_t const ces[9] = { 0x0C63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_324)
{
    // 2A83 0061;	
    // (⪃) LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT	[0C63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A83, 0x0061 };
    uint32_t const ces[9] = { 0x0C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_325)
{
    // 2A83 0041;	
    // (⪃) LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT	[0C63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A83, 0x0041 };
    uint32_t const ces[9] = { 0x0C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_326)
{
    // 2A83 0062;	
    // (⪃) LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT	[0C63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A83, 0x0062 };
    uint32_t const ces[9] = { 0x0C63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_327)
{
    // 2A84 0021;	
    // (⪄) GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT	[0C64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A84, 0x0021 };
    uint32_t const ces[9] = { 0x0C64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_328)
{
    // 2A84 003F;	
    // (⪄) GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT	[0C64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A84, 0x003F };
    uint32_t const ces[9] = { 0x0C64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_329)
{
    // 2A84 0061;	
    // (⪄) GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT	[0C64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A84, 0x0061 };
    uint32_t const ces[9] = { 0x0C64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_330)
{
    // 2A84 0041;	
    // (⪄) GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT	[0C64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A84, 0x0041 };
    uint32_t const ces[9] = { 0x0C64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_331)
{
    // 2A84 0062;	
    // (⪄) GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT	[0C64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A84, 0x0062 };
    uint32_t const ces[9] = { 0x0C64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_332)
{
    // 2A85 0021;	
    // (⪅) LESS-THAN OR APPROXIMATE	[0C65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A85, 0x0021 };
    uint32_t const ces[9] = { 0x0C65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_333)
{
    // 2A85 003F;	
    // (⪅) LESS-THAN OR APPROXIMATE	[0C65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A85, 0x003F };
    uint32_t const ces[9] = { 0x0C65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_334)
{
    // 2A85 0061;	
    // (⪅) LESS-THAN OR APPROXIMATE	[0C65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A85, 0x0061 };
    uint32_t const ces[9] = { 0x0C65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_335)
{
    // 2A85 0041;	
    // (⪅) LESS-THAN OR APPROXIMATE	[0C65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A85, 0x0041 };
    uint32_t const ces[9] = { 0x0C65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_336)
{
    // 2A85 0062;	
    // (⪅) LESS-THAN OR APPROXIMATE	[0C65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A85, 0x0062 };
    uint32_t const ces[9] = { 0x0C65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_337)
{
    // 2A86 0021;	
    // (⪆) GREATER-THAN OR APPROXIMATE	[0C66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A86, 0x0021 };
    uint32_t const ces[9] = { 0x0C66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_338)
{
    // 2A86 003F;	
    // (⪆) GREATER-THAN OR APPROXIMATE	[0C66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A86, 0x003F };
    uint32_t const ces[9] = { 0x0C66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_339)
{
    // 2A86 0061;	
    // (⪆) GREATER-THAN OR APPROXIMATE	[0C66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A86, 0x0061 };
    uint32_t const ces[9] = { 0x0C66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_340)
{
    // 2A86 0041;	
    // (⪆) GREATER-THAN OR APPROXIMATE	[0C66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A86, 0x0041 };
    uint32_t const ces[9] = { 0x0C66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_341)
{
    // 2A86 0062;	
    // (⪆) GREATER-THAN OR APPROXIMATE	[0C66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A86, 0x0062 };
    uint32_t const ces[9] = { 0x0C66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_342)
{
    // 2A87 0021;	
    // (⪇) LESS-THAN AND SINGLE-LINE NOT EQUAL TO	[0C67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A87, 0x0021 };
    uint32_t const ces[9] = { 0x0C67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_343)
{
    // 2A87 003F;	
    // (⪇) LESS-THAN AND SINGLE-LINE NOT EQUAL TO	[0C67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A87, 0x003F };
    uint32_t const ces[9] = { 0x0C67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_344)
{
    // 2A87 0061;	
    // (⪇) LESS-THAN AND SINGLE-LINE NOT EQUAL TO	[0C67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A87, 0x0061 };
    uint32_t const ces[9] = { 0x0C67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_345)
{
    // 2A87 0041;	
    // (⪇) LESS-THAN AND SINGLE-LINE NOT EQUAL TO	[0C67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A87, 0x0041 };
    uint32_t const ces[9] = { 0x0C67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_346)
{
    // 2A87 0062;	
    // (⪇) LESS-THAN AND SINGLE-LINE NOT EQUAL TO	[0C67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A87, 0x0062 };
    uint32_t const ces[9] = { 0x0C67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_347)
{
    // 2A88 0021;	
    // (⪈) GREATER-THAN AND SINGLE-LINE NOT EQUAL TO	[0C68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A88, 0x0021 };
    uint32_t const ces[9] = { 0x0C68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_348)
{
    // 2A88 003F;	
    // (⪈) GREATER-THAN AND SINGLE-LINE NOT EQUAL TO	[0C68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A88, 0x003F };
    uint32_t const ces[9] = { 0x0C68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_349)
{
    // 2A88 0061;	
    // (⪈) GREATER-THAN AND SINGLE-LINE NOT EQUAL TO	[0C68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A88, 0x0061 };
    uint32_t const ces[9] = { 0x0C68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_350)
{
    // 2A88 0041;	
    // (⪈) GREATER-THAN AND SINGLE-LINE NOT EQUAL TO	[0C68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A88, 0x0041 };
    uint32_t const ces[9] = { 0x0C68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_351)
{
    // 2A88 0062;	
    // (⪈) GREATER-THAN AND SINGLE-LINE NOT EQUAL TO	[0C68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A88, 0x0062 };
    uint32_t const ces[9] = { 0x0C68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_352)
{
    // 2A89 0021;	
    // (⪉) LESS-THAN AND NOT APPROXIMATE	[0C69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A89, 0x0021 };
    uint32_t const ces[9] = { 0x0C69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_353)
{
    // 2A89 003F;	
    // (⪉) LESS-THAN AND NOT APPROXIMATE	[0C69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A89, 0x003F };
    uint32_t const ces[9] = { 0x0C69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_354)
{
    // 2A89 0061;	
    // (⪉) LESS-THAN AND NOT APPROXIMATE	[0C69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A89, 0x0061 };
    uint32_t const ces[9] = { 0x0C69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_355)
{
    // 2A89 0041;	
    // (⪉) LESS-THAN AND NOT APPROXIMATE	[0C69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A89, 0x0041 };
    uint32_t const ces[9] = { 0x0C69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_356)
{
    // 2A89 0062;	
    // (⪉) LESS-THAN AND NOT APPROXIMATE	[0C69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A89, 0x0062 };
    uint32_t const ces[9] = { 0x0C69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_357)
{
    // 2A8A 0021;	
    // (⪊) GREATER-THAN AND NOT APPROXIMATE	[0C6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8A, 0x0021 };
    uint32_t const ces[9] = { 0x0C6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_358)
{
    // 2A8A 003F;	
    // (⪊) GREATER-THAN AND NOT APPROXIMATE	[0C6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8A, 0x003F };
    uint32_t const ces[9] = { 0x0C6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_359)
{
    // 2A8A 0061;	
    // (⪊) GREATER-THAN AND NOT APPROXIMATE	[0C6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8A, 0x0061 };
    uint32_t const ces[9] = { 0x0C6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_360)
{
    // 2A8A 0041;	
    // (⪊) GREATER-THAN AND NOT APPROXIMATE	[0C6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A8A, 0x0041 };
    uint32_t const ces[9] = { 0x0C6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_361)
{
    // 2A8A 0062;	
    // (⪊) GREATER-THAN AND NOT APPROXIMATE	[0C6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8A, 0x0062 };
    uint32_t const ces[9] = { 0x0C6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_362)
{
    // 2A8B 0021;	
    // (⪋) LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN	[0C6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8B, 0x0021 };
    uint32_t const ces[9] = { 0x0C6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_363)
{
    // 2A8B 003F;	
    // (⪋) LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN	[0C6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8B, 0x003F };
    uint32_t const ces[9] = { 0x0C6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_364)
{
    // 2A8B 0061;	
    // (⪋) LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN	[0C6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8B, 0x0061 };
    uint32_t const ces[9] = { 0x0C6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_365)
{
    // 2A8B 0041;	
    // (⪋) LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN	[0C6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A8B, 0x0041 };
    uint32_t const ces[9] = { 0x0C6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_366)
{
    // 2A8B 0062;	
    // (⪋) LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN	[0C6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8B, 0x0062 };
    uint32_t const ces[9] = { 0x0C6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_367)
{
    // 2A8C 0021;	
    // (⪌) GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN	[0C6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8C, 0x0021 };
    uint32_t const ces[9] = { 0x0C6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_368)
{
    // 2A8C 003F;	
    // (⪌) GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN	[0C6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8C, 0x003F };
    uint32_t const ces[9] = { 0x0C6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_369)
{
    // 2A8C 0061;	
    // (⪌) GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN	[0C6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8C, 0x0061 };
    uint32_t const ces[9] = { 0x0C6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_370)
{
    // 2A8C 0041;	
    // (⪌) GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN	[0C6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A8C, 0x0041 };
    uint32_t const ces[9] = { 0x0C6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_371)
{
    // 2A8C 0062;	
    // (⪌) GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN	[0C6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8C, 0x0062 };
    uint32_t const ces[9] = { 0x0C6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_372)
{
    // 2A8D 0021;	
    // (⪍) LESS-THAN ABOVE SIMILAR OR EQUAL	[0C6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8D, 0x0021 };
    uint32_t const ces[9] = { 0x0C6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_373)
{
    // 2A8D 003F;	
    // (⪍) LESS-THAN ABOVE SIMILAR OR EQUAL	[0C6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8D, 0x003F };
    uint32_t const ces[9] = { 0x0C6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_374)
{
    // 2A8D 0061;	
    // (⪍) LESS-THAN ABOVE SIMILAR OR EQUAL	[0C6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8D, 0x0061 };
    uint32_t const ces[9] = { 0x0C6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_375)
{
    // 2A8D 0041;	
    // (⪍) LESS-THAN ABOVE SIMILAR OR EQUAL	[0C6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A8D, 0x0041 };
    uint32_t const ces[9] = { 0x0C6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_376)
{
    // 2A8D 0062;	
    // (⪍) LESS-THAN ABOVE SIMILAR OR EQUAL	[0C6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8D, 0x0062 };
    uint32_t const ces[9] = { 0x0C6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_377)
{
    // 2A8E 0021;	
    // (⪎) GREATER-THAN ABOVE SIMILAR OR EQUAL	[0C6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8E, 0x0021 };
    uint32_t const ces[9] = { 0x0C6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_378)
{
    // 2A8E 003F;	
    // (⪎) GREATER-THAN ABOVE SIMILAR OR EQUAL	[0C6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8E, 0x003F };
    uint32_t const ces[9] = { 0x0C6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_379)
{
    // 2A8E 0061;	
    // (⪎) GREATER-THAN ABOVE SIMILAR OR EQUAL	[0C6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8E, 0x0061 };
    uint32_t const ces[9] = { 0x0C6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_380)
{
    // 2A8E 0041;	
    // (⪎) GREATER-THAN ABOVE SIMILAR OR EQUAL	[0C6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A8E, 0x0041 };
    uint32_t const ces[9] = { 0x0C6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_381)
{
    // 2A8E 0062;	
    // (⪎) GREATER-THAN ABOVE SIMILAR OR EQUAL	[0C6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8E, 0x0062 };
    uint32_t const ces[9] = { 0x0C6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_382)
{
    // 2A8F 0021;	
    // (⪏) LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN	[0C6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8F, 0x0021 };
    uint32_t const ces[9] = { 0x0C6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_383)
{
    // 2A8F 003F;	
    // (⪏) LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN	[0C6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8F, 0x003F };
    uint32_t const ces[9] = { 0x0C6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_384)
{
    // 2A8F 0061;	
    // (⪏) LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN	[0C6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8F, 0x0061 };
    uint32_t const ces[9] = { 0x0C6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_385)
{
    // 2A8F 0041;	
    // (⪏) LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN	[0C6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A8F, 0x0041 };
    uint32_t const ces[9] = { 0x0C6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_386)
{
    // 2A8F 0062;	
    // (⪏) LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN	[0C6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A8F, 0x0062 };
    uint32_t const ces[9] = { 0x0C6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_387)
{
    // 2A90 0021;	
    // (⪐) GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN	[0C70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A90, 0x0021 };
    uint32_t const ces[9] = { 0x0C70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_388)
{
    // 2A90 003F;	
    // (⪐) GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN	[0C70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A90, 0x003F };
    uint32_t const ces[9] = { 0x0C70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_389)
{
    // 2A90 0061;	
    // (⪐) GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN	[0C70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A90, 0x0061 };
    uint32_t const ces[9] = { 0x0C70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_390)
{
    // 2A90 0041;	
    // (⪐) GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN	[0C70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A90, 0x0041 };
    uint32_t const ces[9] = { 0x0C70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_391)
{
    // 2A90 0062;	
    // (⪐) GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN	[0C70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A90, 0x0062 };
    uint32_t const ces[9] = { 0x0C70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_392)
{
    // 2A91 0021;	
    // (⪑) LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL	[0C71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A91, 0x0021 };
    uint32_t const ces[9] = { 0x0C71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_393)
{
    // 2A91 003F;	
    // (⪑) LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL	[0C71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A91, 0x003F };
    uint32_t const ces[9] = { 0x0C71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_394)
{
    // 2A91 0061;	
    // (⪑) LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL	[0C71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A91, 0x0061 };
    uint32_t const ces[9] = { 0x0C71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_395)
{
    // 2A91 0041;	
    // (⪑) LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL	[0C71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A91, 0x0041 };
    uint32_t const ces[9] = { 0x0C71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_396)
{
    // 2A91 0062;	
    // (⪑) LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL	[0C71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A91, 0x0062 };
    uint32_t const ces[9] = { 0x0C71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_397)
{
    // 2A92 0021;	
    // (⪒) GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL	[0C72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A92, 0x0021 };
    uint32_t const ces[9] = { 0x0C72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_398)
{
    // 2A92 003F;	
    // (⪒) GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL	[0C72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A92, 0x003F };
    uint32_t const ces[9] = { 0x0C72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_399)
{
    // 2A92 0061;	
    // (⪒) GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL	[0C72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A92, 0x0061 };
    uint32_t const ces[9] = { 0x0C72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_400)
{
    // 2A92 0041;	
    // (⪒) GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL	[0C72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A92, 0x0041 };
    uint32_t const ces[9] = { 0x0C72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_401)
{
    // 2A92 0062;	
    // (⪒) GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL	[0C72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A92, 0x0062 };
    uint32_t const ces[9] = { 0x0C72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_402)
{
    // 2A93 0021;	
    // (⪓) LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL	[0C73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A93, 0x0021 };
    uint32_t const ces[9] = { 0x0C73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_403)
{
    // 2A93 003F;	
    // (⪓) LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL	[0C73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A93, 0x003F };
    uint32_t const ces[9] = { 0x0C73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_404)
{
    // 2A93 0061;	
    // (⪓) LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL	[0C73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A93, 0x0061 };
    uint32_t const ces[9] = { 0x0C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_405)
{
    // 2A93 0041;	
    // (⪓) LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL	[0C73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A93, 0x0041 };
    uint32_t const ces[9] = { 0x0C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_406)
{
    // 2A93 0062;	
    // (⪓) LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL	[0C73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A93, 0x0062 };
    uint32_t const ces[9] = { 0x0C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_407)
{
    // 2A94 0021;	
    // (⪔) GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL	[0C74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A94, 0x0021 };
    uint32_t const ces[9] = { 0x0C74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_408)
{
    // 2A94 003F;	
    // (⪔) GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL	[0C74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A94, 0x003F };
    uint32_t const ces[9] = { 0x0C74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_409)
{
    // 2A94 0061;	
    // (⪔) GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL	[0C74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A94, 0x0061 };
    uint32_t const ces[9] = { 0x0C74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_410)
{
    // 2A94 0041;	
    // (⪔) GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL	[0C74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A94, 0x0041 };
    uint32_t const ces[9] = { 0x0C74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_411)
{
    // 2A94 0062;	
    // (⪔) GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL	[0C74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A94, 0x0062 };
    uint32_t const ces[9] = { 0x0C74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_412)
{
    // 2A95 0021;	
    // (⪕) SLANTED EQUAL TO OR LESS-THAN	[0C75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A95, 0x0021 };
    uint32_t const ces[9] = { 0x0C75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_413)
{
    // 2A95 003F;	
    // (⪕) SLANTED EQUAL TO OR LESS-THAN	[0C75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A95, 0x003F };
    uint32_t const ces[9] = { 0x0C75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_414)
{
    // 2A95 0061;	
    // (⪕) SLANTED EQUAL TO OR LESS-THAN	[0C75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A95, 0x0061 };
    uint32_t const ces[9] = { 0x0C75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_415)
{
    // 2A95 0041;	
    // (⪕) SLANTED EQUAL TO OR LESS-THAN	[0C75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A95, 0x0041 };
    uint32_t const ces[9] = { 0x0C75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_416)
{
    // 2A95 0062;	
    // (⪕) SLANTED EQUAL TO OR LESS-THAN	[0C75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A95, 0x0062 };
    uint32_t const ces[9] = { 0x0C75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_417)
{
    // 2A96 0021;	
    // (⪖) SLANTED EQUAL TO OR GREATER-THAN	[0C76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A96, 0x0021 };
    uint32_t const ces[9] = { 0x0C76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_418)
{
    // 2A96 003F;	
    // (⪖) SLANTED EQUAL TO OR GREATER-THAN	[0C76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A96, 0x003F };
    uint32_t const ces[9] = { 0x0C76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_419)
{
    // 2A96 0061;	
    // (⪖) SLANTED EQUAL TO OR GREATER-THAN	[0C76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A96, 0x0061 };
    uint32_t const ces[9] = { 0x0C76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_420)
{
    // 2A96 0041;	
    // (⪖) SLANTED EQUAL TO OR GREATER-THAN	[0C76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A96, 0x0041 };
    uint32_t const ces[9] = { 0x0C76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_421)
{
    // 2A96 0062;	
    // (⪖) SLANTED EQUAL TO OR GREATER-THAN	[0C76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A96, 0x0062 };
    uint32_t const ces[9] = { 0x0C76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_422)
{
    // 2A97 0021;	
    // (⪗) SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE	[0C77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A97, 0x0021 };
    uint32_t const ces[9] = { 0x0C77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_423)
{
    // 2A97 003F;	
    // (⪗) SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE	[0C77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A97, 0x003F };
    uint32_t const ces[9] = { 0x0C77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_424)
{
    // 2A97 0061;	
    // (⪗) SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE	[0C77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A97, 0x0061 };
    uint32_t const ces[9] = { 0x0C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_425)
{
    // 2A97 0041;	
    // (⪗) SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE	[0C77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A97, 0x0041 };
    uint32_t const ces[9] = { 0x0C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_426)
{
    // 2A97 0062;	
    // (⪗) SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE	[0C77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A97, 0x0062 };
    uint32_t const ces[9] = { 0x0C77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_427)
{
    // 2A98 0021;	
    // (⪘) SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE	[0C78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A98, 0x0021 };
    uint32_t const ces[9] = { 0x0C78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_428)
{
    // 2A98 003F;	
    // (⪘) SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE	[0C78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A98, 0x003F };
    uint32_t const ces[9] = { 0x0C78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_429)
{
    // 2A98 0061;	
    // (⪘) SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE	[0C78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A98, 0x0061 };
    uint32_t const ces[9] = { 0x0C78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_430)
{
    // 2A98 0041;	
    // (⪘) SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE	[0C78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A98, 0x0041 };
    uint32_t const ces[9] = { 0x0C78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_431)
{
    // 2A98 0062;	
    // (⪘) SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE	[0C78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A98, 0x0062 };
    uint32_t const ces[9] = { 0x0C78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_432)
{
    // 2A99 0021;	
    // (⪙) DOUBLE-LINE EQUAL TO OR LESS-THAN	[0C79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A99, 0x0021 };
    uint32_t const ces[9] = { 0x0C79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_433)
{
    // 2A99 003F;	
    // (⪙) DOUBLE-LINE EQUAL TO OR LESS-THAN	[0C79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A99, 0x003F };
    uint32_t const ces[9] = { 0x0C79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_434)
{
    // 2A99 0061;	
    // (⪙) DOUBLE-LINE EQUAL TO OR LESS-THAN	[0C79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A99, 0x0061 };
    uint32_t const ces[9] = { 0x0C79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_435)
{
    // 2A99 0041;	
    // (⪙) DOUBLE-LINE EQUAL TO OR LESS-THAN	[0C79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A99, 0x0041 };
    uint32_t const ces[9] = { 0x0C79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_436)
{
    // 2A99 0062;	
    // (⪙) DOUBLE-LINE EQUAL TO OR LESS-THAN	[0C79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A99, 0x0062 };
    uint32_t const ces[9] = { 0x0C79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_437)
{
    // 2A9A 0021;	
    // (⪚) DOUBLE-LINE EQUAL TO OR GREATER-THAN	[0C7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9A, 0x0021 };
    uint32_t const ces[9] = { 0x0C7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_438)
{
    // 2A9A 003F;	
    // (⪚) DOUBLE-LINE EQUAL TO OR GREATER-THAN	[0C7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9A, 0x003F };
    uint32_t const ces[9] = { 0x0C7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_439)
{
    // 2A9A 0061;	
    // (⪚) DOUBLE-LINE EQUAL TO OR GREATER-THAN	[0C7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9A, 0x0061 };
    uint32_t const ces[9] = { 0x0C7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_440)
{
    // 2A9A 0041;	
    // (⪚) DOUBLE-LINE EQUAL TO OR GREATER-THAN	[0C7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A9A, 0x0041 };
    uint32_t const ces[9] = { 0x0C7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_441)
{
    // 2A9A 0062;	
    // (⪚) DOUBLE-LINE EQUAL TO OR GREATER-THAN	[0C7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9A, 0x0062 };
    uint32_t const ces[9] = { 0x0C7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_442)
{
    // 2A9B 0021;	
    // (⪛) DOUBLE-LINE SLANTED EQUAL TO OR LESS-THAN	[0C7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9B, 0x0021 };
    uint32_t const ces[9] = { 0x0C7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_443)
{
    // 2A9B 003F;	
    // (⪛) DOUBLE-LINE SLANTED EQUAL TO OR LESS-THAN	[0C7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9B, 0x003F };
    uint32_t const ces[9] = { 0x0C7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_444)
{
    // 2A9B 0061;	
    // (⪛) DOUBLE-LINE SLANTED EQUAL TO OR LESS-THAN	[0C7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9B, 0x0061 };
    uint32_t const ces[9] = { 0x0C7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_445)
{
    // 2A9B 0041;	
    // (⪛) DOUBLE-LINE SLANTED EQUAL TO OR LESS-THAN	[0C7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A9B, 0x0041 };
    uint32_t const ces[9] = { 0x0C7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_446)
{
    // 2A9B 0062;	
    // (⪛) DOUBLE-LINE SLANTED EQUAL TO OR LESS-THAN	[0C7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9B, 0x0062 };
    uint32_t const ces[9] = { 0x0C7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_447)
{
    // 2A9C 0021;	
    // (⪜) DOUBLE-LINE SLANTED EQUAL TO OR GREATER-THAN	[0C7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9C, 0x0021 };
    uint32_t const ces[9] = { 0x0C7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_448)
{
    // 2A9C 003F;	
    // (⪜) DOUBLE-LINE SLANTED EQUAL TO OR GREATER-THAN	[0C7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9C, 0x003F };
    uint32_t const ces[9] = { 0x0C7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_449)
{
    // 2A9C 0061;	
    // (⪜) DOUBLE-LINE SLANTED EQUAL TO OR GREATER-THAN	[0C7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9C, 0x0061 };
    uint32_t const ces[9] = { 0x0C7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_450)
{
    // 2A9C 0041;	
    // (⪜) DOUBLE-LINE SLANTED EQUAL TO OR GREATER-THAN	[0C7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A9C, 0x0041 };
    uint32_t const ces[9] = { 0x0C7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_451)
{
    // 2A9C 0062;	
    // (⪜) DOUBLE-LINE SLANTED EQUAL TO OR GREATER-THAN	[0C7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9C, 0x0062 };
    uint32_t const ces[9] = { 0x0C7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_452)
{
    // 2A9D 0021;	
    // (⪝) SIMILAR OR LESS-THAN	[0C7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9D, 0x0021 };
    uint32_t const ces[9] = { 0x0C7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_453)
{
    // 2A9D 003F;	
    // (⪝) SIMILAR OR LESS-THAN	[0C7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9D, 0x003F };
    uint32_t const ces[9] = { 0x0C7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_454)
{
    // 2A9D 0061;	
    // (⪝) SIMILAR OR LESS-THAN	[0C7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9D, 0x0061 };
    uint32_t const ces[9] = { 0x0C7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_455)
{
    // 2A9D 0041;	
    // (⪝) SIMILAR OR LESS-THAN	[0C7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A9D, 0x0041 };
    uint32_t const ces[9] = { 0x0C7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_456)
{
    // 2A9D 0062;	
    // (⪝) SIMILAR OR LESS-THAN	[0C7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9D, 0x0062 };
    uint32_t const ces[9] = { 0x0C7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_457)
{
    // 2A9E 0021;	
    // (⪞) SIMILAR OR GREATER-THAN	[0C7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9E, 0x0021 };
    uint32_t const ces[9] = { 0x0C7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_458)
{
    // 2A9E 003F;	
    // (⪞) SIMILAR OR GREATER-THAN	[0C7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9E, 0x003F };
    uint32_t const ces[9] = { 0x0C7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_459)
{
    // 2A9E 0061;	
    // (⪞) SIMILAR OR GREATER-THAN	[0C7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9E, 0x0061 };
    uint32_t const ces[9] = { 0x0C7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_460)
{
    // 2A9E 0041;	
    // (⪞) SIMILAR OR GREATER-THAN	[0C7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A9E, 0x0041 };
    uint32_t const ces[9] = { 0x0C7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_461)
{
    // 2A9E 0062;	
    // (⪞) SIMILAR OR GREATER-THAN	[0C7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9E, 0x0062 };
    uint32_t const ces[9] = { 0x0C7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_462)
{
    // 2A9F 0021;	
    // (⪟) SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN	[0C7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9F, 0x0021 };
    uint32_t const ces[9] = { 0x0C7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_463)
{
    // 2A9F 003F;	
    // (⪟) SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN	[0C7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9F, 0x003F };
    uint32_t const ces[9] = { 0x0C7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_464)
{
    // 2A9F 0061;	
    // (⪟) SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN	[0C7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9F, 0x0061 };
    uint32_t const ces[9] = { 0x0C7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_465)
{
    // 2A9F 0041;	
    // (⪟) SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN	[0C7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A9F, 0x0041 };
    uint32_t const ces[9] = { 0x0C7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_466)
{
    // 2A9F 0062;	
    // (⪟) SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN	[0C7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A9F, 0x0062 };
    uint32_t const ces[9] = { 0x0C7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_467)
{
    // 2AA0 0021;	
    // (⪠) SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN	[0C80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA0, 0x0021 };
    uint32_t const ces[9] = { 0x0C80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_468)
{
    // 2AA0 003F;	
    // (⪠) SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN	[0C80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA0, 0x003F };
    uint32_t const ces[9] = { 0x0C80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_469)
{
    // 2AA0 0061;	
    // (⪠) SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN	[0C80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA0, 0x0061 };
    uint32_t const ces[9] = { 0x0C80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_470)
{
    // 2AA0 0041;	
    // (⪠) SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN	[0C80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2AA0, 0x0041 };
    uint32_t const ces[9] = { 0x0C80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_471)
{
    // 2AA0 0062;	
    // (⪠) SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN	[0C80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA0, 0x0062 };
    uint32_t const ces[9] = { 0x0C80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_472)
{
    // 2AA1 0021;	
    // (⪡) DOUBLE NESTED LESS-THAN	[0C81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA1, 0x0021 };
    uint32_t const ces[9] = { 0x0C81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_473)
{
    // 2AA1 003F;	
    // (⪡) DOUBLE NESTED LESS-THAN	[0C81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA1, 0x003F };
    uint32_t const ces[9] = { 0x0C81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_474)
{
    // 2AA1 0061;	
    // (⪡) DOUBLE NESTED LESS-THAN	[0C81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA1, 0x0061 };
    uint32_t const ces[9] = { 0x0C81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_475)
{
    // 2AA1 0041;	
    // (⪡) DOUBLE NESTED LESS-THAN	[0C81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2AA1, 0x0041 };
    uint32_t const ces[9] = { 0x0C81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_476)
{
    // 2AA1 0062;	
    // (⪡) DOUBLE NESTED LESS-THAN	[0C81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA1, 0x0062 };
    uint32_t const ces[9] = { 0x0C81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_477)
{
    // 2AA2 0021;	
    // (⪢) DOUBLE NESTED GREATER-THAN	[0C82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA2, 0x0021 };
    uint32_t const ces[9] = { 0x0C82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_478)
{
    // 2AA2 003F;	
    // (⪢) DOUBLE NESTED GREATER-THAN	[0C82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA2, 0x003F };
    uint32_t const ces[9] = { 0x0C82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_479)
{
    // 2AA2 0061;	
    // (⪢) DOUBLE NESTED GREATER-THAN	[0C82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA2, 0x0061 };
    uint32_t const ces[9] = { 0x0C82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_480)
{
    // 2AA2 0041;	
    // (⪢) DOUBLE NESTED GREATER-THAN	[0C82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2AA2, 0x0041 };
    uint32_t const ces[9] = { 0x0C82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_481)
{
    // 2AA2 0062;	
    // (⪢) DOUBLE NESTED GREATER-THAN	[0C82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA2, 0x0062 };
    uint32_t const ces[9] = { 0x0C82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_482)
{
    // 2AA3 0021;	
    // (⪣) DOUBLE NESTED LESS-THAN WITH UNDERBAR	[0C83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA3, 0x0021 };
    uint32_t const ces[9] = { 0x0C83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_483)
{
    // 2AA3 003F;	
    // (⪣) DOUBLE NESTED LESS-THAN WITH UNDERBAR	[0C83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA3, 0x003F };
    uint32_t const ces[9] = { 0x0C83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_484)
{
    // 2AA3 0061;	
    // (⪣) DOUBLE NESTED LESS-THAN WITH UNDERBAR	[0C83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA3, 0x0061 };
    uint32_t const ces[9] = { 0x0C83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_485)
{
    // 2AA3 0041;	
    // (⪣) DOUBLE NESTED LESS-THAN WITH UNDERBAR	[0C83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2AA3, 0x0041 };
    uint32_t const ces[9] = { 0x0C83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_486)
{
    // 2AA3 0062;	
    // (⪣) DOUBLE NESTED LESS-THAN WITH UNDERBAR	[0C83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA3, 0x0062 };
    uint32_t const ces[9] = { 0x0C83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_487)
{
    // 2AA4 0021;	
    // (⪤) GREATER-THAN OVERLAPPING LESS-THAN	[0C84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA4, 0x0021 };
    uint32_t const ces[9] = { 0x0C84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_488)
{
    // 2AA4 003F;	
    // (⪤) GREATER-THAN OVERLAPPING LESS-THAN	[0C84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA4, 0x003F };
    uint32_t const ces[9] = { 0x0C84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_489)
{
    // 2AA4 0061;	
    // (⪤) GREATER-THAN OVERLAPPING LESS-THAN	[0C84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA4, 0x0061 };
    uint32_t const ces[9] = { 0x0C84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_490)
{
    // 2AA4 0041;	
    // (⪤) GREATER-THAN OVERLAPPING LESS-THAN	[0C84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2AA4, 0x0041 };
    uint32_t const ces[9] = { 0x0C84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_491)
{
    // 2AA4 0062;	
    // (⪤) GREATER-THAN OVERLAPPING LESS-THAN	[0C84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA4, 0x0062 };
    uint32_t const ces[9] = { 0x0C84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_492)
{
    // 2AA5 0021;	
    // (⪥) GREATER-THAN BESIDE LESS-THAN	[0C85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA5, 0x0021 };
    uint32_t const ces[9] = { 0x0C85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_493)
{
    // 2AA5 003F;	
    // (⪥) GREATER-THAN BESIDE LESS-THAN	[0C85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA5, 0x003F };
    uint32_t const ces[9] = { 0x0C85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_494)
{
    // 2AA5 0061;	
    // (⪥) GREATER-THAN BESIDE LESS-THAN	[0C85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA5, 0x0061 };
    uint32_t const ces[9] = { 0x0C85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_495)
{
    // 2AA5 0041;	
    // (⪥) GREATER-THAN BESIDE LESS-THAN	[0C85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2AA5, 0x0041 };
    uint32_t const ces[9] = { 0x0C85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_496)
{
    // 2AA5 0062;	
    // (⪥) GREATER-THAN BESIDE LESS-THAN	[0C85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA5, 0x0062 };
    uint32_t const ces[9] = { 0x0C85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_497)
{
    // 2AA6 0021;	
    // (⪦) LESS-THAN CLOSED BY CURVE	[0C86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA6, 0x0021 };
    uint32_t const ces[9] = { 0x0C86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_498)
{
    // 2AA6 003F;	
    // (⪦) LESS-THAN CLOSED BY CURVE	[0C86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA6, 0x003F };
    uint32_t const ces[9] = { 0x0C86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_038_499)
{
    // 2AA6 0061;	
    // (⪦) LESS-THAN CLOSED BY CURVE	[0C86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2AA6, 0x0061 };
    uint32_t const ces[9] = { 0x0C86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

