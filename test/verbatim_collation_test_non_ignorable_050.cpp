// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_050_000)
{
    // 1D0E3 003F;	
    // (ùÉ£) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS DISIMOU	[10D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E3, 0x003F };
    uint32_t const ces[9] = { 0x10D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_001)
{
    // 1D0E3 0061;	
    // (ùÉ£) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS DISIMOU	[10D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E3, 0x0061 };
    uint32_t const ces[9] = { 0x10D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_002)
{
    // 1D0E3 0041;	
    // (ùÉ£) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS DISIMOU	[10D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0E3, 0x0041 };
    uint32_t const ces[9] = { 0x10D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_003)
{
    // 1D0E3 0062;	
    // (ùÉ£) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS DISIMOU	[10D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E3, 0x0062 };
    uint32_t const ces[9] = { 0x10D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_004)
{
    // 1D0E4 0021;	
    // (ùÉ§) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TRISIMOU	[10D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E4, 0x0021 };
    uint32_t const ces[9] = { 0x10D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_005)
{
    // 1D0E4 003F;	
    // (ùÉ§) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TRISIMOU	[10D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E4, 0x003F };
    uint32_t const ces[9] = { 0x10D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_006)
{
    // 1D0E4 0061;	
    // (ùÉ§) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TRISIMOU	[10D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E4, 0x0061 };
    uint32_t const ces[9] = { 0x10D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_007)
{
    // 1D0E4 0041;	
    // (ùÉ§) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TRISIMOU	[10D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0E4, 0x0041 };
    uint32_t const ces[9] = { 0x10D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_008)
{
    // 1D0E4 0062;	
    // (ùÉ§) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TRISIMOU	[10D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E4, 0x0062 };
    uint32_t const ces[9] = { 0x10D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_009)
{
    // 1D0E5 0021;	
    // (ùÉ•) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TETRASIMOU	[10D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E5, 0x0021 };
    uint32_t const ces[9] = { 0x10D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_010)
{
    // 1D0E5 003F;	
    // (ùÉ•) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TETRASIMOU	[10D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E5, 0x003F };
    uint32_t const ces[9] = { 0x10D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_011)
{
    // 1D0E5 0061;	
    // (ùÉ•) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TETRASIMOU	[10D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E5, 0x0061 };
    uint32_t const ces[9] = { 0x10D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_012)
{
    // 1D0E5 0041;	
    // (ùÉ•) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TETRASIMOU	[10D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0E5, 0x0041 };
    uint32_t const ces[9] = { 0x10D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_013)
{
    // 1D0E5 0062;	
    // (ùÉ•) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TETRASIMOU	[10D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E5, 0x0062 };
    uint32_t const ces[9] = { 0x10D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_014)
{
    // 1D0E6 0021;	
    // (ùÉ¶) BYZANTINE MUSICAL SYMBOL DIGRAMMA GG	[10D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E6, 0x0021 };
    uint32_t const ces[9] = { 0x10D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_015)
{
    // 1D0E6 003F;	
    // (ùÉ¶) BYZANTINE MUSICAL SYMBOL DIGRAMMA GG	[10D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E6, 0x003F };
    uint32_t const ces[9] = { 0x10D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_016)
{
    // 1D0E6 0061;	
    // (ùÉ¶) BYZANTINE MUSICAL SYMBOL DIGRAMMA GG	[10D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E6, 0x0061 };
    uint32_t const ces[9] = { 0x10D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_017)
{
    // 1D0E6 0041;	
    // (ùÉ¶) BYZANTINE MUSICAL SYMBOL DIGRAMMA GG	[10D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0E6, 0x0041 };
    uint32_t const ces[9] = { 0x10D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_018)
{
    // 1D0E6 0062;	
    // (ùÉ¶) BYZANTINE MUSICAL SYMBOL DIGRAMMA GG	[10D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E6, 0x0062 };
    uint32_t const ces[9] = { 0x10D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_019)
{
    // 1D0E7 0021;	
    // (ùÉß) BYZANTINE MUSICAL SYMBOL DIFTOGGOS OU	[10D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E7, 0x0021 };
    uint32_t const ces[9] = { 0x10D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_020)
{
    // 1D0E7 003F;	
    // (ùÉß) BYZANTINE MUSICAL SYMBOL DIFTOGGOS OU	[10D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E7, 0x003F };
    uint32_t const ces[9] = { 0x10D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_021)
{
    // 1D0E7 0061;	
    // (ùÉß) BYZANTINE MUSICAL SYMBOL DIFTOGGOS OU	[10D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E7, 0x0061 };
    uint32_t const ces[9] = { 0x10D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_022)
{
    // 1D0E7 0041;	
    // (ùÉß) BYZANTINE MUSICAL SYMBOL DIFTOGGOS OU	[10D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0E7, 0x0041 };
    uint32_t const ces[9] = { 0x10D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_023)
{
    // 1D0E7 0062;	
    // (ùÉß) BYZANTINE MUSICAL SYMBOL DIFTOGGOS OU	[10D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E7, 0x0062 };
    uint32_t const ces[9] = { 0x10D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_024)
{
    // 1D0E8 0021;	
    // (ùÉ®) BYZANTINE MUSICAL SYMBOL STIGMA	[10D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E8, 0x0021 };
    uint32_t const ces[9] = { 0x10D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_025)
{
    // 1D0E8 003F;	
    // (ùÉ®) BYZANTINE MUSICAL SYMBOL STIGMA	[10D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E8, 0x003F };
    uint32_t const ces[9] = { 0x10D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_026)
{
    // 1D0E8 0061;	
    // (ùÉ®) BYZANTINE MUSICAL SYMBOL STIGMA	[10D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E8, 0x0061 };
    uint32_t const ces[9] = { 0x10D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_027)
{
    // 1D0E8 0041;	
    // (ùÉ®) BYZANTINE MUSICAL SYMBOL STIGMA	[10D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0E8, 0x0041 };
    uint32_t const ces[9] = { 0x10D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_028)
{
    // 1D0E8 0062;	
    // (ùÉ®) BYZANTINE MUSICAL SYMBOL STIGMA	[10D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E8, 0x0062 };
    uint32_t const ces[9] = { 0x10D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_029)
{
    // 1D0E9 0021;	
    // (ùÉ©) BYZANTINE MUSICAL SYMBOL ARKTIKO PA	[10D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E9, 0x0021 };
    uint32_t const ces[9] = { 0x10D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_030)
{
    // 1D0E9 003F;	
    // (ùÉ©) BYZANTINE MUSICAL SYMBOL ARKTIKO PA	[10D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E9, 0x003F };
    uint32_t const ces[9] = { 0x10D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_031)
{
    // 1D0E9 0061;	
    // (ùÉ©) BYZANTINE MUSICAL SYMBOL ARKTIKO PA	[10D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E9, 0x0061 };
    uint32_t const ces[9] = { 0x10D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_032)
{
    // 1D0E9 0041;	
    // (ùÉ©) BYZANTINE MUSICAL SYMBOL ARKTIKO PA	[10D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0E9, 0x0041 };
    uint32_t const ces[9] = { 0x10D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_033)
{
    // 1D0E9 0062;	
    // (ùÉ©) BYZANTINE MUSICAL SYMBOL ARKTIKO PA	[10D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E9, 0x0062 };
    uint32_t const ces[9] = { 0x10D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_034)
{
    // 1D0EA 0021;	
    // (ùÉ™) BYZANTINE MUSICAL SYMBOL ARKTIKO VOU	[10D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EA, 0x0021 };
    uint32_t const ces[9] = { 0x10D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_035)
{
    // 1D0EA 003F;	
    // (ùÉ™) BYZANTINE MUSICAL SYMBOL ARKTIKO VOU	[10D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EA, 0x003F };
    uint32_t const ces[9] = { 0x10D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_036)
{
    // 1D0EA 0061;	
    // (ùÉ™) BYZANTINE MUSICAL SYMBOL ARKTIKO VOU	[10D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EA, 0x0061 };
    uint32_t const ces[9] = { 0x10D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_037)
{
    // 1D0EA 0041;	
    // (ùÉ™) BYZANTINE MUSICAL SYMBOL ARKTIKO VOU	[10D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0EA, 0x0041 };
    uint32_t const ces[9] = { 0x10D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_038)
{
    // 1D0EA 0062;	
    // (ùÉ™) BYZANTINE MUSICAL SYMBOL ARKTIKO VOU	[10D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EA, 0x0062 };
    uint32_t const ces[9] = { 0x10D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_039)
{
    // 1D0EB 0021;	
    // (ùÉ´) BYZANTINE MUSICAL SYMBOL ARKTIKO GA	[10D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EB, 0x0021 };
    uint32_t const ces[9] = { 0x10D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_040)
{
    // 1D0EB 003F;	
    // (ùÉ´) BYZANTINE MUSICAL SYMBOL ARKTIKO GA	[10D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EB, 0x003F };
    uint32_t const ces[9] = { 0x10D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_041)
{
    // 1D0EB 0061;	
    // (ùÉ´) BYZANTINE MUSICAL SYMBOL ARKTIKO GA	[10D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EB, 0x0061 };
    uint32_t const ces[9] = { 0x10D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_042)
{
    // 1D0EB 0041;	
    // (ùÉ´) BYZANTINE MUSICAL SYMBOL ARKTIKO GA	[10D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0EB, 0x0041 };
    uint32_t const ces[9] = { 0x10D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_043)
{
    // 1D0EB 0062;	
    // (ùÉ´) BYZANTINE MUSICAL SYMBOL ARKTIKO GA	[10D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EB, 0x0062 };
    uint32_t const ces[9] = { 0x10D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_044)
{
    // 1D0EC 0021;	
    // (ùÉ¨) BYZANTINE MUSICAL SYMBOL ARKTIKO DI	[10DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EC, 0x0021 };
    uint32_t const ces[9] = { 0x10DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_045)
{
    // 1D0EC 003F;	
    // (ùÉ¨) BYZANTINE MUSICAL SYMBOL ARKTIKO DI	[10DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EC, 0x003F };
    uint32_t const ces[9] = { 0x10DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_046)
{
    // 1D0EC 0061;	
    // (ùÉ¨) BYZANTINE MUSICAL SYMBOL ARKTIKO DI	[10DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EC, 0x0061 };
    uint32_t const ces[9] = { 0x10DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_047)
{
    // 1D0EC 0041;	
    // (ùÉ¨) BYZANTINE MUSICAL SYMBOL ARKTIKO DI	[10DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0EC, 0x0041 };
    uint32_t const ces[9] = { 0x10DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_048)
{
    // 1D0EC 0062;	
    // (ùÉ¨) BYZANTINE MUSICAL SYMBOL ARKTIKO DI	[10DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EC, 0x0062 };
    uint32_t const ces[9] = { 0x10DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_049)
{
    // 1D0ED 0021;	
    // (ùÉ≠) BYZANTINE MUSICAL SYMBOL ARKTIKO KE	[10DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0ED, 0x0021 };
    uint32_t const ces[9] = { 0x10DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_050)
{
    // 1D0ED 003F;	
    // (ùÉ≠) BYZANTINE MUSICAL SYMBOL ARKTIKO KE	[10DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0ED, 0x003F };
    uint32_t const ces[9] = { 0x10DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_051)
{
    // 1D0ED 0061;	
    // (ùÉ≠) BYZANTINE MUSICAL SYMBOL ARKTIKO KE	[10DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0ED, 0x0061 };
    uint32_t const ces[9] = { 0x10DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_052)
{
    // 1D0ED 0041;	
    // (ùÉ≠) BYZANTINE MUSICAL SYMBOL ARKTIKO KE	[10DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0ED, 0x0041 };
    uint32_t const ces[9] = { 0x10DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_053)
{
    // 1D0ED 0062;	
    // (ùÉ≠) BYZANTINE MUSICAL SYMBOL ARKTIKO KE	[10DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0ED, 0x0062 };
    uint32_t const ces[9] = { 0x10DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_054)
{
    // 1D0EE 0021;	
    // (ùÉÆ) BYZANTINE MUSICAL SYMBOL ARKTIKO ZO	[10DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EE, 0x0021 };
    uint32_t const ces[9] = { 0x10DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_055)
{
    // 1D0EE 003F;	
    // (ùÉÆ) BYZANTINE MUSICAL SYMBOL ARKTIKO ZO	[10DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EE, 0x003F };
    uint32_t const ces[9] = { 0x10DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_056)
{
    // 1D0EE 0061;	
    // (ùÉÆ) BYZANTINE MUSICAL SYMBOL ARKTIKO ZO	[10DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EE, 0x0061 };
    uint32_t const ces[9] = { 0x10DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_057)
{
    // 1D0EE 0041;	
    // (ùÉÆ) BYZANTINE MUSICAL SYMBOL ARKTIKO ZO	[10DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0EE, 0x0041 };
    uint32_t const ces[9] = { 0x10DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_058)
{
    // 1D0EE 0062;	
    // (ùÉÆ) BYZANTINE MUSICAL SYMBOL ARKTIKO ZO	[10DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EE, 0x0062 };
    uint32_t const ces[9] = { 0x10DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_059)
{
    // 1D0EF 0021;	
    // (ùÉØ) BYZANTINE MUSICAL SYMBOL ARKTIKO NI	[10DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EF, 0x0021 };
    uint32_t const ces[9] = { 0x10DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_060)
{
    // 1D0EF 003F;	
    // (ùÉØ) BYZANTINE MUSICAL SYMBOL ARKTIKO NI	[10DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EF, 0x003F };
    uint32_t const ces[9] = { 0x10DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_061)
{
    // 1D0EF 0061;	
    // (ùÉØ) BYZANTINE MUSICAL SYMBOL ARKTIKO NI	[10DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EF, 0x0061 };
    uint32_t const ces[9] = { 0x10DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_062)
{
    // 1D0EF 0041;	
    // (ùÉØ) BYZANTINE MUSICAL SYMBOL ARKTIKO NI	[10DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0EF, 0x0041 };
    uint32_t const ces[9] = { 0x10DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_063)
{
    // 1D0EF 0062;	
    // (ùÉØ) BYZANTINE MUSICAL SYMBOL ARKTIKO NI	[10DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0EF, 0x0062 };
    uint32_t const ces[9] = { 0x10DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_064)
{
    // 1D0F0 0021;	
    // (ùÉ∞) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO MESO	[10DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F0, 0x0021 };
    uint32_t const ces[9] = { 0x10DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_065)
{
    // 1D0F0 003F;	
    // (ùÉ∞) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO MESO	[10DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F0, 0x003F };
    uint32_t const ces[9] = { 0x10DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_066)
{
    // 1D0F0 0061;	
    // (ùÉ∞) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO MESO	[10DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F0, 0x0061 };
    uint32_t const ces[9] = { 0x10DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_067)
{
    // 1D0F0 0041;	
    // (ùÉ∞) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO MESO	[10DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0F0, 0x0041 };
    uint32_t const ces[9] = { 0x10DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_068)
{
    // 1D0F0 0062;	
    // (ùÉ∞) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO MESO	[10DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F0, 0x0062 };
    uint32_t const ces[9] = { 0x10DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_069)
{
    // 1D0F1 0021;	
    // (ùÉ±) BYZANTINE MUSICAL SYMBOL KENTIMA NEO MESO	[10DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F1, 0x0021 };
    uint32_t const ces[9] = { 0x10DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_070)
{
    // 1D0F1 003F;	
    // (ùÉ±) BYZANTINE MUSICAL SYMBOL KENTIMA NEO MESO	[10DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F1, 0x003F };
    uint32_t const ces[9] = { 0x10DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_071)
{
    // 1D0F1 0061;	
    // (ùÉ±) BYZANTINE MUSICAL SYMBOL KENTIMA NEO MESO	[10DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F1, 0x0061 };
    uint32_t const ces[9] = { 0x10DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_072)
{
    // 1D0F1 0041;	
    // (ùÉ±) BYZANTINE MUSICAL SYMBOL KENTIMA NEO MESO	[10DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0F1, 0x0041 };
    uint32_t const ces[9] = { 0x10DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_073)
{
    // 1D0F1 0062;	
    // (ùÉ±) BYZANTINE MUSICAL SYMBOL KENTIMA NEO MESO	[10DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F1, 0x0062 };
    uint32_t const ces[9] = { 0x10DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_074)
{
    // 1D0F2 0021;	
    // (ùÉ≤) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO KATO	[10E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F2, 0x0021 };
    uint32_t const ces[9] = { 0x10E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_075)
{
    // 1D0F2 003F;	
    // (ùÉ≤) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO KATO	[10E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F2, 0x003F };
    uint32_t const ces[9] = { 0x10E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_076)
{
    // 1D0F2 0061;	
    // (ùÉ≤) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO KATO	[10E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F2, 0x0061 };
    uint32_t const ces[9] = { 0x10E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_077)
{
    // 1D0F2 0041;	
    // (ùÉ≤) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO KATO	[10E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0F2, 0x0041 };
    uint32_t const ces[9] = { 0x10E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_078)
{
    // 1D0F2 0062;	
    // (ùÉ≤) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO KATO	[10E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F2, 0x0062 };
    uint32_t const ces[9] = { 0x10E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_079)
{
    // 1D0F3 0021;	
    // (ùÉ≥) BYZANTINE MUSICAL SYMBOL KENTIMA NEO KATO	[10E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F3, 0x0021 };
    uint32_t const ces[9] = { 0x10E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_080)
{
    // 1D0F3 003F;	
    // (ùÉ≥) BYZANTINE MUSICAL SYMBOL KENTIMA NEO KATO	[10E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F3, 0x003F };
    uint32_t const ces[9] = { 0x10E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_081)
{
    // 1D0F3 0061;	
    // (ùÉ≥) BYZANTINE MUSICAL SYMBOL KENTIMA NEO KATO	[10E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F3, 0x0061 };
    uint32_t const ces[9] = { 0x10E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_082)
{
    // 1D0F3 0041;	
    // (ùÉ≥) BYZANTINE MUSICAL SYMBOL KENTIMA NEO KATO	[10E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0F3, 0x0041 };
    uint32_t const ces[9] = { 0x10E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_083)
{
    // 1D0F3 0062;	
    // (ùÉ≥) BYZANTINE MUSICAL SYMBOL KENTIMA NEO KATO	[10E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F3, 0x0062 };
    uint32_t const ces[9] = { 0x10E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_084)
{
    // 1D0F4 0021;	
    // (ùÉ¥) BYZANTINE MUSICAL SYMBOL KLASMA KATO	[10E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F4, 0x0021 };
    uint32_t const ces[9] = { 0x10E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_085)
{
    // 1D0F4 003F;	
    // (ùÉ¥) BYZANTINE MUSICAL SYMBOL KLASMA KATO	[10E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F4, 0x003F };
    uint32_t const ces[9] = { 0x10E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_086)
{
    // 1D0F4 0061;	
    // (ùÉ¥) BYZANTINE MUSICAL SYMBOL KLASMA KATO	[10E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F4, 0x0061 };
    uint32_t const ces[9] = { 0x10E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_087)
{
    // 1D0F4 0041;	
    // (ùÉ¥) BYZANTINE MUSICAL SYMBOL KLASMA KATO	[10E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0F4, 0x0041 };
    uint32_t const ces[9] = { 0x10E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_088)
{
    // 1D0F4 0062;	
    // (ùÉ¥) BYZANTINE MUSICAL SYMBOL KLASMA KATO	[10E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F4, 0x0062 };
    uint32_t const ces[9] = { 0x10E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_089)
{
    // 1D0F5 0021;	
    // (ùÉµ) BYZANTINE MUSICAL SYMBOL GORGON NEO KATO	[10E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F5, 0x0021 };
    uint32_t const ces[9] = { 0x10E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_090)
{
    // 1D0F5 003F;	
    // (ùÉµ) BYZANTINE MUSICAL SYMBOL GORGON NEO KATO	[10E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F5, 0x003F };
    uint32_t const ces[9] = { 0x10E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_091)
{
    // 1D0F5 0061;	
    // (ùÉµ) BYZANTINE MUSICAL SYMBOL GORGON NEO KATO	[10E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F5, 0x0061 };
    uint32_t const ces[9] = { 0x10E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_092)
{
    // 1D0F5 0041;	
    // (ùÉµ) BYZANTINE MUSICAL SYMBOL GORGON NEO KATO	[10E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0F5, 0x0041 };
    uint32_t const ces[9] = { 0x10E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_093)
{
    // 1D0F5 0062;	
    // (ùÉµ) BYZANTINE MUSICAL SYMBOL GORGON NEO KATO	[10E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0F5, 0x0062 };
    uint32_t const ces[9] = { 0x10E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_094)
{
    // 1D100 0021;	
    // (ùÑÄ) MUSICAL SYMBOL SINGLE BARLINE	[10E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D100, 0x0021 };
    uint32_t const ces[9] = { 0x10E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_095)
{
    // 1D100 003F;	
    // (ùÑÄ) MUSICAL SYMBOL SINGLE BARLINE	[10E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D100, 0x003F };
    uint32_t const ces[9] = { 0x10E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_096)
{
    // 1D100 0061;	
    // (ùÑÄ) MUSICAL SYMBOL SINGLE BARLINE	[10E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D100, 0x0061 };
    uint32_t const ces[9] = { 0x10E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_097)
{
    // 1D100 0041;	
    // (ùÑÄ) MUSICAL SYMBOL SINGLE BARLINE	[10E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D100, 0x0041 };
    uint32_t const ces[9] = { 0x10E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_098)
{
    // 1D100 0062;	
    // (ùÑÄ) MUSICAL SYMBOL SINGLE BARLINE	[10E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D100, 0x0062 };
    uint32_t const ces[9] = { 0x10E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_099)
{
    // 1D101 0021;	
    // (ùÑÅ) MUSICAL SYMBOL DOUBLE BARLINE	[10E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D101, 0x0021 };
    uint32_t const ces[9] = { 0x10E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_100)
{
    // 1D101 003F;	
    // (ùÑÅ) MUSICAL SYMBOL DOUBLE BARLINE	[10E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D101, 0x003F };
    uint32_t const ces[9] = { 0x10E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_101)
{
    // 1D101 0061;	
    // (ùÑÅ) MUSICAL SYMBOL DOUBLE BARLINE	[10E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D101, 0x0061 };
    uint32_t const ces[9] = { 0x10E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_102)
{
    // 1D101 0041;	
    // (ùÑÅ) MUSICAL SYMBOL DOUBLE BARLINE	[10E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D101, 0x0041 };
    uint32_t const ces[9] = { 0x10E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_103)
{
    // 1D101 0062;	
    // (ùÑÅ) MUSICAL SYMBOL DOUBLE BARLINE	[10E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D101, 0x0062 };
    uint32_t const ces[9] = { 0x10E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_104)
{
    // 1D102 0021;	
    // (ùÑÇ) MUSICAL SYMBOL FINAL BARLINE	[10E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D102, 0x0021 };
    uint32_t const ces[9] = { 0x10E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_105)
{
    // 1D102 003F;	
    // (ùÑÇ) MUSICAL SYMBOL FINAL BARLINE	[10E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D102, 0x003F };
    uint32_t const ces[9] = { 0x10E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_106)
{
    // 1D102 0061;	
    // (ùÑÇ) MUSICAL SYMBOL FINAL BARLINE	[10E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D102, 0x0061 };
    uint32_t const ces[9] = { 0x10E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_107)
{
    // 1D102 0041;	
    // (ùÑÇ) MUSICAL SYMBOL FINAL BARLINE	[10E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D102, 0x0041 };
    uint32_t const ces[9] = { 0x10E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_108)
{
    // 1D102 0062;	
    // (ùÑÇ) MUSICAL SYMBOL FINAL BARLINE	[10E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D102, 0x0062 };
    uint32_t const ces[9] = { 0x10E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_109)
{
    // 1D103 0021;	
    // (ùÑÉ) MUSICAL SYMBOL REVERSE FINAL BARLINE	[10E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D103, 0x0021 };
    uint32_t const ces[9] = { 0x10E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_110)
{
    // 1D103 003F;	
    // (ùÑÉ) MUSICAL SYMBOL REVERSE FINAL BARLINE	[10E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D103, 0x003F };
    uint32_t const ces[9] = { 0x10E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_111)
{
    // 1D103 0061;	
    // (ùÑÉ) MUSICAL SYMBOL REVERSE FINAL BARLINE	[10E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D103, 0x0061 };
    uint32_t const ces[9] = { 0x10E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_112)
{
    // 1D103 0041;	
    // (ùÑÉ) MUSICAL SYMBOL REVERSE FINAL BARLINE	[10E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D103, 0x0041 };
    uint32_t const ces[9] = { 0x10E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_113)
{
    // 1D103 0062;	
    // (ùÑÉ) MUSICAL SYMBOL REVERSE FINAL BARLINE	[10E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D103, 0x0062 };
    uint32_t const ces[9] = { 0x10E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_114)
{
    // 1D104 0021;	
    // (ùÑÑ) MUSICAL SYMBOL DASHED BARLINE	[10E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D104, 0x0021 };
    uint32_t const ces[9] = { 0x10E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_115)
{
    // 1D104 003F;	
    // (ùÑÑ) MUSICAL SYMBOL DASHED BARLINE	[10E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D104, 0x003F };
    uint32_t const ces[9] = { 0x10E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_116)
{
    // 1D104 0061;	
    // (ùÑÑ) MUSICAL SYMBOL DASHED BARLINE	[10E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D104, 0x0061 };
    uint32_t const ces[9] = { 0x10E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_117)
{
    // 1D104 0041;	
    // (ùÑÑ) MUSICAL SYMBOL DASHED BARLINE	[10E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D104, 0x0041 };
    uint32_t const ces[9] = { 0x10E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_118)
{
    // 1D104 0062;	
    // (ùÑÑ) MUSICAL SYMBOL DASHED BARLINE	[10E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D104, 0x0062 };
    uint32_t const ces[9] = { 0x10E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_119)
{
    // 1D105 0021;	
    // (ùÑÖ) MUSICAL SYMBOL SHORT BARLINE	[10E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D105, 0x0021 };
    uint32_t const ces[9] = { 0x10E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_120)
{
    // 1D105 003F;	
    // (ùÑÖ) MUSICAL SYMBOL SHORT BARLINE	[10E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D105, 0x003F };
    uint32_t const ces[9] = { 0x10E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_121)
{
    // 1D105 0061;	
    // (ùÑÖ) MUSICAL SYMBOL SHORT BARLINE	[10E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D105, 0x0061 };
    uint32_t const ces[9] = { 0x10E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_122)
{
    // 1D105 0041;	
    // (ùÑÖ) MUSICAL SYMBOL SHORT BARLINE	[10E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D105, 0x0041 };
    uint32_t const ces[9] = { 0x10E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_123)
{
    // 1D105 0062;	
    // (ùÑÖ) MUSICAL SYMBOL SHORT BARLINE	[10E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D105, 0x0062 };
    uint32_t const ces[9] = { 0x10E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_124)
{
    // 1D106 0021;	
    // (ùÑÜ) MUSICAL SYMBOL LEFT REPEAT SIGN	[10EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D106, 0x0021 };
    uint32_t const ces[9] = { 0x10EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_125)
{
    // 1D106 003F;	
    // (ùÑÜ) MUSICAL SYMBOL LEFT REPEAT SIGN	[10EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D106, 0x003F };
    uint32_t const ces[9] = { 0x10EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_126)
{
    // 1D106 0061;	
    // (ùÑÜ) MUSICAL SYMBOL LEFT REPEAT SIGN	[10EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D106, 0x0061 };
    uint32_t const ces[9] = { 0x10EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_127)
{
    // 1D106 0041;	
    // (ùÑÜ) MUSICAL SYMBOL LEFT REPEAT SIGN	[10EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D106, 0x0041 };
    uint32_t const ces[9] = { 0x10EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_128)
{
    // 1D106 0062;	
    // (ùÑÜ) MUSICAL SYMBOL LEFT REPEAT SIGN	[10EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D106, 0x0062 };
    uint32_t const ces[9] = { 0x10EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_129)
{
    // 1D107 0021;	
    // (ùÑá) MUSICAL SYMBOL RIGHT REPEAT SIGN	[10EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D107, 0x0021 };
    uint32_t const ces[9] = { 0x10EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_130)
{
    // 1D107 003F;	
    // (ùÑá) MUSICAL SYMBOL RIGHT REPEAT SIGN	[10EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D107, 0x003F };
    uint32_t const ces[9] = { 0x10EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_131)
{
    // 1D107 0061;	
    // (ùÑá) MUSICAL SYMBOL RIGHT REPEAT SIGN	[10EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D107, 0x0061 };
    uint32_t const ces[9] = { 0x10EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_132)
{
    // 1D107 0041;	
    // (ùÑá) MUSICAL SYMBOL RIGHT REPEAT SIGN	[10EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D107, 0x0041 };
    uint32_t const ces[9] = { 0x10EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_133)
{
    // 1D107 0062;	
    // (ùÑá) MUSICAL SYMBOL RIGHT REPEAT SIGN	[10EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D107, 0x0062 };
    uint32_t const ces[9] = { 0x10EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_134)
{
    // 1D108 0021;	
    // (ùÑà) MUSICAL SYMBOL REPEAT DOTS	[10EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D108, 0x0021 };
    uint32_t const ces[9] = { 0x10EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_135)
{
    // 1D108 003F;	
    // (ùÑà) MUSICAL SYMBOL REPEAT DOTS	[10EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D108, 0x003F };
    uint32_t const ces[9] = { 0x10EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_136)
{
    // 1D108 0061;	
    // (ùÑà) MUSICAL SYMBOL REPEAT DOTS	[10EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D108, 0x0061 };
    uint32_t const ces[9] = { 0x10EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_137)
{
    // 1D108 0041;	
    // (ùÑà) MUSICAL SYMBOL REPEAT DOTS	[10EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D108, 0x0041 };
    uint32_t const ces[9] = { 0x10EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_138)
{
    // 1D108 0062;	
    // (ùÑà) MUSICAL SYMBOL REPEAT DOTS	[10EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D108, 0x0062 };
    uint32_t const ces[9] = { 0x10EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_139)
{
    // 1D109 0021;	
    // (ùÑâ) MUSICAL SYMBOL DAL SEGNO	[10ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D109, 0x0021 };
    uint32_t const ces[9] = { 0x10ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_140)
{
    // 1D109 003F;	
    // (ùÑâ) MUSICAL SYMBOL DAL SEGNO	[10ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D109, 0x003F };
    uint32_t const ces[9] = { 0x10ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_141)
{
    // 1D109 0061;	
    // (ùÑâ) MUSICAL SYMBOL DAL SEGNO	[10ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D109, 0x0061 };
    uint32_t const ces[9] = { 0x10ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_142)
{
    // 1D109 0041;	
    // (ùÑâ) MUSICAL SYMBOL DAL SEGNO	[10ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D109, 0x0041 };
    uint32_t const ces[9] = { 0x10ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_143)
{
    // 1D109 0062;	
    // (ùÑâ) MUSICAL SYMBOL DAL SEGNO	[10ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D109, 0x0062 };
    uint32_t const ces[9] = { 0x10ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_144)
{
    // 1D10A 0021;	
    // (ùÑä) MUSICAL SYMBOL DA CAPO	[10EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10A, 0x0021 };
    uint32_t const ces[9] = { 0x10EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_145)
{
    // 1D10A 003F;	
    // (ùÑä) MUSICAL SYMBOL DA CAPO	[10EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10A, 0x003F };
    uint32_t const ces[9] = { 0x10EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_146)
{
    // 1D10A 0061;	
    // (ùÑä) MUSICAL SYMBOL DA CAPO	[10EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10A, 0x0061 };
    uint32_t const ces[9] = { 0x10EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_147)
{
    // 1D10A 0041;	
    // (ùÑä) MUSICAL SYMBOL DA CAPO	[10EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D10A, 0x0041 };
    uint32_t const ces[9] = { 0x10EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_148)
{
    // 1D10A 0062;	
    // (ùÑä) MUSICAL SYMBOL DA CAPO	[10EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10A, 0x0062 };
    uint32_t const ces[9] = { 0x10EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_149)
{
    // 1D10B 0021;	
    // (ùÑã) MUSICAL SYMBOL SEGNO	[10EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10B, 0x0021 };
    uint32_t const ces[9] = { 0x10EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_150)
{
    // 1D10B 003F;	
    // (ùÑã) MUSICAL SYMBOL SEGNO	[10EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10B, 0x003F };
    uint32_t const ces[9] = { 0x10EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_151)
{
    // 1D10B 0061;	
    // (ùÑã) MUSICAL SYMBOL SEGNO	[10EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10B, 0x0061 };
    uint32_t const ces[9] = { 0x10EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_152)
{
    // 1D10B 0041;	
    // (ùÑã) MUSICAL SYMBOL SEGNO	[10EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D10B, 0x0041 };
    uint32_t const ces[9] = { 0x10EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_153)
{
    // 1D10B 0062;	
    // (ùÑã) MUSICAL SYMBOL SEGNO	[10EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10B, 0x0062 };
    uint32_t const ces[9] = { 0x10EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_154)
{
    // 1D10C 0021;	
    // (ùÑå) MUSICAL SYMBOL CODA	[10F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10C, 0x0021 };
    uint32_t const ces[9] = { 0x10F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_155)
{
    // 1D10C 003F;	
    // (ùÑå) MUSICAL SYMBOL CODA	[10F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10C, 0x003F };
    uint32_t const ces[9] = { 0x10F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_156)
{
    // 1D10C 0061;	
    // (ùÑå) MUSICAL SYMBOL CODA	[10F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10C, 0x0061 };
    uint32_t const ces[9] = { 0x10F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_157)
{
    // 1D10C 0041;	
    // (ùÑå) MUSICAL SYMBOL CODA	[10F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D10C, 0x0041 };
    uint32_t const ces[9] = { 0x10F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_158)
{
    // 1D10C 0062;	
    // (ùÑå) MUSICAL SYMBOL CODA	[10F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10C, 0x0062 };
    uint32_t const ces[9] = { 0x10F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_159)
{
    // 1D10D 0021;	
    // (ùÑç) MUSICAL SYMBOL REPEATED FIGURE-1	[10F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10D, 0x0021 };
    uint32_t const ces[9] = { 0x10F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_160)
{
    // 1D10D 003F;	
    // (ùÑç) MUSICAL SYMBOL REPEATED FIGURE-1	[10F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10D, 0x003F };
    uint32_t const ces[9] = { 0x10F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_161)
{
    // 1D10D 0061;	
    // (ùÑç) MUSICAL SYMBOL REPEATED FIGURE-1	[10F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10D, 0x0061 };
    uint32_t const ces[9] = { 0x10F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_162)
{
    // 1D10D 0041;	
    // (ùÑç) MUSICAL SYMBOL REPEATED FIGURE-1	[10F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D10D, 0x0041 };
    uint32_t const ces[9] = { 0x10F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_163)
{
    // 1D10D 0062;	
    // (ùÑç) MUSICAL SYMBOL REPEATED FIGURE-1	[10F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10D, 0x0062 };
    uint32_t const ces[9] = { 0x10F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_164)
{
    // 1D10E 0021;	
    // (ùÑé) MUSICAL SYMBOL REPEATED FIGURE-2	[10F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10E, 0x0021 };
    uint32_t const ces[9] = { 0x10F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_165)
{
    // 1D10E 003F;	
    // (ùÑé) MUSICAL SYMBOL REPEATED FIGURE-2	[10F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10E, 0x003F };
    uint32_t const ces[9] = { 0x10F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_166)
{
    // 1D10E 0061;	
    // (ùÑé) MUSICAL SYMBOL REPEATED FIGURE-2	[10F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10E, 0x0061 };
    uint32_t const ces[9] = { 0x10F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_167)
{
    // 1D10E 0041;	
    // (ùÑé) MUSICAL SYMBOL REPEATED FIGURE-2	[10F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D10E, 0x0041 };
    uint32_t const ces[9] = { 0x10F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_168)
{
    // 1D10E 0062;	
    // (ùÑé) MUSICAL SYMBOL REPEATED FIGURE-2	[10F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10E, 0x0062 };
    uint32_t const ces[9] = { 0x10F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_169)
{
    // 1D10F 0021;	
    // (ùÑè) MUSICAL SYMBOL REPEATED FIGURE-3	[10F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10F, 0x0021 };
    uint32_t const ces[9] = { 0x10F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_170)
{
    // 1D10F 003F;	
    // (ùÑè) MUSICAL SYMBOL REPEATED FIGURE-3	[10F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10F, 0x003F };
    uint32_t const ces[9] = { 0x10F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_171)
{
    // 1D10F 0061;	
    // (ùÑè) MUSICAL SYMBOL REPEATED FIGURE-3	[10F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10F, 0x0061 };
    uint32_t const ces[9] = { 0x10F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_172)
{
    // 1D10F 0041;	
    // (ùÑè) MUSICAL SYMBOL REPEATED FIGURE-3	[10F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D10F, 0x0041 };
    uint32_t const ces[9] = { 0x10F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_173)
{
    // 1D10F 0062;	
    // (ùÑè) MUSICAL SYMBOL REPEATED FIGURE-3	[10F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D10F, 0x0062 };
    uint32_t const ces[9] = { 0x10F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_174)
{
    // 1D110 0021;	
    // (ùÑê) MUSICAL SYMBOL FERMATA	[10F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D110, 0x0021 };
    uint32_t const ces[9] = { 0x10F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_175)
{
    // 1D110 003F;	
    // (ùÑê) MUSICAL SYMBOL FERMATA	[10F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D110, 0x003F };
    uint32_t const ces[9] = { 0x10F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_176)
{
    // 1D110 0061;	
    // (ùÑê) MUSICAL SYMBOL FERMATA	[10F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D110, 0x0061 };
    uint32_t const ces[9] = { 0x10F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_177)
{
    // 1D110 0041;	
    // (ùÑê) MUSICAL SYMBOL FERMATA	[10F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D110, 0x0041 };
    uint32_t const ces[9] = { 0x10F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_178)
{
    // 1D110 0062;	
    // (ùÑê) MUSICAL SYMBOL FERMATA	[10F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D110, 0x0062 };
    uint32_t const ces[9] = { 0x10F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_179)
{
    // 1D111 0021;	
    // (ùÑë) MUSICAL SYMBOL FERMATA BELOW	[10F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D111, 0x0021 };
    uint32_t const ces[9] = { 0x10F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_180)
{
    // 1D111 003F;	
    // (ùÑë) MUSICAL SYMBOL FERMATA BELOW	[10F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D111, 0x003F };
    uint32_t const ces[9] = { 0x10F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_181)
{
    // 1D111 0061;	
    // (ùÑë) MUSICAL SYMBOL FERMATA BELOW	[10F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D111, 0x0061 };
    uint32_t const ces[9] = { 0x10F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_182)
{
    // 1D111 0041;	
    // (ùÑë) MUSICAL SYMBOL FERMATA BELOW	[10F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D111, 0x0041 };
    uint32_t const ces[9] = { 0x10F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_183)
{
    // 1D111 0062;	
    // (ùÑë) MUSICAL SYMBOL FERMATA BELOW	[10F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D111, 0x0062 };
    uint32_t const ces[9] = { 0x10F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_184)
{
    // 1D112 0021;	
    // (ùÑí) MUSICAL SYMBOL BREATH MARK	[10F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D112, 0x0021 };
    uint32_t const ces[9] = { 0x10F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_185)
{
    // 1D112 003F;	
    // (ùÑí) MUSICAL SYMBOL BREATH MARK	[10F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D112, 0x003F };
    uint32_t const ces[9] = { 0x10F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_186)
{
    // 1D112 0061;	
    // (ùÑí) MUSICAL SYMBOL BREATH MARK	[10F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D112, 0x0061 };
    uint32_t const ces[9] = { 0x10F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_187)
{
    // 1D112 0041;	
    // (ùÑí) MUSICAL SYMBOL BREATH MARK	[10F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D112, 0x0041 };
    uint32_t const ces[9] = { 0x10F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_188)
{
    // 1D112 0062;	
    // (ùÑí) MUSICAL SYMBOL BREATH MARK	[10F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D112, 0x0062 };
    uint32_t const ces[9] = { 0x10F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_189)
{
    // 1D113 0021;	
    // (ùÑì) MUSICAL SYMBOL CAESURA	[10F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D113, 0x0021 };
    uint32_t const ces[9] = { 0x10F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_190)
{
    // 1D113 003F;	
    // (ùÑì) MUSICAL SYMBOL CAESURA	[10F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D113, 0x003F };
    uint32_t const ces[9] = { 0x10F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_191)
{
    // 1D113 0061;	
    // (ùÑì) MUSICAL SYMBOL CAESURA	[10F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D113, 0x0061 };
    uint32_t const ces[9] = { 0x10F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_192)
{
    // 1D113 0041;	
    // (ùÑì) MUSICAL SYMBOL CAESURA	[10F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D113, 0x0041 };
    uint32_t const ces[9] = { 0x10F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_193)
{
    // 1D113 0062;	
    // (ùÑì) MUSICAL SYMBOL CAESURA	[10F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D113, 0x0062 };
    uint32_t const ces[9] = { 0x10F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_194)
{
    // 1D114 0021;	
    // (ùÑî) MUSICAL SYMBOL BRACE	[10F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D114, 0x0021 };
    uint32_t const ces[9] = { 0x10F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_195)
{
    // 1D114 003F;	
    // (ùÑî) MUSICAL SYMBOL BRACE	[10F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D114, 0x003F };
    uint32_t const ces[9] = { 0x10F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_196)
{
    // 1D114 0061;	
    // (ùÑî) MUSICAL SYMBOL BRACE	[10F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D114, 0x0061 };
    uint32_t const ces[9] = { 0x10F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_197)
{
    // 1D114 0041;	
    // (ùÑî) MUSICAL SYMBOL BRACE	[10F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D114, 0x0041 };
    uint32_t const ces[9] = { 0x10F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_198)
{
    // 1D114 0062;	
    // (ùÑî) MUSICAL SYMBOL BRACE	[10F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D114, 0x0062 };
    uint32_t const ces[9] = { 0x10F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_199)
{
    // 1D115 0021;	
    // (ùÑï) MUSICAL SYMBOL BRACKET	[10F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D115, 0x0021 };
    uint32_t const ces[9] = { 0x10F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_200)
{
    // 1D115 003F;	
    // (ùÑï) MUSICAL SYMBOL BRACKET	[10F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D115, 0x003F };
    uint32_t const ces[9] = { 0x10F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_201)
{
    // 1D115 0061;	
    // (ùÑï) MUSICAL SYMBOL BRACKET	[10F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D115, 0x0061 };
    uint32_t const ces[9] = { 0x10F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_202)
{
    // 1D115 0041;	
    // (ùÑï) MUSICAL SYMBOL BRACKET	[10F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D115, 0x0041 };
    uint32_t const ces[9] = { 0x10F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_203)
{
    // 1D115 0062;	
    // (ùÑï) MUSICAL SYMBOL BRACKET	[10F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D115, 0x0062 };
    uint32_t const ces[9] = { 0x10F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_204)
{
    // 1D116 0021;	
    // (ùÑñ) MUSICAL SYMBOL ONE-LINE STAFF	[10FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D116, 0x0021 };
    uint32_t const ces[9] = { 0x10FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_205)
{
    // 1D116 003F;	
    // (ùÑñ) MUSICAL SYMBOL ONE-LINE STAFF	[10FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D116, 0x003F };
    uint32_t const ces[9] = { 0x10FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_206)
{
    // 1D116 0061;	
    // (ùÑñ) MUSICAL SYMBOL ONE-LINE STAFF	[10FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D116, 0x0061 };
    uint32_t const ces[9] = { 0x10FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_207)
{
    // 1D116 0041;	
    // (ùÑñ) MUSICAL SYMBOL ONE-LINE STAFF	[10FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D116, 0x0041 };
    uint32_t const ces[9] = { 0x10FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_208)
{
    // 1D116 0062;	
    // (ùÑñ) MUSICAL SYMBOL ONE-LINE STAFF	[10FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D116, 0x0062 };
    uint32_t const ces[9] = { 0x10FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_209)
{
    // 1D117 0021;	
    // (ùÑó) MUSICAL SYMBOL TWO-LINE STAFF	[10FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D117, 0x0021 };
    uint32_t const ces[9] = { 0x10FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_210)
{
    // 1D117 003F;	
    // (ùÑó) MUSICAL SYMBOL TWO-LINE STAFF	[10FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D117, 0x003F };
    uint32_t const ces[9] = { 0x10FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_211)
{
    // 1D117 0061;	
    // (ùÑó) MUSICAL SYMBOL TWO-LINE STAFF	[10FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D117, 0x0061 };
    uint32_t const ces[9] = { 0x10FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_212)
{
    // 1D117 0041;	
    // (ùÑó) MUSICAL SYMBOL TWO-LINE STAFF	[10FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D117, 0x0041 };
    uint32_t const ces[9] = { 0x10FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_213)
{
    // 1D117 0062;	
    // (ùÑó) MUSICAL SYMBOL TWO-LINE STAFF	[10FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D117, 0x0062 };
    uint32_t const ces[9] = { 0x10FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_214)
{
    // 1D118 0021;	
    // (ùÑò) MUSICAL SYMBOL THREE-LINE STAFF	[10FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D118, 0x0021 };
    uint32_t const ces[9] = { 0x10FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_215)
{
    // 1D118 003F;	
    // (ùÑò) MUSICAL SYMBOL THREE-LINE STAFF	[10FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D118, 0x003F };
    uint32_t const ces[9] = { 0x10FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_216)
{
    // 1D118 0061;	
    // (ùÑò) MUSICAL SYMBOL THREE-LINE STAFF	[10FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D118, 0x0061 };
    uint32_t const ces[9] = { 0x10FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_217)
{
    // 1D118 0041;	
    // (ùÑò) MUSICAL SYMBOL THREE-LINE STAFF	[10FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D118, 0x0041 };
    uint32_t const ces[9] = { 0x10FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_218)
{
    // 1D118 0062;	
    // (ùÑò) MUSICAL SYMBOL THREE-LINE STAFF	[10FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D118, 0x0062 };
    uint32_t const ces[9] = { 0x10FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_219)
{
    // 1D119 0021;	
    // (ùÑô) MUSICAL SYMBOL FOUR-LINE STAFF	[10FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D119, 0x0021 };
    uint32_t const ces[9] = { 0x10FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_220)
{
    // 1D119 003F;	
    // (ùÑô) MUSICAL SYMBOL FOUR-LINE STAFF	[10FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D119, 0x003F };
    uint32_t const ces[9] = { 0x10FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_221)
{
    // 1D119 0061;	
    // (ùÑô) MUSICAL SYMBOL FOUR-LINE STAFF	[10FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D119, 0x0061 };
    uint32_t const ces[9] = { 0x10FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_222)
{
    // 1D119 0041;	
    // (ùÑô) MUSICAL SYMBOL FOUR-LINE STAFF	[10FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D119, 0x0041 };
    uint32_t const ces[9] = { 0x10FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_223)
{
    // 1D119 0062;	
    // (ùÑô) MUSICAL SYMBOL FOUR-LINE STAFF	[10FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D119, 0x0062 };
    uint32_t const ces[9] = { 0x10FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_224)
{
    // 1D11A 0021;	
    // (ùÑö) MUSICAL SYMBOL FIVE-LINE STAFF	[10FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11A, 0x0021 };
    uint32_t const ces[9] = { 0x10FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_225)
{
    // 1D11A 003F;	
    // (ùÑö) MUSICAL SYMBOL FIVE-LINE STAFF	[10FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11A, 0x003F };
    uint32_t const ces[9] = { 0x10FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_226)
{
    // 1D11A 0061;	
    // (ùÑö) MUSICAL SYMBOL FIVE-LINE STAFF	[10FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11A, 0x0061 };
    uint32_t const ces[9] = { 0x10FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_227)
{
    // 1D11A 0041;	
    // (ùÑö) MUSICAL SYMBOL FIVE-LINE STAFF	[10FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D11A, 0x0041 };
    uint32_t const ces[9] = { 0x10FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_228)
{
    // 1D11A 0062;	
    // (ùÑö) MUSICAL SYMBOL FIVE-LINE STAFF	[10FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11A, 0x0062 };
    uint32_t const ces[9] = { 0x10FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_229)
{
    // 1D11B 0021;	
    // (ùÑõ) MUSICAL SYMBOL SIX-LINE STAFF	[10FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11B, 0x0021 };
    uint32_t const ces[9] = { 0x10FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_230)
{
    // 1D11B 003F;	
    // (ùÑõ) MUSICAL SYMBOL SIX-LINE STAFF	[10FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11B, 0x003F };
    uint32_t const ces[9] = { 0x10FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_231)
{
    // 1D11B 0061;	
    // (ùÑõ) MUSICAL SYMBOL SIX-LINE STAFF	[10FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11B, 0x0061 };
    uint32_t const ces[9] = { 0x10FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_232)
{
    // 1D11B 0041;	
    // (ùÑõ) MUSICAL SYMBOL SIX-LINE STAFF	[10FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D11B, 0x0041 };
    uint32_t const ces[9] = { 0x10FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_233)
{
    // 1D11B 0062;	
    // (ùÑõ) MUSICAL SYMBOL SIX-LINE STAFF	[10FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11B, 0x0062 };
    uint32_t const ces[9] = { 0x10FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_234)
{
    // 1D11C 0021;	
    // (ùÑú) MUSICAL SYMBOL SIX-STRING FRETBOARD	[1100 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11C, 0x0021 };
    uint32_t const ces[9] = { 0x1100, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_235)
{
    // 1D11C 003F;	
    // (ùÑú) MUSICAL SYMBOL SIX-STRING FRETBOARD	[1100 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11C, 0x003F };
    uint32_t const ces[9] = { 0x1100, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_236)
{
    // 1D11C 0061;	
    // (ùÑú) MUSICAL SYMBOL SIX-STRING FRETBOARD	[1100 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11C, 0x0061 };
    uint32_t const ces[9] = { 0x1100, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_237)
{
    // 1D11C 0041;	
    // (ùÑú) MUSICAL SYMBOL SIX-STRING FRETBOARD	[1100 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D11C, 0x0041 };
    uint32_t const ces[9] = { 0x1100, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_238)
{
    // 1D11C 0062;	
    // (ùÑú) MUSICAL SYMBOL SIX-STRING FRETBOARD	[1100 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11C, 0x0062 };
    uint32_t const ces[9] = { 0x1100, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_239)
{
    // 1D11D 0021;	
    // (ùÑù) MUSICAL SYMBOL FOUR-STRING FRETBOARD	[1101 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11D, 0x0021 };
    uint32_t const ces[9] = { 0x1101, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_240)
{
    // 1D11D 003F;	
    // (ùÑù) MUSICAL SYMBOL FOUR-STRING FRETBOARD	[1101 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11D, 0x003F };
    uint32_t const ces[9] = { 0x1101, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_241)
{
    // 1D11D 0061;	
    // (ùÑù) MUSICAL SYMBOL FOUR-STRING FRETBOARD	[1101 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11D, 0x0061 };
    uint32_t const ces[9] = { 0x1101, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_242)
{
    // 1D11D 0041;	
    // (ùÑù) MUSICAL SYMBOL FOUR-STRING FRETBOARD	[1101 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D11D, 0x0041 };
    uint32_t const ces[9] = { 0x1101, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_243)
{
    // 1D11D 0062;	
    // (ùÑù) MUSICAL SYMBOL FOUR-STRING FRETBOARD	[1101 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11D, 0x0062 };
    uint32_t const ces[9] = { 0x1101, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_244)
{
    // 1D11E 0021;	
    // (ùÑû) MUSICAL SYMBOL G CLEF	[1102 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11E, 0x0021 };
    uint32_t const ces[9] = { 0x1102, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_245)
{
    // 1D11E 003F;	
    // (ùÑû) MUSICAL SYMBOL G CLEF	[1102 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11E, 0x003F };
    uint32_t const ces[9] = { 0x1102, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_246)
{
    // 1D11E 0061;	
    // (ùÑû) MUSICAL SYMBOL G CLEF	[1102 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11E, 0x0061 };
    uint32_t const ces[9] = { 0x1102, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_247)
{
    // 1D11E 0041;	
    // (ùÑû) MUSICAL SYMBOL G CLEF	[1102 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D11E, 0x0041 };
    uint32_t const ces[9] = { 0x1102, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_248)
{
    // 1D11E 0062;	
    // (ùÑû) MUSICAL SYMBOL G CLEF	[1102 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11E, 0x0062 };
    uint32_t const ces[9] = { 0x1102, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_249)
{
    // 1D11F 0021;	
    // (ùÑü) MUSICAL SYMBOL G CLEF OTTAVA ALTA	[1103 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11F, 0x0021 };
    uint32_t const ces[9] = { 0x1103, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_250)
{
    // 1D11F 003F;	
    // (ùÑü) MUSICAL SYMBOL G CLEF OTTAVA ALTA	[1103 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11F, 0x003F };
    uint32_t const ces[9] = { 0x1103, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_251)
{
    // 1D11F 0061;	
    // (ùÑü) MUSICAL SYMBOL G CLEF OTTAVA ALTA	[1103 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11F, 0x0061 };
    uint32_t const ces[9] = { 0x1103, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_252)
{
    // 1D11F 0041;	
    // (ùÑü) MUSICAL SYMBOL G CLEF OTTAVA ALTA	[1103 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D11F, 0x0041 };
    uint32_t const ces[9] = { 0x1103, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_253)
{
    // 1D11F 0062;	
    // (ùÑü) MUSICAL SYMBOL G CLEF OTTAVA ALTA	[1103 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D11F, 0x0062 };
    uint32_t const ces[9] = { 0x1103, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_254)
{
    // 1D120 0021;	
    // (ùÑ†) MUSICAL SYMBOL G CLEF OTTAVA BASSA	[1104 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D120, 0x0021 };
    uint32_t const ces[9] = { 0x1104, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_255)
{
    // 1D120 003F;	
    // (ùÑ†) MUSICAL SYMBOL G CLEF OTTAVA BASSA	[1104 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D120, 0x003F };
    uint32_t const ces[9] = { 0x1104, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_256)
{
    // 1D120 0061;	
    // (ùÑ†) MUSICAL SYMBOL G CLEF OTTAVA BASSA	[1104 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D120, 0x0061 };
    uint32_t const ces[9] = { 0x1104, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_257)
{
    // 1D120 0041;	
    // (ùÑ†) MUSICAL SYMBOL G CLEF OTTAVA BASSA	[1104 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D120, 0x0041 };
    uint32_t const ces[9] = { 0x1104, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_258)
{
    // 1D120 0062;	
    // (ùÑ†) MUSICAL SYMBOL G CLEF OTTAVA BASSA	[1104 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D120, 0x0062 };
    uint32_t const ces[9] = { 0x1104, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_259)
{
    // 1D121 0021;	
    // (ùÑ°) MUSICAL SYMBOL C CLEF	[1105 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D121, 0x0021 };
    uint32_t const ces[9] = { 0x1105, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_260)
{
    // 1D121 003F;	
    // (ùÑ°) MUSICAL SYMBOL C CLEF	[1105 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D121, 0x003F };
    uint32_t const ces[9] = { 0x1105, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_261)
{
    // 1D121 0061;	
    // (ùÑ°) MUSICAL SYMBOL C CLEF	[1105 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D121, 0x0061 };
    uint32_t const ces[9] = { 0x1105, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_262)
{
    // 1D121 0041;	
    // (ùÑ°) MUSICAL SYMBOL C CLEF	[1105 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D121, 0x0041 };
    uint32_t const ces[9] = { 0x1105, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_263)
{
    // 1D121 0062;	
    // (ùÑ°) MUSICAL SYMBOL C CLEF	[1105 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D121, 0x0062 };
    uint32_t const ces[9] = { 0x1105, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_264)
{
    // 1D122 0021;	
    // (ùÑ¢) MUSICAL SYMBOL F CLEF	[1106 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D122, 0x0021 };
    uint32_t const ces[9] = { 0x1106, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_265)
{
    // 1D122 003F;	
    // (ùÑ¢) MUSICAL SYMBOL F CLEF	[1106 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D122, 0x003F };
    uint32_t const ces[9] = { 0x1106, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_266)
{
    // 1D122 0061;	
    // (ùÑ¢) MUSICAL SYMBOL F CLEF	[1106 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D122, 0x0061 };
    uint32_t const ces[9] = { 0x1106, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_267)
{
    // 1D122 0041;	
    // (ùÑ¢) MUSICAL SYMBOL F CLEF	[1106 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D122, 0x0041 };
    uint32_t const ces[9] = { 0x1106, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_268)
{
    // 1D122 0062;	
    // (ùÑ¢) MUSICAL SYMBOL F CLEF	[1106 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D122, 0x0062 };
    uint32_t const ces[9] = { 0x1106, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_269)
{
    // 1D123 0021;	
    // (ùÑ£) MUSICAL SYMBOL F CLEF OTTAVA ALTA	[1107 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D123, 0x0021 };
    uint32_t const ces[9] = { 0x1107, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_270)
{
    // 1D123 003F;	
    // (ùÑ£) MUSICAL SYMBOL F CLEF OTTAVA ALTA	[1107 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D123, 0x003F };
    uint32_t const ces[9] = { 0x1107, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_271)
{
    // 1D123 0061;	
    // (ùÑ£) MUSICAL SYMBOL F CLEF OTTAVA ALTA	[1107 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D123, 0x0061 };
    uint32_t const ces[9] = { 0x1107, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_272)
{
    // 1D123 0041;	
    // (ùÑ£) MUSICAL SYMBOL F CLEF OTTAVA ALTA	[1107 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D123, 0x0041 };
    uint32_t const ces[9] = { 0x1107, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_273)
{
    // 1D123 0062;	
    // (ùÑ£) MUSICAL SYMBOL F CLEF OTTAVA ALTA	[1107 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D123, 0x0062 };
    uint32_t const ces[9] = { 0x1107, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_274)
{
    // 1D124 0021;	
    // (ùÑ§) MUSICAL SYMBOL F CLEF OTTAVA BASSA	[1108 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D124, 0x0021 };
    uint32_t const ces[9] = { 0x1108, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_275)
{
    // 1D124 003F;	
    // (ùÑ§) MUSICAL SYMBOL F CLEF OTTAVA BASSA	[1108 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D124, 0x003F };
    uint32_t const ces[9] = { 0x1108, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_276)
{
    // 1D124 0061;	
    // (ùÑ§) MUSICAL SYMBOL F CLEF OTTAVA BASSA	[1108 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D124, 0x0061 };
    uint32_t const ces[9] = { 0x1108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_277)
{
    // 1D124 0041;	
    // (ùÑ§) MUSICAL SYMBOL F CLEF OTTAVA BASSA	[1108 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D124, 0x0041 };
    uint32_t const ces[9] = { 0x1108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_278)
{
    // 1D124 0062;	
    // (ùÑ§) MUSICAL SYMBOL F CLEF OTTAVA BASSA	[1108 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D124, 0x0062 };
    uint32_t const ces[9] = { 0x1108, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_279)
{
    // 1D125 0021;	
    // (ùÑ•) MUSICAL SYMBOL DRUM CLEF-1	[1109 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D125, 0x0021 };
    uint32_t const ces[9] = { 0x1109, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_280)
{
    // 1D125 003F;	
    // (ùÑ•) MUSICAL SYMBOL DRUM CLEF-1	[1109 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D125, 0x003F };
    uint32_t const ces[9] = { 0x1109, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_281)
{
    // 1D125 0061;	
    // (ùÑ•) MUSICAL SYMBOL DRUM CLEF-1	[1109 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D125, 0x0061 };
    uint32_t const ces[9] = { 0x1109, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_282)
{
    // 1D125 0041;	
    // (ùÑ•) MUSICAL SYMBOL DRUM CLEF-1	[1109 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D125, 0x0041 };
    uint32_t const ces[9] = { 0x1109, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_283)
{
    // 1D125 0062;	
    // (ùÑ•) MUSICAL SYMBOL DRUM CLEF-1	[1109 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D125, 0x0062 };
    uint32_t const ces[9] = { 0x1109, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_284)
{
    // 1D126 0021;	
    // (ùÑ¶) MUSICAL SYMBOL DRUM CLEF-2	[110A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D126, 0x0021 };
    uint32_t const ces[9] = { 0x110A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_285)
{
    // 1D126 003F;	
    // (ùÑ¶) MUSICAL SYMBOL DRUM CLEF-2	[110A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D126, 0x003F };
    uint32_t const ces[9] = { 0x110A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_286)
{
    // 1D126 0061;	
    // (ùÑ¶) MUSICAL SYMBOL DRUM CLEF-2	[110A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D126, 0x0061 };
    uint32_t const ces[9] = { 0x110A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_287)
{
    // 1D126 0041;	
    // (ùÑ¶) MUSICAL SYMBOL DRUM CLEF-2	[110A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D126, 0x0041 };
    uint32_t const ces[9] = { 0x110A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_288)
{
    // 1D126 0062;	
    // (ùÑ¶) MUSICAL SYMBOL DRUM CLEF-2	[110A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D126, 0x0062 };
    uint32_t const ces[9] = { 0x110A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_289)
{
    // 266D 0021;	
    // (‚ô≠) MUSIC FLAT SIGN	[110B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266D, 0x0021 };
    uint32_t const ces[9] = { 0x110B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_290)
{
    // 266D 003F;	
    // (‚ô≠) MUSIC FLAT SIGN	[110B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266D, 0x003F };
    uint32_t const ces[9] = { 0x110B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_291)
{
    // 266D 0061;	
    // (‚ô≠) MUSIC FLAT SIGN	[110B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266D, 0x0061 };
    uint32_t const ces[9] = { 0x110B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_292)
{
    // 266D 0041;	
    // (‚ô≠) MUSIC FLAT SIGN	[110B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x266D, 0x0041 };
    uint32_t const ces[9] = { 0x110B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_293)
{
    // 266D 0062;	
    // (‚ô≠) MUSIC FLAT SIGN	[110B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266D, 0x0062 };
    uint32_t const ces[9] = { 0x110B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_294)
{
    // 266E 0021;	
    // (‚ôÆ) MUSIC NATURAL SIGN	[110C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266E, 0x0021 };
    uint32_t const ces[9] = { 0x110C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_295)
{
    // 266E 003F;	
    // (‚ôÆ) MUSIC NATURAL SIGN	[110C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266E, 0x003F };
    uint32_t const ces[9] = { 0x110C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_296)
{
    // 266E 0061;	
    // (‚ôÆ) MUSIC NATURAL SIGN	[110C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266E, 0x0061 };
    uint32_t const ces[9] = { 0x110C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_297)
{
    // 266E 0041;	
    // (‚ôÆ) MUSIC NATURAL SIGN	[110C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x266E, 0x0041 };
    uint32_t const ces[9] = { 0x110C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_298)
{
    // 266E 0062;	
    // (‚ôÆ) MUSIC NATURAL SIGN	[110C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266E, 0x0062 };
    uint32_t const ces[9] = { 0x110C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_299)
{
    // 266F 0021;	
    // (‚ôØ) MUSIC SHARP SIGN	[110D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266F, 0x0021 };
    uint32_t const ces[9] = { 0x110D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_300)
{
    // 266F 003F;	
    // (‚ôØ) MUSIC SHARP SIGN	[110D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266F, 0x003F };
    uint32_t const ces[9] = { 0x110D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_301)
{
    // 266F 0061;	
    // (‚ôØ) MUSIC SHARP SIGN	[110D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266F, 0x0061 };
    uint32_t const ces[9] = { 0x110D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_302)
{
    // 266F 0041;	
    // (‚ôØ) MUSIC SHARP SIGN	[110D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x266F, 0x0041 };
    uint32_t const ces[9] = { 0x110D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_303)
{
    // 266F 0062;	
    // (‚ôØ) MUSIC SHARP SIGN	[110D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x266F, 0x0062 };
    uint32_t const ces[9] = { 0x110D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_304)
{
    // 1D12A 0021;	
    // (ùÑ™) MUSICAL SYMBOL DOUBLE SHARP	[110E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12A, 0x0021 };
    uint32_t const ces[9] = { 0x110E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_305)
{
    // 1D12A 003F;	
    // (ùÑ™) MUSICAL SYMBOL DOUBLE SHARP	[110E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12A, 0x003F };
    uint32_t const ces[9] = { 0x110E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_306)
{
    // 1D12A 0061;	
    // (ùÑ™) MUSICAL SYMBOL DOUBLE SHARP	[110E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12A, 0x0061 };
    uint32_t const ces[9] = { 0x110E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_307)
{
    // 1D12A 0041;	
    // (ùÑ™) MUSICAL SYMBOL DOUBLE SHARP	[110E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D12A, 0x0041 };
    uint32_t const ces[9] = { 0x110E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_308)
{
    // 1D12A 0062;	
    // (ùÑ™) MUSICAL SYMBOL DOUBLE SHARP	[110E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12A, 0x0062 };
    uint32_t const ces[9] = { 0x110E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_309)
{
    // 1D12B 0021;	
    // (ùÑ´) MUSICAL SYMBOL DOUBLE FLAT	[110F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12B, 0x0021 };
    uint32_t const ces[9] = { 0x110F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_310)
{
    // 1D12B 003F;	
    // (ùÑ´) MUSICAL SYMBOL DOUBLE FLAT	[110F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12B, 0x003F };
    uint32_t const ces[9] = { 0x110F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_311)
{
    // 1D12B 0061;	
    // (ùÑ´) MUSICAL SYMBOL DOUBLE FLAT	[110F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12B, 0x0061 };
    uint32_t const ces[9] = { 0x110F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_312)
{
    // 1D12B 0041;	
    // (ùÑ´) MUSICAL SYMBOL DOUBLE FLAT	[110F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D12B, 0x0041 };
    uint32_t const ces[9] = { 0x110F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_313)
{
    // 1D12B 0062;	
    // (ùÑ´) MUSICAL SYMBOL DOUBLE FLAT	[110F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12B, 0x0062 };
    uint32_t const ces[9] = { 0x110F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_314)
{
    // 1D12C 0021;	
    // (ùÑ¨) MUSICAL SYMBOL FLAT UP	[1110 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12C, 0x0021 };
    uint32_t const ces[9] = { 0x1110, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_315)
{
    // 1D12C 003F;	
    // (ùÑ¨) MUSICAL SYMBOL FLAT UP	[1110 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12C, 0x003F };
    uint32_t const ces[9] = { 0x1110, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_316)
{
    // 1D12C 0061;	
    // (ùÑ¨) MUSICAL SYMBOL FLAT UP	[1110 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12C, 0x0061 };
    uint32_t const ces[9] = { 0x1110, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_317)
{
    // 1D12C 0041;	
    // (ùÑ¨) MUSICAL SYMBOL FLAT UP	[1110 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D12C, 0x0041 };
    uint32_t const ces[9] = { 0x1110, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_318)
{
    // 1D12C 0062;	
    // (ùÑ¨) MUSICAL SYMBOL FLAT UP	[1110 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12C, 0x0062 };
    uint32_t const ces[9] = { 0x1110, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_319)
{
    // 1D12D 0021;	
    // (ùÑ≠) MUSICAL SYMBOL FLAT DOWN	[1111 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12D, 0x0021 };
    uint32_t const ces[9] = { 0x1111, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_320)
{
    // 1D12D 003F;	
    // (ùÑ≠) MUSICAL SYMBOL FLAT DOWN	[1111 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12D, 0x003F };
    uint32_t const ces[9] = { 0x1111, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_321)
{
    // 1D12D 0061;	
    // (ùÑ≠) MUSICAL SYMBOL FLAT DOWN	[1111 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12D, 0x0061 };
    uint32_t const ces[9] = { 0x1111, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_322)
{
    // 1D12D 0041;	
    // (ùÑ≠) MUSICAL SYMBOL FLAT DOWN	[1111 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D12D, 0x0041 };
    uint32_t const ces[9] = { 0x1111, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_323)
{
    // 1D12D 0062;	
    // (ùÑ≠) MUSICAL SYMBOL FLAT DOWN	[1111 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12D, 0x0062 };
    uint32_t const ces[9] = { 0x1111, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_324)
{
    // 1D12E 0021;	
    // (ùÑÆ) MUSICAL SYMBOL NATURAL UP	[1112 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12E, 0x0021 };
    uint32_t const ces[9] = { 0x1112, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_325)
{
    // 1D12E 003F;	
    // (ùÑÆ) MUSICAL SYMBOL NATURAL UP	[1112 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12E, 0x003F };
    uint32_t const ces[9] = { 0x1112, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_326)
{
    // 1D12E 0061;	
    // (ùÑÆ) MUSICAL SYMBOL NATURAL UP	[1112 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12E, 0x0061 };
    uint32_t const ces[9] = { 0x1112, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_327)
{
    // 1D12E 0041;	
    // (ùÑÆ) MUSICAL SYMBOL NATURAL UP	[1112 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D12E, 0x0041 };
    uint32_t const ces[9] = { 0x1112, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_328)
{
    // 1D12E 0062;	
    // (ùÑÆ) MUSICAL SYMBOL NATURAL UP	[1112 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12E, 0x0062 };
    uint32_t const ces[9] = { 0x1112, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_329)
{
    // 1D12F 0021;	
    // (ùÑØ) MUSICAL SYMBOL NATURAL DOWN	[1113 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12F, 0x0021 };
    uint32_t const ces[9] = { 0x1113, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_330)
{
    // 1D12F 003F;	
    // (ùÑØ) MUSICAL SYMBOL NATURAL DOWN	[1113 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12F, 0x003F };
    uint32_t const ces[9] = { 0x1113, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_331)
{
    // 1D12F 0061;	
    // (ùÑØ) MUSICAL SYMBOL NATURAL DOWN	[1113 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12F, 0x0061 };
    uint32_t const ces[9] = { 0x1113, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_332)
{
    // 1D12F 0041;	
    // (ùÑØ) MUSICAL SYMBOL NATURAL DOWN	[1113 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D12F, 0x0041 };
    uint32_t const ces[9] = { 0x1113, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_333)
{
    // 1D12F 0062;	
    // (ùÑØ) MUSICAL SYMBOL NATURAL DOWN	[1113 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D12F, 0x0062 };
    uint32_t const ces[9] = { 0x1113, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_334)
{
    // 1D130 0021;	
    // (ùÑ∞) MUSICAL SYMBOL SHARP UP	[1114 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D130, 0x0021 };
    uint32_t const ces[9] = { 0x1114, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_335)
{
    // 1D130 003F;	
    // (ùÑ∞) MUSICAL SYMBOL SHARP UP	[1114 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D130, 0x003F };
    uint32_t const ces[9] = { 0x1114, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_336)
{
    // 1D130 0061;	
    // (ùÑ∞) MUSICAL SYMBOL SHARP UP	[1114 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D130, 0x0061 };
    uint32_t const ces[9] = { 0x1114, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_337)
{
    // 1D130 0041;	
    // (ùÑ∞) MUSICAL SYMBOL SHARP UP	[1114 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D130, 0x0041 };
    uint32_t const ces[9] = { 0x1114, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_338)
{
    // 1D130 0062;	
    // (ùÑ∞) MUSICAL SYMBOL SHARP UP	[1114 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D130, 0x0062 };
    uint32_t const ces[9] = { 0x1114, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_339)
{
    // 1D131 0021;	
    // (ùÑ±) MUSICAL SYMBOL SHARP DOWN	[1115 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D131, 0x0021 };
    uint32_t const ces[9] = { 0x1115, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_340)
{
    // 1D131 003F;	
    // (ùÑ±) MUSICAL SYMBOL SHARP DOWN	[1115 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D131, 0x003F };
    uint32_t const ces[9] = { 0x1115, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_341)
{
    // 1D131 0061;	
    // (ùÑ±) MUSICAL SYMBOL SHARP DOWN	[1115 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D131, 0x0061 };
    uint32_t const ces[9] = { 0x1115, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_342)
{
    // 1D131 0041;	
    // (ùÑ±) MUSICAL SYMBOL SHARP DOWN	[1115 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D131, 0x0041 };
    uint32_t const ces[9] = { 0x1115, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_343)
{
    // 1D131 0062;	
    // (ùÑ±) MUSICAL SYMBOL SHARP DOWN	[1115 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D131, 0x0062 };
    uint32_t const ces[9] = { 0x1115, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_344)
{
    // 1D132 0021;	
    // (ùÑ≤) MUSICAL SYMBOL QUARTER TONE SHARP	[1116 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D132, 0x0021 };
    uint32_t const ces[9] = { 0x1116, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_345)
{
    // 1D132 003F;	
    // (ùÑ≤) MUSICAL SYMBOL QUARTER TONE SHARP	[1116 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D132, 0x003F };
    uint32_t const ces[9] = { 0x1116, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_346)
{
    // 1D132 0061;	
    // (ùÑ≤) MUSICAL SYMBOL QUARTER TONE SHARP	[1116 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D132, 0x0061 };
    uint32_t const ces[9] = { 0x1116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_347)
{
    // 1D132 0041;	
    // (ùÑ≤) MUSICAL SYMBOL QUARTER TONE SHARP	[1116 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D132, 0x0041 };
    uint32_t const ces[9] = { 0x1116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_348)
{
    // 1D132 0062;	
    // (ùÑ≤) MUSICAL SYMBOL QUARTER TONE SHARP	[1116 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D132, 0x0062 };
    uint32_t const ces[9] = { 0x1116, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_349)
{
    // 1D133 0021;	
    // (ùÑ≥) MUSICAL SYMBOL QUARTER TONE FLAT	[1117 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D133, 0x0021 };
    uint32_t const ces[9] = { 0x1117, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_350)
{
    // 1D133 003F;	
    // (ùÑ≥) MUSICAL SYMBOL QUARTER TONE FLAT	[1117 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D133, 0x003F };
    uint32_t const ces[9] = { 0x1117, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_351)
{
    // 1D133 0061;	
    // (ùÑ≥) MUSICAL SYMBOL QUARTER TONE FLAT	[1117 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D133, 0x0061 };
    uint32_t const ces[9] = { 0x1117, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_352)
{
    // 1D133 0041;	
    // (ùÑ≥) MUSICAL SYMBOL QUARTER TONE FLAT	[1117 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D133, 0x0041 };
    uint32_t const ces[9] = { 0x1117, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_353)
{
    // 1D133 0062;	
    // (ùÑ≥) MUSICAL SYMBOL QUARTER TONE FLAT	[1117 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D133, 0x0062 };
    uint32_t const ces[9] = { 0x1117, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_354)
{
    // 1D134 0021;	
    // (ùÑ¥) MUSICAL SYMBOL COMMON TIME	[1118 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D134, 0x0021 };
    uint32_t const ces[9] = { 0x1118, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_355)
{
    // 1D134 003F;	
    // (ùÑ¥) MUSICAL SYMBOL COMMON TIME	[1118 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D134, 0x003F };
    uint32_t const ces[9] = { 0x1118, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_356)
{
    // 1D134 0061;	
    // (ùÑ¥) MUSICAL SYMBOL COMMON TIME	[1118 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D134, 0x0061 };
    uint32_t const ces[9] = { 0x1118, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_357)
{
    // 1D134 0041;	
    // (ùÑ¥) MUSICAL SYMBOL COMMON TIME	[1118 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D134, 0x0041 };
    uint32_t const ces[9] = { 0x1118, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_358)
{
    // 1D134 0062;	
    // (ùÑ¥) MUSICAL SYMBOL COMMON TIME	[1118 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D134, 0x0062 };
    uint32_t const ces[9] = { 0x1118, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_359)
{
    // 1D135 0021;	
    // (ùÑµ) MUSICAL SYMBOL CUT TIME	[1119 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D135, 0x0021 };
    uint32_t const ces[9] = { 0x1119, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_360)
{
    // 1D135 003F;	
    // (ùÑµ) MUSICAL SYMBOL CUT TIME	[1119 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D135, 0x003F };
    uint32_t const ces[9] = { 0x1119, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_361)
{
    // 1D135 0061;	
    // (ùÑµ) MUSICAL SYMBOL CUT TIME	[1119 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D135, 0x0061 };
    uint32_t const ces[9] = { 0x1119, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_362)
{
    // 1D135 0041;	
    // (ùÑµ) MUSICAL SYMBOL CUT TIME	[1119 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D135, 0x0041 };
    uint32_t const ces[9] = { 0x1119, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_363)
{
    // 1D135 0062;	
    // (ùÑµ) MUSICAL SYMBOL CUT TIME	[1119 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D135, 0x0062 };
    uint32_t const ces[9] = { 0x1119, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_364)
{
    // 1D136 0021;	
    // (ùÑ∂) MUSICAL SYMBOL OTTAVA ALTA	[111A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D136, 0x0021 };
    uint32_t const ces[9] = { 0x111A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_365)
{
    // 1D136 003F;	
    // (ùÑ∂) MUSICAL SYMBOL OTTAVA ALTA	[111A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D136, 0x003F };
    uint32_t const ces[9] = { 0x111A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_366)
{
    // 1D136 0061;	
    // (ùÑ∂) MUSICAL SYMBOL OTTAVA ALTA	[111A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D136, 0x0061 };
    uint32_t const ces[9] = { 0x111A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_367)
{
    // 1D136 0041;	
    // (ùÑ∂) MUSICAL SYMBOL OTTAVA ALTA	[111A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D136, 0x0041 };
    uint32_t const ces[9] = { 0x111A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_368)
{
    // 1D136 0062;	
    // (ùÑ∂) MUSICAL SYMBOL OTTAVA ALTA	[111A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D136, 0x0062 };
    uint32_t const ces[9] = { 0x111A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_369)
{
    // 1D137 0021;	
    // (ùÑ∑) MUSICAL SYMBOL OTTAVA BASSA	[111B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D137, 0x0021 };
    uint32_t const ces[9] = { 0x111B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_370)
{
    // 1D137 003F;	
    // (ùÑ∑) MUSICAL SYMBOL OTTAVA BASSA	[111B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D137, 0x003F };
    uint32_t const ces[9] = { 0x111B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_371)
{
    // 1D137 0061;	
    // (ùÑ∑) MUSICAL SYMBOL OTTAVA BASSA	[111B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D137, 0x0061 };
    uint32_t const ces[9] = { 0x111B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_372)
{
    // 1D137 0041;	
    // (ùÑ∑) MUSICAL SYMBOL OTTAVA BASSA	[111B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D137, 0x0041 };
    uint32_t const ces[9] = { 0x111B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_373)
{
    // 1D137 0062;	
    // (ùÑ∑) MUSICAL SYMBOL OTTAVA BASSA	[111B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D137, 0x0062 };
    uint32_t const ces[9] = { 0x111B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_374)
{
    // 1D138 0021;	
    // (ùÑ∏) MUSICAL SYMBOL QUINDICESIMA ALTA	[111C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D138, 0x0021 };
    uint32_t const ces[9] = { 0x111C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_375)
{
    // 1D138 003F;	
    // (ùÑ∏) MUSICAL SYMBOL QUINDICESIMA ALTA	[111C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D138, 0x003F };
    uint32_t const ces[9] = { 0x111C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_376)
{
    // 1D138 0061;	
    // (ùÑ∏) MUSICAL SYMBOL QUINDICESIMA ALTA	[111C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D138, 0x0061 };
    uint32_t const ces[9] = { 0x111C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_377)
{
    // 1D138 0041;	
    // (ùÑ∏) MUSICAL SYMBOL QUINDICESIMA ALTA	[111C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D138, 0x0041 };
    uint32_t const ces[9] = { 0x111C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_378)
{
    // 1D138 0062;	
    // (ùÑ∏) MUSICAL SYMBOL QUINDICESIMA ALTA	[111C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D138, 0x0062 };
    uint32_t const ces[9] = { 0x111C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_379)
{
    // 1D139 0021;	
    // (ùÑπ) MUSICAL SYMBOL QUINDICESIMA BASSA	[111D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D139, 0x0021 };
    uint32_t const ces[9] = { 0x111D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_380)
{
    // 1D139 003F;	
    // (ùÑπ) MUSICAL SYMBOL QUINDICESIMA BASSA	[111D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D139, 0x003F };
    uint32_t const ces[9] = { 0x111D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_381)
{
    // 1D139 0061;	
    // (ùÑπ) MUSICAL SYMBOL QUINDICESIMA BASSA	[111D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D139, 0x0061 };
    uint32_t const ces[9] = { 0x111D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_382)
{
    // 1D139 0041;	
    // (ùÑπ) MUSICAL SYMBOL QUINDICESIMA BASSA	[111D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D139, 0x0041 };
    uint32_t const ces[9] = { 0x111D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_383)
{
    // 1D139 0062;	
    // (ùÑπ) MUSICAL SYMBOL QUINDICESIMA BASSA	[111D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D139, 0x0062 };
    uint32_t const ces[9] = { 0x111D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_384)
{
    // 1D129 0021;	
    // (ùÑ©) MUSICAL SYMBOL MULTIPLE MEASURE REST	[111E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D129, 0x0021 };
    uint32_t const ces[9] = { 0x111E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_385)
{
    // 1D129 003F;	
    // (ùÑ©) MUSICAL SYMBOL MULTIPLE MEASURE REST	[111E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D129, 0x003F };
    uint32_t const ces[9] = { 0x111E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_386)
{
    // 1D129 0061;	
    // (ùÑ©) MUSICAL SYMBOL MULTIPLE MEASURE REST	[111E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D129, 0x0061 };
    uint32_t const ces[9] = { 0x111E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_387)
{
    // 1D129 0041;	
    // (ùÑ©) MUSICAL SYMBOL MULTIPLE MEASURE REST	[111E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D129, 0x0041 };
    uint32_t const ces[9] = { 0x111E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_388)
{
    // 1D129 0062;	
    // (ùÑ©) MUSICAL SYMBOL MULTIPLE MEASURE REST	[111E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D129, 0x0062 };
    uint32_t const ces[9] = { 0x111E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_389)
{
    // 1D13A 0021;	
    // (ùÑ∫) MUSICAL SYMBOL MULTI REST	[111F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13A, 0x0021 };
    uint32_t const ces[9] = { 0x111F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_390)
{
    // 1D13A 003F;	
    // (ùÑ∫) MUSICAL SYMBOL MULTI REST	[111F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13A, 0x003F };
    uint32_t const ces[9] = { 0x111F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_391)
{
    // 1D13A 0061;	
    // (ùÑ∫) MUSICAL SYMBOL MULTI REST	[111F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13A, 0x0061 };
    uint32_t const ces[9] = { 0x111F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_392)
{
    // 1D13A 0041;	
    // (ùÑ∫) MUSICAL SYMBOL MULTI REST	[111F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D13A, 0x0041 };
    uint32_t const ces[9] = { 0x111F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_393)
{
    // 1D13A 0062;	
    // (ùÑ∫) MUSICAL SYMBOL MULTI REST	[111F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13A, 0x0062 };
    uint32_t const ces[9] = { 0x111F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_394)
{
    // 1D13B 0021;	
    // (ùÑª) MUSICAL SYMBOL WHOLE REST	[1120 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13B, 0x0021 };
    uint32_t const ces[9] = { 0x1120, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_395)
{
    // 1D13B 003F;	
    // (ùÑª) MUSICAL SYMBOL WHOLE REST	[1120 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13B, 0x003F };
    uint32_t const ces[9] = { 0x1120, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_396)
{
    // 1D13B 0061;	
    // (ùÑª) MUSICAL SYMBOL WHOLE REST	[1120 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13B, 0x0061 };
    uint32_t const ces[9] = { 0x1120, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_397)
{
    // 1D13B 0041;	
    // (ùÑª) MUSICAL SYMBOL WHOLE REST	[1120 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D13B, 0x0041 };
    uint32_t const ces[9] = { 0x1120, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_398)
{
    // 1D13B 0062;	
    // (ùÑª) MUSICAL SYMBOL WHOLE REST	[1120 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13B, 0x0062 };
    uint32_t const ces[9] = { 0x1120, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_399)
{
    // 1D13C 0021;	
    // (ùÑº) MUSICAL SYMBOL HALF REST	[1121 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13C, 0x0021 };
    uint32_t const ces[9] = { 0x1121, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_400)
{
    // 1D13C 003F;	
    // (ùÑº) MUSICAL SYMBOL HALF REST	[1121 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13C, 0x003F };
    uint32_t const ces[9] = { 0x1121, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_401)
{
    // 1D13C 0061;	
    // (ùÑº) MUSICAL SYMBOL HALF REST	[1121 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13C, 0x0061 };
    uint32_t const ces[9] = { 0x1121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_402)
{
    // 1D13C 0041;	
    // (ùÑº) MUSICAL SYMBOL HALF REST	[1121 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D13C, 0x0041 };
    uint32_t const ces[9] = { 0x1121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_403)
{
    // 1D13C 0062;	
    // (ùÑº) MUSICAL SYMBOL HALF REST	[1121 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13C, 0x0062 };
    uint32_t const ces[9] = { 0x1121, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_404)
{
    // 1D13D 0021;	
    // (ùÑΩ) MUSICAL SYMBOL QUARTER REST	[1122 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13D, 0x0021 };
    uint32_t const ces[9] = { 0x1122, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_405)
{
    // 1D13D 003F;	
    // (ùÑΩ) MUSICAL SYMBOL QUARTER REST	[1122 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13D, 0x003F };
    uint32_t const ces[9] = { 0x1122, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_406)
{
    // 1D13D 0061;	
    // (ùÑΩ) MUSICAL SYMBOL QUARTER REST	[1122 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13D, 0x0061 };
    uint32_t const ces[9] = { 0x1122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_407)
{
    // 1D13D 0041;	
    // (ùÑΩ) MUSICAL SYMBOL QUARTER REST	[1122 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D13D, 0x0041 };
    uint32_t const ces[9] = { 0x1122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_408)
{
    // 1D13D 0062;	
    // (ùÑΩ) MUSICAL SYMBOL QUARTER REST	[1122 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13D, 0x0062 };
    uint32_t const ces[9] = { 0x1122, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_409)
{
    // 1D13E 0021;	
    // (ùÑæ) MUSICAL SYMBOL EIGHTH REST	[1123 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13E, 0x0021 };
    uint32_t const ces[9] = { 0x1123, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_410)
{
    // 1D13E 003F;	
    // (ùÑæ) MUSICAL SYMBOL EIGHTH REST	[1123 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13E, 0x003F };
    uint32_t const ces[9] = { 0x1123, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_411)
{
    // 1D13E 0061;	
    // (ùÑæ) MUSICAL SYMBOL EIGHTH REST	[1123 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13E, 0x0061 };
    uint32_t const ces[9] = { 0x1123, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_412)
{
    // 1D13E 0041;	
    // (ùÑæ) MUSICAL SYMBOL EIGHTH REST	[1123 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D13E, 0x0041 };
    uint32_t const ces[9] = { 0x1123, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_413)
{
    // 1D13E 0062;	
    // (ùÑæ) MUSICAL SYMBOL EIGHTH REST	[1123 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13E, 0x0062 };
    uint32_t const ces[9] = { 0x1123, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_414)
{
    // 1D13F 0021;	
    // (ùÑø) MUSICAL SYMBOL SIXTEENTH REST	[1124 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13F, 0x0021 };
    uint32_t const ces[9] = { 0x1124, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_415)
{
    // 1D13F 003F;	
    // (ùÑø) MUSICAL SYMBOL SIXTEENTH REST	[1124 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13F, 0x003F };
    uint32_t const ces[9] = { 0x1124, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_416)
{
    // 1D13F 0061;	
    // (ùÑø) MUSICAL SYMBOL SIXTEENTH REST	[1124 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13F, 0x0061 };
    uint32_t const ces[9] = { 0x1124, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_417)
{
    // 1D13F 0041;	
    // (ùÑø) MUSICAL SYMBOL SIXTEENTH REST	[1124 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D13F, 0x0041 };
    uint32_t const ces[9] = { 0x1124, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_418)
{
    // 1D13F 0062;	
    // (ùÑø) MUSICAL SYMBOL SIXTEENTH REST	[1124 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D13F, 0x0062 };
    uint32_t const ces[9] = { 0x1124, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_419)
{
    // 1D140 0021;	
    // (ùÖÄ) MUSICAL SYMBOL THIRTY-SECOND REST	[1125 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D140, 0x0021 };
    uint32_t const ces[9] = { 0x1125, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_420)
{
    // 1D140 003F;	
    // (ùÖÄ) MUSICAL SYMBOL THIRTY-SECOND REST	[1125 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D140, 0x003F };
    uint32_t const ces[9] = { 0x1125, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_421)
{
    // 1D140 0061;	
    // (ùÖÄ) MUSICAL SYMBOL THIRTY-SECOND REST	[1125 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D140, 0x0061 };
    uint32_t const ces[9] = { 0x1125, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_422)
{
    // 1D140 0041;	
    // (ùÖÄ) MUSICAL SYMBOL THIRTY-SECOND REST	[1125 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D140, 0x0041 };
    uint32_t const ces[9] = { 0x1125, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_423)
{
    // 1D140 0062;	
    // (ùÖÄ) MUSICAL SYMBOL THIRTY-SECOND REST	[1125 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D140, 0x0062 };
    uint32_t const ces[9] = { 0x1125, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_424)
{
    // 1D141 0021;	
    // (ùÖÅ) MUSICAL SYMBOL SIXTY-FOURTH REST	[1126 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D141, 0x0021 };
    uint32_t const ces[9] = { 0x1126, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_425)
{
    // 1D141 003F;	
    // (ùÖÅ) MUSICAL SYMBOL SIXTY-FOURTH REST	[1126 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D141, 0x003F };
    uint32_t const ces[9] = { 0x1126, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_426)
{
    // 1D141 0061;	
    // (ùÖÅ) MUSICAL SYMBOL SIXTY-FOURTH REST	[1126 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D141, 0x0061 };
    uint32_t const ces[9] = { 0x1126, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_427)
{
    // 1D141 0041;	
    // (ùÖÅ) MUSICAL SYMBOL SIXTY-FOURTH REST	[1126 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D141, 0x0041 };
    uint32_t const ces[9] = { 0x1126, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_428)
{
    // 1D141 0062;	
    // (ùÖÅ) MUSICAL SYMBOL SIXTY-FOURTH REST	[1126 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D141, 0x0062 };
    uint32_t const ces[9] = { 0x1126, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_429)
{
    // 1D142 0021;	
    // (ùÖÇ) MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH REST	[1127 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D142, 0x0021 };
    uint32_t const ces[9] = { 0x1127, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_430)
{
    // 1D142 003F;	
    // (ùÖÇ) MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH REST	[1127 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D142, 0x003F };
    uint32_t const ces[9] = { 0x1127, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_431)
{
    // 1D142 0061;	
    // (ùÖÇ) MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH REST	[1127 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D142, 0x0061 };
    uint32_t const ces[9] = { 0x1127, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_432)
{
    // 1D142 0041;	
    // (ùÖÇ) MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH REST	[1127 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D142, 0x0041 };
    uint32_t const ces[9] = { 0x1127, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_433)
{
    // 1D142 0062;	
    // (ùÖÇ) MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH REST	[1127 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D142, 0x0062 };
    uint32_t const ces[9] = { 0x1127, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_434)
{
    // 1D143 0021;	
    // (ùÖÉ) MUSICAL SYMBOL X NOTEHEAD	[1128 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D143, 0x0021 };
    uint32_t const ces[9] = { 0x1128, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_435)
{
    // 1D143 003F;	
    // (ùÖÉ) MUSICAL SYMBOL X NOTEHEAD	[1128 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D143, 0x003F };
    uint32_t const ces[9] = { 0x1128, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_436)
{
    // 1D143 0061;	
    // (ùÖÉ) MUSICAL SYMBOL X NOTEHEAD	[1128 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D143, 0x0061 };
    uint32_t const ces[9] = { 0x1128, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_437)
{
    // 1D143 0041;	
    // (ùÖÉ) MUSICAL SYMBOL X NOTEHEAD	[1128 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D143, 0x0041 };
    uint32_t const ces[9] = { 0x1128, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_438)
{
    // 1D143 0062;	
    // (ùÖÉ) MUSICAL SYMBOL X NOTEHEAD	[1128 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D143, 0x0062 };
    uint32_t const ces[9] = { 0x1128, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_439)
{
    // 1D144 0021;	
    // (ùÖÑ) MUSICAL SYMBOL PLUS NOTEHEAD	[1129 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D144, 0x0021 };
    uint32_t const ces[9] = { 0x1129, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_440)
{
    // 1D144 003F;	
    // (ùÖÑ) MUSICAL SYMBOL PLUS NOTEHEAD	[1129 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D144, 0x003F };
    uint32_t const ces[9] = { 0x1129, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_441)
{
    // 1D144 0061;	
    // (ùÖÑ) MUSICAL SYMBOL PLUS NOTEHEAD	[1129 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D144, 0x0061 };
    uint32_t const ces[9] = { 0x1129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_442)
{
    // 1D144 0041;	
    // (ùÖÑ) MUSICAL SYMBOL PLUS NOTEHEAD	[1129 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D144, 0x0041 };
    uint32_t const ces[9] = { 0x1129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_443)
{
    // 1D144 0062;	
    // (ùÖÑ) MUSICAL SYMBOL PLUS NOTEHEAD	[1129 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D144, 0x0062 };
    uint32_t const ces[9] = { 0x1129, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_444)
{
    // 1D145 0021;	
    // (ùÖÖ) MUSICAL SYMBOL CIRCLE X NOTEHEAD	[112A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D145, 0x0021 };
    uint32_t const ces[9] = { 0x112A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_445)
{
    // 1D145 003F;	
    // (ùÖÖ) MUSICAL SYMBOL CIRCLE X NOTEHEAD	[112A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D145, 0x003F };
    uint32_t const ces[9] = { 0x112A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_446)
{
    // 1D145 0061;	
    // (ùÖÖ) MUSICAL SYMBOL CIRCLE X NOTEHEAD	[112A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D145, 0x0061 };
    uint32_t const ces[9] = { 0x112A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_447)
{
    // 1D145 0041;	
    // (ùÖÖ) MUSICAL SYMBOL CIRCLE X NOTEHEAD	[112A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D145, 0x0041 };
    uint32_t const ces[9] = { 0x112A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_448)
{
    // 1D145 0062;	
    // (ùÖÖ) MUSICAL SYMBOL CIRCLE X NOTEHEAD	[112A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D145, 0x0062 };
    uint32_t const ces[9] = { 0x112A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_449)
{
    // 1D146 0021;	
    // (ùÖÜ) MUSICAL SYMBOL SQUARE NOTEHEAD WHITE	[112B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D146, 0x0021 };
    uint32_t const ces[9] = { 0x112B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_450)
{
    // 1D146 003F;	
    // (ùÖÜ) MUSICAL SYMBOL SQUARE NOTEHEAD WHITE	[112B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D146, 0x003F };
    uint32_t const ces[9] = { 0x112B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_451)
{
    // 1D146 0061;	
    // (ùÖÜ) MUSICAL SYMBOL SQUARE NOTEHEAD WHITE	[112B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D146, 0x0061 };
    uint32_t const ces[9] = { 0x112B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_452)
{
    // 1D146 0041;	
    // (ùÖÜ) MUSICAL SYMBOL SQUARE NOTEHEAD WHITE	[112B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D146, 0x0041 };
    uint32_t const ces[9] = { 0x112B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_453)
{
    // 1D146 0062;	
    // (ùÖÜ) MUSICAL SYMBOL SQUARE NOTEHEAD WHITE	[112B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D146, 0x0062 };
    uint32_t const ces[9] = { 0x112B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_454)
{
    // 1D147 0021;	
    // (ùÖá) MUSICAL SYMBOL SQUARE NOTEHEAD BLACK	[112C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D147, 0x0021 };
    uint32_t const ces[9] = { 0x112C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_455)
{
    // 1D147 003F;	
    // (ùÖá) MUSICAL SYMBOL SQUARE NOTEHEAD BLACK	[112C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D147, 0x003F };
    uint32_t const ces[9] = { 0x112C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_456)
{
    // 1D147 0061;	
    // (ùÖá) MUSICAL SYMBOL SQUARE NOTEHEAD BLACK	[112C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D147, 0x0061 };
    uint32_t const ces[9] = { 0x112C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_457)
{
    // 1D147 0041;	
    // (ùÖá) MUSICAL SYMBOL SQUARE NOTEHEAD BLACK	[112C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D147, 0x0041 };
    uint32_t const ces[9] = { 0x112C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_458)
{
    // 1D147 0062;	
    // (ùÖá) MUSICAL SYMBOL SQUARE NOTEHEAD BLACK	[112C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D147, 0x0062 };
    uint32_t const ces[9] = { 0x112C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_459)
{
    // 1D148 0021;	
    // (ùÖà) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP WHITE	[112D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D148, 0x0021 };
    uint32_t const ces[9] = { 0x112D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_460)
{
    // 1D148 003F;	
    // (ùÖà) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP WHITE	[112D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D148, 0x003F };
    uint32_t const ces[9] = { 0x112D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_461)
{
    // 1D148 0061;	
    // (ùÖà) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP WHITE	[112D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D148, 0x0061 };
    uint32_t const ces[9] = { 0x112D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_462)
{
    // 1D148 0041;	
    // (ùÖà) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP WHITE	[112D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D148, 0x0041 };
    uint32_t const ces[9] = { 0x112D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_463)
{
    // 1D148 0062;	
    // (ùÖà) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP WHITE	[112D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D148, 0x0062 };
    uint32_t const ces[9] = { 0x112D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_464)
{
    // 1D149 0021;	
    // (ùÖâ) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP BLACK	[112E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D149, 0x0021 };
    uint32_t const ces[9] = { 0x112E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_465)
{
    // 1D149 003F;	
    // (ùÖâ) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP BLACK	[112E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D149, 0x003F };
    uint32_t const ces[9] = { 0x112E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_466)
{
    // 1D149 0061;	
    // (ùÖâ) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP BLACK	[112E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D149, 0x0061 };
    uint32_t const ces[9] = { 0x112E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_467)
{
    // 1D149 0041;	
    // (ùÖâ) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP BLACK	[112E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D149, 0x0041 };
    uint32_t const ces[9] = { 0x112E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_468)
{
    // 1D149 0062;	
    // (ùÖâ) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP BLACK	[112E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D149, 0x0062 };
    uint32_t const ces[9] = { 0x112E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_469)
{
    // 1D14A 0021;	
    // (ùÖä) MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT WHITE	[112F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14A, 0x0021 };
    uint32_t const ces[9] = { 0x112F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_470)
{
    // 1D14A 003F;	
    // (ùÖä) MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT WHITE	[112F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14A, 0x003F };
    uint32_t const ces[9] = { 0x112F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_471)
{
    // 1D14A 0061;	
    // (ùÖä) MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT WHITE	[112F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14A, 0x0061 };
    uint32_t const ces[9] = { 0x112F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_472)
{
    // 1D14A 0041;	
    // (ùÖä) MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT WHITE	[112F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D14A, 0x0041 };
    uint32_t const ces[9] = { 0x112F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_473)
{
    // 1D14A 0062;	
    // (ùÖä) MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT WHITE	[112F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14A, 0x0062 };
    uint32_t const ces[9] = { 0x112F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_474)
{
    // 1D14B 0021;	
    // (ùÖã) MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT BLACK	[1130 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14B, 0x0021 };
    uint32_t const ces[9] = { 0x1130, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_475)
{
    // 1D14B 003F;	
    // (ùÖã) MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT BLACK	[1130 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14B, 0x003F };
    uint32_t const ces[9] = { 0x1130, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_476)
{
    // 1D14B 0061;	
    // (ùÖã) MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT BLACK	[1130 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14B, 0x0061 };
    uint32_t const ces[9] = { 0x1130, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_477)
{
    // 1D14B 0041;	
    // (ùÖã) MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT BLACK	[1130 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D14B, 0x0041 };
    uint32_t const ces[9] = { 0x1130, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_478)
{
    // 1D14B 0062;	
    // (ùÖã) MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT BLACK	[1130 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14B, 0x0062 };
    uint32_t const ces[9] = { 0x1130, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_479)
{
    // 1D14C 0021;	
    // (ùÖå) MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT WHITE	[1131 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14C, 0x0021 };
    uint32_t const ces[9] = { 0x1131, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_480)
{
    // 1D14C 003F;	
    // (ùÖå) MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT WHITE	[1131 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14C, 0x003F };
    uint32_t const ces[9] = { 0x1131, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_481)
{
    // 1D14C 0061;	
    // (ùÖå) MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT WHITE	[1131 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14C, 0x0061 };
    uint32_t const ces[9] = { 0x1131, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_482)
{
    // 1D14C 0041;	
    // (ùÖå) MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT WHITE	[1131 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D14C, 0x0041 };
    uint32_t const ces[9] = { 0x1131, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_483)
{
    // 1D14C 0062;	
    // (ùÖå) MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT WHITE	[1131 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14C, 0x0062 };
    uint32_t const ces[9] = { 0x1131, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_484)
{
    // 1D14D 0021;	
    // (ùÖç) MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT BLACK	[1132 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14D, 0x0021 };
    uint32_t const ces[9] = { 0x1132, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_485)
{
    // 1D14D 003F;	
    // (ùÖç) MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT BLACK	[1132 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14D, 0x003F };
    uint32_t const ces[9] = { 0x1132, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_486)
{
    // 1D14D 0061;	
    // (ùÖç) MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT BLACK	[1132 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14D, 0x0061 };
    uint32_t const ces[9] = { 0x1132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_487)
{
    // 1D14D 0041;	
    // (ùÖç) MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT BLACK	[1132 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D14D, 0x0041 };
    uint32_t const ces[9] = { 0x1132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_488)
{
    // 1D14D 0062;	
    // (ùÖç) MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT BLACK	[1132 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14D, 0x0062 };
    uint32_t const ces[9] = { 0x1132, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_489)
{
    // 1D14E 0021;	
    // (ùÖé) MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN WHITE	[1133 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14E, 0x0021 };
    uint32_t const ces[9] = { 0x1133, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_490)
{
    // 1D14E 003F;	
    // (ùÖé) MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN WHITE	[1133 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14E, 0x003F };
    uint32_t const ces[9] = { 0x1133, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_491)
{
    // 1D14E 0061;	
    // (ùÖé) MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN WHITE	[1133 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14E, 0x0061 };
    uint32_t const ces[9] = { 0x1133, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_492)
{
    // 1D14E 0041;	
    // (ùÖé) MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN WHITE	[1133 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D14E, 0x0041 };
    uint32_t const ces[9] = { 0x1133, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_493)
{
    // 1D14E 0062;	
    // (ùÖé) MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN WHITE	[1133 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14E, 0x0062 };
    uint32_t const ces[9] = { 0x1133, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_494)
{
    // 1D14F 0021;	
    // (ùÖè) MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN BLACK	[1134 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14F, 0x0021 };
    uint32_t const ces[9] = { 0x1134, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_495)
{
    // 1D14F 003F;	
    // (ùÖè) MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN BLACK	[1134 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14F, 0x003F };
    uint32_t const ces[9] = { 0x1134, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_496)
{
    // 1D14F 0061;	
    // (ùÖè) MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN BLACK	[1134 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14F, 0x0061 };
    uint32_t const ces[9] = { 0x1134, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_497)
{
    // 1D14F 0041;	
    // (ùÖè) MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN BLACK	[1134 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D14F, 0x0041 };
    uint32_t const ces[9] = { 0x1134, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_498)
{
    // 1D14F 0062;	
    // (ùÖè) MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN BLACK	[1134 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D14F, 0x0062 };
    uint32_t const ces[9] = { 0x1134, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_050_499)
{
    // 1D150 0021;	
    // (ùÖê) MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT WHITE	[1135 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D150, 0x0021 };
    uint32_t const ces[9] = { 0x1135, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

