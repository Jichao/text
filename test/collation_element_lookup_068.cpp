// Warning! This file is autogenerated.
#include <boost/text/detail/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_068_000)
{
    // 29B5  ; [*0B9F.0020.0002] 
    // CIRCLE WITH HORIZONTAL BAR

    uint32_t const cps[1] = { 0x29b5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xb9f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_001)
{
    // 29B6  ; [*0BA0.0020.0002] 
    // CIRCLED VERTICAL BAR

    uint32_t const cps[1] = { 0x29b6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xba0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_002)
{
    // 29B7  ; [*0BA1.0020.0002] 
    // CIRCLED PARALLEL

    uint32_t const cps[1] = { 0x29b7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xba1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_003)
{
    // 29B8  ; [*0BA2.0020.0002] 
    // CIRCLED REVERSE SOLIDUS

    uint32_t const cps[1] = { 0x29b8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xba2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_004)
{
    // 29B9  ; [*0BA3.0020.0002] 
    // CIRCLED PERPENDICULAR

    uint32_t const cps[1] = { 0x29b9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xba3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_005)
{
    // 29BA  ; [*0BA4.0020.0002] 
    // CIRCLE DIVIDED BY HORIZONTAL BAR AND TOP HALF DIVIDED BY VERTICAL BAR

    uint32_t const cps[1] = { 0x29ba };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xba4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_006)
{
    // 29BB  ; [*0BA5.0020.0002] 
    // CIRCLE WITH SUPERIMPOSED X

    uint32_t const cps[1] = { 0x29bb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xba5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_007)
{
    // 29BC  ; [*0BA6.0020.0002] 
    // CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN

    uint32_t const cps[1] = { 0x29bc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xba6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_008)
{
    // 29BD  ; [*0BA7.0020.0002] 
    // UP ARROW THROUGH CIRCLE

    uint32_t const cps[1] = { 0x29bd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xba7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_009)
{
    // 29BE  ; [*0BA8.0020.0002] 
    // CIRCLED WHITE BULLET

    uint32_t const cps[1] = { 0x29be };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xba8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_010)
{
    // 29BF  ; [*0BA9.0020.0002] 
    // CIRCLED BULLET

    uint32_t const cps[1] = { 0x29bf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xba9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_011)
{
    // 29C0  ; [*0BAA.0020.0002] 
    // CIRCLED LESS-THAN

    uint32_t const cps[1] = { 0x29c0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbaa), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_012)
{
    // 29C1  ; [*0BAB.0020.0002] 
    // CIRCLED GREATER-THAN

    uint32_t const cps[1] = { 0x29c1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbab), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_013)
{
    // 29C2  ; [*0BAC.0020.0002] 
    // CIRCLE WITH SMALL CIRCLE TO THE RIGHT

    uint32_t const cps[1] = { 0x29c2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbac), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_014)
{
    // 29C3  ; [*0BAD.0020.0002] 
    // CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT

    uint32_t const cps[1] = { 0x29c3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbad), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_015)
{
    // 29C4  ; [*0BAE.0020.0002] 
    // SQUARED RISING DIAGONAL SLASH

    uint32_t const cps[1] = { 0x29c4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbae), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_016)
{
    // 29C5  ; [*0BAF.0020.0002] 
    // SQUARED FALLING DIAGONAL SLASH

    uint32_t const cps[1] = { 0x29c5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbaf), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_017)
{
    // 29C6  ; [*0BB0.0020.0002] 
    // SQUARED ASTERISK

    uint32_t const cps[1] = { 0x29c6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbb0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_018)
{
    // 29C7  ; [*0BB1.0020.0002] 
    // SQUARED SMALL CIRCLE

    uint32_t const cps[1] = { 0x29c7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbb1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_019)
{
    // 29C8  ; [*0BB2.0020.0002] 
    // SQUARED SQUARE

    uint32_t const cps[1] = { 0x29c8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbb2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_020)
{
    // 29C9  ; [*0BB3.0020.0002] 
    // TWO JOINED SQUARES

    uint32_t const cps[1] = { 0x29c9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbb3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_021)
{
    // 29CA  ; [*0BB4.0020.0002] 
    // TRIANGLE WITH DOT ABOVE

    uint32_t const cps[1] = { 0x29ca };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbb4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_022)
{
    // 29CB  ; [*0BB5.0020.0002] 
    // TRIANGLE WITH UNDERBAR

    uint32_t const cps[1] = { 0x29cb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbb5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_023)
{
    // 29CC  ; [*0BB6.0020.0002] 
    // S IN TRIANGLE

    uint32_t const cps[1] = { 0x29cc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbb6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_024)
{
    // 29CD  ; [*0BB7.0020.0002] 
    // TRIANGLE WITH SERIFS AT BOTTOM

    uint32_t const cps[1] = { 0x29cd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbb7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_025)
{
    // 29CE  ; [*0BB8.0020.0002] 
    // RIGHT TRIANGLE ABOVE LEFT TRIANGLE

    uint32_t const cps[1] = { 0x29ce };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbb8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_026)
{
    // 29CF  ; [*0BB9.0020.0002] 
    // LEFT TRIANGLE BESIDE VERTICAL BAR

    uint32_t const cps[1] = { 0x29cf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbb9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_027)
{
    // 29D0  ; [*0BBA.0020.0002] 
    // VERTICAL BAR BESIDE RIGHT TRIANGLE

    uint32_t const cps[1] = { 0x29d0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbba), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_028)
{
    // 29D1  ; [*0BBB.0020.0002] 
    // BOWTIE WITH LEFT HALF BLACK

    uint32_t const cps[1] = { 0x29d1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbbb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_029)
{
    // 29D2  ; [*0BBC.0020.0002] 
    // BOWTIE WITH RIGHT HALF BLACK

    uint32_t const cps[1] = { 0x29d2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbbc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_030)
{
    // 29D3  ; [*0BBD.0020.0002] 
    // BLACK BOWTIE

    uint32_t const cps[1] = { 0x29d3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbbd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_031)
{
    // 29D4  ; [*0BBE.0020.0002] 
    // TIMES WITH LEFT HALF BLACK

    uint32_t const cps[1] = { 0x29d4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbbe), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_032)
{
    // 29D5  ; [*0BBF.0020.0002] 
    // TIMES WITH RIGHT HALF BLACK

    uint32_t const cps[1] = { 0x29d5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbbf), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_033)
{
    // 29D6  ; [*0BC0.0020.0002] 
    // WHITE HOURGLASS

    uint32_t const cps[1] = { 0x29d6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbc0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_034)
{
    // 29D7  ; [*0BC1.0020.0002] 
    // BLACK HOURGLASS

    uint32_t const cps[1] = { 0x29d7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbc1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_035)
{
    // 29D8  ; [*0386.0020.0002] 
    // LEFT WIGGLY FENCE

    uint32_t const cps[1] = { 0x29d8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x386), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_036)
{
    // 29D9  ; [*0387.0020.0002] 
    // RIGHT WIGGLY FENCE

    uint32_t const cps[1] = { 0x29d9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x387), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_037)
{
    // 29DA  ; [*0388.0020.0002] 
    // LEFT DOUBLE WIGGLY FENCE

    uint32_t const cps[1] = { 0x29da };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x388), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_038)
{
    // 29DB  ; [*0389.0020.0002] 
    // RIGHT DOUBLE WIGGLY FENCE

    uint32_t const cps[1] = { 0x29db };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x389), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_039)
{
    // 29DC  ; [*0BC2.0020.0002] 
    // INCOMPLETE INFINITY

    uint32_t const cps[1] = { 0x29dc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbc2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_040)
{
    // 29DD  ; [*0BC3.0020.0002] 
    // TIE OVER INFINITY

    uint32_t const cps[1] = { 0x29dd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbc3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_041)
{
    // 29DE  ; [*0BC4.0020.0002] 
    // INFINITY NEGATED WITH VERTICAL BAR

    uint32_t const cps[1] = { 0x29de };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbc4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_042)
{
    // 29DF  ; [*0BC5.0020.0002] 
    // DOUBLE-ENDED MULTIMAP

    uint32_t const cps[1] = { 0x29df };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbc5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_043)
{
    // 29E0  ; [*0BC6.0020.0002] 
    // SQUARE WITH CONTOURED OUTLINE

    uint32_t const cps[1] = { 0x29e0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbc6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_044)
{
    // 29E1  ; [*0BC7.0020.0002] 
    // INCREASES AS

    uint32_t const cps[1] = { 0x29e1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbc7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_045)
{
    // 29E2  ; [*0BC8.0020.0002] 
    // SHUFFLE PRODUCT

    uint32_t const cps[1] = { 0x29e2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbc8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_046)
{
    // 29E3  ; [*0BC9.0020.0002] 
    // EQUALS SIGN AND SLANTED PARALLEL

    uint32_t const cps[1] = { 0x29e3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbc9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_047)
{
    // 29E4  ; [*0BCA.0020.0002] 
    // EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE

    uint32_t const cps[1] = { 0x29e4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbca), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_048)
{
    // 29E5  ; [*0BCB.0020.0002] 
    // IDENTICAL TO AND SLANTED PARALLEL

    uint32_t const cps[1] = { 0x29e5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbcb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_049)
{
    // 29E6  ; [*0BCC.0020.0002] 
    // GLEICH STARK

    uint32_t const cps[1] = { 0x29e6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbcc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_050)
{
    // 29E7  ; [*0BCD.0020.0002] 
    // THERMODYNAMIC

    uint32_t const cps[1] = { 0x29e7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbcd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_051)
{
    // 29E8  ; [*0BCE.0020.0002] 
    // DOWN-POINTING TRIANGLE WITH LEFT HALF BLACK

    uint32_t const cps[1] = { 0x29e8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbce), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_052)
{
    // 29E9  ; [*0BCF.0020.0002] 
    // DOWN-POINTING TRIANGLE WITH RIGHT HALF BLACK

    uint32_t const cps[1] = { 0x29e9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbcf), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_053)
{
    // 29EA  ; [*0BD0.0020.0002] 
    // BLACK DIAMOND WITH DOWN ARROW

    uint32_t const cps[1] = { 0x29ea };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbd0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_054)
{
    // 29EB  ; [*0BD1.0020.0002] 
    // BLACK LOZENGE

    uint32_t const cps[1] = { 0x29eb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbd1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_055)
{
    // 29EC  ; [*0BD2.0020.0002] 
    // WHITE CIRCLE WITH DOWN ARROW

    uint32_t const cps[1] = { 0x29ec };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbd2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_056)
{
    // 29ED  ; [*0BD3.0020.0002] 
    // BLACK CIRCLE WITH DOWN ARROW

    uint32_t const cps[1] = { 0x29ed };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbd3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_057)
{
    // 29EE  ; [*0BD4.0020.0002] 
    // ERROR-BARRED WHITE SQUARE

    uint32_t const cps[1] = { 0x29ee };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbd4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_058)
{
    // 29EF  ; [*0BD5.0020.0002] 
    // ERROR-BARRED BLACK SQUARE

    uint32_t const cps[1] = { 0x29ef };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbd5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_059)
{
    // 29F0  ; [*0BD6.0020.0002] 
    // ERROR-BARRED WHITE DIAMOND

    uint32_t const cps[1] = { 0x29f0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbd6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_060)
{
    // 29F1  ; [*0BD7.0020.0002] 
    // ERROR-BARRED BLACK DIAMOND

    uint32_t const cps[1] = { 0x29f1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbd7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_061)
{
    // 29F2  ; [*0BD8.0020.0002] 
    // ERROR-BARRED WHITE CIRCLE

    uint32_t const cps[1] = { 0x29f2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbd8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_062)
{
    // 29F3  ; [*0BD9.0020.0002] 
    // ERROR-BARRED BLACK CIRCLE

    uint32_t const cps[1] = { 0x29f3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbd9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_063)
{
    // 29F4  ; [*0BDA.0020.0002] 
    // RULE-DELAYED

    uint32_t const cps[1] = { 0x29f4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbda), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_064)
{
    // 29F5  ; [*0BDB.0020.0002] 
    // REVERSE SOLIDUS OPERATOR

    uint32_t const cps[1] = { 0x29f5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbdb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_065)
{
    // 29F6  ; [*0BDC.0020.0002] 
    // SOLIDUS WITH OVERBAR

    uint32_t const cps[1] = { 0x29f6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbdc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_066)
{
    // 29F7  ; [*0BDD.0020.0002] 
    // REVERSE SOLIDUS WITH HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x29f7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbdd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_067)
{
    // 29F8  ; [*0BDE.0020.0002] 
    // BIG SOLIDUS

    uint32_t const cps[1] = { 0x29f8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbde), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_068)
{
    // 29F9  ; [*0BDF.0020.0002] 
    // BIG REVERSE SOLIDUS

    uint32_t const cps[1] = { 0x29f9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbdf), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_069)
{
    // 29FA  ; [*0BE0.0020.0002] 
    // DOUBLE PLUS

    uint32_t const cps[1] = { 0x29fa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbe0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_070)
{
    // 29FB  ; [*0BE1.0020.0002] 
    // TRIPLE PLUS

    uint32_t const cps[1] = { 0x29fb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbe1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_071)
{
    // 29FC  ; [*032A.0020.0002] 
    // LEFT-POINTING CURVED ANGLE BRACKET

    uint32_t const cps[1] = { 0x29fc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x32a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_072)
{
    // 29FD  ; [*032B.0020.0002] 
    // RIGHT-POINTING CURVED ANGLE BRACKET

    uint32_t const cps[1] = { 0x29fd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x32b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_073)
{
    // 29FE  ; [*0BE2.0020.0002] 
    // TINY

    uint32_t const cps[1] = { 0x29fe };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbe2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_074)
{
    // 29FF  ; [*0BE3.0020.0002] 
    // MINY

    uint32_t const cps[1] = { 0x29ff };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbe3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_075)
{
    // 2A00  ; [*0BE4.0020.0002] 
    // N-ARY CIRCLED DOT OPERATOR

    uint32_t const cps[1] = { 0x2a00 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbe4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_076)
{
    // 2A01  ; [*0BE5.0020.0002] 
    // N-ARY CIRCLED PLUS OPERATOR

    uint32_t const cps[1] = { 0x2a01 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbe5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_077)
{
    // 2A02  ; [*0BE6.0020.0002] 
    // N-ARY CIRCLED TIMES OPERATOR

    uint32_t const cps[1] = { 0x2a02 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbe6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_078)
{
    // 2A03  ; [*0BE7.0020.0002] 
    // N-ARY UNION OPERATOR WITH DOT

    uint32_t const cps[1] = { 0x2a03 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbe7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_079)
{
    // 2A04  ; [*0BE8.0020.0002] 
    // N-ARY UNION OPERATOR WITH PLUS

    uint32_t const cps[1] = { 0x2a04 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbe8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_080)
{
    // 2A05  ; [*0BE9.0020.0002] 
    // N-ARY SQUARE INTERSECTION OPERATOR

    uint32_t const cps[1] = { 0x2a05 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbe9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_081)
{
    // 2A06  ; [*0BEA.0020.0002] 
    // N-ARY SQUARE UNION OPERATOR

    uint32_t const cps[1] = { 0x2a06 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbea), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_082)
{
    // 2A07  ; [*0BEB.0020.0002] 
    // TWO LOGICAL AND OPERATOR

    uint32_t const cps[1] = { 0x2a07 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbeb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_083)
{
    // 2A08  ; [*0BEC.0020.0002] 
    // TWO LOGICAL OR OPERATOR

    uint32_t const cps[1] = { 0x2a08 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbec), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_084)
{
    // 2A09  ; [*0BED.0020.0002] 
    // N-ARY TIMES OPERATOR

    uint32_t const cps[1] = { 0x2a09 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbed), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_085)
{
    // 2A0A  ; [*0BEE.0020.0002] 
    // MODULO TWO SUM

    uint32_t const cps[1] = { 0x2a0a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbee), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_086)
{
    // 2A0B  ; [*0BEF.0020.0002] 
    // SUMMATION WITH INTEGRAL

    uint32_t const cps[1] = { 0x2a0b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbef), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_087)
{
    // 2A0C  ; [*0652.0020.0004][*0652.0020.0004][*0652.0020.0004][*0652.0020.0004] 
    // QUADRUPLE INTEGRAL OPERATOR

    uint32_t const cps[1] = { 0x2a0c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x652), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x652), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x652), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x652), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_068_088)
{
    // 2A0D  ; [*0BF0.0020.0002] 
    // FINITE PART INTEGRAL

    uint32_t const cps[1] = { 0x2a0d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbf0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_089)
{
    // 2A0E  ; [*0BF1.0020.0002] 
    // INTEGRAL WITH DOUBLE STROKE

    uint32_t const cps[1] = { 0x2a0e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbf1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_090)
{
    // 2A0F  ; [*0BF2.0020.0002] 
    // INTEGRAL AVERAGE WITH SLASH

    uint32_t const cps[1] = { 0x2a0f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbf2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_091)
{
    // 2A10  ; [*0BF3.0020.0002] 
    // CIRCULATION FUNCTION

    uint32_t const cps[1] = { 0x2a10 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbf3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_092)
{
    // 2A11  ; [*0BF4.0020.0002] 
    // ANTICLOCKWISE INTEGRATION

    uint32_t const cps[1] = { 0x2a11 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbf4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_093)
{
    // 2A12  ; [*0BF5.0020.0002] 
    // LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE

    uint32_t const cps[1] = { 0x2a12 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbf5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_094)
{
    // 2A13  ; [*0BF6.0020.0002] 
    // LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE

    uint32_t const cps[1] = { 0x2a13 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbf6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_095)
{
    // 2A14  ; [*0BF7.0020.0002] 
    // LINE INTEGRATION NOT INCLUDING THE POLE

    uint32_t const cps[1] = { 0x2a14 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbf7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_096)
{
    // 2A15  ; [*0BF8.0020.0002] 
    // INTEGRAL AROUND A POINT OPERATOR

    uint32_t const cps[1] = { 0x2a15 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbf8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_097)
{
    // 2A16  ; [*0BF9.0020.0002] 
    // QUATERNION INTEGRAL OPERATOR

    uint32_t const cps[1] = { 0x2a16 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbf9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_098)
{
    // 2A17  ; [*0BFA.0020.0002] 
    // INTEGRAL WITH LEFTWARDS ARROW WITH HOOK

    uint32_t const cps[1] = { 0x2a17 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbfa), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_099)
{
    // 2A18  ; [*0BFB.0020.0002] 
    // INTEGRAL WITH TIMES SIGN

    uint32_t const cps[1] = { 0x2a18 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbfb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_100)
{
    // 2A19  ; [*0BFC.0020.0002] 
    // INTEGRAL WITH INTERSECTION

    uint32_t const cps[1] = { 0x2a19 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbfc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_101)
{
    // 2A1A  ; [*0BFD.0020.0002] 
    // INTEGRAL WITH UNION

    uint32_t const cps[1] = { 0x2a1a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbfd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_102)
{
    // 2A1B  ; [*0BFE.0020.0002] 
    // INTEGRAL WITH OVERBAR

    uint32_t const cps[1] = { 0x2a1b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbfe), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_103)
{
    // 2A1C  ; [*0BFF.0020.0002] 
    // INTEGRAL WITH UNDERBAR

    uint32_t const cps[1] = { 0x2a1c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xbff), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_104)
{
    // 2A1D  ; [*0C00.0020.0002] 
    // JOIN

    uint32_t const cps[1] = { 0x2a1d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc00), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_105)
{
    // 2A1E  ; [*0C01.0020.0002] 
    // LARGE LEFT TRIANGLE OPERATOR

    uint32_t const cps[1] = { 0x2a1e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc01), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_106)
{
    // 2A1F  ; [*0C02.0020.0002] 
    // Z NOTATION SCHEMA COMPOSITION

    uint32_t const cps[1] = { 0x2a1f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc02), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_107)
{
    // 2A20  ; [*0C03.0020.0002] 
    // Z NOTATION SCHEMA PIPING

    uint32_t const cps[1] = { 0x2a20 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc03), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_108)
{
    // 2A21  ; [*0C04.0020.0002] 
    // Z NOTATION SCHEMA PROJECTION

    uint32_t const cps[1] = { 0x2a21 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc04), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_109)
{
    // 2A22  ; [*0C05.0020.0002] 
    // PLUS SIGN WITH SMALL CIRCLE ABOVE

    uint32_t const cps[1] = { 0x2a22 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc05), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_110)
{
    // 2A23  ; [*0C06.0020.0002] 
    // PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE

    uint32_t const cps[1] = { 0x2a23 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc06), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_111)
{
    // 2A24  ; [*0C07.0020.0002] 
    // PLUS SIGN WITH TILDE ABOVE

    uint32_t const cps[1] = { 0x2a24 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc07), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_112)
{
    // 2A25  ; [*0C08.0020.0002] 
    // PLUS SIGN WITH DOT BELOW

    uint32_t const cps[1] = { 0x2a25 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc08), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_113)
{
    // 2A26  ; [*0C09.0020.0002] 
    // PLUS SIGN WITH TILDE BELOW

    uint32_t const cps[1] = { 0x2a26 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc09), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_114)
{
    // 2A27  ; [*0C0A.0020.0002] 
    // PLUS SIGN WITH SUBSCRIPT TWO

    uint32_t const cps[1] = { 0x2a27 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc0a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_115)
{
    // 2A28  ; [*0C0B.0020.0002] 
    // PLUS SIGN WITH BLACK TRIANGLE

    uint32_t const cps[1] = { 0x2a28 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc0b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_116)
{
    // 2A29  ; [*0C0C.0020.0002] 
    // MINUS SIGN WITH COMMA ABOVE

    uint32_t const cps[1] = { 0x2a29 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc0c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_117)
{
    // 2A2A  ; [*0C0D.0020.0002] 
    // MINUS SIGN WITH DOT BELOW

    uint32_t const cps[1] = { 0x2a2a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc0d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_118)
{
    // 2A2B  ; [*0C0E.0020.0002] 
    // MINUS SIGN WITH FALLING DOTS

    uint32_t const cps[1] = { 0x2a2b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc0e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_119)
{
    // 2A2C  ; [*0C0F.0020.0002] 
    // MINUS SIGN WITH RISING DOTS

    uint32_t const cps[1] = { 0x2a2c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc0f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_120)
{
    // 2A2D  ; [*0C10.0020.0002] 
    // PLUS SIGN IN LEFT HALF CIRCLE

    uint32_t const cps[1] = { 0x2a2d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc10), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_121)
{
    // 2A2E  ; [*0C11.0020.0002] 
    // PLUS SIGN IN RIGHT HALF CIRCLE

    uint32_t const cps[1] = { 0x2a2e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc11), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_122)
{
    // 2A2F  ; [*0C12.0020.0002] 
    // VECTOR OR CROSS PRODUCT

    uint32_t const cps[1] = { 0x2a2f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc12), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_123)
{
    // 2A30  ; [*0C13.0020.0002] 
    // MULTIPLICATION SIGN WITH DOT ABOVE

    uint32_t const cps[1] = { 0x2a30 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc13), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_124)
{
    // 2A31  ; [*0C14.0020.0002] 
    // MULTIPLICATION SIGN WITH UNDERBAR

    uint32_t const cps[1] = { 0x2a31 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc14), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_125)
{
    // 2A32  ; [*0C15.0020.0002] 
    // SEMIDIRECT PRODUCT WITH BOTTOM CLOSED

    uint32_t const cps[1] = { 0x2a32 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc15), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_126)
{
    // 2A33  ; [*0C16.0020.0002] 
    // SMASH PRODUCT

    uint32_t const cps[1] = { 0x2a33 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc16), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_127)
{
    // 2A34  ; [*0C17.0020.0002] 
    // MULTIPLICATION SIGN IN LEFT HALF CIRCLE

    uint32_t const cps[1] = { 0x2a34 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc17), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_128)
{
    // 2A35  ; [*0C18.0020.0002] 
    // MULTIPLICATION SIGN IN RIGHT HALF CIRCLE

    uint32_t const cps[1] = { 0x2a35 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc18), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_129)
{
    // 2A36  ; [*0C19.0020.0002] 
    // CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT

    uint32_t const cps[1] = { 0x2a36 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc19), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_130)
{
    // 2A37  ; [*0C1A.0020.0002] 
    // MULTIPLICATION SIGN IN DOUBLE CIRCLE

    uint32_t const cps[1] = { 0x2a37 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc1a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_131)
{
    // 2A38  ; [*0C1B.0020.0002] 
    // CIRCLED DIVISION SIGN

    uint32_t const cps[1] = { 0x2a38 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc1b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_132)
{
    // 2A39  ; [*0C1C.0020.0002] 
    // PLUS SIGN IN TRIANGLE

    uint32_t const cps[1] = { 0x2a39 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc1c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_133)
{
    // 2A3A  ; [*0C1D.0020.0002] 
    // MINUS SIGN IN TRIANGLE

    uint32_t const cps[1] = { 0x2a3a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc1d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_134)
{
    // 2A3B  ; [*0C1E.0020.0002] 
    // MULTIPLICATION SIGN IN TRIANGLE

    uint32_t const cps[1] = { 0x2a3b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc1e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_135)
{
    // 2A3C  ; [*0C1F.0020.0002] 
    // INTERIOR PRODUCT

    uint32_t const cps[1] = { 0x2a3c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc1f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_136)
{
    // 2A3D  ; [*0C20.0020.0002] 
    // RIGHTHAND INTERIOR PRODUCT

    uint32_t const cps[1] = { 0x2a3d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc20), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_137)
{
    // 2A3E  ; [*0C21.0020.0002] 
    // Z NOTATION RELATIONAL COMPOSITION

    uint32_t const cps[1] = { 0x2a3e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc21), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_138)
{
    // 2A3F  ; [*0C22.0020.0002] 
    // AMALGAMATION OR COPRODUCT

    uint32_t const cps[1] = { 0x2a3f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc22), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_139)
{
    // 2A40  ; [*0C23.0020.0002] 
    // INTERSECTION WITH DOT

    uint32_t const cps[1] = { 0x2a40 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc23), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_140)
{
    // 2A41  ; [*0C24.0020.0002] 
    // UNION WITH MINUS SIGN

    uint32_t const cps[1] = { 0x2a41 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc24), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_141)
{
    // 2A42  ; [*0C25.0020.0002] 
    // UNION WITH OVERBAR

    uint32_t const cps[1] = { 0x2a42 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc25), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_142)
{
    // 2A43  ; [*0C26.0020.0002] 
    // INTERSECTION WITH OVERBAR

    uint32_t const cps[1] = { 0x2a43 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc26), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_143)
{
    // 2A44  ; [*0C27.0020.0002] 
    // INTERSECTION WITH LOGICAL AND

    uint32_t const cps[1] = { 0x2a44 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc27), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_144)
{
    // 2A45  ; [*0C28.0020.0002] 
    // UNION WITH LOGICAL OR

    uint32_t const cps[1] = { 0x2a45 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc28), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_145)
{
    // 2A46  ; [*0C29.0020.0002] 
    // UNION ABOVE INTERSECTION

    uint32_t const cps[1] = { 0x2a46 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc29), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_146)
{
    // 2A47  ; [*0C2A.0020.0002] 
    // INTERSECTION ABOVE UNION

    uint32_t const cps[1] = { 0x2a47 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc2a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_147)
{
    // 2A48  ; [*0C2B.0020.0002] 
    // UNION ABOVE BAR ABOVE INTERSECTION

    uint32_t const cps[1] = { 0x2a48 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc2b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_148)
{
    // 2A49  ; [*0C2C.0020.0002] 
    // INTERSECTION ABOVE BAR ABOVE UNION

    uint32_t const cps[1] = { 0x2a49 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc2c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_068_149)
{
    // 2A4A  ; [*0C2D.0020.0002] 
    // UNION BESIDE AND JOINED WITH UNION

    uint32_t const cps[1] = { 0x2a4a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0xc2d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

