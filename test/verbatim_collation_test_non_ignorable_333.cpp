// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_333_000)
{
    // 366E 003F;	
    // (㙮) CJK UNIFIED IDEOGRAPH-366E	[FB80 B66E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB66E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_001)
{
    // 366E 0061;	
    // (㙮) CJK UNIFIED IDEOGRAPH-366E	[FB80 B66E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB66E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_002)
{
    // 366E 0041;	
    // (㙮) CJK UNIFIED IDEOGRAPH-366E	[FB80 B66E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x366E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB66E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_003)
{
    // 366E 0062;	
    // (㙮) CJK UNIFIED IDEOGRAPH-366E	[FB80 B66E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB66E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_004)
{
    // 366F 0021;	
    // (㙯) CJK UNIFIED IDEOGRAPH-366F	[FB80 B66F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB66F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_005)
{
    // 366F 003F;	
    // (㙯) CJK UNIFIED IDEOGRAPH-366F	[FB80 B66F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB66F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_006)
{
    // 366F 0061;	
    // (㙯) CJK UNIFIED IDEOGRAPH-366F	[FB80 B66F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB66F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_007)
{
    // 366F 0041;	
    // (㙯) CJK UNIFIED IDEOGRAPH-366F	[FB80 B66F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x366F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB66F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_008)
{
    // 366F 0062;	
    // (㙯) CJK UNIFIED IDEOGRAPH-366F	[FB80 B66F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x366F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB66F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_009)
{
    // 3670 0021;	
    // (㙰) CJK UNIFIED IDEOGRAPH-3670	[FB80 B670 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3670, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB670, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_010)
{
    // 3670 003F;	
    // (㙰) CJK UNIFIED IDEOGRAPH-3670	[FB80 B670 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3670, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB670, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_011)
{
    // 3670 0061;	
    // (㙰) CJK UNIFIED IDEOGRAPH-3670	[FB80 B670 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3670, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_012)
{
    // 3670 0041;	
    // (㙰) CJK UNIFIED IDEOGRAPH-3670	[FB80 B670 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3670, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_013)
{
    // 3670 0062;	
    // (㙰) CJK UNIFIED IDEOGRAPH-3670	[FB80 B670 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3670, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB670, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_014)
{
    // 3671 0021;	
    // (㙱) CJK UNIFIED IDEOGRAPH-3671	[FB80 B671 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3671, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB671, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_015)
{
    // 3671 003F;	
    // (㙱) CJK UNIFIED IDEOGRAPH-3671	[FB80 B671 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3671, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB671, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_016)
{
    // 3671 0061;	
    // (㙱) CJK UNIFIED IDEOGRAPH-3671	[FB80 B671 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3671, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_017)
{
    // 3671 0041;	
    // (㙱) CJK UNIFIED IDEOGRAPH-3671	[FB80 B671 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3671, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_018)
{
    // 3671 0062;	
    // (㙱) CJK UNIFIED IDEOGRAPH-3671	[FB80 B671 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3671, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB671, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_019)
{
    // 3672 0021;	
    // (㙲) CJK UNIFIED IDEOGRAPH-3672	[FB80 B672 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3672, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB672, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_020)
{
    // 3672 003F;	
    // (㙲) CJK UNIFIED IDEOGRAPH-3672	[FB80 B672 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3672, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB672, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_021)
{
    // 3672 0061;	
    // (㙲) CJK UNIFIED IDEOGRAPH-3672	[FB80 B672 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3672, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_022)
{
    // 3672 0041;	
    // (㙲) CJK UNIFIED IDEOGRAPH-3672	[FB80 B672 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3672, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_023)
{
    // 3672 0062;	
    // (㙲) CJK UNIFIED IDEOGRAPH-3672	[FB80 B672 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3672, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB672, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_024)
{
    // 3673 0021;	
    // (㙳) CJK UNIFIED IDEOGRAPH-3673	[FB80 B673 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3673, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB673, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_025)
{
    // 3673 003F;	
    // (㙳) CJK UNIFIED IDEOGRAPH-3673	[FB80 B673 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3673, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB673, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_026)
{
    // 3673 0061;	
    // (㙳) CJK UNIFIED IDEOGRAPH-3673	[FB80 B673 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3673, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_027)
{
    // 3673 0041;	
    // (㙳) CJK UNIFIED IDEOGRAPH-3673	[FB80 B673 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3673, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_028)
{
    // 3673 0062;	
    // (㙳) CJK UNIFIED IDEOGRAPH-3673	[FB80 B673 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3673, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB673, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_029)
{
    // 3674 0021;	
    // (㙴) CJK UNIFIED IDEOGRAPH-3674	[FB80 B674 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3674, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB674, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_030)
{
    // 3674 003F;	
    // (㙴) CJK UNIFIED IDEOGRAPH-3674	[FB80 B674 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3674, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB674, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_031)
{
    // 3674 0061;	
    // (㙴) CJK UNIFIED IDEOGRAPH-3674	[FB80 B674 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3674, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_032)
{
    // 3674 0041;	
    // (㙴) CJK UNIFIED IDEOGRAPH-3674	[FB80 B674 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3674, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_033)
{
    // 3674 0062;	
    // (㙴) CJK UNIFIED IDEOGRAPH-3674	[FB80 B674 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3674, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB674, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_034)
{
    // 3675 0021;	
    // (㙵) CJK UNIFIED IDEOGRAPH-3675	[FB80 B675 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3675, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB675, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_035)
{
    // 3675 003F;	
    // (㙵) CJK UNIFIED IDEOGRAPH-3675	[FB80 B675 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3675, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB675, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_036)
{
    // 3675 0061;	
    // (㙵) CJK UNIFIED IDEOGRAPH-3675	[FB80 B675 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3675, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_037)
{
    // 3675 0041;	
    // (㙵) CJK UNIFIED IDEOGRAPH-3675	[FB80 B675 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3675, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_038)
{
    // 3675 0062;	
    // (㙵) CJK UNIFIED IDEOGRAPH-3675	[FB80 B675 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3675, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB675, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_039)
{
    // 3676 0021;	
    // (㙶) CJK UNIFIED IDEOGRAPH-3676	[FB80 B676 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3676, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB676, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_040)
{
    // 3676 003F;	
    // (㙶) CJK UNIFIED IDEOGRAPH-3676	[FB80 B676 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3676, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB676, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_041)
{
    // 3676 0061;	
    // (㙶) CJK UNIFIED IDEOGRAPH-3676	[FB80 B676 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3676, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_042)
{
    // 3676 0041;	
    // (㙶) CJK UNIFIED IDEOGRAPH-3676	[FB80 B676 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3676, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_043)
{
    // 3676 0062;	
    // (㙶) CJK UNIFIED IDEOGRAPH-3676	[FB80 B676 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3676, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB676, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_044)
{
    // 3677 0021;	
    // (㙷) CJK UNIFIED IDEOGRAPH-3677	[FB80 B677 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3677, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB677, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_045)
{
    // 3677 003F;	
    // (㙷) CJK UNIFIED IDEOGRAPH-3677	[FB80 B677 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3677, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB677, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_046)
{
    // 3677 0061;	
    // (㙷) CJK UNIFIED IDEOGRAPH-3677	[FB80 B677 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3677, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_047)
{
    // 3677 0041;	
    // (㙷) CJK UNIFIED IDEOGRAPH-3677	[FB80 B677 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3677, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_048)
{
    // 3677 0062;	
    // (㙷) CJK UNIFIED IDEOGRAPH-3677	[FB80 B677 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3677, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB677, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_049)
{
    // 3678 0021;	
    // (㙸) CJK UNIFIED IDEOGRAPH-3678	[FB80 B678 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3678, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB678, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_050)
{
    // 3678 003F;	
    // (㙸) CJK UNIFIED IDEOGRAPH-3678	[FB80 B678 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3678, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB678, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_051)
{
    // 3678 0061;	
    // (㙸) CJK UNIFIED IDEOGRAPH-3678	[FB80 B678 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3678, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_052)
{
    // 3678 0041;	
    // (㙸) CJK UNIFIED IDEOGRAPH-3678	[FB80 B678 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3678, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_053)
{
    // 3678 0062;	
    // (㙸) CJK UNIFIED IDEOGRAPH-3678	[FB80 B678 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3678, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB678, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_054)
{
    // 3679 0021;	
    // (㙹) CJK UNIFIED IDEOGRAPH-3679	[FB80 B679 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3679, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB679, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_055)
{
    // 3679 003F;	
    // (㙹) CJK UNIFIED IDEOGRAPH-3679	[FB80 B679 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3679, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB679, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_056)
{
    // 3679 0061;	
    // (㙹) CJK UNIFIED IDEOGRAPH-3679	[FB80 B679 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3679, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_057)
{
    // 3679 0041;	
    // (㙹) CJK UNIFIED IDEOGRAPH-3679	[FB80 B679 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3679, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_058)
{
    // 3679 0062;	
    // (㙹) CJK UNIFIED IDEOGRAPH-3679	[FB80 B679 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3679, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB679, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_059)
{
    // 367A 0021;	
    // (㙺) CJK UNIFIED IDEOGRAPH-367A	[FB80 B67A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB67A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_060)
{
    // 367A 003F;	
    // (㙺) CJK UNIFIED IDEOGRAPH-367A	[FB80 B67A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB67A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_061)
{
    // 367A 0061;	
    // (㙺) CJK UNIFIED IDEOGRAPH-367A	[FB80 B67A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB67A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_062)
{
    // 367A 0041;	
    // (㙺) CJK UNIFIED IDEOGRAPH-367A	[FB80 B67A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x367A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB67A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_063)
{
    // 367A 0062;	
    // (㙺) CJK UNIFIED IDEOGRAPH-367A	[FB80 B67A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB67A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_064)
{
    // 367B 0021;	
    // (㙻) CJK UNIFIED IDEOGRAPH-367B	[FB80 B67B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB67B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_065)
{
    // 367B 003F;	
    // (㙻) CJK UNIFIED IDEOGRAPH-367B	[FB80 B67B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB67B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_066)
{
    // 367B 0061;	
    // (㙻) CJK UNIFIED IDEOGRAPH-367B	[FB80 B67B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB67B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_067)
{
    // 367B 0041;	
    // (㙻) CJK UNIFIED IDEOGRAPH-367B	[FB80 B67B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x367B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB67B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_068)
{
    // 367B 0062;	
    // (㙻) CJK UNIFIED IDEOGRAPH-367B	[FB80 B67B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB67B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_069)
{
    // 367C 0021;	
    // (㙼) CJK UNIFIED IDEOGRAPH-367C	[FB80 B67C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB67C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_070)
{
    // 367C 003F;	
    // (㙼) CJK UNIFIED IDEOGRAPH-367C	[FB80 B67C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB67C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_071)
{
    // 367C 0061;	
    // (㙼) CJK UNIFIED IDEOGRAPH-367C	[FB80 B67C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB67C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_072)
{
    // 367C 0041;	
    // (㙼) CJK UNIFIED IDEOGRAPH-367C	[FB80 B67C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x367C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB67C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_073)
{
    // 367C 0062;	
    // (㙼) CJK UNIFIED IDEOGRAPH-367C	[FB80 B67C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB67C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_074)
{
    // 367D 0021;	
    // (㙽) CJK UNIFIED IDEOGRAPH-367D	[FB80 B67D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB67D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_075)
{
    // 367D 003F;	
    // (㙽) CJK UNIFIED IDEOGRAPH-367D	[FB80 B67D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB67D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_076)
{
    // 367D 0061;	
    // (㙽) CJK UNIFIED IDEOGRAPH-367D	[FB80 B67D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB67D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_077)
{
    // 367D 0041;	
    // (㙽) CJK UNIFIED IDEOGRAPH-367D	[FB80 B67D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x367D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB67D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_078)
{
    // 367D 0062;	
    // (㙽) CJK UNIFIED IDEOGRAPH-367D	[FB80 B67D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB67D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_079)
{
    // 367E 0021;	
    // (㙾) CJK UNIFIED IDEOGRAPH-367E	[FB80 B67E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB67E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_080)
{
    // 367E 003F;	
    // (㙾) CJK UNIFIED IDEOGRAPH-367E	[FB80 B67E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB67E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_081)
{
    // 367E 0061;	
    // (㙾) CJK UNIFIED IDEOGRAPH-367E	[FB80 B67E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB67E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_082)
{
    // 367E 0041;	
    // (㙾) CJK UNIFIED IDEOGRAPH-367E	[FB80 B67E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x367E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB67E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_083)
{
    // 367E 0062;	
    // (㙾) CJK UNIFIED IDEOGRAPH-367E	[FB80 B67E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB67E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_084)
{
    // 367F 0021;	
    // (㙿) CJK UNIFIED IDEOGRAPH-367F	[FB80 B67F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB67F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_085)
{
    // 367F 003F;	
    // (㙿) CJK UNIFIED IDEOGRAPH-367F	[FB80 B67F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB67F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_086)
{
    // 367F 0061;	
    // (㙿) CJK UNIFIED IDEOGRAPH-367F	[FB80 B67F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB67F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_087)
{
    // 367F 0041;	
    // (㙿) CJK UNIFIED IDEOGRAPH-367F	[FB80 B67F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x367F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB67F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_088)
{
    // 367F 0062;	
    // (㙿) CJK UNIFIED IDEOGRAPH-367F	[FB80 B67F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x367F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB67F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_089)
{
    // 3680 0021;	
    // (㚀) CJK UNIFIED IDEOGRAPH-3680	[FB80 B680 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3680, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB680, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_090)
{
    // 3680 003F;	
    // (㚀) CJK UNIFIED IDEOGRAPH-3680	[FB80 B680 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3680, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB680, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_091)
{
    // 3680 0061;	
    // (㚀) CJK UNIFIED IDEOGRAPH-3680	[FB80 B680 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3680, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_092)
{
    // 3680 0041;	
    // (㚀) CJK UNIFIED IDEOGRAPH-3680	[FB80 B680 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3680, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_093)
{
    // 3680 0062;	
    // (㚀) CJK UNIFIED IDEOGRAPH-3680	[FB80 B680 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3680, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB680, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_094)
{
    // 3681 0021;	
    // (㚁) CJK UNIFIED IDEOGRAPH-3681	[FB80 B681 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3681, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB681, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_095)
{
    // 3681 003F;	
    // (㚁) CJK UNIFIED IDEOGRAPH-3681	[FB80 B681 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3681, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB681, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_096)
{
    // 3681 0061;	
    // (㚁) CJK UNIFIED IDEOGRAPH-3681	[FB80 B681 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3681, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_097)
{
    // 3681 0041;	
    // (㚁) CJK UNIFIED IDEOGRAPH-3681	[FB80 B681 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3681, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_098)
{
    // 3681 0062;	
    // (㚁) CJK UNIFIED IDEOGRAPH-3681	[FB80 B681 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3681, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB681, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_099)
{
    // 3682 0021;	
    // (㚂) CJK UNIFIED IDEOGRAPH-3682	[FB80 B682 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3682, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB682, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_100)
{
    // 3682 003F;	
    // (㚂) CJK UNIFIED IDEOGRAPH-3682	[FB80 B682 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3682, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB682, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_101)
{
    // 3682 0061;	
    // (㚂) CJK UNIFIED IDEOGRAPH-3682	[FB80 B682 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3682, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_102)
{
    // 3682 0041;	
    // (㚂) CJK UNIFIED IDEOGRAPH-3682	[FB80 B682 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3682, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_103)
{
    // 3682 0062;	
    // (㚂) CJK UNIFIED IDEOGRAPH-3682	[FB80 B682 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3682, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB682, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_104)
{
    // 3683 0021;	
    // (㚃) CJK UNIFIED IDEOGRAPH-3683	[FB80 B683 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3683, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB683, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_105)
{
    // 3683 003F;	
    // (㚃) CJK UNIFIED IDEOGRAPH-3683	[FB80 B683 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3683, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB683, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_106)
{
    // 3683 0061;	
    // (㚃) CJK UNIFIED IDEOGRAPH-3683	[FB80 B683 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3683, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_107)
{
    // 3683 0041;	
    // (㚃) CJK UNIFIED IDEOGRAPH-3683	[FB80 B683 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3683, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_108)
{
    // 3683 0062;	
    // (㚃) CJK UNIFIED IDEOGRAPH-3683	[FB80 B683 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3683, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB683, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_109)
{
    // 3684 0021;	
    // (㚄) CJK UNIFIED IDEOGRAPH-3684	[FB80 B684 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3684, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB684, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_110)
{
    // 3684 003F;	
    // (㚄) CJK UNIFIED IDEOGRAPH-3684	[FB80 B684 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3684, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB684, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_111)
{
    // 3684 0061;	
    // (㚄) CJK UNIFIED IDEOGRAPH-3684	[FB80 B684 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3684, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_112)
{
    // 3684 0041;	
    // (㚄) CJK UNIFIED IDEOGRAPH-3684	[FB80 B684 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3684, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_113)
{
    // 3684 0062;	
    // (㚄) CJK UNIFIED IDEOGRAPH-3684	[FB80 B684 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3684, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB684, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_114)
{
    // 3685 0021;	
    // (㚅) CJK UNIFIED IDEOGRAPH-3685	[FB80 B685 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3685, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB685, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_115)
{
    // 3685 003F;	
    // (㚅) CJK UNIFIED IDEOGRAPH-3685	[FB80 B685 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3685, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB685, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_116)
{
    // 3685 0061;	
    // (㚅) CJK UNIFIED IDEOGRAPH-3685	[FB80 B685 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3685, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_117)
{
    // 3685 0041;	
    // (㚅) CJK UNIFIED IDEOGRAPH-3685	[FB80 B685 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3685, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_118)
{
    // 3685 0062;	
    // (㚅) CJK UNIFIED IDEOGRAPH-3685	[FB80 B685 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3685, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB685, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_119)
{
    // 3686 0021;	
    // (㚆) CJK UNIFIED IDEOGRAPH-3686	[FB80 B686 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3686, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB686, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_120)
{
    // 3686 003F;	
    // (㚆) CJK UNIFIED IDEOGRAPH-3686	[FB80 B686 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3686, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB686, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_121)
{
    // 3686 0061;	
    // (㚆) CJK UNIFIED IDEOGRAPH-3686	[FB80 B686 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3686, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_122)
{
    // 3686 0041;	
    // (㚆) CJK UNIFIED IDEOGRAPH-3686	[FB80 B686 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3686, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_123)
{
    // 3686 0062;	
    // (㚆) CJK UNIFIED IDEOGRAPH-3686	[FB80 B686 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3686, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB686, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_124)
{
    // 3687 0021;	
    // (㚇) CJK UNIFIED IDEOGRAPH-3687	[FB80 B687 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3687, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB687, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_125)
{
    // 3687 003F;	
    // (㚇) CJK UNIFIED IDEOGRAPH-3687	[FB80 B687 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3687, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB687, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_126)
{
    // 3687 0061;	
    // (㚇) CJK UNIFIED IDEOGRAPH-3687	[FB80 B687 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3687, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_127)
{
    // 3687 0041;	
    // (㚇) CJK UNIFIED IDEOGRAPH-3687	[FB80 B687 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3687, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_128)
{
    // 3687 0062;	
    // (㚇) CJK UNIFIED IDEOGRAPH-3687	[FB80 B687 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3687, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB687, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_129)
{
    // 3688 0021;	
    // (㚈) CJK UNIFIED IDEOGRAPH-3688	[FB80 B688 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3688, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB688, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_130)
{
    // 3688 003F;	
    // (㚈) CJK UNIFIED IDEOGRAPH-3688	[FB80 B688 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3688, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB688, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_131)
{
    // 3688 0061;	
    // (㚈) CJK UNIFIED IDEOGRAPH-3688	[FB80 B688 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3688, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_132)
{
    // 3688 0041;	
    // (㚈) CJK UNIFIED IDEOGRAPH-3688	[FB80 B688 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3688, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_133)
{
    // 3688 0062;	
    // (㚈) CJK UNIFIED IDEOGRAPH-3688	[FB80 B688 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3688, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB688, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_134)
{
    // 3689 0021;	
    // (㚉) CJK UNIFIED IDEOGRAPH-3689	[FB80 B689 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3689, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB689, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_135)
{
    // 3689 003F;	
    // (㚉) CJK UNIFIED IDEOGRAPH-3689	[FB80 B689 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3689, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB689, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_136)
{
    // 3689 0061;	
    // (㚉) CJK UNIFIED IDEOGRAPH-3689	[FB80 B689 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3689, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_137)
{
    // 3689 0041;	
    // (㚉) CJK UNIFIED IDEOGRAPH-3689	[FB80 B689 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3689, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_138)
{
    // 3689 0062;	
    // (㚉) CJK UNIFIED IDEOGRAPH-3689	[FB80 B689 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3689, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB689, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_139)
{
    // 368A 0021;	
    // (㚊) CJK UNIFIED IDEOGRAPH-368A	[FB80 B68A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB68A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_140)
{
    // 368A 003F;	
    // (㚊) CJK UNIFIED IDEOGRAPH-368A	[FB80 B68A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB68A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_141)
{
    // 368A 0061;	
    // (㚊) CJK UNIFIED IDEOGRAPH-368A	[FB80 B68A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB68A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_142)
{
    // 368A 0041;	
    // (㚊) CJK UNIFIED IDEOGRAPH-368A	[FB80 B68A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x368A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB68A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_143)
{
    // 368A 0062;	
    // (㚊) CJK UNIFIED IDEOGRAPH-368A	[FB80 B68A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB68A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_144)
{
    // 368B 0021;	
    // (㚋) CJK UNIFIED IDEOGRAPH-368B	[FB80 B68B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB68B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_145)
{
    // 368B 003F;	
    // (㚋) CJK UNIFIED IDEOGRAPH-368B	[FB80 B68B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB68B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_146)
{
    // 368B 0061;	
    // (㚋) CJK UNIFIED IDEOGRAPH-368B	[FB80 B68B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB68B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_147)
{
    // 368B 0041;	
    // (㚋) CJK UNIFIED IDEOGRAPH-368B	[FB80 B68B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x368B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB68B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_148)
{
    // 368B 0062;	
    // (㚋) CJK UNIFIED IDEOGRAPH-368B	[FB80 B68B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB68B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_149)
{
    // 368C 0021;	
    // (㚌) CJK UNIFIED IDEOGRAPH-368C	[FB80 B68C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB68C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_150)
{
    // 368C 003F;	
    // (㚌) CJK UNIFIED IDEOGRAPH-368C	[FB80 B68C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB68C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_151)
{
    // 368C 0061;	
    // (㚌) CJK UNIFIED IDEOGRAPH-368C	[FB80 B68C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB68C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_152)
{
    // 368C 0041;	
    // (㚌) CJK UNIFIED IDEOGRAPH-368C	[FB80 B68C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x368C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB68C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_153)
{
    // 368C 0062;	
    // (㚌) CJK UNIFIED IDEOGRAPH-368C	[FB80 B68C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB68C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_154)
{
    // 368D 0021;	
    // (㚍) CJK UNIFIED IDEOGRAPH-368D	[FB80 B68D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB68D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_155)
{
    // 368D 003F;	
    // (㚍) CJK UNIFIED IDEOGRAPH-368D	[FB80 B68D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB68D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_156)
{
    // 368D 0061;	
    // (㚍) CJK UNIFIED IDEOGRAPH-368D	[FB80 B68D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB68D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_157)
{
    // 368D 0041;	
    // (㚍) CJK UNIFIED IDEOGRAPH-368D	[FB80 B68D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x368D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB68D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_158)
{
    // 368D 0062;	
    // (㚍) CJK UNIFIED IDEOGRAPH-368D	[FB80 B68D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB68D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_159)
{
    // 368E 0021;	
    // (㚎) CJK UNIFIED IDEOGRAPH-368E	[FB80 B68E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB68E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_160)
{
    // 368E 003F;	
    // (㚎) CJK UNIFIED IDEOGRAPH-368E	[FB80 B68E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB68E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_161)
{
    // 368E 0061;	
    // (㚎) CJK UNIFIED IDEOGRAPH-368E	[FB80 B68E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB68E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_162)
{
    // 368E 0041;	
    // (㚎) CJK UNIFIED IDEOGRAPH-368E	[FB80 B68E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x368E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB68E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_163)
{
    // 368E 0062;	
    // (㚎) CJK UNIFIED IDEOGRAPH-368E	[FB80 B68E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB68E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_164)
{
    // 368F 0021;	
    // (㚏) CJK UNIFIED IDEOGRAPH-368F	[FB80 B68F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB68F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_165)
{
    // 368F 003F;	
    // (㚏) CJK UNIFIED IDEOGRAPH-368F	[FB80 B68F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB68F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_166)
{
    // 368F 0061;	
    // (㚏) CJK UNIFIED IDEOGRAPH-368F	[FB80 B68F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB68F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_167)
{
    // 368F 0041;	
    // (㚏) CJK UNIFIED IDEOGRAPH-368F	[FB80 B68F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x368F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB68F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_168)
{
    // 368F 0062;	
    // (㚏) CJK UNIFIED IDEOGRAPH-368F	[FB80 B68F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x368F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB68F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_169)
{
    // 3690 0021;	
    // (㚐) CJK UNIFIED IDEOGRAPH-3690	[FB80 B690 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3690, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB690, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_170)
{
    // 3690 003F;	
    // (㚐) CJK UNIFIED IDEOGRAPH-3690	[FB80 B690 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3690, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB690, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_171)
{
    // 3690 0061;	
    // (㚐) CJK UNIFIED IDEOGRAPH-3690	[FB80 B690 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3690, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_172)
{
    // 3690 0041;	
    // (㚐) CJK UNIFIED IDEOGRAPH-3690	[FB80 B690 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3690, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_173)
{
    // 3690 0062;	
    // (㚐) CJK UNIFIED IDEOGRAPH-3690	[FB80 B690 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3690, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB690, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_174)
{
    // 3691 0021;	
    // (㚑) CJK UNIFIED IDEOGRAPH-3691	[FB80 B691 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3691, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB691, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_175)
{
    // 3691 003F;	
    // (㚑) CJK UNIFIED IDEOGRAPH-3691	[FB80 B691 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3691, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB691, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_176)
{
    // 3691 0061;	
    // (㚑) CJK UNIFIED IDEOGRAPH-3691	[FB80 B691 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3691, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_177)
{
    // 3691 0041;	
    // (㚑) CJK UNIFIED IDEOGRAPH-3691	[FB80 B691 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3691, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_178)
{
    // 3691 0062;	
    // (㚑) CJK UNIFIED IDEOGRAPH-3691	[FB80 B691 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3691, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB691, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_179)
{
    // 3692 0021;	
    // (㚒) CJK UNIFIED IDEOGRAPH-3692	[FB80 B692 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3692, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB692, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_180)
{
    // 3692 003F;	
    // (㚒) CJK UNIFIED IDEOGRAPH-3692	[FB80 B692 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3692, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB692, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_181)
{
    // 3692 0061;	
    // (㚒) CJK UNIFIED IDEOGRAPH-3692	[FB80 B692 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3692, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_182)
{
    // 3692 0041;	
    // (㚒) CJK UNIFIED IDEOGRAPH-3692	[FB80 B692 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3692, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_183)
{
    // 3692 0062;	
    // (㚒) CJK UNIFIED IDEOGRAPH-3692	[FB80 B692 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3692, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB692, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_184)
{
    // 3693 0021;	
    // (㚓) CJK UNIFIED IDEOGRAPH-3693	[FB80 B693 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3693, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB693, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_185)
{
    // 3693 003F;	
    // (㚓) CJK UNIFIED IDEOGRAPH-3693	[FB80 B693 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3693, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB693, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_186)
{
    // 3693 0061;	
    // (㚓) CJK UNIFIED IDEOGRAPH-3693	[FB80 B693 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3693, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_187)
{
    // 3693 0041;	
    // (㚓) CJK UNIFIED IDEOGRAPH-3693	[FB80 B693 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3693, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_188)
{
    // 3693 0062;	
    // (㚓) CJK UNIFIED IDEOGRAPH-3693	[FB80 B693 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3693, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB693, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_189)
{
    // 3694 0021;	
    // (㚔) CJK UNIFIED IDEOGRAPH-3694	[FB80 B694 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3694, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB694, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_190)
{
    // 3694 003F;	
    // (㚔) CJK UNIFIED IDEOGRAPH-3694	[FB80 B694 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3694, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB694, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_191)
{
    // 3694 0061;	
    // (㚔) CJK UNIFIED IDEOGRAPH-3694	[FB80 B694 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3694, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_192)
{
    // 3694 0041;	
    // (㚔) CJK UNIFIED IDEOGRAPH-3694	[FB80 B694 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3694, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_193)
{
    // 3694 0062;	
    // (㚔) CJK UNIFIED IDEOGRAPH-3694	[FB80 B694 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3694, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB694, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_194)
{
    // 3695 0021;	
    // (㚕) CJK UNIFIED IDEOGRAPH-3695	[FB80 B695 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3695, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB695, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_195)
{
    // 3695 003F;	
    // (㚕) CJK UNIFIED IDEOGRAPH-3695	[FB80 B695 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3695, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB695, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_196)
{
    // 3695 0061;	
    // (㚕) CJK UNIFIED IDEOGRAPH-3695	[FB80 B695 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3695, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_197)
{
    // 3695 0041;	
    // (㚕) CJK UNIFIED IDEOGRAPH-3695	[FB80 B695 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3695, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_198)
{
    // 3695 0062;	
    // (㚕) CJK UNIFIED IDEOGRAPH-3695	[FB80 B695 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3695, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB695, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_199)
{
    // 3696 0021;	
    // (㚖) CJK UNIFIED IDEOGRAPH-3696	[FB80 B696 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3696, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB696, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_200)
{
    // 3696 003F;	
    // (㚖) CJK UNIFIED IDEOGRAPH-3696	[FB80 B696 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3696, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB696, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_201)
{
    // 3696 0061;	
    // (㚖) CJK UNIFIED IDEOGRAPH-3696	[FB80 B696 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3696, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_202)
{
    // 3696 0041;	
    // (㚖) CJK UNIFIED IDEOGRAPH-3696	[FB80 B696 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3696, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_203)
{
    // 3696 0062;	
    // (㚖) CJK UNIFIED IDEOGRAPH-3696	[FB80 B696 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3696, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB696, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_204)
{
    // 3697 0021;	
    // (㚗) CJK UNIFIED IDEOGRAPH-3697	[FB80 B697 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3697, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB697, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_205)
{
    // 3697 003F;	
    // (㚗) CJK UNIFIED IDEOGRAPH-3697	[FB80 B697 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3697, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB697, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_206)
{
    // 3697 0061;	
    // (㚗) CJK UNIFIED IDEOGRAPH-3697	[FB80 B697 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3697, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_207)
{
    // 3697 0041;	
    // (㚗) CJK UNIFIED IDEOGRAPH-3697	[FB80 B697 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3697, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_208)
{
    // 3697 0062;	
    // (㚗) CJK UNIFIED IDEOGRAPH-3697	[FB80 B697 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3697, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB697, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_209)
{
    // 3698 0021;	
    // (㚘) CJK UNIFIED IDEOGRAPH-3698	[FB80 B698 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3698, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB698, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_210)
{
    // 3698 003F;	
    // (㚘) CJK UNIFIED IDEOGRAPH-3698	[FB80 B698 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3698, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB698, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_211)
{
    // 3698 0061;	
    // (㚘) CJK UNIFIED IDEOGRAPH-3698	[FB80 B698 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3698, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_212)
{
    // 3698 0041;	
    // (㚘) CJK UNIFIED IDEOGRAPH-3698	[FB80 B698 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3698, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_213)
{
    // 3698 0062;	
    // (㚘) CJK UNIFIED IDEOGRAPH-3698	[FB80 B698 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3698, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB698, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_214)
{
    // 3699 0021;	
    // (㚙) CJK UNIFIED IDEOGRAPH-3699	[FB80 B699 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3699, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB699, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_215)
{
    // 3699 003F;	
    // (㚙) CJK UNIFIED IDEOGRAPH-3699	[FB80 B699 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3699, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB699, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_216)
{
    // 3699 0061;	
    // (㚙) CJK UNIFIED IDEOGRAPH-3699	[FB80 B699 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3699, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_217)
{
    // 3699 0041;	
    // (㚙) CJK UNIFIED IDEOGRAPH-3699	[FB80 B699 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3699, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_218)
{
    // 3699 0062;	
    // (㚙) CJK UNIFIED IDEOGRAPH-3699	[FB80 B699 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3699, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB699, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_219)
{
    // 369A 0021;	
    // (㚚) CJK UNIFIED IDEOGRAPH-369A	[FB80 B69A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB69A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_220)
{
    // 369A 003F;	
    // (㚚) CJK UNIFIED IDEOGRAPH-369A	[FB80 B69A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB69A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_221)
{
    // 369A 0061;	
    // (㚚) CJK UNIFIED IDEOGRAPH-369A	[FB80 B69A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB69A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_222)
{
    // 369A 0041;	
    // (㚚) CJK UNIFIED IDEOGRAPH-369A	[FB80 B69A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x369A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB69A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_223)
{
    // 369A 0062;	
    // (㚚) CJK UNIFIED IDEOGRAPH-369A	[FB80 B69A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB69A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_224)
{
    // 369B 0021;	
    // (㚛) CJK UNIFIED IDEOGRAPH-369B	[FB80 B69B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB69B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_225)
{
    // 369B 003F;	
    // (㚛) CJK UNIFIED IDEOGRAPH-369B	[FB80 B69B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB69B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_226)
{
    // 369B 0061;	
    // (㚛) CJK UNIFIED IDEOGRAPH-369B	[FB80 B69B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB69B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_227)
{
    // 369B 0041;	
    // (㚛) CJK UNIFIED IDEOGRAPH-369B	[FB80 B69B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x369B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB69B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_228)
{
    // 369B 0062;	
    // (㚛) CJK UNIFIED IDEOGRAPH-369B	[FB80 B69B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB69B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_229)
{
    // 369C 0021;	
    // (㚜) CJK UNIFIED IDEOGRAPH-369C	[FB80 B69C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB69C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_230)
{
    // 369C 003F;	
    // (㚜) CJK UNIFIED IDEOGRAPH-369C	[FB80 B69C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB69C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_231)
{
    // 369C 0061;	
    // (㚜) CJK UNIFIED IDEOGRAPH-369C	[FB80 B69C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB69C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_232)
{
    // 369C 0041;	
    // (㚜) CJK UNIFIED IDEOGRAPH-369C	[FB80 B69C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x369C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB69C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_233)
{
    // 369C 0062;	
    // (㚜) CJK UNIFIED IDEOGRAPH-369C	[FB80 B69C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB69C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_234)
{
    // 369D 0021;	
    // (㚝) CJK UNIFIED IDEOGRAPH-369D	[FB80 B69D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB69D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_235)
{
    // 369D 003F;	
    // (㚝) CJK UNIFIED IDEOGRAPH-369D	[FB80 B69D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB69D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_236)
{
    // 369D 0061;	
    // (㚝) CJK UNIFIED IDEOGRAPH-369D	[FB80 B69D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB69D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_237)
{
    // 369D 0041;	
    // (㚝) CJK UNIFIED IDEOGRAPH-369D	[FB80 B69D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x369D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB69D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_238)
{
    // 369D 0062;	
    // (㚝) CJK UNIFIED IDEOGRAPH-369D	[FB80 B69D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB69D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_239)
{
    // 369E 0021;	
    // (㚞) CJK UNIFIED IDEOGRAPH-369E	[FB80 B69E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB69E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_240)
{
    // 369E 003F;	
    // (㚞) CJK UNIFIED IDEOGRAPH-369E	[FB80 B69E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB69E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_241)
{
    // 369E 0061;	
    // (㚞) CJK UNIFIED IDEOGRAPH-369E	[FB80 B69E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB69E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_242)
{
    // 369E 0041;	
    // (㚞) CJK UNIFIED IDEOGRAPH-369E	[FB80 B69E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x369E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB69E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_243)
{
    // 369E 0062;	
    // (㚞) CJK UNIFIED IDEOGRAPH-369E	[FB80 B69E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB69E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_244)
{
    // 369F 0021;	
    // (㚟) CJK UNIFIED IDEOGRAPH-369F	[FB80 B69F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB69F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_245)
{
    // 369F 003F;	
    // (㚟) CJK UNIFIED IDEOGRAPH-369F	[FB80 B69F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB69F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_246)
{
    // 369F 0061;	
    // (㚟) CJK UNIFIED IDEOGRAPH-369F	[FB80 B69F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB69F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_247)
{
    // 369F 0041;	
    // (㚟) CJK UNIFIED IDEOGRAPH-369F	[FB80 B69F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x369F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB69F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_248)
{
    // 369F 0062;	
    // (㚟) CJK UNIFIED IDEOGRAPH-369F	[FB80 B69F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x369F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB69F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_249)
{
    // 36A0 0021;	
    // (㚠) CJK UNIFIED IDEOGRAPH-36A0	[FB80 B6A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_250)
{
    // 36A0 003F;	
    // (㚠) CJK UNIFIED IDEOGRAPH-36A0	[FB80 B6A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_251)
{
    // 36A0 0061;	
    // (㚠) CJK UNIFIED IDEOGRAPH-36A0	[FB80 B6A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_252)
{
    // 36A0 0041;	
    // (㚠) CJK UNIFIED IDEOGRAPH-36A0	[FB80 B6A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_253)
{
    // 36A0 0062;	
    // (㚠) CJK UNIFIED IDEOGRAPH-36A0	[FB80 B6A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_254)
{
    // 36A1 0021;	
    // (㚡) CJK UNIFIED IDEOGRAPH-36A1	[FB80 B6A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_255)
{
    // 36A1 003F;	
    // (㚡) CJK UNIFIED IDEOGRAPH-36A1	[FB80 B6A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_256)
{
    // 36A1 0061;	
    // (㚡) CJK UNIFIED IDEOGRAPH-36A1	[FB80 B6A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_257)
{
    // 36A1 0041;	
    // (㚡) CJK UNIFIED IDEOGRAPH-36A1	[FB80 B6A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_258)
{
    // 36A1 0062;	
    // (㚡) CJK UNIFIED IDEOGRAPH-36A1	[FB80 B6A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_259)
{
    // 36A2 0021;	
    // (㚢) CJK UNIFIED IDEOGRAPH-36A2	[FB80 B6A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_260)
{
    // 36A2 003F;	
    // (㚢) CJK UNIFIED IDEOGRAPH-36A2	[FB80 B6A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_261)
{
    // 36A2 0061;	
    // (㚢) CJK UNIFIED IDEOGRAPH-36A2	[FB80 B6A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_262)
{
    // 36A2 0041;	
    // (㚢) CJK UNIFIED IDEOGRAPH-36A2	[FB80 B6A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_263)
{
    // 36A2 0062;	
    // (㚢) CJK UNIFIED IDEOGRAPH-36A2	[FB80 B6A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_264)
{
    // 36A3 0021;	
    // (㚣) CJK UNIFIED IDEOGRAPH-36A3	[FB80 B6A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_265)
{
    // 36A3 003F;	
    // (㚣) CJK UNIFIED IDEOGRAPH-36A3	[FB80 B6A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_266)
{
    // 36A3 0061;	
    // (㚣) CJK UNIFIED IDEOGRAPH-36A3	[FB80 B6A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_267)
{
    // 36A3 0041;	
    // (㚣) CJK UNIFIED IDEOGRAPH-36A3	[FB80 B6A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_268)
{
    // 36A3 0062;	
    // (㚣) CJK UNIFIED IDEOGRAPH-36A3	[FB80 B6A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_269)
{
    // 36A4 0021;	
    // (㚤) CJK UNIFIED IDEOGRAPH-36A4	[FB80 B6A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_270)
{
    // 36A4 003F;	
    // (㚤) CJK UNIFIED IDEOGRAPH-36A4	[FB80 B6A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_271)
{
    // 36A4 0061;	
    // (㚤) CJK UNIFIED IDEOGRAPH-36A4	[FB80 B6A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_272)
{
    // 36A4 0041;	
    // (㚤) CJK UNIFIED IDEOGRAPH-36A4	[FB80 B6A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_273)
{
    // 36A4 0062;	
    // (㚤) CJK UNIFIED IDEOGRAPH-36A4	[FB80 B6A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_274)
{
    // 36A5 0021;	
    // (㚥) CJK UNIFIED IDEOGRAPH-36A5	[FB80 B6A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_275)
{
    // 36A5 003F;	
    // (㚥) CJK UNIFIED IDEOGRAPH-36A5	[FB80 B6A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_276)
{
    // 36A5 0061;	
    // (㚥) CJK UNIFIED IDEOGRAPH-36A5	[FB80 B6A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_277)
{
    // 36A5 0041;	
    // (㚥) CJK UNIFIED IDEOGRAPH-36A5	[FB80 B6A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_278)
{
    // 36A5 0062;	
    // (㚥) CJK UNIFIED IDEOGRAPH-36A5	[FB80 B6A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_279)
{
    // 36A6 0021;	
    // (㚦) CJK UNIFIED IDEOGRAPH-36A6	[FB80 B6A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_280)
{
    // 36A6 003F;	
    // (㚦) CJK UNIFIED IDEOGRAPH-36A6	[FB80 B6A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_281)
{
    // 36A6 0061;	
    // (㚦) CJK UNIFIED IDEOGRAPH-36A6	[FB80 B6A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_282)
{
    // 36A6 0041;	
    // (㚦) CJK UNIFIED IDEOGRAPH-36A6	[FB80 B6A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_283)
{
    // 36A6 0062;	
    // (㚦) CJK UNIFIED IDEOGRAPH-36A6	[FB80 B6A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_284)
{
    // 36A7 0021;	
    // (㚧) CJK UNIFIED IDEOGRAPH-36A7	[FB80 B6A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_285)
{
    // 36A7 003F;	
    // (㚧) CJK UNIFIED IDEOGRAPH-36A7	[FB80 B6A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_286)
{
    // 36A7 0061;	
    // (㚧) CJK UNIFIED IDEOGRAPH-36A7	[FB80 B6A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_287)
{
    // 36A7 0041;	
    // (㚧) CJK UNIFIED IDEOGRAPH-36A7	[FB80 B6A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_288)
{
    // 36A7 0062;	
    // (㚧) CJK UNIFIED IDEOGRAPH-36A7	[FB80 B6A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_289)
{
    // 36A8 0021;	
    // (㚨) CJK UNIFIED IDEOGRAPH-36A8	[FB80 B6A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_290)
{
    // 36A8 003F;	
    // (㚨) CJK UNIFIED IDEOGRAPH-36A8	[FB80 B6A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_291)
{
    // 36A8 0061;	
    // (㚨) CJK UNIFIED IDEOGRAPH-36A8	[FB80 B6A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_292)
{
    // 36A8 0041;	
    // (㚨) CJK UNIFIED IDEOGRAPH-36A8	[FB80 B6A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_293)
{
    // 36A8 0062;	
    // (㚨) CJK UNIFIED IDEOGRAPH-36A8	[FB80 B6A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_294)
{
    // 36A9 0021;	
    // (㚩) CJK UNIFIED IDEOGRAPH-36A9	[FB80 B6A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_295)
{
    // 36A9 003F;	
    // (㚩) CJK UNIFIED IDEOGRAPH-36A9	[FB80 B6A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_296)
{
    // 36A9 0061;	
    // (㚩) CJK UNIFIED IDEOGRAPH-36A9	[FB80 B6A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_297)
{
    // 36A9 0041;	
    // (㚩) CJK UNIFIED IDEOGRAPH-36A9	[FB80 B6A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_298)
{
    // 36A9 0062;	
    // (㚩) CJK UNIFIED IDEOGRAPH-36A9	[FB80 B6A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_299)
{
    // 36AA 0021;	
    // (㚪) CJK UNIFIED IDEOGRAPH-36AA	[FB80 B6AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_300)
{
    // 36AA 003F;	
    // (㚪) CJK UNIFIED IDEOGRAPH-36AA	[FB80 B6AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_301)
{
    // 36AA 0061;	
    // (㚪) CJK UNIFIED IDEOGRAPH-36AA	[FB80 B6AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_302)
{
    // 36AA 0041;	
    // (㚪) CJK UNIFIED IDEOGRAPH-36AA	[FB80 B6AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_303)
{
    // 36AA 0062;	
    // (㚪) CJK UNIFIED IDEOGRAPH-36AA	[FB80 B6AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_304)
{
    // 36AB 0021;	
    // (㚫) CJK UNIFIED IDEOGRAPH-36AB	[FB80 B6AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_305)
{
    // 36AB 003F;	
    // (㚫) CJK UNIFIED IDEOGRAPH-36AB	[FB80 B6AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_306)
{
    // 36AB 0061;	
    // (㚫) CJK UNIFIED IDEOGRAPH-36AB	[FB80 B6AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_307)
{
    // 36AB 0041;	
    // (㚫) CJK UNIFIED IDEOGRAPH-36AB	[FB80 B6AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_308)
{
    // 36AB 0062;	
    // (㚫) CJK UNIFIED IDEOGRAPH-36AB	[FB80 B6AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_309)
{
    // 36AC 0021;	
    // (㚬) CJK UNIFIED IDEOGRAPH-36AC	[FB80 B6AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_310)
{
    // 36AC 003F;	
    // (㚬) CJK UNIFIED IDEOGRAPH-36AC	[FB80 B6AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_311)
{
    // 36AC 0061;	
    // (㚬) CJK UNIFIED IDEOGRAPH-36AC	[FB80 B6AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_312)
{
    // 36AC 0041;	
    // (㚬) CJK UNIFIED IDEOGRAPH-36AC	[FB80 B6AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_313)
{
    // 36AC 0062;	
    // (㚬) CJK UNIFIED IDEOGRAPH-36AC	[FB80 B6AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_314)
{
    // 36AD 0021;	
    // (㚭) CJK UNIFIED IDEOGRAPH-36AD	[FB80 B6AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_315)
{
    // 36AD 003F;	
    // (㚭) CJK UNIFIED IDEOGRAPH-36AD	[FB80 B6AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_316)
{
    // 36AD 0061;	
    // (㚭) CJK UNIFIED IDEOGRAPH-36AD	[FB80 B6AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_317)
{
    // 36AD 0041;	
    // (㚭) CJK UNIFIED IDEOGRAPH-36AD	[FB80 B6AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_318)
{
    // 36AD 0062;	
    // (㚭) CJK UNIFIED IDEOGRAPH-36AD	[FB80 B6AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_319)
{
    // 36AE 0021;	
    // (㚮) CJK UNIFIED IDEOGRAPH-36AE	[FB80 B6AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_320)
{
    // 36AE 003F;	
    // (㚮) CJK UNIFIED IDEOGRAPH-36AE	[FB80 B6AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_321)
{
    // 36AE 0061;	
    // (㚮) CJK UNIFIED IDEOGRAPH-36AE	[FB80 B6AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_322)
{
    // 36AE 0041;	
    // (㚮) CJK UNIFIED IDEOGRAPH-36AE	[FB80 B6AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_323)
{
    // 36AE 0062;	
    // (㚮) CJK UNIFIED IDEOGRAPH-36AE	[FB80 B6AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_324)
{
    // 36AF 0021;	
    // (㚯) CJK UNIFIED IDEOGRAPH-36AF	[FB80 B6AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_325)
{
    // 36AF 003F;	
    // (㚯) CJK UNIFIED IDEOGRAPH-36AF	[FB80 B6AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_326)
{
    // 36AF 0061;	
    // (㚯) CJK UNIFIED IDEOGRAPH-36AF	[FB80 B6AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_327)
{
    // 36AF 0041;	
    // (㚯) CJK UNIFIED IDEOGRAPH-36AF	[FB80 B6AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_328)
{
    // 36AF 0062;	
    // (㚯) CJK UNIFIED IDEOGRAPH-36AF	[FB80 B6AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_329)
{
    // 36B0 0021;	
    // (㚰) CJK UNIFIED IDEOGRAPH-36B0	[FB80 B6B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_330)
{
    // 36B0 003F;	
    // (㚰) CJK UNIFIED IDEOGRAPH-36B0	[FB80 B6B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_331)
{
    // 36B0 0061;	
    // (㚰) CJK UNIFIED IDEOGRAPH-36B0	[FB80 B6B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_332)
{
    // 36B0 0041;	
    // (㚰) CJK UNIFIED IDEOGRAPH-36B0	[FB80 B6B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_333)
{
    // 36B0 0062;	
    // (㚰) CJK UNIFIED IDEOGRAPH-36B0	[FB80 B6B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_334)
{
    // 36B1 0021;	
    // (㚱) CJK UNIFIED IDEOGRAPH-36B1	[FB80 B6B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_335)
{
    // 36B1 003F;	
    // (㚱) CJK UNIFIED IDEOGRAPH-36B1	[FB80 B6B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_336)
{
    // 36B1 0061;	
    // (㚱) CJK UNIFIED IDEOGRAPH-36B1	[FB80 B6B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_337)
{
    // 36B1 0041;	
    // (㚱) CJK UNIFIED IDEOGRAPH-36B1	[FB80 B6B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_338)
{
    // 36B1 0062;	
    // (㚱) CJK UNIFIED IDEOGRAPH-36B1	[FB80 B6B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_339)
{
    // 36B2 0021;	
    // (㚲) CJK UNIFIED IDEOGRAPH-36B2	[FB80 B6B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_340)
{
    // 36B2 003F;	
    // (㚲) CJK UNIFIED IDEOGRAPH-36B2	[FB80 B6B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_341)
{
    // 36B2 0061;	
    // (㚲) CJK UNIFIED IDEOGRAPH-36B2	[FB80 B6B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_342)
{
    // 36B2 0041;	
    // (㚲) CJK UNIFIED IDEOGRAPH-36B2	[FB80 B6B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_343)
{
    // 36B2 0062;	
    // (㚲) CJK UNIFIED IDEOGRAPH-36B2	[FB80 B6B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_344)
{
    // 36B3 0021;	
    // (㚳) CJK UNIFIED IDEOGRAPH-36B3	[FB80 B6B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_345)
{
    // 36B3 003F;	
    // (㚳) CJK UNIFIED IDEOGRAPH-36B3	[FB80 B6B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_346)
{
    // 36B3 0061;	
    // (㚳) CJK UNIFIED IDEOGRAPH-36B3	[FB80 B6B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_347)
{
    // 36B3 0041;	
    // (㚳) CJK UNIFIED IDEOGRAPH-36B3	[FB80 B6B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_348)
{
    // 36B3 0062;	
    // (㚳) CJK UNIFIED IDEOGRAPH-36B3	[FB80 B6B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_349)
{
    // 36B4 0021;	
    // (㚴) CJK UNIFIED IDEOGRAPH-36B4	[FB80 B6B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_350)
{
    // 36B4 003F;	
    // (㚴) CJK UNIFIED IDEOGRAPH-36B4	[FB80 B6B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_351)
{
    // 36B4 0061;	
    // (㚴) CJK UNIFIED IDEOGRAPH-36B4	[FB80 B6B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_352)
{
    // 36B4 0041;	
    // (㚴) CJK UNIFIED IDEOGRAPH-36B4	[FB80 B6B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_353)
{
    // 36B4 0062;	
    // (㚴) CJK UNIFIED IDEOGRAPH-36B4	[FB80 B6B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_354)
{
    // 36B5 0021;	
    // (㚵) CJK UNIFIED IDEOGRAPH-36B5	[FB80 B6B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_355)
{
    // 36B5 003F;	
    // (㚵) CJK UNIFIED IDEOGRAPH-36B5	[FB80 B6B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_356)
{
    // 36B5 0061;	
    // (㚵) CJK UNIFIED IDEOGRAPH-36B5	[FB80 B6B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_357)
{
    // 36B5 0041;	
    // (㚵) CJK UNIFIED IDEOGRAPH-36B5	[FB80 B6B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_358)
{
    // 36B5 0062;	
    // (㚵) CJK UNIFIED IDEOGRAPH-36B5	[FB80 B6B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_359)
{
    // 36B6 0021;	
    // (㚶) CJK UNIFIED IDEOGRAPH-36B6	[FB80 B6B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_360)
{
    // 36B6 003F;	
    // (㚶) CJK UNIFIED IDEOGRAPH-36B6	[FB80 B6B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_361)
{
    // 36B6 0061;	
    // (㚶) CJK UNIFIED IDEOGRAPH-36B6	[FB80 B6B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_362)
{
    // 36B6 0041;	
    // (㚶) CJK UNIFIED IDEOGRAPH-36B6	[FB80 B6B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_363)
{
    // 36B6 0062;	
    // (㚶) CJK UNIFIED IDEOGRAPH-36B6	[FB80 B6B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_364)
{
    // 36B7 0021;	
    // (㚷) CJK UNIFIED IDEOGRAPH-36B7	[FB80 B6B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_365)
{
    // 36B7 003F;	
    // (㚷) CJK UNIFIED IDEOGRAPH-36B7	[FB80 B6B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_366)
{
    // 36B7 0061;	
    // (㚷) CJK UNIFIED IDEOGRAPH-36B7	[FB80 B6B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_367)
{
    // 36B7 0041;	
    // (㚷) CJK UNIFIED IDEOGRAPH-36B7	[FB80 B6B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_368)
{
    // 36B7 0062;	
    // (㚷) CJK UNIFIED IDEOGRAPH-36B7	[FB80 B6B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_369)
{
    // 36B8 0021;	
    // (㚸) CJK UNIFIED IDEOGRAPH-36B8	[FB80 B6B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_370)
{
    // 36B8 003F;	
    // (㚸) CJK UNIFIED IDEOGRAPH-36B8	[FB80 B6B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_371)
{
    // 36B8 0061;	
    // (㚸) CJK UNIFIED IDEOGRAPH-36B8	[FB80 B6B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_372)
{
    // 36B8 0041;	
    // (㚸) CJK UNIFIED IDEOGRAPH-36B8	[FB80 B6B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_373)
{
    // 36B8 0062;	
    // (㚸) CJK UNIFIED IDEOGRAPH-36B8	[FB80 B6B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_374)
{
    // 36B9 0021;	
    // (㚹) CJK UNIFIED IDEOGRAPH-36B9	[FB80 B6B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_375)
{
    // 36B9 003F;	
    // (㚹) CJK UNIFIED IDEOGRAPH-36B9	[FB80 B6B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_376)
{
    // 36B9 0061;	
    // (㚹) CJK UNIFIED IDEOGRAPH-36B9	[FB80 B6B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_377)
{
    // 36B9 0041;	
    // (㚹) CJK UNIFIED IDEOGRAPH-36B9	[FB80 B6B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_378)
{
    // 36B9 0062;	
    // (㚹) CJK UNIFIED IDEOGRAPH-36B9	[FB80 B6B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_379)
{
    // 36BA 0021;	
    // (㚺) CJK UNIFIED IDEOGRAPH-36BA	[FB80 B6BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_380)
{
    // 36BA 003F;	
    // (㚺) CJK UNIFIED IDEOGRAPH-36BA	[FB80 B6BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_381)
{
    // 36BA 0061;	
    // (㚺) CJK UNIFIED IDEOGRAPH-36BA	[FB80 B6BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_382)
{
    // 36BA 0041;	
    // (㚺) CJK UNIFIED IDEOGRAPH-36BA	[FB80 B6BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_383)
{
    // 36BA 0062;	
    // (㚺) CJK UNIFIED IDEOGRAPH-36BA	[FB80 B6BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_384)
{
    // 36BB 0021;	
    // (㚻) CJK UNIFIED IDEOGRAPH-36BB	[FB80 B6BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_385)
{
    // 36BB 003F;	
    // (㚻) CJK UNIFIED IDEOGRAPH-36BB	[FB80 B6BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_386)
{
    // 36BB 0061;	
    // (㚻) CJK UNIFIED IDEOGRAPH-36BB	[FB80 B6BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_387)
{
    // 36BB 0041;	
    // (㚻) CJK UNIFIED IDEOGRAPH-36BB	[FB80 B6BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_388)
{
    // 36BB 0062;	
    // (㚻) CJK UNIFIED IDEOGRAPH-36BB	[FB80 B6BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_389)
{
    // 36BC 0021;	
    // (㚼) CJK UNIFIED IDEOGRAPH-36BC	[FB80 B6BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_390)
{
    // 36BC 003F;	
    // (㚼) CJK UNIFIED IDEOGRAPH-36BC	[FB80 B6BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_391)
{
    // 36BC 0061;	
    // (㚼) CJK UNIFIED IDEOGRAPH-36BC	[FB80 B6BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_392)
{
    // 36BC 0041;	
    // (㚼) CJK UNIFIED IDEOGRAPH-36BC	[FB80 B6BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_393)
{
    // 36BC 0062;	
    // (㚼) CJK UNIFIED IDEOGRAPH-36BC	[FB80 B6BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_394)
{
    // 36BD 0021;	
    // (㚽) CJK UNIFIED IDEOGRAPH-36BD	[FB80 B6BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_395)
{
    // 36BD 003F;	
    // (㚽) CJK UNIFIED IDEOGRAPH-36BD	[FB80 B6BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_396)
{
    // 36BD 0061;	
    // (㚽) CJK UNIFIED IDEOGRAPH-36BD	[FB80 B6BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_397)
{
    // 36BD 0041;	
    // (㚽) CJK UNIFIED IDEOGRAPH-36BD	[FB80 B6BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_398)
{
    // 36BD 0062;	
    // (㚽) CJK UNIFIED IDEOGRAPH-36BD	[FB80 B6BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_399)
{
    // 36BE 0021;	
    // (㚾) CJK UNIFIED IDEOGRAPH-36BE	[FB80 B6BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_400)
{
    // 36BE 003F;	
    // (㚾) CJK UNIFIED IDEOGRAPH-36BE	[FB80 B6BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_401)
{
    // 36BE 0061;	
    // (㚾) CJK UNIFIED IDEOGRAPH-36BE	[FB80 B6BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_402)
{
    // 36BE 0041;	
    // (㚾) CJK UNIFIED IDEOGRAPH-36BE	[FB80 B6BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_403)
{
    // 36BE 0062;	
    // (㚾) CJK UNIFIED IDEOGRAPH-36BE	[FB80 B6BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_404)
{
    // 36BF 0021;	
    // (㚿) CJK UNIFIED IDEOGRAPH-36BF	[FB80 B6BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_405)
{
    // 36BF 003F;	
    // (㚿) CJK UNIFIED IDEOGRAPH-36BF	[FB80 B6BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_406)
{
    // 36BF 0061;	
    // (㚿) CJK UNIFIED IDEOGRAPH-36BF	[FB80 B6BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_407)
{
    // 36BF 0041;	
    // (㚿) CJK UNIFIED IDEOGRAPH-36BF	[FB80 B6BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_408)
{
    // 36BF 0062;	
    // (㚿) CJK UNIFIED IDEOGRAPH-36BF	[FB80 B6BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_409)
{
    // 36C0 0021;	
    // (㛀) CJK UNIFIED IDEOGRAPH-36C0	[FB80 B6C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_410)
{
    // 36C0 003F;	
    // (㛀) CJK UNIFIED IDEOGRAPH-36C0	[FB80 B6C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_411)
{
    // 36C0 0061;	
    // (㛀) CJK UNIFIED IDEOGRAPH-36C0	[FB80 B6C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_412)
{
    // 36C0 0041;	
    // (㛀) CJK UNIFIED IDEOGRAPH-36C0	[FB80 B6C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_413)
{
    // 36C0 0062;	
    // (㛀) CJK UNIFIED IDEOGRAPH-36C0	[FB80 B6C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_414)
{
    // 36C1 0021;	
    // (㛁) CJK UNIFIED IDEOGRAPH-36C1	[FB80 B6C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_415)
{
    // 36C1 003F;	
    // (㛁) CJK UNIFIED IDEOGRAPH-36C1	[FB80 B6C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_416)
{
    // 36C1 0061;	
    // (㛁) CJK UNIFIED IDEOGRAPH-36C1	[FB80 B6C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_417)
{
    // 36C1 0041;	
    // (㛁) CJK UNIFIED IDEOGRAPH-36C1	[FB80 B6C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_418)
{
    // 36C1 0062;	
    // (㛁) CJK UNIFIED IDEOGRAPH-36C1	[FB80 B6C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_419)
{
    // 36C2 0021;	
    // (㛂) CJK UNIFIED IDEOGRAPH-36C2	[FB80 B6C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_420)
{
    // 36C2 003F;	
    // (㛂) CJK UNIFIED IDEOGRAPH-36C2	[FB80 B6C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_421)
{
    // 36C2 0061;	
    // (㛂) CJK UNIFIED IDEOGRAPH-36C2	[FB80 B6C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_422)
{
    // 36C2 0041;	
    // (㛂) CJK UNIFIED IDEOGRAPH-36C2	[FB80 B6C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_423)
{
    // 36C2 0062;	
    // (㛂) CJK UNIFIED IDEOGRAPH-36C2	[FB80 B6C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_424)
{
    // 36C3 0021;	
    // (㛃) CJK UNIFIED IDEOGRAPH-36C3	[FB80 B6C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_425)
{
    // 36C3 003F;	
    // (㛃) CJK UNIFIED IDEOGRAPH-36C3	[FB80 B6C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_426)
{
    // 36C3 0061;	
    // (㛃) CJK UNIFIED IDEOGRAPH-36C3	[FB80 B6C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_427)
{
    // 36C3 0041;	
    // (㛃) CJK UNIFIED IDEOGRAPH-36C3	[FB80 B6C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_428)
{
    // 36C3 0062;	
    // (㛃) CJK UNIFIED IDEOGRAPH-36C3	[FB80 B6C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_429)
{
    // 36C4 0021;	
    // (㛄) CJK UNIFIED IDEOGRAPH-36C4	[FB80 B6C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_430)
{
    // 36C4 003F;	
    // (㛄) CJK UNIFIED IDEOGRAPH-36C4	[FB80 B6C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_431)
{
    // 36C4 0061;	
    // (㛄) CJK UNIFIED IDEOGRAPH-36C4	[FB80 B6C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_432)
{
    // 36C4 0041;	
    // (㛄) CJK UNIFIED IDEOGRAPH-36C4	[FB80 B6C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_433)
{
    // 36C4 0062;	
    // (㛄) CJK UNIFIED IDEOGRAPH-36C4	[FB80 B6C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_434)
{
    // 36C5 0021;	
    // (㛅) CJK UNIFIED IDEOGRAPH-36C5	[FB80 B6C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_435)
{
    // 36C5 003F;	
    // (㛅) CJK UNIFIED IDEOGRAPH-36C5	[FB80 B6C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_436)
{
    // 36C5 0061;	
    // (㛅) CJK UNIFIED IDEOGRAPH-36C5	[FB80 B6C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_437)
{
    // 36C5 0041;	
    // (㛅) CJK UNIFIED IDEOGRAPH-36C5	[FB80 B6C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_438)
{
    // 36C5 0062;	
    // (㛅) CJK UNIFIED IDEOGRAPH-36C5	[FB80 B6C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_439)
{
    // 36C6 0021;	
    // (㛆) CJK UNIFIED IDEOGRAPH-36C6	[FB80 B6C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_440)
{
    // 36C6 003F;	
    // (㛆) CJK UNIFIED IDEOGRAPH-36C6	[FB80 B6C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_441)
{
    // 36C6 0061;	
    // (㛆) CJK UNIFIED IDEOGRAPH-36C6	[FB80 B6C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_442)
{
    // 36C6 0041;	
    // (㛆) CJK UNIFIED IDEOGRAPH-36C6	[FB80 B6C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_443)
{
    // 36C6 0062;	
    // (㛆) CJK UNIFIED IDEOGRAPH-36C6	[FB80 B6C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_444)
{
    // 36C7 0021;	
    // (㛇) CJK UNIFIED IDEOGRAPH-36C7	[FB80 B6C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_445)
{
    // 36C7 003F;	
    // (㛇) CJK UNIFIED IDEOGRAPH-36C7	[FB80 B6C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_446)
{
    // 36C7 0061;	
    // (㛇) CJK UNIFIED IDEOGRAPH-36C7	[FB80 B6C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_447)
{
    // 36C7 0041;	
    // (㛇) CJK UNIFIED IDEOGRAPH-36C7	[FB80 B6C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_448)
{
    // 36C7 0062;	
    // (㛇) CJK UNIFIED IDEOGRAPH-36C7	[FB80 B6C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_449)
{
    // 36C8 0021;	
    // (㛈) CJK UNIFIED IDEOGRAPH-36C8	[FB80 B6C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_450)
{
    // 36C8 003F;	
    // (㛈) CJK UNIFIED IDEOGRAPH-36C8	[FB80 B6C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_451)
{
    // 36C8 0061;	
    // (㛈) CJK UNIFIED IDEOGRAPH-36C8	[FB80 B6C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_452)
{
    // 36C8 0041;	
    // (㛈) CJK UNIFIED IDEOGRAPH-36C8	[FB80 B6C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_453)
{
    // 36C8 0062;	
    // (㛈) CJK UNIFIED IDEOGRAPH-36C8	[FB80 B6C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_454)
{
    // 36C9 0021;	
    // (㛉) CJK UNIFIED IDEOGRAPH-36C9	[FB80 B6C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_455)
{
    // 36C9 003F;	
    // (㛉) CJK UNIFIED IDEOGRAPH-36C9	[FB80 B6C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_456)
{
    // 36C9 0061;	
    // (㛉) CJK UNIFIED IDEOGRAPH-36C9	[FB80 B6C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_457)
{
    // 36C9 0041;	
    // (㛉) CJK UNIFIED IDEOGRAPH-36C9	[FB80 B6C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_458)
{
    // 36C9 0062;	
    // (㛉) CJK UNIFIED IDEOGRAPH-36C9	[FB80 B6C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_459)
{
    // 36CA 0021;	
    // (㛊) CJK UNIFIED IDEOGRAPH-36CA	[FB80 B6CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_460)
{
    // 36CA 003F;	
    // (㛊) CJK UNIFIED IDEOGRAPH-36CA	[FB80 B6CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_461)
{
    // 36CA 0061;	
    // (㛊) CJK UNIFIED IDEOGRAPH-36CA	[FB80 B6CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_462)
{
    // 36CA 0041;	
    // (㛊) CJK UNIFIED IDEOGRAPH-36CA	[FB80 B6CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_463)
{
    // 36CA 0062;	
    // (㛊) CJK UNIFIED IDEOGRAPH-36CA	[FB80 B6CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_464)
{
    // 36CB 0021;	
    // (㛋) CJK UNIFIED IDEOGRAPH-36CB	[FB80 B6CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_465)
{
    // 36CB 003F;	
    // (㛋) CJK UNIFIED IDEOGRAPH-36CB	[FB80 B6CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_466)
{
    // 36CB 0061;	
    // (㛋) CJK UNIFIED IDEOGRAPH-36CB	[FB80 B6CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_467)
{
    // 36CB 0041;	
    // (㛋) CJK UNIFIED IDEOGRAPH-36CB	[FB80 B6CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_468)
{
    // 36CB 0062;	
    // (㛋) CJK UNIFIED IDEOGRAPH-36CB	[FB80 B6CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_469)
{
    // 36CC 0021;	
    // (㛌) CJK UNIFIED IDEOGRAPH-36CC	[FB80 B6CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_470)
{
    // 36CC 003F;	
    // (㛌) CJK UNIFIED IDEOGRAPH-36CC	[FB80 B6CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_471)
{
    // 36CC 0061;	
    // (㛌) CJK UNIFIED IDEOGRAPH-36CC	[FB80 B6CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_472)
{
    // 36CC 0041;	
    // (㛌) CJK UNIFIED IDEOGRAPH-36CC	[FB80 B6CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_473)
{
    // 36CC 0062;	
    // (㛌) CJK UNIFIED IDEOGRAPH-36CC	[FB80 B6CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_474)
{
    // 36CD 0021;	
    // (㛍) CJK UNIFIED IDEOGRAPH-36CD	[FB80 B6CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_475)
{
    // 36CD 003F;	
    // (㛍) CJK UNIFIED IDEOGRAPH-36CD	[FB80 B6CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_476)
{
    // 36CD 0061;	
    // (㛍) CJK UNIFIED IDEOGRAPH-36CD	[FB80 B6CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_477)
{
    // 36CD 0041;	
    // (㛍) CJK UNIFIED IDEOGRAPH-36CD	[FB80 B6CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_478)
{
    // 36CD 0062;	
    // (㛍) CJK UNIFIED IDEOGRAPH-36CD	[FB80 B6CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_479)
{
    // 36CE 0021;	
    // (㛎) CJK UNIFIED IDEOGRAPH-36CE	[FB80 B6CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_480)
{
    // 36CE 003F;	
    // (㛎) CJK UNIFIED IDEOGRAPH-36CE	[FB80 B6CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_481)
{
    // 36CE 0061;	
    // (㛎) CJK UNIFIED IDEOGRAPH-36CE	[FB80 B6CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_482)
{
    // 36CE 0041;	
    // (㛎) CJK UNIFIED IDEOGRAPH-36CE	[FB80 B6CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_483)
{
    // 36CE 0062;	
    // (㛎) CJK UNIFIED IDEOGRAPH-36CE	[FB80 B6CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_484)
{
    // 36CF 0021;	
    // (㛏) CJK UNIFIED IDEOGRAPH-36CF	[FB80 B6CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_485)
{
    // 36CF 003F;	
    // (㛏) CJK UNIFIED IDEOGRAPH-36CF	[FB80 B6CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_486)
{
    // 36CF 0061;	
    // (㛏) CJK UNIFIED IDEOGRAPH-36CF	[FB80 B6CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_487)
{
    // 36CF 0041;	
    // (㛏) CJK UNIFIED IDEOGRAPH-36CF	[FB80 B6CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_488)
{
    // 36CF 0062;	
    // (㛏) CJK UNIFIED IDEOGRAPH-36CF	[FB80 B6CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_489)
{
    // 36D0 0021;	
    // (㛐) CJK UNIFIED IDEOGRAPH-36D0	[FB80 B6D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_490)
{
    // 36D0 003F;	
    // (㛐) CJK UNIFIED IDEOGRAPH-36D0	[FB80 B6D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_491)
{
    // 36D0 0061;	
    // (㛐) CJK UNIFIED IDEOGRAPH-36D0	[FB80 B6D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_492)
{
    // 36D0 0041;	
    // (㛐) CJK UNIFIED IDEOGRAPH-36D0	[FB80 B6D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_493)
{
    // 36D0 0062;	
    // (㛐) CJK UNIFIED IDEOGRAPH-36D0	[FB80 B6D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_494)
{
    // 36D1 0021;	
    // (㛑) CJK UNIFIED IDEOGRAPH-36D1	[FB80 B6D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_495)
{
    // 36D1 003F;	
    // (㛑) CJK UNIFIED IDEOGRAPH-36D1	[FB80 B6D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB6D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_496)
{
    // 36D1 0061;	
    // (㛑) CJK UNIFIED IDEOGRAPH-36D1	[FB80 B6D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_497)
{
    // 36D1 0041;	
    // (㛑) CJK UNIFIED IDEOGRAPH-36D1	[FB80 B6D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x36D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_498)
{
    // 36D1 0062;	
    // (㛑) CJK UNIFIED IDEOGRAPH-36D1	[FB80 B6D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_333_499)
{
    // 36D2 0021;	
    // (㛒) CJK UNIFIED IDEOGRAPH-36D2	[FB80 B6D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x36D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB6D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

