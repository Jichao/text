// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_075_000)
{
    // 2E35  ; [*0237.0020.0002] 
    // TURNED SEMICOLON

    uint32_t const cps[1] = { 0x2e35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x237), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_001)
{
    // 2E36  ; [*03A2.0020.0002] 
    // DAGGER WITH LEFT GUARD

    uint32_t const cps[1] = { 0x2e36 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_002)
{
    // 2E37  ; [*03A3.0020.0002] 
    // DAGGER WITH RIGHT GUARD

    uint32_t const cps[1] = { 0x2e37 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_003)
{
    // 2E38  ; [*03A4.0020.0002] 
    // TURNED DAGGER

    uint32_t const cps[1] = { 0x2e38 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_004)
{
    // 2E39  ; [*038B.0020.0002] 
    // TOP HALF SECTION SIGN

    uint32_t const cps[1] = { 0x2e39 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_005)
{
    // 2E3A  ; [*0218.0020.0002] 
    // TWO-EM DASH

    uint32_t const cps[1] = { 0x2e3a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x218), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_006)
{
    // 2E3B  ; [*0219.0020.0002] 
    // THREE-EM DASH

    uint32_t const cps[1] = { 0x2e3b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x219), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_007)
{
    // 2E3C  ; [*0285.0020.0002] 
    // STENOGRAPHIC FULL STOP

    uint32_t const cps[1] = { 0x2e3c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x285), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_008)
{
    // 2E3D  ; [*02F6.0020.0002] 
    // VERTICAL SIX DOTS

    uint32_t const cps[1] = { 0x2e3d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_009)
{
    // 2E3E  ; [*0385.0020.0002] 
    // WIGGLY VERTICAL LINE

    uint32_t const cps[1] = { 0x2e3e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x385), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_010)
{
    // 2E3F  ; [*038E.0020.0002] 
    // CAPITULUM

    uint32_t const cps[1] = { 0x2e3f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_011)
{
    // 2E40  ; [*021D.0020.0002] 
    // DOUBLE HYPHEN

    uint32_t const cps[1] = { 0x2e40 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_012)
{
    // 2E41  ; [*0225.0020.0002] 
    // REVERSED COMMA

    uint32_t const cps[1] = { 0x2e41 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x225), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_013)
{
    // 2E42  ; [*0312.0020.0002] 
    // DOUBLE LOW-REVERSED-9 QUOTATION MARK

    uint32_t const cps[1] = { 0x2e42 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x312), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_014)
{
    // 2E43  ; [*021B.0020.0002] 
    // DASH WITH LEFT UPTURN

    uint32_t const cps[1] = { 0x2e43 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_015)
{
    // 2E44  ; [*03CA.0020.0002] 
    // DOUBLE SUSPENSION MARK

    uint32_t const cps[1] = { 0x2e44 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_016)
{
    // 2E45  ; [*03CB.0020.0002] 
    // INVERTED LOW KAVYKA

    uint32_t const cps[1] = { 0x2e45 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_017)
{
    // 2E46  ; [*03CC.0020.0002] 
    // INVERTED LOW KAVYKA WITH KAVYKA ABOVE

    uint32_t const cps[1] = { 0x2e46 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_018)
{
    // 2E47  ; [*03CD.0020.0002] 
    // LOW KAVYKA

    uint32_t const cps[1] = { 0x2e47 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_019)
{
    // 2E48  ; [*03CE.0020.0002] 
    // LOW KAVYKA WITH DOT

    uint32_t const cps[1] = { 0x2e48 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_020)
{
    // 2E49  ; [*0239.0020.0002] 
    // DOUBLE STACKED COMMA

    uint32_t const cps[1] = { 0x2e49 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x239), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_075_021)
{
    // 2E80  ; [.FB40.0020.0004][.CE36.0000.0000][.0000.0111.0004] 
    // CJK RADICAL REPEAT

    uint32_t const cps[1] = { 0x2e80 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce36), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_022)
{
    // 2E81  ; [.FB40.0020.0004][.D382.0000.0000][.0000.0111.0004] 
    // CJK RADICAL CLIFF

    uint32_t const cps[1] = { 0x2e81 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd382), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_023)
{
    // 2E82  ; [.FB40.0020.0004][.CE5B.0000.0000] 
    // CJK RADICAL SECOND ONE

    uint32_t const cps[1] = { 0x2e82 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce5b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_024)
{
    // 2E83  ; [.FB40.0020.0004][.CE5A.0000.0000] 
    // CJK RADICAL SECOND TWO

    uint32_t const cps[1] = { 0x2e83 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce5a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_025)
{
    // 2E84  ; [.FB40.0020.0004][.CE59.0000.0000][.0000.0111.0004] 
    // CJK RADICAL SECOND THREE

    uint32_t const cps[1] = { 0x2e84 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce59), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_026)
{
    // 2E85  ; [.FB40.0020.0004][.CEBB.0000.0000] 
    // CJK RADICAL PERSON

    uint32_t const cps[1] = { 0x2e85 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xcebb), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_027)
{
    // 2E86  ; [.FB40.0020.0004][.D182.0000.0000][.0000.0111.0004] 
    // CJK RADICAL BOX

    uint32_t const cps[1] = { 0x2e86 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd182), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_028)
{
    // 2E87  ; [.FB40.0020.0004][.D1E0.0000.0000][.0000.0111.0004] 
    // CJK RADICAL TABLE

    uint32_t const cps[1] = { 0x2e87 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd1e0), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_029)
{
    // 2E88  ; [.FB40.0020.0004][.D200.0000.0000][.0000.0111.0004] 
    // CJK RADICAL KNIFE ONE

    uint32_t const cps[1] = { 0x2e88 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd200), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_030)
{
    // 2E89  ; [.FB40.0020.0004][.D202.0000.0000] 
    // CJK RADICAL KNIFE TWO

    uint32_t const cps[1] = { 0x2e89 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd202), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_031)
{
    // 2E8A  ; [.FB40.0020.0004][.D35C.0000.0000][.0000.0111.0004] 
    // CJK RADICAL DIVINATION

    uint32_t const cps[1] = { 0x2e8a };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd35c), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_032)
{
    // 2E8B  ; [.FB40.0020.0004][.D369.0000.0000][.0000.0111.0004] 
    // CJK RADICAL SEAL

    uint32_t const cps[1] = { 0x2e8b };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd369), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_033)
{
    // 2E8C  ; [.FB40.0020.0004][.DC0F.0000.0000][.0000.0111.0004] 
    // CJK RADICAL SMALL ONE

    uint32_t const cps[1] = { 0x2e8c };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xdc0f), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_034)
{
    // 2E8D  ; [.FB40.0020.0004][.DC0F.0000.0000][.0000.0112.0004] 
    // CJK RADICAL SMALL TWO

    uint32_t const cps[1] = { 0x2e8d };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xdc0f), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_035)
{
    // 2E8E  ; [.FB40.0020.0004][.DC22.0000.0000][.0000.0111.0004] 
    // CJK RADICAL LAME ONE

    uint32_t const cps[1] = { 0x2e8e };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xdc22), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_036)
{
    // 2E8F  ; [.FB40.0020.0004][.DC23.0000.0000] 
    // CJK RADICAL LAME TWO

    uint32_t const cps[1] = { 0x2e8f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xdc23), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_037)
{
    // 2E90  ; [.FB40.0020.0004][.DC22.0000.0000] 
    // CJK RADICAL LAME THREE

    uint32_t const cps[1] = { 0x2e90 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xdc22), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_038)
{
    // 2E91  ; [.FB40.0020.0004][.DC23.0000.0000][.0000.0111.0004] 
    // CJK RADICAL LAME FOUR

    uint32_t const cps[1] = { 0x2e91 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xdc23), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_039)
{
    // 2E92  ; [.FB40.0020.0004][.DDF3.0000.0000] 
    // CJK RADICAL SNAKE

    uint32_t const cps[1] = { 0x2e92 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xddf3), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_040)
{
    // 2E93  ; [.FB40.0020.0004][.DE7A.0000.0000] 
    // CJK RADICAL THREAD

    uint32_t const cps[1] = { 0x2e93 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xde7a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_041)
{
    // 2E94  ; [.FB40.0020.0004][.DF51.0000.0000] 
    // CJK RADICAL SNOUT ONE

    uint32_t const cps[1] = { 0x2e94 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xdf51), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_042)
{
    // 2E95  ; [.FB40.0020.0004][.DF50.0000.0000][.0000.0111.0004] 
    // CJK RADICAL SNOUT TWO

    uint32_t const cps[1] = { 0x2e95 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xdf50), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_043)
{
    // 2E96  ; [.FB40.0020.0004][.DFC4.0000.0000] 
    // CJK RADICAL HEART ONE

    uint32_t const cps[1] = { 0x2e96 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xdfc4), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_044)
{
    // 2E97  ; [.FB40.0020.0004][.DFC3.0000.0000][.0000.0111.0004] 
    // CJK RADICAL HEART TWO

    uint32_t const cps[1] = { 0x2e97 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xdfc3), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_045)
{
    // 2E98  ; [.FB40.0020.0004][.E24C.0000.0000] 
    // CJK RADICAL HAND

    uint32_t const cps[1] = { 0x2e98 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe24c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_046)
{
    // 2E99  ; [.FB40.0020.0004][.E535.0000.0000] 
    // CJK RADICAL RAP

    uint32_t const cps[1] = { 0x2e99 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe535), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_047)
{
    // 2E9B  ; [.FB40.0020.0004][.E5E1.0000.0000] 
    // CJK RADICAL CHOKE

    uint32_t const cps[1] = { 0x2e9b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e1), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_048)
{
    // 2E9C  ; [.FB40.0020.0004][.E5E5.0000.0000][.0000.0111.0004] 
    // CJK RADICAL SUN

    uint32_t const cps[1] = { 0x2e9c };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_049)
{
    // 2E9D  ; [.FB40.0020.0004][.E708.0000.0000][.0000.0111.0004] 
    // CJK RADICAL MOON

    uint32_t const cps[1] = { 0x2e9d };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_050)
{
    // 2E9E  ; [.FB40.0020.0004][.EB7A.0000.0000][.0000.0111.0004] 
    // CJK RADICAL DEATH

    uint32_t const cps[1] = { 0x2e9e };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xeb7a), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_051)
{
    // 2E9F  ; [.FB40.0020.0004][.EBCD.0000.0000] 
    // CJK RADICAL MOTHER

    uint32_t const cps[1] = { 0x2e9f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xebcd), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_052)
{
    // 2EA0  ; [.FB40.0020.0004][.EC11.0000.0000] 
    // CJK RADICAL CIVILIAN

    uint32_t const cps[1] = { 0x2ea0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xec11), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_053)
{
    // 2EA1  ; [.FB40.0020.0004][.EC35.0000.0000] 
    // CJK RADICAL WATER ONE

    uint32_t const cps[1] = { 0x2ea1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xec35), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_054)
{
    // 2EA2  ; [.FB40.0020.0004][.EC3A.0000.0000] 
    // CJK RADICAL WATER TWO

    uint32_t const cps[1] = { 0x2ea2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xec3a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_055)
{
    // 2EA3  ; [.FB40.0020.0004][.F06C.0000.0000] 
    // CJK RADICAL FIRE

    uint32_t const cps[1] = { 0x2ea3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf06c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_056)
{
    // 2EA4  ; [.FB40.0020.0004][.F22B.0000.0000] 
    // CJK RADICAL PAW ONE

    uint32_t const cps[1] = { 0x2ea4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf22b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_057)
{
    // 2EA5  ; [.FB40.0020.0004][.F22B.0000.0000][.0000.0111.0004] 
    // CJK RADICAL PAW TWO

    uint32_t const cps[1] = { 0x2ea5 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf22b), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_058)
{
    // 2EA6  ; [.FB40.0020.0004][.CE2C.0000.0000] 
    // CJK RADICAL SIMPLIFIED HALF TREE TRUNK

    uint32_t const cps[1] = { 0x2ea6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce2c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_059)
{
    // 2EA7  ; [.FB40.0020.0004][.F25B.0000.0000][.0000.0111.0004] 
    // CJK RADICAL COW

    uint32_t const cps[1] = { 0x2ea7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf25b), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_060)
{
    // 2EA8  ; [.FB40.0020.0004][.F2AD.0000.0000] 
    // CJK RADICAL DOG

    uint32_t const cps[1] = { 0x2ea8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf2ad), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_061)
{
    // 2EA9  ; [.FB40.0020.0004][.F38B.0000.0000][.0000.0111.0004] 
    // CJK RADICAL JADE

    uint32_t const cps[1] = { 0x2ea9 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf38b), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_062)
{
    // 2EAA  ; [.FB40.0020.0004][.F58B.0000.0000][.0000.0111.0004] 
    // CJK RADICAL BOLT OF CLOTH

    uint32_t const cps[1] = { 0x2eaa };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf58b), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_063)
{
    // 2EAB  ; [.FB40.0020.0004][.F6EE.0000.0000][.0000.0111.0004] 
    // CJK RADICAL EYE

    uint32_t const cps[1] = { 0x2eab };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf6ee), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_064)
{
    // 2EAC  ; [.FB40.0020.0004][.F93A.0000.0000][.0000.0111.0004] 
    // CJK RADICAL SPIRIT ONE

    uint32_t const cps[1] = { 0x2eac };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf93a), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_065)
{
    // 2EAD  ; [.FB40.0020.0004][.F93B.0000.0000] 
    // CJK RADICAL SPIRIT TWO

    uint32_t const cps[1] = { 0x2ead };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf93b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_066)
{
    // 2EAE  ; [.FB40.0020.0004][.FAF9.0000.0000][.0000.0111.0004] 
    // CJK RADICAL BAMBOO

    uint32_t const cps[1] = { 0x2eae };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfaf9), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_067)
{
    // 2EAF  ; [.FB40.0020.0004][.FCF9.0000.0000] 
    // CJK RADICAL SILK

    uint32_t const cps[1] = { 0x2eaf };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfcf9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_068)
{
    // 2EB0  ; [.FB40.0020.0004][.FE9F.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED SILK

    uint32_t const cps[1] = { 0x2eb0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfe9f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_069)
{
    // 2EB1  ; [.FB40.0020.0004][.FF53.0000.0000] 
    // CJK RADICAL NET ONE

    uint32_t const cps[1] = { 0x2eb1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xff53), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_070)
{
    // 2EB2  ; [.FB40.0020.0004][.FF52.0000.0000] 
    // CJK RADICAL NET TWO

    uint32_t const cps[1] = { 0x2eb2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xff52), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_071)
{
    // 2EB3  ; [.FB40.0020.0004][.FF53.0000.0000][.0000.0111.0004] 
    // CJK RADICAL NET THREE

    uint32_t const cps[1] = { 0x2eb3 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xff53), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_072)
{
    // 2EB4  ; [.FB40.0020.0004][.FF53.0000.0000][.0000.0112.0004] 
    // CJK RADICAL NET FOUR

    uint32_t const cps[1] = { 0x2eb4 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xff53), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_073)
{
    // 2EB5  ; [.FB40.0020.0004][.FF52.0000.0000][.0000.0111.0004] 
    // CJK RADICAL MESH

    uint32_t const cps[1] = { 0x2eb5 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xff52), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_074)
{
    // 2EB6  ; [.FB40.0020.0004][.FF8A.0000.0000][.0000.0111.0004] 
    // CJK RADICAL SHEEP

    uint32_t const cps[1] = { 0x2eb6 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xff8a), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_075)
{
    // 2EB7  ; [.FB40.0020.0004][.FF8A.0000.0000][.0000.0112.0004] 
    // CJK RADICAL RAM

    uint32_t const cps[1] = { 0x2eb7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xff8a), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_076)
{
    // 2EB8  ; [.FB40.0020.0004][.FF8B.0000.0000] 
    // CJK RADICAL EWE

    uint32_t const cps[1] = { 0x2eb8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xff8b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_077)
{
    // 2EB9  ; [.FB41.0020.0004][.8002.0000.0000] 
    // CJK RADICAL OLD

    uint32_t const cps[1] = { 0x2eb9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8002), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_078)
{
    // 2EBA  ; [.FB41.0020.0004][.8080.0000.0000] 
    // CJK RADICAL BRUSH ONE

    uint32_t const cps[1] = { 0x2eba };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8080), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_079)
{
    // 2EBB  ; [.FB41.0020.0004][.807F.0000.0000][.0000.0111.0004] 
    // CJK RADICAL BRUSH TWO

    uint32_t const cps[1] = { 0x2ebb };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x807f), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_080)
{
    // 2EBC  ; [.FB41.0020.0004][.8089.0000.0000][.0000.0111.0004] 
    // CJK RADICAL MEAT

    uint32_t const cps[1] = { 0x2ebc };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8089), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_081)
{
    // 2EBD  ; [.FB41.0020.0004][.81FC.0000.0000][.0000.0111.0004] 
    // CJK RADICAL MORTAR

    uint32_t const cps[1] = { 0x2ebd };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x81fc), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_082)
{
    // 2EBE  ; [.FB41.0020.0004][.8279.0000.0000] 
    // CJK RADICAL GRASS ONE

    uint32_t const cps[1] = { 0x2ebe };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8279), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_083)
{
    // 2EBF  ; [.FB41.0020.0004][.8279.0000.0000][.0000.0111.0004] 
    // CJK RADICAL GRASS TWO

    uint32_t const cps[1] = { 0x2ebf };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8279), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_084)
{
    // 2EC0  ; [.FB41.0020.0004][.8279.0000.0000][.0000.0112.0004] 
    // CJK RADICAL GRASS THREE

    uint32_t const cps[1] = { 0x2ec0 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8279), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_085)
{
    // 2EC1  ; [.FB41.0020.0004][.864E.0000.0000] 
    // CJK RADICAL TIGER

    uint32_t const cps[1] = { 0x2ec1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x864e), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_086)
{
    // 2EC2  ; [.FB41.0020.0004][.8864.0000.0000] 
    // CJK RADICAL CLOTHES

    uint32_t const cps[1] = { 0x2ec2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8864), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_087)
{
    // 2EC3  ; [.FB41.0020.0004][.8980.0000.0000] 
    // CJK RADICAL WEST ONE

    uint32_t const cps[1] = { 0x2ec3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8980), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_088)
{
    // 2EC4  ; [.FB41.0020.0004][.897F.0000.0000] 
    // CJK RADICAL WEST TWO

    uint32_t const cps[1] = { 0x2ec4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x897f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_089)
{
    // 2EC5  ; [.FB41.0020.0004][.89C1.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED SEE

    uint32_t const cps[1] = { 0x2ec5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x89c1), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_090)
{
    // 2EC6  ; [.FB41.0020.0004][.89D2.0000.0000] 
    // CJK RADICAL SIMPLIFIED HORN

    uint32_t const cps[1] = { 0x2ec6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x89d2), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_091)
{
    // 2EC7  ; [.FB41.0020.0004][.89D2.0000.0000][.0000.0111.0004] 
    // CJK RADICAL HORN

    uint32_t const cps[1] = { 0x2ec7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x89d2), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_092)
{
    // 2EC8  ; [.FB41.0020.0004][.8BA0.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED SPEECH

    uint32_t const cps[1] = { 0x2ec8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8ba0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_093)
{
    // 2EC9  ; [.FB41.0020.0004][.8D1D.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED SHELL

    uint32_t const cps[1] = { 0x2ec9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8d1d), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_094)
{
    // 2ECA  ; [.FB41.0020.0004][.8DB3.0000.0000][.0000.0111.0004] 
    // CJK RADICAL FOOT

    uint32_t const cps[1] = { 0x2eca };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8db3), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_095)
{
    // 2ECB  ; [.FB41.0020.0004][.8F66.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED CART

    uint32_t const cps[1] = { 0x2ecb };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8f66), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_096)
{
    // 2ECC  ; [.FB41.0020.0004][.8FB6.0000.0000] 
    // CJK RADICAL SIMPLIFIED WALK

    uint32_t const cps[1] = { 0x2ecc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8fb6), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_097)
{
    // 2ECD  ; [.FB41.0020.0004][.8FB6.0000.0000][.0000.0111.0004] 
    // CJK RADICAL WALK ONE

    uint32_t const cps[1] = { 0x2ecd };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8fb6), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_098)
{
    // 2ECE  ; [.FB41.0020.0004][.8FB6.0000.0000][.0000.0112.0004] 
    // CJK RADICAL WALK TWO

    uint32_t const cps[1] = { 0x2ece };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8fb6), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_099)
{
    // 2ECF  ; [.FB41.0020.0004][.9091.0000.0000][.0000.0111.0004] 
    // CJK RADICAL CITY

    uint32_t const cps[1] = { 0x2ecf };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9091), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_100)
{
    // 2ED0  ; [.FB41.0020.0004][.9485.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED GOLD

    uint32_t const cps[1] = { 0x2ed0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9485), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_101)
{
    // 2ED1  ; [.FB41.0020.0004][.9577.0000.0000] 
    // CJK RADICAL LONG ONE

    uint32_t const cps[1] = { 0x2ed1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9577), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_102)
{
    // 2ED2  ; [.FB41.0020.0004][.9578.0000.0000] 
    // CJK RADICAL LONG TWO

    uint32_t const cps[1] = { 0x2ed2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9578), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_103)
{
    // 2ED3  ; [.FB41.0020.0004][.957F.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED LONG

    uint32_t const cps[1] = { 0x2ed3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x957f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_104)
{
    // 2ED4  ; [.FB41.0020.0004][.95E8.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED GATE

    uint32_t const cps[1] = { 0x2ed4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x95e8), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_105)
{
    // 2ED5  ; [.FB41.0020.0004][.961C.0000.0000][.0000.0111.0004] 
    // CJK RADICAL MOUND ONE

    uint32_t const cps[1] = { 0x2ed5 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x961c), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_106)
{
    // 2ED6  ; [.FB41.0020.0004][.961D.0000.0000] 
    // CJK RADICAL MOUND TWO

    uint32_t const cps[1] = { 0x2ed6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x961d), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_107)
{
    // 2ED7  ; [.FB41.0020.0004][.96E8.0000.0000][.0000.0111.0004] 
    // CJK RADICAL RAIN

    uint32_t const cps[1] = { 0x2ed7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x96e8), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_108)
{
    // 2ED8  ; [.FB41.0020.0004][.9752.0000.0000] 
    // CJK RADICAL BLUE

    uint32_t const cps[1] = { 0x2ed8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9752), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_109)
{
    // 2ED9  ; [.FB41.0020.0004][.97E6.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED TANNED LEATHER

    uint32_t const cps[1] = { 0x2ed9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x97e6), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_110)
{
    // 2EDA  ; [.FB41.0020.0004][.9875.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED LEAF

    uint32_t const cps[1] = { 0x2eda };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9875), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_111)
{
    // 2EDB  ; [.FB41.0020.0004][.98CE.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED WIND

    uint32_t const cps[1] = { 0x2edb };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x98ce), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_112)
{
    // 2EDC  ; [.FB41.0020.0004][.98DE.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED FLY

    uint32_t const cps[1] = { 0x2edc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x98de), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_113)
{
    // 2EDD  ; [.FB41.0020.0004][.98DF.0000.0000] 
    // CJK RADICAL EAT ONE

    uint32_t const cps[1] = { 0x2edd };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x98df), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_114)
{
    // 2EDE  ; [.FB41.0020.0004][.98E0.0000.0000][.0000.0111.0004] 
    // CJK RADICAL EAT TWO

    uint32_t const cps[1] = { 0x2ede };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x98e0), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_115)
{
    // 2EDF  ; [.FB41.0020.0004][.98E0.0000.0000] 
    // CJK RADICAL EAT THREE

    uint32_t const cps[1] = { 0x2edf };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x98e0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_116)
{
    // 2EE0  ; [.FB41.0020.0004][.9963.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED EAT

    uint32_t const cps[1] = { 0x2ee0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9963), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_117)
{
    // 2EE1  ; [.FB41.0020.0004][.9996.0000.0000][.0000.0111.0004] 
    // CJK RADICAL HEAD

    uint32_t const cps[1] = { 0x2ee1 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9996), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_118)
{
    // 2EE2  ; [.FB41.0020.0004][.9A6C.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED HORSE

    uint32_t const cps[1] = { 0x2ee2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9a6c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_119)
{
    // 2EE3  ; [.FB41.0020.0004][.9AA8.0000.0000][.0000.0111.0004] 
    // CJK RADICAL BONE

    uint32_t const cps[1] = { 0x2ee3 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9aa8), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_120)
{
    // 2EE4  ; [.FB41.0020.0004][.9B3C.0000.0000][.0000.0111.0004] 
    // CJK RADICAL GHOST

    uint32_t const cps[1] = { 0x2ee4 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9b3c), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_121)
{
    // 2EE5  ; [.FB41.0020.0004][.9C7C.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED FISH

    uint32_t const cps[1] = { 0x2ee5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9c7c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_122)
{
    // 2EE6  ; [.FB41.0020.0004][.9E1F.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED BIRD

    uint32_t const cps[1] = { 0x2ee6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9e1f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_123)
{
    // 2EE7  ; [.FB41.0020.0004][.9E75.0000.0000][.0000.0111.0004] 
    // CJK RADICAL C-SIMPLIFIED SALT

    uint32_t const cps[1] = { 0x2ee7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9e75), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_124)
{
    // 2EE8  ; [.FB41.0020.0004][.9EA6.0000.0000] 
    // CJK RADICAL SIMPLIFIED WHEAT

    uint32_t const cps[1] = { 0x2ee8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9ea6), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_125)
{
    // 2EE9  ; [.FB41.0020.0004][.9EC4.0000.0000] 
    // CJK RADICAL SIMPLIFIED YELLOW

    uint32_t const cps[1] = { 0x2ee9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9ec4), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_126)
{
    // 2EEA  ; [.FB41.0020.0004][.9EFE.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED FROG

    uint32_t const cps[1] = { 0x2eea };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9efe), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_127)
{
    // 2EEB  ; [.FB41.0020.0004][.9F4A.0000.0000][.0000.0111.0004] 
    // CJK RADICAL J-SIMPLIFIED EVEN

    uint32_t const cps[1] = { 0x2eeb };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f4a), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_128)
{
    // 2EEC  ; [.FB41.0020.0004][.9F50.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED EVEN

    uint32_t const cps[1] = { 0x2eec };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f50), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_129)
{
    // 2EED  ; [.FB41.0020.0004][.9F52.0000.0000][.0000.0111.0004] 
    // CJK RADICAL J-SIMPLIFIED TOOTH

    uint32_t const cps[1] = { 0x2eed };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f52), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_130)
{
    // 2EEE  ; [.FB41.0020.0004][.9F7F.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED TOOTH

    uint32_t const cps[1] = { 0x2eee };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f7f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_131)
{
    // 2EEF  ; [.FB41.0020.0004][.9F8D.0000.0000][.0000.0111.0004] 
    // CJK RADICAL J-SIMPLIFIED DRAGON

    uint32_t const cps[1] = { 0x2eef };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f8d), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_132)
{
    // 2EF0  ; [.FB41.0020.0004][.9F99.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED DRAGON

    uint32_t const cps[1] = { 0x2ef0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f99), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_133)
{
    // 2EF1  ; [.FB41.0020.0004][.9F9C.0000.0000][.0000.0111.0004] 
    // CJK RADICAL TURTLE

    uint32_t const cps[1] = { 0x2ef1 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f9c), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_134)
{
    // 2EF2  ; [.FB41.0020.0004][.9F9C.0000.0000][.0000.0112.0004] 
    // CJK RADICAL J-SIMPLIFIED TURTLE

    uint32_t const cps[1] = { 0x2ef2 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f9c), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_075_135)
{
    // 2EF3  ; [.FB41.0020.0004][.9F9F.0000.0000] 
    // CJK RADICAL C-SIMPLIFIED TURTLE

    uint32_t const cps[1] = { 0x2ef3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x9f9f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_136)
{
    // 2F00  ; [.FB40.0020.0004][.CE00.0000.0000] 
    // KANGXI RADICAL ONE

    uint32_t const cps[1] = { 0x2f00 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce00), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_137)
{
    // 2F01  ; [.FB40.0020.0004][.CE28.0000.0000] 
    // KANGXI RADICAL LINE

    uint32_t const cps[1] = { 0x2f01 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce28), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_138)
{
    // 2F02  ; [.FB40.0020.0004][.CE36.0000.0000] 
    // KANGXI RADICAL DOT

    uint32_t const cps[1] = { 0x2f02 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce36), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_139)
{
    // 2F03  ; [.FB40.0020.0004][.CE3F.0000.0000] 
    // KANGXI RADICAL SLASH

    uint32_t const cps[1] = { 0x2f03 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce3f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_140)
{
    // 2F04  ; [.FB40.0020.0004][.CE59.0000.0000] 
    // KANGXI RADICAL SECOND

    uint32_t const cps[1] = { 0x2f04 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce59), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_141)
{
    // 2F05  ; [.FB40.0020.0004][.CE85.0000.0000] 
    // KANGXI RADICAL HOOK

    uint32_t const cps[1] = { 0x2f05 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce85), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_142)
{
    // 2F06  ; [.FB40.0020.0004][.CE8C.0000.0000] 
    // KANGXI RADICAL TWO

    uint32_t const cps[1] = { 0x2f06 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce8c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_143)
{
    // 2F07  ; [.FB40.0020.0004][.CEA0.0000.0000] 
    // KANGXI RADICAL LID

    uint32_t const cps[1] = { 0x2f07 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xcea0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_144)
{
    // 2F08  ; [.FB40.0020.0004][.CEBA.0000.0000] 
    // KANGXI RADICAL MAN

    uint32_t const cps[1] = { 0x2f08 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xceba), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_145)
{
    // 2F09  ; [.FB40.0020.0004][.D13F.0000.0000] 
    // KANGXI RADICAL LEGS

    uint32_t const cps[1] = { 0x2f09 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd13f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_146)
{
    // 2F0A  ; [.FB40.0020.0004][.D165.0000.0000] 
    // KANGXI RADICAL ENTER

    uint32_t const cps[1] = { 0x2f0a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd165), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_147)
{
    // 2F0B  ; [.FB40.0020.0004][.D16B.0000.0000] 
    // KANGXI RADICAL EIGHT

    uint32_t const cps[1] = { 0x2f0b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd16b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_148)
{
    // 2F0C  ; [.FB40.0020.0004][.D182.0000.0000] 
    // KANGXI RADICAL DOWN BOX

    uint32_t const cps[1] = { 0x2f0c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd182), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_075_149)
{
    // 2F0D  ; [.FB40.0020.0004][.D196.0000.0000] 
    // KANGXI RADICAL COVER

    uint32_t const cps[1] = { 0x2f0d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd196), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

