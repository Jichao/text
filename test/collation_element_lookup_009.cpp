// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_009_000)
{
    // 054A  ; [.230F.0020.0008] 
    // ARMENIAN CAPITAL LETTER PEH

    uint32_t const cps[1] = { 0x54a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_001)
{
    // 054B  ; [.2310.0020.0008] 
    // ARMENIAN CAPITAL LETTER JHEH

    uint32_t const cps[1] = { 0x54b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2310), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_002)
{
    // 054C  ; [.2311.0020.0008] 
    // ARMENIAN CAPITAL LETTER RA

    uint32_t const cps[1] = { 0x54c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2311), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_003)
{
    // 054D  ; [.2312.0020.0008] 
    // ARMENIAN CAPITAL LETTER SEH

    uint32_t const cps[1] = { 0x54d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2312), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_004)
{
    // 054E  ; [.2313.0020.0008] 
    // ARMENIAN CAPITAL LETTER VEW

    uint32_t const cps[1] = { 0x54e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2313), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_005)
{
    // 054F  ; [.2314.0020.0008] 
    // ARMENIAN CAPITAL LETTER TIWN

    uint32_t const cps[1] = { 0x54f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2314), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_006)
{
    // 0550  ; [.2315.0020.0008] 
    // ARMENIAN CAPITAL LETTER REH

    uint32_t const cps[1] = { 0x550 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2315), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_007)
{
    // 0551  ; [.2316.0020.0008] 
    // ARMENIAN CAPITAL LETTER CO

    uint32_t const cps[1] = { 0x551 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2316), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_008)
{
    // 0552  ; [.2317.0020.0008] 
    // ARMENIAN CAPITAL LETTER YIWN

    uint32_t const cps[1] = { 0x552 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2317), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_009)
{
    // 0553  ; [.2318.0020.0008] 
    // ARMENIAN CAPITAL LETTER PIWR

    uint32_t const cps[1] = { 0x553 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2318), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_010)
{
    // 0554  ; [.2319.0020.0008] 
    // ARMENIAN CAPITAL LETTER KEH

    uint32_t const cps[1] = { 0x554 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2319), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_011)
{
    // 0555  ; [.231A.0020.0008] 
    // ARMENIAN CAPITAL LETTER OH

    uint32_t const cps[1] = { 0x555 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x231a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_012)
{
    // 0556  ; [.231B.0020.0008] 
    // ARMENIAN CAPITAL LETTER FEH

    uint32_t const cps[1] = { 0x556 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x231b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_013)
{
    // 0559  ; [.231C.0020.0002] 
    // ARMENIAN MODIFIER LETTER LEFT HALF RING

    uint32_t const cps[1] = { 0x559 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x231c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_014)
{
    // 055A  ; [*03D0.0020.0002] 
    // ARMENIAN APOSTROPHE

    uint32_t const cps[1] = { 0x55a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_015)
{
    // 055B  ; [*03D1.0020.0002] 
    // ARMENIAN EMPHASIS MARK

    uint32_t const cps[1] = { 0x55b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_016)
{
    // 055C  ; [*0263.0020.0002] 
    // ARMENIAN EXCLAMATION MARK

    uint32_t const cps[1] = { 0x55c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x263), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_017)
{
    // 055D  ; [*0226.0020.0002] 
    // ARMENIAN COMMA

    uint32_t const cps[1] = { 0x55d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x226), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_018)
{
    // 055E  ; [*026A.0020.0002] 
    // ARMENIAN QUESTION MARK

    uint32_t const cps[1] = { 0x55e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_019)
{
    // 055F  ; [*03D2.0020.0002] 
    // ARMENIAN ABBREVIATION MARK

    uint32_t const cps[1] = { 0x55f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_020)
{
    // 0561  ; [.22F6.0020.0002] 
    // ARMENIAN SMALL LETTER AYB

    uint32_t const cps[1] = { 0x561 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_021)
{
    // 0562  ; [.22F7.0020.0002] 
    // ARMENIAN SMALL LETTER BEN

    uint32_t const cps[1] = { 0x562 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_022)
{
    // 0563  ; [.22F8.0020.0002] 
    // ARMENIAN SMALL LETTER GIM

    uint32_t const cps[1] = { 0x563 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_023)
{
    // 0564  ; [.22F9.0020.0002] 
    // ARMENIAN SMALL LETTER DA

    uint32_t const cps[1] = { 0x564 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_024)
{
    // 0565  ; [.22FA.0020.0002] 
    // ARMENIAN SMALL LETTER ECH

    uint32_t const cps[1] = { 0x565 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_025)
{
    // 0566  ; [.22FB.0020.0002] 
    // ARMENIAN SMALL LETTER ZA

    uint32_t const cps[1] = { 0x566 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_026)
{
    // 0567  ; [.22FC.0020.0002] 
    // ARMENIAN SMALL LETTER EH

    uint32_t const cps[1] = { 0x567 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_027)
{
    // 0568  ; [.22FD.0020.0002] 
    // ARMENIAN SMALL LETTER ET

    uint32_t const cps[1] = { 0x568 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_028)
{
    // 0569  ; [.22FE.0020.0002] 
    // ARMENIAN SMALL LETTER TO

    uint32_t const cps[1] = { 0x569 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_029)
{
    // 056A  ; [.22FF.0020.0002] 
    // ARMENIAN SMALL LETTER ZHE

    uint32_t const cps[1] = { 0x56a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_030)
{
    // 056B  ; [.2300.0020.0002] 
    // ARMENIAN SMALL LETTER INI

    uint32_t const cps[1] = { 0x56b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2300), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_031)
{
    // 056C  ; [.2301.0020.0002] 
    // ARMENIAN SMALL LETTER LIWN

    uint32_t const cps[1] = { 0x56c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2301), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_032)
{
    // 056D  ; [.2302.0020.0002] 
    // ARMENIAN SMALL LETTER XEH

    uint32_t const cps[1] = { 0x56d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2302), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_033)
{
    // 056E  ; [.2303.0020.0002] 
    // ARMENIAN SMALL LETTER CA

    uint32_t const cps[1] = { 0x56e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2303), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_034)
{
    // 056F  ; [.2304.0020.0002] 
    // ARMENIAN SMALL LETTER KEN

    uint32_t const cps[1] = { 0x56f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2304), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_035)
{
    // 0570  ; [.2305.0020.0002] 
    // ARMENIAN SMALL LETTER HO

    uint32_t const cps[1] = { 0x570 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2305), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_036)
{
    // 0571  ; [.2306.0020.0002] 
    // ARMENIAN SMALL LETTER JA

    uint32_t const cps[1] = { 0x571 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2306), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_037)
{
    // 0572  ; [.2307.0020.0002] 
    // ARMENIAN SMALL LETTER GHAD

    uint32_t const cps[1] = { 0x572 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2307), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_038)
{
    // 0573  ; [.2308.0020.0002] 
    // ARMENIAN SMALL LETTER CHEH

    uint32_t const cps[1] = { 0x573 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2308), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_039)
{
    // 0574  ; [.2309.0020.0002] 
    // ARMENIAN SMALL LETTER MEN

    uint32_t const cps[1] = { 0x574 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2309), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_040)
{
    // 0575  ; [.230A.0020.0002] 
    // ARMENIAN SMALL LETTER YI

    uint32_t const cps[1] = { 0x575 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_041)
{
    // 0576  ; [.230B.0020.0002] 
    // ARMENIAN SMALL LETTER NOW

    uint32_t const cps[1] = { 0x576 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_042)
{
    // 0577  ; [.230C.0020.0002] 
    // ARMENIAN SMALL LETTER SHA

    uint32_t const cps[1] = { 0x577 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_043)
{
    // 0578  ; [.230D.0020.0002] 
    // ARMENIAN SMALL LETTER VO

    uint32_t const cps[1] = { 0x578 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_044)
{
    // 0579  ; [.230E.0020.0002] 
    // ARMENIAN SMALL LETTER CHA

    uint32_t const cps[1] = { 0x579 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_045)
{
    // 057A  ; [.230F.0020.0002] 
    // ARMENIAN SMALL LETTER PEH

    uint32_t const cps[1] = { 0x57a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_046)
{
    // 057B  ; [.2310.0020.0002] 
    // ARMENIAN SMALL LETTER JHEH

    uint32_t const cps[1] = { 0x57b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2310), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_047)
{
    // 057C  ; [.2311.0020.0002] 
    // ARMENIAN SMALL LETTER RA

    uint32_t const cps[1] = { 0x57c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2311), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_048)
{
    // 057D  ; [.2312.0020.0002] 
    // ARMENIAN SMALL LETTER SEH

    uint32_t const cps[1] = { 0x57d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2312), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_049)
{
    // 057E  ; [.2313.0020.0002] 
    // ARMENIAN SMALL LETTER VEW

    uint32_t const cps[1] = { 0x57e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2313), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_050)
{
    // 057F  ; [.2314.0020.0002] 
    // ARMENIAN SMALL LETTER TIWN

    uint32_t const cps[1] = { 0x57f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2314), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_051)
{
    // 0580  ; [.2315.0020.0002] 
    // ARMENIAN SMALL LETTER REH

    uint32_t const cps[1] = { 0x580 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2315), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_052)
{
    // 0581  ; [.2316.0020.0002] 
    // ARMENIAN SMALL LETTER CO

    uint32_t const cps[1] = { 0x581 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2316), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_053)
{
    // 0582  ; [.2317.0020.0002] 
    // ARMENIAN SMALL LETTER YIWN

    uint32_t const cps[1] = { 0x582 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2317), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_054)
{
    // 0583  ; [.2318.0020.0002] 
    // ARMENIAN SMALL LETTER PIWR

    uint32_t const cps[1] = { 0x583 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2318), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_055)
{
    // 0584  ; [.2319.0020.0002] 
    // ARMENIAN SMALL LETTER KEH

    uint32_t const cps[1] = { 0x584 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2319), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_056)
{
    // 0585  ; [.231A.0020.0002] 
    // ARMENIAN SMALL LETTER OH

    uint32_t const cps[1] = { 0x585 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x231a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_057)
{
    // 0586  ; [.231B.0020.0002] 
    // ARMENIAN SMALL LETTER FEH

    uint32_t const cps[1] = { 0x586 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x231b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_058)
{
    // 0587  ; [.22FA.0020.0004][.2317.0020.0004] 
    // ARMENIAN SMALL LIGATURE ECH YIWN

    uint32_t const cps[1] = { 0x587 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x22fa), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2317), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_009_059)
{
    // 0589  ; [*023B.0020.0002] 
    // ARMENIAN FULL STOP

    uint32_t const cps[1] = { 0x589 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_060)
{
    // 058A  ; [*020E.0020.0002] 
    // ARMENIAN HYPHEN

    uint32_t const cps[1] = { 0x58a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_061)
{
    // 058D  ; [*050E.0020.0002] 
    // RIGHT-FACING ARMENIAN ETERNITY SIGN

    uint32_t const cps[1] = { 0x58d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x50e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_062)
{
    // 058E  ; [*050F.0020.0002] 
    // LEFT-FACING ARMENIAN ETERNITY SIGN

    uint32_t const cps[1] = { 0x58e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x50f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_063)
{
    // 058F  ; [.1C7A.0020.0002] 
    // ARMENIAN DRAM SIGN

    uint32_t const cps[1] = { 0x58f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_064)
{
    // 0591  ; [.0000.0000.0000] 
    // HEBREW ACCENT ETNAHTA

    uint32_t const cps[1] = { 0x591 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_065)
{
    // 0592  ; [.0000.0000.0000] 
    // HEBREW ACCENT SEGOL

    uint32_t const cps[1] = { 0x592 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_066)
{
    // 0593  ; [.0000.0000.0000] 
    // HEBREW ACCENT SHALSHELET

    uint32_t const cps[1] = { 0x593 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_067)
{
    // 0594  ; [.0000.0000.0000] 
    // HEBREW ACCENT ZAQEF QATAN

    uint32_t const cps[1] = { 0x594 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_068)
{
    // 0595  ; [.0000.0000.0000] 
    // HEBREW ACCENT ZAQEF GADOL

    uint32_t const cps[1] = { 0x595 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_069)
{
    // 0596  ; [.0000.0000.0000] 
    // HEBREW ACCENT TIPEHA

    uint32_t const cps[1] = { 0x596 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_070)
{
    // 0597  ; [.0000.0000.0000] 
    // HEBREW ACCENT REVIA

    uint32_t const cps[1] = { 0x597 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_071)
{
    // 0598  ; [.0000.0000.0000] 
    // HEBREW ACCENT ZARQA

    uint32_t const cps[1] = { 0x598 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_072)
{
    // 0599  ; [.0000.0000.0000] 
    // HEBREW ACCENT PASHTA

    uint32_t const cps[1] = { 0x599 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_073)
{
    // 059A  ; [.0000.0000.0000] 
    // HEBREW ACCENT YETIV

    uint32_t const cps[1] = { 0x59a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_074)
{
    // 059B  ; [.0000.0000.0000] 
    // HEBREW ACCENT TEVIR

    uint32_t const cps[1] = { 0x59b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_075)
{
    // 059C  ; [.0000.0000.0000] 
    // HEBREW ACCENT GERESH

    uint32_t const cps[1] = { 0x59c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_076)
{
    // 059D  ; [.0000.0000.0000] 
    // HEBREW ACCENT GERESH MUQDAM

    uint32_t const cps[1] = { 0x59d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_077)
{
    // 059E  ; [.0000.0000.0000] 
    // HEBREW ACCENT GERSHAYIM

    uint32_t const cps[1] = { 0x59e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_078)
{
    // 059F  ; [.0000.0000.0000] 
    // HEBREW ACCENT QARNEY PARA

    uint32_t const cps[1] = { 0x59f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_079)
{
    // 05A0  ; [.0000.0000.0000] 
    // HEBREW ACCENT TELISHA GEDOLA

    uint32_t const cps[1] = { 0x5a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_080)
{
    // 05A1  ; [.0000.0000.0000] 
    // HEBREW ACCENT PAZER

    uint32_t const cps[1] = { 0x5a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_081)
{
    // 05A2  ; [.0000.0000.0000] 
    // HEBREW ACCENT ATNAH HAFUKH

    uint32_t const cps[1] = { 0x5a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_082)
{
    // 05A3  ; [.0000.0000.0000] 
    // HEBREW ACCENT MUNAH

    uint32_t const cps[1] = { 0x5a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_083)
{
    // 05A4  ; [.0000.0000.0000] 
    // HEBREW ACCENT MAHAPAKH

    uint32_t const cps[1] = { 0x5a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_084)
{
    // 05A5  ; [.0000.0000.0000] 
    // HEBREW ACCENT MERKHA

    uint32_t const cps[1] = { 0x5a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_085)
{
    // 05A6  ; [.0000.0000.0000] 
    // HEBREW ACCENT MERKHA KEFULA

    uint32_t const cps[1] = { 0x5a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_086)
{
    // 05A7  ; [.0000.0000.0000] 
    // HEBREW ACCENT DARGA

    uint32_t const cps[1] = { 0x5a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_087)
{
    // 05A8  ; [.0000.0000.0000] 
    // HEBREW ACCENT QADMA

    uint32_t const cps[1] = { 0x5a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_088)
{
    // 05A9  ; [.0000.0000.0000] 
    // HEBREW ACCENT TELISHA QETANA

    uint32_t const cps[1] = { 0x5a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_089)
{
    // 05AA  ; [.0000.0000.0000] 
    // HEBREW ACCENT YERAH BEN YOMO

    uint32_t const cps[1] = { 0x5aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_090)
{
    // 05AB  ; [.0000.0000.0000] 
    // HEBREW ACCENT OLE

    uint32_t const cps[1] = { 0x5ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_091)
{
    // 05AC  ; [.0000.0000.0000] 
    // HEBREW ACCENT ILUY

    uint32_t const cps[1] = { 0x5ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_092)
{
    // 05AD  ; [.0000.0000.0000] 
    // HEBREW ACCENT DEHI

    uint32_t const cps[1] = { 0x5ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_093)
{
    // 05AE  ; [.0000.0000.0000] 
    // HEBREW ACCENT ZINOR

    uint32_t const cps[1] = { 0x5ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_094)
{
    // 05AF  ; [.0000.0000.0000] 
    // HEBREW MARK MASORA CIRCLE

    uint32_t const cps[1] = { 0x5af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_095)
{
    // 05B0  ; [.0000.0052.0002] 
    // HEBREW POINT SHEVA

    uint32_t const cps[1] = { 0x5b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x32), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_096)
{
    // 05B1  ; [.0000.0053.0002] 
    // HEBREW POINT HATAF SEGOL

    uint32_t const cps[1] = { 0x5b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x33), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_097)
{
    // 05B2  ; [.0000.0054.0002] 
    // HEBREW POINT HATAF PATAH

    uint32_t const cps[1] = { 0x5b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x34), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_098)
{
    // 05B3  ; [.0000.0055.0002] 
    // HEBREW POINT HATAF QAMATS

    uint32_t const cps[1] = { 0x5b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x35), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_099)
{
    // 05B4  ; [.0000.0056.0002] 
    // HEBREW POINT HIRIQ

    uint32_t const cps[1] = { 0x5b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x36), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_100)
{
    // 05B5  ; [.0000.0057.0002] 
    // HEBREW POINT TSERE

    uint32_t const cps[1] = { 0x5b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x37), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_101)
{
    // 05B6  ; [.0000.0058.0002] 
    // HEBREW POINT SEGOL

    uint32_t const cps[1] = { 0x5b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x38), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_102)
{
    // 05B7  ; [.0000.0059.0002] 
    // HEBREW POINT PATAH

    uint32_t const cps[1] = { 0x5b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x39), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_103)
{
    // 05B8  ; [.0000.005A.0002] 
    // HEBREW POINT QAMATS

    uint32_t const cps[1] = { 0x5b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x3a), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_104)
{
    // 05B9  ; [.0000.005B.0002] 
    // HEBREW POINT HOLAM

    uint32_t const cps[1] = { 0x5b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x3b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_105)
{
    // 05BA  ; [.0000.005B.0002] 
    // HEBREW POINT HOLAM HASER FOR VAV

    uint32_t const cps[1] = { 0x5ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x3b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_106)
{
    // 05BB  ; [.0000.005C.0002] 
    // HEBREW POINT QUBUTS

    uint32_t const cps[1] = { 0x5bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x3c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_107)
{
    // 05BC  ; [.0000.005F.0002] 
    // HEBREW POINT DAGESH OR MAPIQ

    uint32_t const cps[1] = { 0x5bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_108)
{
    // 05BD  ; [.0000.0000.0000] 
    // HEBREW POINT METEG

    uint32_t const cps[1] = { 0x5bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_109)
{
    // 05BE  ; [*03D3.0020.0002] 
    // HEBREW PUNCTUATION MAQAF

    uint32_t const cps[1] = { 0x5be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_110)
{
    // 05BF  ; [.0000.0060.0002] 
    // HEBREW POINT RAFE

    uint32_t const cps[1] = { 0x5bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x40), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_111)
{
    // 05C0  ; [*03D4.0020.0002] 
    // HEBREW PUNCTUATION PASEQ

    uint32_t const cps[1] = { 0x5c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_112)
{
    // 05C1  ; [.0000.005E.0002] 
    // HEBREW POINT SHIN DOT

    uint32_t const cps[1] = { 0x5c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x3e), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_113)
{
    // 05C2  ; [.0000.005D.0002] 
    // HEBREW POINT SIN DOT

    uint32_t const cps[1] = { 0x5c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x3d), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_114)
{
    // 05C3  ; [*03D5.0020.0002] 
    // HEBREW PUNCTUATION SOF PASUQ

    uint32_t const cps[1] = { 0x5c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_115)
{
    // 05C4  ; [.0000.0000.0000] 
    // HEBREW MARK UPPER DOT

    uint32_t const cps[1] = { 0x5c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_116)
{
    // 05C5  ; [.0000.0000.0000] 
    // HEBREW MARK LOWER DOT

    uint32_t const cps[1] = { 0x5c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_117)
{
    // 05C6  ; [*03D6.0020.0002] 
    // HEBREW PUNCTUATION NUN HAFUKHA

    uint32_t const cps[1] = { 0x5c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_118)
{
    // 05C7  ; [.0000.005A.0002] 
    // HEBREW POINT QAMATS QATAN

    uint32_t const cps[1] = { 0x5c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x3a), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_119)
{
    // 05D0  ; [.231D.0020.0002] 
    // HEBREW LETTER ALEF

    uint32_t const cps[1] = { 0x5d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x231d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_120)
{
    // 05D1  ; [.231E.0020.0002] 
    // HEBREW LETTER BET

    uint32_t const cps[1] = { 0x5d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x231e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_121)
{
    // 05D2  ; [.231F.0020.0002] 
    // HEBREW LETTER GIMEL

    uint32_t const cps[1] = { 0x5d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x231f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_122)
{
    // 05D3  ; [.2320.0020.0002] 
    // HEBREW LETTER DALET

    uint32_t const cps[1] = { 0x5d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2320), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_123)
{
    // 05D4  ; [.2321.0020.0002] 
    // HEBREW LETTER HE

    uint32_t const cps[1] = { 0x5d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2321), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_124)
{
    // 05D5  ; [.2322.0020.0002] 
    // HEBREW LETTER VAV

    uint32_t const cps[1] = { 0x5d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2322), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_125)
{
    // 05D6  ; [.2323.0020.0002] 
    // HEBREW LETTER ZAYIN

    uint32_t const cps[1] = { 0x5d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2323), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_126)
{
    // 05D7  ; [.2324.0020.0002] 
    // HEBREW LETTER HET

    uint32_t const cps[1] = { 0x5d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2324), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_127)
{
    // 05D8  ; [.2325.0020.0002] 
    // HEBREW LETTER TET

    uint32_t const cps[1] = { 0x5d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2325), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_128)
{
    // 05D9  ; [.2326.0020.0002] 
    // HEBREW LETTER YOD

    uint32_t const cps[1] = { 0x5d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2326), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_129)
{
    // 05DA  ; [.2327.0020.0019] 
    // HEBREW LETTER FINAL KAF

    uint32_t const cps[1] = { 0x5da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2327), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_130)
{
    // 05DB  ; [.2327.0020.0002] 
    // HEBREW LETTER KAF

    uint32_t const cps[1] = { 0x5db };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2327), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_131)
{
    // 05DC  ; [.2328.0020.0002] 
    // HEBREW LETTER LAMED

    uint32_t const cps[1] = { 0x5dc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2328), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_132)
{
    // 05DD  ; [.2329.0020.0019] 
    // HEBREW LETTER FINAL MEM

    uint32_t const cps[1] = { 0x5dd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2329), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_133)
{
    // 05DE  ; [.2329.0020.0002] 
    // HEBREW LETTER MEM

    uint32_t const cps[1] = { 0x5de };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2329), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_134)
{
    // 05DF  ; [.232A.0020.0019] 
    // HEBREW LETTER FINAL NUN

    uint32_t const cps[1] = { 0x5df };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x232a), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_135)
{
    // 05E0  ; [.232A.0020.0002] 
    // HEBREW LETTER NUN

    uint32_t const cps[1] = { 0x5e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x232a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_136)
{
    // 05E1  ; [.232B.0020.0002] 
    // HEBREW LETTER SAMEKH

    uint32_t const cps[1] = { 0x5e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x232b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_137)
{
    // 05E2  ; [.232C.0020.0002] 
    // HEBREW LETTER AYIN

    uint32_t const cps[1] = { 0x5e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x232c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_138)
{
    // 05E3  ; [.232D.0020.0019] 
    // HEBREW LETTER FINAL PE

    uint32_t const cps[1] = { 0x5e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x232d), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_139)
{
    // 05E4  ; [.232D.0020.0002] 
    // HEBREW LETTER PE

    uint32_t const cps[1] = { 0x5e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x232d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_140)
{
    // 05E5  ; [.232E.0020.0019] 
    // HEBREW LETTER FINAL TSADI

    uint32_t const cps[1] = { 0x5e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x232e), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_141)
{
    // 05E6  ; [.232E.0020.0002] 
    // HEBREW LETTER TSADI

    uint32_t const cps[1] = { 0x5e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x232e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_142)
{
    // 05E7  ; [.232F.0020.0002] 
    // HEBREW LETTER QOF

    uint32_t const cps[1] = { 0x5e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x232f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_143)
{
    // 05E8  ; [.2330.0020.0002] 
    // HEBREW LETTER RESH

    uint32_t const cps[1] = { 0x5e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2330), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_144)
{
    // 05E9  ; [.2331.0020.0002] 
    // HEBREW LETTER SHIN

    uint32_t const cps[1] = { 0x5e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2331), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_145)
{
    // 05EA  ; [.2332.0020.0002] 
    // HEBREW LETTER TAV

    uint32_t const cps[1] = { 0x5ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2332), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_009_146)
{
    // 05F0  ; [.2322.0020.0004][.2322.0020.0004] 
    // HEBREW LIGATURE YIDDISH DOUBLE VAV

    uint32_t const cps[1] = { 0x5f0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2322), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2322), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_009_147)
{
    // 05F1  ; [.2322.0020.0004][.2326.0020.0004] 
    // HEBREW LIGATURE YIDDISH VAV YOD

    uint32_t const cps[1] = { 0x5f1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2322), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2326), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_009_148)
{
    // 05F2  ; [.2326.0020.0004][.2326.0020.0004] 
    // HEBREW LIGATURE YIDDISH DOUBLE YOD

    uint32_t const cps[1] = { 0x5f2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2326), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2326), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_009_149)
{
    // 05F3  ; [*03D7.0020.0002] 
    // HEBREW PUNCTUATION GERESH

    uint32_t const cps[1] = { 0x5f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

