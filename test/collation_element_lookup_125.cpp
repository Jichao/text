// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_125_000)
{
    // 1071F ; [.4A10.0020.0002] 
    // LINEAR A SIGN A637

    uint32_t const cps[1] = { 0x1071f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a10), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_001)
{
    // 10720 ; [.4A11.0020.0002] 
    // LINEAR A SIGN A638

    uint32_t const cps[1] = { 0x10720 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a11), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_002)
{
    // 10721 ; [.4A12.0020.0002] 
    // LINEAR A SIGN A640

    uint32_t const cps[1] = { 0x10721 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a12), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_003)
{
    // 10722 ; [.4A13.0020.0002] 
    // LINEAR A SIGN A642

    uint32_t const cps[1] = { 0x10722 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a13), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_004)
{
    // 10723 ; [.4A14.0020.0002] 
    // LINEAR A SIGN A643

    uint32_t const cps[1] = { 0x10723 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a14), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_005)
{
    // 10724 ; [.4A15.0020.0002] 
    // LINEAR A SIGN A644

    uint32_t const cps[1] = { 0x10724 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a15), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_006)
{
    // 10725 ; [.4A16.0020.0002] 
    // LINEAR A SIGN A645

    uint32_t const cps[1] = { 0x10725 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a16), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_007)
{
    // 10726 ; [.4A17.0020.0002] 
    // LINEAR A SIGN A646

    uint32_t const cps[1] = { 0x10726 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a17), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_008)
{
    // 10727 ; [.4A18.0020.0002] 
    // LINEAR A SIGN A648

    uint32_t const cps[1] = { 0x10727 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_009)
{
    // 10728 ; [.4A19.0020.0002] 
    // LINEAR A SIGN A649

    uint32_t const cps[1] = { 0x10728 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a19), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_010)
{
    // 10729 ; [.4A1A.0020.0002] 
    // LINEAR A SIGN A651

    uint32_t const cps[1] = { 0x10729 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a1a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_011)
{
    // 1072A ; [.4A1B.0020.0002] 
    // LINEAR A SIGN A652

    uint32_t const cps[1] = { 0x1072a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_012)
{
    // 1072B ; [.4A1C.0020.0002] 
    // LINEAR A SIGN A653

    uint32_t const cps[1] = { 0x1072b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_013)
{
    // 1072C ; [.4A1D.0020.0002] 
    // LINEAR A SIGN A654

    uint32_t const cps[1] = { 0x1072c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_014)
{
    // 1072D ; [.4A1E.0020.0002] 
    // LINEAR A SIGN A655

    uint32_t const cps[1] = { 0x1072d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_015)
{
    // 1072E ; [.4A1F.0020.0002] 
    // LINEAR A SIGN A656

    uint32_t const cps[1] = { 0x1072e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a1f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_016)
{
    // 1072F ; [.4A20.0020.0002] 
    // LINEAR A SIGN A657

    uint32_t const cps[1] = { 0x1072f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a20), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_017)
{
    // 10730 ; [.4A21.0020.0002] 
    // LINEAR A SIGN A658

    uint32_t const cps[1] = { 0x10730 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a21), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_018)
{
    // 10731 ; [.4A22.0020.0002] 
    // LINEAR A SIGN A659

    uint32_t const cps[1] = { 0x10731 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a22), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_019)
{
    // 10732 ; [.4A23.0020.0002] 
    // LINEAR A SIGN A660

    uint32_t const cps[1] = { 0x10732 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a23), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_020)
{
    // 10733 ; [.4A24.0020.0002] 
    // LINEAR A SIGN A661

    uint32_t const cps[1] = { 0x10733 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a24), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_021)
{
    // 10734 ; [.4A25.0020.0002] 
    // LINEAR A SIGN A662

    uint32_t const cps[1] = { 0x10734 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a25), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_022)
{
    // 10735 ; [.4A26.0020.0002] 
    // LINEAR A SIGN A663

    uint32_t const cps[1] = { 0x10735 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a26), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_023)
{
    // 10736 ; [.4A27.0020.0002] 
    // LINEAR A SIGN A664

    uint32_t const cps[1] = { 0x10736 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_024)
{
    // 10740 ; [.4A28.0020.0002] 
    // LINEAR A SIGN A701 A

    uint32_t const cps[1] = { 0x10740 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a28), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_025)
{
    // 10741 ; [.4A29.0020.0002] 
    // LINEAR A SIGN A702 B

    uint32_t const cps[1] = { 0x10741 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a29), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_026)
{
    // 10742 ; [.4A2A.0020.0002] 
    // LINEAR A SIGN A703 D

    uint32_t const cps[1] = { 0x10742 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_027)
{
    // 10743 ; [.4A2B.0020.0002] 
    // LINEAR A SIGN A704 E

    uint32_t const cps[1] = { 0x10743 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_028)
{
    // 10744 ; [.4A2C.0020.0002] 
    // LINEAR A SIGN A705 F

    uint32_t const cps[1] = { 0x10744 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_029)
{
    // 10745 ; [.4A2D.0020.0002] 
    // LINEAR A SIGN A706 H

    uint32_t const cps[1] = { 0x10745 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_030)
{
    // 10746 ; [.4A2E.0020.0002] 
    // LINEAR A SIGN A707 J

    uint32_t const cps[1] = { 0x10746 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_031)
{
    // 10747 ; [.4A2F.0020.0002] 
    // LINEAR A SIGN A708 K

    uint32_t const cps[1] = { 0x10747 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_032)
{
    // 10748 ; [.4A30.0020.0002] 
    // LINEAR A SIGN A709 L

    uint32_t const cps[1] = { 0x10748 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_033)
{
    // 10749 ; [.4A31.0020.0002] 
    // LINEAR A SIGN A709-2 L2

    uint32_t const cps[1] = { 0x10749 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_034)
{
    // 1074A ; [.4A32.0020.0002] 
    // LINEAR A SIGN A709-3 L3

    uint32_t const cps[1] = { 0x1074a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_035)
{
    // 1074B ; [.4A33.0020.0002] 
    // LINEAR A SIGN A709-4 L4

    uint32_t const cps[1] = { 0x1074b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_036)
{
    // 1074C ; [.4A34.0020.0002] 
    // LINEAR A SIGN A709-6 L6

    uint32_t const cps[1] = { 0x1074c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a34), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_037)
{
    // 1074D ; [.4A35.0020.0002] 
    // LINEAR A SIGN A710 W

    uint32_t const cps[1] = { 0x1074d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_038)
{
    // 1074E ; [.4A36.0020.0002] 
    // LINEAR A SIGN A711 X

    uint32_t const cps[1] = { 0x1074e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_039)
{
    // 1074F ; [.4A37.0020.0002] 
    // LINEAR A SIGN A712 Y

    uint32_t const cps[1] = { 0x1074f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_040)
{
    // 10750 ; [.4A38.0020.0002] 
    // LINEAR A SIGN A713 OMEGA

    uint32_t const cps[1] = { 0x10750 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_041)
{
    // 10751 ; [.4A39.0020.0002] 
    // LINEAR A SIGN A714 ABB

    uint32_t const cps[1] = { 0x10751 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_042)
{
    // 10752 ; [.4A3A.0020.0002] 
    // LINEAR A SIGN A715 BB

    uint32_t const cps[1] = { 0x10752 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_043)
{
    // 10753 ; [.4A3B.0020.0002] 
    // LINEAR A SIGN A717 DD

    uint32_t const cps[1] = { 0x10753 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_044)
{
    // 10754 ; [.4A3C.0020.0002] 
    // LINEAR A SIGN A726 EYYY

    uint32_t const cps[1] = { 0x10754 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_045)
{
    // 10755 ; [.4A3D.0020.0002] 
    // LINEAR A SIGN A732 JE

    uint32_t const cps[1] = { 0x10755 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_046)
{
    // 10760 ; [.4A3E.0020.0002] 
    // LINEAR A SIGN A800

    uint32_t const cps[1] = { 0x10760 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_047)
{
    // 10761 ; [.4A3F.0020.0002] 
    // LINEAR A SIGN A801

    uint32_t const cps[1] = { 0x10761 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_048)
{
    // 10762 ; [.4A40.0020.0002] 
    // LINEAR A SIGN A802

    uint32_t const cps[1] = { 0x10762 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_049)
{
    // 10763 ; [.4A41.0020.0002] 
    // LINEAR A SIGN A803

    uint32_t const cps[1] = { 0x10763 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_050)
{
    // 10764 ; [.4A42.0020.0002] 
    // LINEAR A SIGN A804

    uint32_t const cps[1] = { 0x10764 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_051)
{
    // 10765 ; [.4A43.0020.0002] 
    // LINEAR A SIGN A805

    uint32_t const cps[1] = { 0x10765 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_052)
{
    // 10766 ; [.4A44.0020.0002] 
    // LINEAR A SIGN A806

    uint32_t const cps[1] = { 0x10766 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_053)
{
    // 10767 ; [.4A45.0020.0002] 
    // LINEAR A SIGN A807

    uint32_t const cps[1] = { 0x10767 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_054)
{
    // 10800 ; [.4A46.0020.0002] 
    // CYPRIOT SYLLABLE A

    uint32_t const cps[1] = { 0x10800 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_055)
{
    // 10801 ; [.4A47.0020.0002] 
    // CYPRIOT SYLLABLE E

    uint32_t const cps[1] = { 0x10801 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_056)
{
    // 10802 ; [.4A48.0020.0002] 
    // CYPRIOT SYLLABLE I

    uint32_t const cps[1] = { 0x10802 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_057)
{
    // 10803 ; [.4A49.0020.0002] 
    // CYPRIOT SYLLABLE O

    uint32_t const cps[1] = { 0x10803 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_058)
{
    // 10804 ; [.4A4A.0020.0002] 
    // CYPRIOT SYLLABLE U

    uint32_t const cps[1] = { 0x10804 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_059)
{
    // 10805 ; [.4A4B.0020.0002] 
    // CYPRIOT SYLLABLE JA

    uint32_t const cps[1] = { 0x10805 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_060)
{
    // 10808 ; [.4A4C.0020.0002] 
    // CYPRIOT SYLLABLE JO

    uint32_t const cps[1] = { 0x10808 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_061)
{
    // 1080A ; [.4A4D.0020.0002] 
    // CYPRIOT SYLLABLE KA

    uint32_t const cps[1] = { 0x1080a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_062)
{
    // 1080B ; [.4A4E.0020.0002] 
    // CYPRIOT SYLLABLE KE

    uint32_t const cps[1] = { 0x1080b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_063)
{
    // 1080C ; [.4A4F.0020.0002] 
    // CYPRIOT SYLLABLE KI

    uint32_t const cps[1] = { 0x1080c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_064)
{
    // 1080D ; [.4A50.0020.0002] 
    // CYPRIOT SYLLABLE KO

    uint32_t const cps[1] = { 0x1080d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_065)
{
    // 1080E ; [.4A51.0020.0002] 
    // CYPRIOT SYLLABLE KU

    uint32_t const cps[1] = { 0x1080e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_066)
{
    // 1080F ; [.4A52.0020.0002] 
    // CYPRIOT SYLLABLE LA

    uint32_t const cps[1] = { 0x1080f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_067)
{
    // 10810 ; [.4A53.0020.0002] 
    // CYPRIOT SYLLABLE LE

    uint32_t const cps[1] = { 0x10810 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_068)
{
    // 10811 ; [.4A54.0020.0002] 
    // CYPRIOT SYLLABLE LI

    uint32_t const cps[1] = { 0x10811 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_069)
{
    // 10812 ; [.4A55.0020.0002] 
    // CYPRIOT SYLLABLE LO

    uint32_t const cps[1] = { 0x10812 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_070)
{
    // 10813 ; [.4A56.0020.0002] 
    // CYPRIOT SYLLABLE LU

    uint32_t const cps[1] = { 0x10813 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_071)
{
    // 10814 ; [.4A57.0020.0002] 
    // CYPRIOT SYLLABLE MA

    uint32_t const cps[1] = { 0x10814 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_072)
{
    // 10815 ; [.4A58.0020.0002] 
    // CYPRIOT SYLLABLE ME

    uint32_t const cps[1] = { 0x10815 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_073)
{
    // 10816 ; [.4A59.0020.0002] 
    // CYPRIOT SYLLABLE MI

    uint32_t const cps[1] = { 0x10816 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_074)
{
    // 10817 ; [.4A5A.0020.0002] 
    // CYPRIOT SYLLABLE MO

    uint32_t const cps[1] = { 0x10817 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_075)
{
    // 10818 ; [.4A5B.0020.0002] 
    // CYPRIOT SYLLABLE MU

    uint32_t const cps[1] = { 0x10818 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_076)
{
    // 10819 ; [.4A5C.0020.0002] 
    // CYPRIOT SYLLABLE NA

    uint32_t const cps[1] = { 0x10819 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_077)
{
    // 1081A ; [.4A5D.0020.0002] 
    // CYPRIOT SYLLABLE NE

    uint32_t const cps[1] = { 0x1081a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_078)
{
    // 1081B ; [.4A5E.0020.0002] 
    // CYPRIOT SYLLABLE NI

    uint32_t const cps[1] = { 0x1081b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_079)
{
    // 1081C ; [.4A5F.0020.0002] 
    // CYPRIOT SYLLABLE NO

    uint32_t const cps[1] = { 0x1081c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_080)
{
    // 1081D ; [.4A60.0020.0002] 
    // CYPRIOT SYLLABLE NU

    uint32_t const cps[1] = { 0x1081d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_081)
{
    // 1081E ; [.4A61.0020.0002] 
    // CYPRIOT SYLLABLE PA

    uint32_t const cps[1] = { 0x1081e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_082)
{
    // 1081F ; [.4A62.0020.0002] 
    // CYPRIOT SYLLABLE PE

    uint32_t const cps[1] = { 0x1081f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_083)
{
    // 10820 ; [.4A63.0020.0002] 
    // CYPRIOT SYLLABLE PI

    uint32_t const cps[1] = { 0x10820 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_084)
{
    // 10821 ; [.4A64.0020.0002] 
    // CYPRIOT SYLLABLE PO

    uint32_t const cps[1] = { 0x10821 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_085)
{
    // 10822 ; [.4A65.0020.0002] 
    // CYPRIOT SYLLABLE PU

    uint32_t const cps[1] = { 0x10822 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_086)
{
    // 10823 ; [.4A66.0020.0002] 
    // CYPRIOT SYLLABLE RA

    uint32_t const cps[1] = { 0x10823 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_087)
{
    // 10824 ; [.4A67.0020.0002] 
    // CYPRIOT SYLLABLE RE

    uint32_t const cps[1] = { 0x10824 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_088)
{
    // 10825 ; [.4A68.0020.0002] 
    // CYPRIOT SYLLABLE RI

    uint32_t const cps[1] = { 0x10825 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_089)
{
    // 10826 ; [.4A69.0020.0002] 
    // CYPRIOT SYLLABLE RO

    uint32_t const cps[1] = { 0x10826 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_090)
{
    // 10827 ; [.4A6A.0020.0002] 
    // CYPRIOT SYLLABLE RU

    uint32_t const cps[1] = { 0x10827 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_091)
{
    // 10828 ; [.4A6B.0020.0002] 
    // CYPRIOT SYLLABLE SA

    uint32_t const cps[1] = { 0x10828 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_092)
{
    // 10829 ; [.4A6C.0020.0002] 
    // CYPRIOT SYLLABLE SE

    uint32_t const cps[1] = { 0x10829 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_093)
{
    // 1082A ; [.4A6D.0020.0002] 
    // CYPRIOT SYLLABLE SI

    uint32_t const cps[1] = { 0x1082a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_094)
{
    // 1082B ; [.4A6E.0020.0002] 
    // CYPRIOT SYLLABLE SO

    uint32_t const cps[1] = { 0x1082b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_095)
{
    // 1082C ; [.4A6F.0020.0002] 
    // CYPRIOT SYLLABLE SU

    uint32_t const cps[1] = { 0x1082c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_096)
{
    // 1082D ; [.4A70.0020.0002] 
    // CYPRIOT SYLLABLE TA

    uint32_t const cps[1] = { 0x1082d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_097)
{
    // 1082E ; [.4A71.0020.0002] 
    // CYPRIOT SYLLABLE TE

    uint32_t const cps[1] = { 0x1082e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_098)
{
    // 1082F ; [.4A72.0020.0002] 
    // CYPRIOT SYLLABLE TI

    uint32_t const cps[1] = { 0x1082f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_099)
{
    // 10830 ; [.4A73.0020.0002] 
    // CYPRIOT SYLLABLE TO

    uint32_t const cps[1] = { 0x10830 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_100)
{
    // 10831 ; [.4A74.0020.0002] 
    // CYPRIOT SYLLABLE TU

    uint32_t const cps[1] = { 0x10831 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_101)
{
    // 10832 ; [.4A75.0020.0002] 
    // CYPRIOT SYLLABLE WA

    uint32_t const cps[1] = { 0x10832 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_102)
{
    // 10833 ; [.4A76.0020.0002] 
    // CYPRIOT SYLLABLE WE

    uint32_t const cps[1] = { 0x10833 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_103)
{
    // 10834 ; [.4A77.0020.0002] 
    // CYPRIOT SYLLABLE WI

    uint32_t const cps[1] = { 0x10834 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_104)
{
    // 10835 ; [.4A78.0020.0002] 
    // CYPRIOT SYLLABLE WO

    uint32_t const cps[1] = { 0x10835 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_105)
{
    // 10837 ; [.4A79.0020.0002] 
    // CYPRIOT SYLLABLE XA

    uint32_t const cps[1] = { 0x10837 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_106)
{
    // 10838 ; [.4A7A.0020.0002] 
    // CYPRIOT SYLLABLE XE

    uint32_t const cps[1] = { 0x10838 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_107)
{
    // 1083C ; [.4A7B.0020.0002] 
    // CYPRIOT SYLLABLE ZA

    uint32_t const cps[1] = { 0x1083c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_108)
{
    // 1083F ; [.4A7C.0020.0002] 
    // CYPRIOT SYLLABLE ZO

    uint32_t const cps[1] = { 0x1083f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_109)
{
    // 10840 ; [.4B2D.0020.0002] 
    // IMPERIAL ARAMAIC LETTER ALEPH

    uint32_t const cps[1] = { 0x10840 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_110)
{
    // 10841 ; [.4B2E.0020.0002] 
    // IMPERIAL ARAMAIC LETTER BETH

    uint32_t const cps[1] = { 0x10841 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_111)
{
    // 10842 ; [.4B2F.0020.0002] 
    // IMPERIAL ARAMAIC LETTER GIMEL

    uint32_t const cps[1] = { 0x10842 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_112)
{
    // 10843 ; [.4B30.0020.0002] 
    // IMPERIAL ARAMAIC LETTER DALETH

    uint32_t const cps[1] = { 0x10843 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_113)
{
    // 10844 ; [.4B31.0020.0002] 
    // IMPERIAL ARAMAIC LETTER HE

    uint32_t const cps[1] = { 0x10844 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_114)
{
    // 10845 ; [.4B32.0020.0002] 
    // IMPERIAL ARAMAIC LETTER WAW

    uint32_t const cps[1] = { 0x10845 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_115)
{
    // 10846 ; [.4B33.0020.0002] 
    // IMPERIAL ARAMAIC LETTER ZAYIN

    uint32_t const cps[1] = { 0x10846 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_116)
{
    // 10847 ; [.4B34.0020.0002] 
    // IMPERIAL ARAMAIC LETTER HETH

    uint32_t const cps[1] = { 0x10847 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b34), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_117)
{
    // 10848 ; [.4B35.0020.0002] 
    // IMPERIAL ARAMAIC LETTER TETH

    uint32_t const cps[1] = { 0x10848 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_118)
{
    // 10849 ; [.4B36.0020.0002] 
    // IMPERIAL ARAMAIC LETTER YODH

    uint32_t const cps[1] = { 0x10849 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_119)
{
    // 1084A ; [.4B37.0020.0002] 
    // IMPERIAL ARAMAIC LETTER KAPH

    uint32_t const cps[1] = { 0x1084a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_120)
{
    // 1084B ; [.4B38.0020.0002] 
    // IMPERIAL ARAMAIC LETTER LAMEDH

    uint32_t const cps[1] = { 0x1084b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_121)
{
    // 1084C ; [.4B39.0020.0002] 
    // IMPERIAL ARAMAIC LETTER MEM

    uint32_t const cps[1] = { 0x1084c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_122)
{
    // 1084D ; [.4B3A.0020.0002] 
    // IMPERIAL ARAMAIC LETTER NUN

    uint32_t const cps[1] = { 0x1084d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_123)
{
    // 1084E ; [.4B3B.0020.0002] 
    // IMPERIAL ARAMAIC LETTER SAMEKH

    uint32_t const cps[1] = { 0x1084e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_124)
{
    // 1084F ; [.4B3C.0020.0002] 
    // IMPERIAL ARAMAIC LETTER AYIN

    uint32_t const cps[1] = { 0x1084f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_125)
{
    // 10850 ; [.4B3D.0020.0002] 
    // IMPERIAL ARAMAIC LETTER PE

    uint32_t const cps[1] = { 0x10850 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_126)
{
    // 10851 ; [.4B3E.0020.0002] 
    // IMPERIAL ARAMAIC LETTER SADHE

    uint32_t const cps[1] = { 0x10851 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_127)
{
    // 10852 ; [.4B3F.0020.0002] 
    // IMPERIAL ARAMAIC LETTER QOPH

    uint32_t const cps[1] = { 0x10852 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_128)
{
    // 10853 ; [.4B40.0020.0002] 
    // IMPERIAL ARAMAIC LETTER RESH

    uint32_t const cps[1] = { 0x10853 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_129)
{
    // 10854 ; [.4B41.0020.0002] 
    // IMPERIAL ARAMAIC LETTER SHIN

    uint32_t const cps[1] = { 0x10854 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_130)
{
    // 10855 ; [.4B42.0020.0002] 
    // IMPERIAL ARAMAIC LETTER TAW

    uint32_t const cps[1] = { 0x10855 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_131)
{
    // 10857 ; [*02DA.0020.0002] 
    // IMPERIAL ARAMAIC SECTION SIGN

    uint32_t const cps[1] = { 0x10857 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_132)
{
    // 10858 ; [.1CA4.0020.0002] 
    // IMPERIAL ARAMAIC NUMBER ONE

    uint32_t const cps[1] = { 0x10858 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_133)
{
    // 10859 ; [.1CA5.0020.0002] 
    // IMPERIAL ARAMAIC NUMBER TWO

    uint32_t const cps[1] = { 0x10859 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_134)
{
    // 1085A ; [.1CA6.0020.0002] 
    // IMPERIAL ARAMAIC NUMBER THREE

    uint32_t const cps[1] = { 0x1085a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_135)
{
    // 1085B ; [*1BC2.0020.0002] 
    // IMPERIAL ARAMAIC NUMBER TEN

    uint32_t const cps[1] = { 0x1085b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bc2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_136)
{
    // 1085C ; [*1BC3.0020.0002] 
    // IMPERIAL ARAMAIC NUMBER TWENTY

    uint32_t const cps[1] = { 0x1085c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bc3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_137)
{
    // 1085D ; [*1BC4.0020.0002] 
    // IMPERIAL ARAMAIC NUMBER ONE HUNDRED

    uint32_t const cps[1] = { 0x1085d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bc4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_138)
{
    // 1085E ; [*1BC5.0020.0002] 
    // IMPERIAL ARAMAIC NUMBER ONE THOUSAND

    uint32_t const cps[1] = { 0x1085e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bc5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_139)
{
    // 1085F ; [*1BC6.0020.0002] 
    // IMPERIAL ARAMAIC NUMBER TEN THOUSAND

    uint32_t const cps[1] = { 0x1085f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bc6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_140)
{
    // 10860 ; [.4AEC.0020.0002] 
    // PALMYRENE LETTER ALEPH

    uint32_t const cps[1] = { 0x10860 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4aec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_141)
{
    // 10861 ; [.4AED.0020.0002] 
    // PALMYRENE LETTER BETH

    uint32_t const cps[1] = { 0x10861 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4aed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_142)
{
    // 10862 ; [.4AEE.0020.0002] 
    // PALMYRENE LETTER GIMEL

    uint32_t const cps[1] = { 0x10862 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4aee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_143)
{
    // 10863 ; [.4AEF.0020.0002] 
    // PALMYRENE LETTER DALETH

    uint32_t const cps[1] = { 0x10863 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4aef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_144)
{
    // 10864 ; [.4AF0.0020.0002] 
    // PALMYRENE LETTER HE

    uint32_t const cps[1] = { 0x10864 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4af0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_145)
{
    // 10865 ; [.4AF1.0020.0002] 
    // PALMYRENE LETTER WAW

    uint32_t const cps[1] = { 0x10865 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4af1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_146)
{
    // 10866 ; [.4AF2.0020.0002] 
    // PALMYRENE LETTER ZAYIN

    uint32_t const cps[1] = { 0x10866 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4af2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_147)
{
    // 10867 ; [.4AF3.0020.0002] 
    // PALMYRENE LETTER HETH

    uint32_t const cps[1] = { 0x10867 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4af3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_148)
{
    // 10868 ; [.4AF4.0020.0002] 
    // PALMYRENE LETTER TETH

    uint32_t const cps[1] = { 0x10868 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4af4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_125_149)
{
    // 10869 ; [.4AF5.0020.0002] 
    // PALMYRENE LETTER YODH

    uint32_t const cps[1] = { 0x10869 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4af5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

