// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_275_000)
{
    // 110D5 003F;	
    // (𑃕) SORA SOMPENG LETTER GAH	[47EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D5, 0x003F };
    uint32_t const ces[9] = { 0x47EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_001)
{
    // 110D5 0061;	
    // (𑃕) SORA SOMPENG LETTER GAH	[47EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D5, 0x0061 };
    uint32_t const ces[9] = { 0x47EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_002)
{
    // 110D5 0041;	
    // (𑃕) SORA SOMPENG LETTER GAH	[47EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110D5, 0x0041 };
    uint32_t const ces[9] = { 0x47EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_003)
{
    // 110D5 0062;	
    // (𑃕) SORA SOMPENG LETTER GAH	[47EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D5, 0x0062 };
    uint32_t const ces[9] = { 0x47EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_004)
{
    // 110D6 0021;	
    // (𑃖) SORA SOMPENG LETTER MAH	[47EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D6, 0x0021 };
    uint32_t const ces[9] = { 0x47EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_005)
{
    // 110D6 003F;	
    // (𑃖) SORA SOMPENG LETTER MAH	[47EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D6, 0x003F };
    uint32_t const ces[9] = { 0x47EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_006)
{
    // 110D6 0061;	
    // (𑃖) SORA SOMPENG LETTER MAH	[47EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D6, 0x0061 };
    uint32_t const ces[9] = { 0x47EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_007)
{
    // 110D6 0041;	
    // (𑃖) SORA SOMPENG LETTER MAH	[47EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110D6, 0x0041 };
    uint32_t const ces[9] = { 0x47EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_008)
{
    // 110D6 0062;	
    // (𑃖) SORA SOMPENG LETTER MAH	[47EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D6, 0x0062 };
    uint32_t const ces[9] = { 0x47EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_009)
{
    // 110D7 0021;	
    // (𑃗) SORA SOMPENG LETTER NGAH	[47ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D7, 0x0021 };
    uint32_t const ces[9] = { 0x47ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_010)
{
    // 110D7 003F;	
    // (𑃗) SORA SOMPENG LETTER NGAH	[47ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D7, 0x003F };
    uint32_t const ces[9] = { 0x47ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_011)
{
    // 110D7 0061;	
    // (𑃗) SORA SOMPENG LETTER NGAH	[47ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D7, 0x0061 };
    uint32_t const ces[9] = { 0x47ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_012)
{
    // 110D7 0041;	
    // (𑃗) SORA SOMPENG LETTER NGAH	[47ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110D7, 0x0041 };
    uint32_t const ces[9] = { 0x47ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_013)
{
    // 110D7 0062;	
    // (𑃗) SORA SOMPENG LETTER NGAH	[47ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D7, 0x0062 };
    uint32_t const ces[9] = { 0x47ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_014)
{
    // 110D8 0021;	
    // (𑃘) SORA SOMPENG LETTER LAH	[47EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D8, 0x0021 };
    uint32_t const ces[9] = { 0x47EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_015)
{
    // 110D8 003F;	
    // (𑃘) SORA SOMPENG LETTER LAH	[47EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D8, 0x003F };
    uint32_t const ces[9] = { 0x47EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_016)
{
    // 110D8 0061;	
    // (𑃘) SORA SOMPENG LETTER LAH	[47EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D8, 0x0061 };
    uint32_t const ces[9] = { 0x47EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_017)
{
    // 110D8 0041;	
    // (𑃘) SORA SOMPENG LETTER LAH	[47EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110D8, 0x0041 };
    uint32_t const ces[9] = { 0x47EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_018)
{
    // 110D8 0062;	
    // (𑃘) SORA SOMPENG LETTER LAH	[47EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D8, 0x0062 };
    uint32_t const ces[9] = { 0x47EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_019)
{
    // 110D9 0021;	
    // (𑃙) SORA SOMPENG LETTER NAH	[47EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D9, 0x0021 };
    uint32_t const ces[9] = { 0x47EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_020)
{
    // 110D9 003F;	
    // (𑃙) SORA SOMPENG LETTER NAH	[47EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D9, 0x003F };
    uint32_t const ces[9] = { 0x47EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_021)
{
    // 110D9 0061;	
    // (𑃙) SORA SOMPENG LETTER NAH	[47EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D9, 0x0061 };
    uint32_t const ces[9] = { 0x47EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_022)
{
    // 110D9 0041;	
    // (𑃙) SORA SOMPENG LETTER NAH	[47EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110D9, 0x0041 };
    uint32_t const ces[9] = { 0x47EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_023)
{
    // 110D9 0062;	
    // (𑃙) SORA SOMPENG LETTER NAH	[47EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D9, 0x0062 };
    uint32_t const ces[9] = { 0x47EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_024)
{
    // 110DA 0021;	
    // (𑃚) SORA SOMPENG LETTER VAH	[47F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DA, 0x0021 };
    uint32_t const ces[9] = { 0x47F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_025)
{
    // 110DA 003F;	
    // (𑃚) SORA SOMPENG LETTER VAH	[47F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DA, 0x003F };
    uint32_t const ces[9] = { 0x47F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_026)
{
    // 110DA 0061;	
    // (𑃚) SORA SOMPENG LETTER VAH	[47F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DA, 0x0061 };
    uint32_t const ces[9] = { 0x47F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_027)
{
    // 110DA 0041;	
    // (𑃚) SORA SOMPENG LETTER VAH	[47F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110DA, 0x0041 };
    uint32_t const ces[9] = { 0x47F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_028)
{
    // 110DA 0062;	
    // (𑃚) SORA SOMPENG LETTER VAH	[47F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DA, 0x0062 };
    uint32_t const ces[9] = { 0x47F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_029)
{
    // 110DB 0021;	
    // (𑃛) SORA SOMPENG LETTER PAH	[47F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DB, 0x0021 };
    uint32_t const ces[9] = { 0x47F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_030)
{
    // 110DB 003F;	
    // (𑃛) SORA SOMPENG LETTER PAH	[47F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DB, 0x003F };
    uint32_t const ces[9] = { 0x47F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_031)
{
    // 110DB 0061;	
    // (𑃛) SORA SOMPENG LETTER PAH	[47F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DB, 0x0061 };
    uint32_t const ces[9] = { 0x47F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_032)
{
    // 110DB 0041;	
    // (𑃛) SORA SOMPENG LETTER PAH	[47F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110DB, 0x0041 };
    uint32_t const ces[9] = { 0x47F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_033)
{
    // 110DB 0062;	
    // (𑃛) SORA SOMPENG LETTER PAH	[47F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DB, 0x0062 };
    uint32_t const ces[9] = { 0x47F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_034)
{
    // 110DC 0021;	
    // (𑃜) SORA SOMPENG LETTER YAH	[47F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DC, 0x0021 };
    uint32_t const ces[9] = { 0x47F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_035)
{
    // 110DC 003F;	
    // (𑃜) SORA SOMPENG LETTER YAH	[47F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DC, 0x003F };
    uint32_t const ces[9] = { 0x47F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_036)
{
    // 110DC 0061;	
    // (𑃜) SORA SOMPENG LETTER YAH	[47F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DC, 0x0061 };
    uint32_t const ces[9] = { 0x47F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_037)
{
    // 110DC 0041;	
    // (𑃜) SORA SOMPENG LETTER YAH	[47F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110DC, 0x0041 };
    uint32_t const ces[9] = { 0x47F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_038)
{
    // 110DC 0062;	
    // (𑃜) SORA SOMPENG LETTER YAH	[47F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DC, 0x0062 };
    uint32_t const ces[9] = { 0x47F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_039)
{
    // 110DD 0021;	
    // (𑃝) SORA SOMPENG LETTER RAH	[47F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DD, 0x0021 };
    uint32_t const ces[9] = { 0x47F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_040)
{
    // 110DD 003F;	
    // (𑃝) SORA SOMPENG LETTER RAH	[47F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DD, 0x003F };
    uint32_t const ces[9] = { 0x47F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_041)
{
    // 110DD 0061;	
    // (𑃝) SORA SOMPENG LETTER RAH	[47F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DD, 0x0061 };
    uint32_t const ces[9] = { 0x47F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_042)
{
    // 110DD 0041;	
    // (𑃝) SORA SOMPENG LETTER RAH	[47F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110DD, 0x0041 };
    uint32_t const ces[9] = { 0x47F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_043)
{
    // 110DD 0062;	
    // (𑃝) SORA SOMPENG LETTER RAH	[47F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DD, 0x0062 };
    uint32_t const ces[9] = { 0x47F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_044)
{
    // 110DE 0021;	
    // (𑃞) SORA SOMPENG LETTER HAH	[47F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DE, 0x0021 };
    uint32_t const ces[9] = { 0x47F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_045)
{
    // 110DE 003F;	
    // (𑃞) SORA SOMPENG LETTER HAH	[47F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DE, 0x003F };
    uint32_t const ces[9] = { 0x47F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_046)
{
    // 110DE 0061;	
    // (𑃞) SORA SOMPENG LETTER HAH	[47F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DE, 0x0061 };
    uint32_t const ces[9] = { 0x47F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_047)
{
    // 110DE 0041;	
    // (𑃞) SORA SOMPENG LETTER HAH	[47F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110DE, 0x0041 };
    uint32_t const ces[9] = { 0x47F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_048)
{
    // 110DE 0062;	
    // (𑃞) SORA SOMPENG LETTER HAH	[47F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DE, 0x0062 };
    uint32_t const ces[9] = { 0x47F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_049)
{
    // 110DF 0021;	
    // (𑃟) SORA SOMPENG LETTER KAH	[47F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DF, 0x0021 };
    uint32_t const ces[9] = { 0x47F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_050)
{
    // 110DF 003F;	
    // (𑃟) SORA SOMPENG LETTER KAH	[47F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DF, 0x003F };
    uint32_t const ces[9] = { 0x47F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_051)
{
    // 110DF 0061;	
    // (𑃟) SORA SOMPENG LETTER KAH	[47F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DF, 0x0061 };
    uint32_t const ces[9] = { 0x47F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_052)
{
    // 110DF 0041;	
    // (𑃟) SORA SOMPENG LETTER KAH	[47F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110DF, 0x0041 };
    uint32_t const ces[9] = { 0x47F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_053)
{
    // 110DF 0062;	
    // (𑃟) SORA SOMPENG LETTER KAH	[47F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110DF, 0x0062 };
    uint32_t const ces[9] = { 0x47F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_054)
{
    // 110E0 0021;	
    // (𑃠) SORA SOMPENG LETTER JAH	[47F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E0, 0x0021 };
    uint32_t const ces[9] = { 0x47F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_055)
{
    // 110E0 003F;	
    // (𑃠) SORA SOMPENG LETTER JAH	[47F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E0, 0x003F };
    uint32_t const ces[9] = { 0x47F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_056)
{
    // 110E0 0061;	
    // (𑃠) SORA SOMPENG LETTER JAH	[47F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E0, 0x0061 };
    uint32_t const ces[9] = { 0x47F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_057)
{
    // 110E0 0041;	
    // (𑃠) SORA SOMPENG LETTER JAH	[47F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110E0, 0x0041 };
    uint32_t const ces[9] = { 0x47F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_058)
{
    // 110E0 0062;	
    // (𑃠) SORA SOMPENG LETTER JAH	[47F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E0, 0x0062 };
    uint32_t const ces[9] = { 0x47F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_059)
{
    // 110E1 0021;	
    // (𑃡) SORA SOMPENG LETTER NYAH	[47F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E1, 0x0021 };
    uint32_t const ces[9] = { 0x47F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_060)
{
    // 110E1 003F;	
    // (𑃡) SORA SOMPENG LETTER NYAH	[47F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E1, 0x003F };
    uint32_t const ces[9] = { 0x47F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_061)
{
    // 110E1 0061;	
    // (𑃡) SORA SOMPENG LETTER NYAH	[47F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E1, 0x0061 };
    uint32_t const ces[9] = { 0x47F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_062)
{
    // 110E1 0041;	
    // (𑃡) SORA SOMPENG LETTER NYAH	[47F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110E1, 0x0041 };
    uint32_t const ces[9] = { 0x47F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_063)
{
    // 110E1 0062;	
    // (𑃡) SORA SOMPENG LETTER NYAH	[47F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E1, 0x0062 };
    uint32_t const ces[9] = { 0x47F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_064)
{
    // 110E2 0021;	
    // (𑃢) SORA SOMPENG LETTER AH	[47F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E2, 0x0021 };
    uint32_t const ces[9] = { 0x47F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_065)
{
    // 110E2 003F;	
    // (𑃢) SORA SOMPENG LETTER AH	[47F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E2, 0x003F };
    uint32_t const ces[9] = { 0x47F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_066)
{
    // 110E2 0061;	
    // (𑃢) SORA SOMPENG LETTER AH	[47F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E2, 0x0061 };
    uint32_t const ces[9] = { 0x47F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_067)
{
    // 110E2 0041;	
    // (𑃢) SORA SOMPENG LETTER AH	[47F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110E2, 0x0041 };
    uint32_t const ces[9] = { 0x47F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_068)
{
    // 110E2 0062;	
    // (𑃢) SORA SOMPENG LETTER AH	[47F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E2, 0x0062 };
    uint32_t const ces[9] = { 0x47F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_069)
{
    // 110E3 0021;	
    // (𑃣) SORA SOMPENG LETTER EEH	[47F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E3, 0x0021 };
    uint32_t const ces[9] = { 0x47F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_070)
{
    // 110E3 003F;	
    // (𑃣) SORA SOMPENG LETTER EEH	[47F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E3, 0x003F };
    uint32_t const ces[9] = { 0x47F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_071)
{
    // 110E3 0061;	
    // (𑃣) SORA SOMPENG LETTER EEH	[47F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E3, 0x0061 };
    uint32_t const ces[9] = { 0x47F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_072)
{
    // 110E3 0041;	
    // (𑃣) SORA SOMPENG LETTER EEH	[47F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110E3, 0x0041 };
    uint32_t const ces[9] = { 0x47F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_073)
{
    // 110E3 0062;	
    // (𑃣) SORA SOMPENG LETTER EEH	[47F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E3, 0x0062 };
    uint32_t const ces[9] = { 0x47F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_074)
{
    // 110E4 0021;	
    // (𑃤) SORA SOMPENG LETTER IH	[47FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E4, 0x0021 };
    uint32_t const ces[9] = { 0x47FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_075)
{
    // 110E4 003F;	
    // (𑃤) SORA SOMPENG LETTER IH	[47FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E4, 0x003F };
    uint32_t const ces[9] = { 0x47FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_076)
{
    // 110E4 0061;	
    // (𑃤) SORA SOMPENG LETTER IH	[47FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E4, 0x0061 };
    uint32_t const ces[9] = { 0x47FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_077)
{
    // 110E4 0041;	
    // (𑃤) SORA SOMPENG LETTER IH	[47FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110E4, 0x0041 };
    uint32_t const ces[9] = { 0x47FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_078)
{
    // 110E4 0062;	
    // (𑃤) SORA SOMPENG LETTER IH	[47FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E4, 0x0062 };
    uint32_t const ces[9] = { 0x47FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_079)
{
    // 110E5 0021;	
    // (𑃥) SORA SOMPENG LETTER UH	[47FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E5, 0x0021 };
    uint32_t const ces[9] = { 0x47FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_080)
{
    // 110E5 003F;	
    // (𑃥) SORA SOMPENG LETTER UH	[47FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E5, 0x003F };
    uint32_t const ces[9] = { 0x47FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_081)
{
    // 110E5 0061;	
    // (𑃥) SORA SOMPENG LETTER UH	[47FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E5, 0x0061 };
    uint32_t const ces[9] = { 0x47FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_082)
{
    // 110E5 0041;	
    // (𑃥) SORA SOMPENG LETTER UH	[47FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110E5, 0x0041 };
    uint32_t const ces[9] = { 0x47FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_083)
{
    // 110E5 0062;	
    // (𑃥) SORA SOMPENG LETTER UH	[47FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E5, 0x0062 };
    uint32_t const ces[9] = { 0x47FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_084)
{
    // 110E6 0021;	
    // (𑃦) SORA SOMPENG LETTER OH	[47FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E6, 0x0021 };
    uint32_t const ces[9] = { 0x47FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_085)
{
    // 110E6 003F;	
    // (𑃦) SORA SOMPENG LETTER OH	[47FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E6, 0x003F };
    uint32_t const ces[9] = { 0x47FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_086)
{
    // 110E6 0061;	
    // (𑃦) SORA SOMPENG LETTER OH	[47FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E6, 0x0061 };
    uint32_t const ces[9] = { 0x47FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_087)
{
    // 110E6 0041;	
    // (𑃦) SORA SOMPENG LETTER OH	[47FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110E6, 0x0041 };
    uint32_t const ces[9] = { 0x47FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_088)
{
    // 110E6 0062;	
    // (𑃦) SORA SOMPENG LETTER OH	[47FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E6, 0x0062 };
    uint32_t const ces[9] = { 0x47FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_089)
{
    // 110E7 0021;	
    // (𑃧) SORA SOMPENG LETTER EH	[47FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E7, 0x0021 };
    uint32_t const ces[9] = { 0x47FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_090)
{
    // 110E7 003F;	
    // (𑃧) SORA SOMPENG LETTER EH	[47FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E7, 0x003F };
    uint32_t const ces[9] = { 0x47FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_091)
{
    // 110E7 0061;	
    // (𑃧) SORA SOMPENG LETTER EH	[47FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E7, 0x0061 };
    uint32_t const ces[9] = { 0x47FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_092)
{
    // 110E7 0041;	
    // (𑃧) SORA SOMPENG LETTER EH	[47FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110E7, 0x0041 };
    uint32_t const ces[9] = { 0x47FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_093)
{
    // 110E7 0062;	
    // (𑃧) SORA SOMPENG LETTER EH	[47FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E7, 0x0062 };
    uint32_t const ces[9] = { 0x47FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_094)
{
    // 110E8 0021;	
    // (𑃨) SORA SOMPENG LETTER MAE	[47FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E8, 0x0021 };
    uint32_t const ces[9] = { 0x47FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_095)
{
    // 110E8 003F;	
    // (𑃨) SORA SOMPENG LETTER MAE	[47FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E8, 0x003F };
    uint32_t const ces[9] = { 0x47FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_096)
{
    // 110E8 0061;	
    // (𑃨) SORA SOMPENG LETTER MAE	[47FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E8, 0x0061 };
    uint32_t const ces[9] = { 0x47FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_097)
{
    // 110E8 0041;	
    // (𑃨) SORA SOMPENG LETTER MAE	[47FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110E8, 0x0041 };
    uint32_t const ces[9] = { 0x47FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_098)
{
    // 110E8 0062;	
    // (𑃨) SORA SOMPENG LETTER MAE	[47FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110E8, 0x0062 };
    uint32_t const ces[9] = { 0x47FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_099)
{
    // 16A40 0021;	
    // (𖩀) MRO LETTER TA	[47FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A40, 0x0021 };
    uint32_t const ces[9] = { 0x47FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_100)
{
    // 16A40 003F;	
    // (𖩀) MRO LETTER TA	[47FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A40, 0x003F };
    uint32_t const ces[9] = { 0x47FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_101)
{
    // 16A40 0061;	
    // (𖩀) MRO LETTER TA	[47FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A40, 0x0061 };
    uint32_t const ces[9] = { 0x47FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_102)
{
    // 16A40 0041;	
    // (𖩀) MRO LETTER TA	[47FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A40, 0x0041 };
    uint32_t const ces[9] = { 0x47FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_103)
{
    // 16A40 0062;	
    // (𖩀) MRO LETTER TA	[47FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A40, 0x0062 };
    uint32_t const ces[9] = { 0x47FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_104)
{
    // 16A41 0021;	
    // (𖩁) MRO LETTER NGI	[4800 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A41, 0x0021 };
    uint32_t const ces[9] = { 0x4800, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_105)
{
    // 16A41 003F;	
    // (𖩁) MRO LETTER NGI	[4800 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A41, 0x003F };
    uint32_t const ces[9] = { 0x4800, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_106)
{
    // 16A41 0061;	
    // (𖩁) MRO LETTER NGI	[4800 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A41, 0x0061 };
    uint32_t const ces[9] = { 0x4800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_107)
{
    // 16A41 0041;	
    // (𖩁) MRO LETTER NGI	[4800 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A41, 0x0041 };
    uint32_t const ces[9] = { 0x4800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_108)
{
    // 16A41 0062;	
    // (𖩁) MRO LETTER NGI	[4800 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A41, 0x0062 };
    uint32_t const ces[9] = { 0x4800, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_109)
{
    // 16A42 0021;	
    // (𖩂) MRO LETTER YO	[4801 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A42, 0x0021 };
    uint32_t const ces[9] = { 0x4801, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_110)
{
    // 16A42 003F;	
    // (𖩂) MRO LETTER YO	[4801 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A42, 0x003F };
    uint32_t const ces[9] = { 0x4801, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_111)
{
    // 16A42 0061;	
    // (𖩂) MRO LETTER YO	[4801 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A42, 0x0061 };
    uint32_t const ces[9] = { 0x4801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_112)
{
    // 16A42 0041;	
    // (𖩂) MRO LETTER YO	[4801 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A42, 0x0041 };
    uint32_t const ces[9] = { 0x4801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_113)
{
    // 16A42 0062;	
    // (𖩂) MRO LETTER YO	[4801 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A42, 0x0062 };
    uint32_t const ces[9] = { 0x4801, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_114)
{
    // 16A43 0021;	
    // (𖩃) MRO LETTER MIM	[4802 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A43, 0x0021 };
    uint32_t const ces[9] = { 0x4802, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_115)
{
    // 16A43 003F;	
    // (𖩃) MRO LETTER MIM	[4802 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A43, 0x003F };
    uint32_t const ces[9] = { 0x4802, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_116)
{
    // 16A43 0061;	
    // (𖩃) MRO LETTER MIM	[4802 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A43, 0x0061 };
    uint32_t const ces[9] = { 0x4802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_117)
{
    // 16A43 0041;	
    // (𖩃) MRO LETTER MIM	[4802 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A43, 0x0041 };
    uint32_t const ces[9] = { 0x4802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_118)
{
    // 16A43 0062;	
    // (𖩃) MRO LETTER MIM	[4802 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A43, 0x0062 };
    uint32_t const ces[9] = { 0x4802, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_119)
{
    // 16A44 0021;	
    // (𖩄) MRO LETTER BA	[4803 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A44, 0x0021 };
    uint32_t const ces[9] = { 0x4803, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_120)
{
    // 16A44 003F;	
    // (𖩄) MRO LETTER BA	[4803 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A44, 0x003F };
    uint32_t const ces[9] = { 0x4803, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_121)
{
    // 16A44 0061;	
    // (𖩄) MRO LETTER BA	[4803 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A44, 0x0061 };
    uint32_t const ces[9] = { 0x4803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_122)
{
    // 16A44 0041;	
    // (𖩄) MRO LETTER BA	[4803 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A44, 0x0041 };
    uint32_t const ces[9] = { 0x4803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_123)
{
    // 16A44 0062;	
    // (𖩄) MRO LETTER BA	[4803 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A44, 0x0062 };
    uint32_t const ces[9] = { 0x4803, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_124)
{
    // 16A45 0021;	
    // (𖩅) MRO LETTER DA	[4804 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A45, 0x0021 };
    uint32_t const ces[9] = { 0x4804, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_125)
{
    // 16A45 003F;	
    // (𖩅) MRO LETTER DA	[4804 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A45, 0x003F };
    uint32_t const ces[9] = { 0x4804, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_126)
{
    // 16A45 0061;	
    // (𖩅) MRO LETTER DA	[4804 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A45, 0x0061 };
    uint32_t const ces[9] = { 0x4804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_127)
{
    // 16A45 0041;	
    // (𖩅) MRO LETTER DA	[4804 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A45, 0x0041 };
    uint32_t const ces[9] = { 0x4804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_128)
{
    // 16A45 0062;	
    // (𖩅) MRO LETTER DA	[4804 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A45, 0x0062 };
    uint32_t const ces[9] = { 0x4804, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_129)
{
    // 16A46 0021;	
    // (𖩆) MRO LETTER A	[4805 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A46, 0x0021 };
    uint32_t const ces[9] = { 0x4805, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_130)
{
    // 16A46 003F;	
    // (𖩆) MRO LETTER A	[4805 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A46, 0x003F };
    uint32_t const ces[9] = { 0x4805, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_131)
{
    // 16A46 0061;	
    // (𖩆) MRO LETTER A	[4805 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A46, 0x0061 };
    uint32_t const ces[9] = { 0x4805, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_132)
{
    // 16A46 0041;	
    // (𖩆) MRO LETTER A	[4805 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A46, 0x0041 };
    uint32_t const ces[9] = { 0x4805, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_133)
{
    // 16A46 0062;	
    // (𖩆) MRO LETTER A	[4805 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A46, 0x0062 };
    uint32_t const ces[9] = { 0x4805, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_134)
{
    // 16A47 0021;	
    // (𖩇) MRO LETTER PHI	[4806 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A47, 0x0021 };
    uint32_t const ces[9] = { 0x4806, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_135)
{
    // 16A47 003F;	
    // (𖩇) MRO LETTER PHI	[4806 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A47, 0x003F };
    uint32_t const ces[9] = { 0x4806, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_136)
{
    // 16A47 0061;	
    // (𖩇) MRO LETTER PHI	[4806 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A47, 0x0061 };
    uint32_t const ces[9] = { 0x4806, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_137)
{
    // 16A47 0041;	
    // (𖩇) MRO LETTER PHI	[4806 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A47, 0x0041 };
    uint32_t const ces[9] = { 0x4806, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_138)
{
    // 16A47 0062;	
    // (𖩇) MRO LETTER PHI	[4806 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A47, 0x0062 };
    uint32_t const ces[9] = { 0x4806, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_139)
{
    // 16A48 0021;	
    // (𖩈) MRO LETTER KHAI	[4807 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A48, 0x0021 };
    uint32_t const ces[9] = { 0x4807, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_140)
{
    // 16A48 003F;	
    // (𖩈) MRO LETTER KHAI	[4807 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A48, 0x003F };
    uint32_t const ces[9] = { 0x4807, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_141)
{
    // 16A48 0061;	
    // (𖩈) MRO LETTER KHAI	[4807 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A48, 0x0061 };
    uint32_t const ces[9] = { 0x4807, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_142)
{
    // 16A48 0041;	
    // (𖩈) MRO LETTER KHAI	[4807 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A48, 0x0041 };
    uint32_t const ces[9] = { 0x4807, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_143)
{
    // 16A48 0062;	
    // (𖩈) MRO LETTER KHAI	[4807 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A48, 0x0062 };
    uint32_t const ces[9] = { 0x4807, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_144)
{
    // 16A49 0021;	
    // (𖩉) MRO LETTER HAO	[4808 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A49, 0x0021 };
    uint32_t const ces[9] = { 0x4808, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_145)
{
    // 16A49 003F;	
    // (𖩉) MRO LETTER HAO	[4808 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A49, 0x003F };
    uint32_t const ces[9] = { 0x4808, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_146)
{
    // 16A49 0061;	
    // (𖩉) MRO LETTER HAO	[4808 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A49, 0x0061 };
    uint32_t const ces[9] = { 0x4808, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_147)
{
    // 16A49 0041;	
    // (𖩉) MRO LETTER HAO	[4808 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A49, 0x0041 };
    uint32_t const ces[9] = { 0x4808, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_148)
{
    // 16A49 0062;	
    // (𖩉) MRO LETTER HAO	[4808 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A49, 0x0062 };
    uint32_t const ces[9] = { 0x4808, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_149)
{
    // 16A4A 0021;	
    // (𖩊) MRO LETTER DAI	[4809 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4A, 0x0021 };
    uint32_t const ces[9] = { 0x4809, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_150)
{
    // 16A4A 003F;	
    // (𖩊) MRO LETTER DAI	[4809 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4A, 0x003F };
    uint32_t const ces[9] = { 0x4809, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_151)
{
    // 16A4A 0061;	
    // (𖩊) MRO LETTER DAI	[4809 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4A, 0x0061 };
    uint32_t const ces[9] = { 0x4809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_152)
{
    // 16A4A 0041;	
    // (𖩊) MRO LETTER DAI	[4809 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A4A, 0x0041 };
    uint32_t const ces[9] = { 0x4809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_153)
{
    // 16A4A 0062;	
    // (𖩊) MRO LETTER DAI	[4809 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4A, 0x0062 };
    uint32_t const ces[9] = { 0x4809, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_154)
{
    // 16A4B 0021;	
    // (𖩋) MRO LETTER CHU	[480A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4B, 0x0021 };
    uint32_t const ces[9] = { 0x480A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_155)
{
    // 16A4B 003F;	
    // (𖩋) MRO LETTER CHU	[480A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4B, 0x003F };
    uint32_t const ces[9] = { 0x480A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_156)
{
    // 16A4B 0061;	
    // (𖩋) MRO LETTER CHU	[480A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4B, 0x0061 };
    uint32_t const ces[9] = { 0x480A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_157)
{
    // 16A4B 0041;	
    // (𖩋) MRO LETTER CHU	[480A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A4B, 0x0041 };
    uint32_t const ces[9] = { 0x480A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_158)
{
    // 16A4B 0062;	
    // (𖩋) MRO LETTER CHU	[480A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4B, 0x0062 };
    uint32_t const ces[9] = { 0x480A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_159)
{
    // 16A4C 0021;	
    // (𖩌) MRO LETTER KEAAE	[480B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4C, 0x0021 };
    uint32_t const ces[9] = { 0x480B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_160)
{
    // 16A4C 003F;	
    // (𖩌) MRO LETTER KEAAE	[480B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4C, 0x003F };
    uint32_t const ces[9] = { 0x480B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_161)
{
    // 16A4C 0061;	
    // (𖩌) MRO LETTER KEAAE	[480B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4C, 0x0061 };
    uint32_t const ces[9] = { 0x480B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_162)
{
    // 16A4C 0041;	
    // (𖩌) MRO LETTER KEAAE	[480B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A4C, 0x0041 };
    uint32_t const ces[9] = { 0x480B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_163)
{
    // 16A4C 0062;	
    // (𖩌) MRO LETTER KEAAE	[480B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4C, 0x0062 };
    uint32_t const ces[9] = { 0x480B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_164)
{
    // 16A4D 0021;	
    // (𖩍) MRO LETTER OL	[480C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4D, 0x0021 };
    uint32_t const ces[9] = { 0x480C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_165)
{
    // 16A4D 003F;	
    // (𖩍) MRO LETTER OL	[480C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4D, 0x003F };
    uint32_t const ces[9] = { 0x480C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_166)
{
    // 16A4D 0061;	
    // (𖩍) MRO LETTER OL	[480C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4D, 0x0061 };
    uint32_t const ces[9] = { 0x480C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_167)
{
    // 16A4D 0041;	
    // (𖩍) MRO LETTER OL	[480C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A4D, 0x0041 };
    uint32_t const ces[9] = { 0x480C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_168)
{
    // 16A4D 0062;	
    // (𖩍) MRO LETTER OL	[480C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4D, 0x0062 };
    uint32_t const ces[9] = { 0x480C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_169)
{
    // 16A4E 0021;	
    // (𖩎) MRO LETTER MAEM	[480D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4E, 0x0021 };
    uint32_t const ces[9] = { 0x480D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_170)
{
    // 16A4E 003F;	
    // (𖩎) MRO LETTER MAEM	[480D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4E, 0x003F };
    uint32_t const ces[9] = { 0x480D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_171)
{
    // 16A4E 0061;	
    // (𖩎) MRO LETTER MAEM	[480D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4E, 0x0061 };
    uint32_t const ces[9] = { 0x480D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_172)
{
    // 16A4E 0041;	
    // (𖩎) MRO LETTER MAEM	[480D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A4E, 0x0041 };
    uint32_t const ces[9] = { 0x480D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_173)
{
    // 16A4E 0062;	
    // (𖩎) MRO LETTER MAEM	[480D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4E, 0x0062 };
    uint32_t const ces[9] = { 0x480D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_174)
{
    // 16A4F 0021;	
    // (𖩏) MRO LETTER NIN	[480E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4F, 0x0021 };
    uint32_t const ces[9] = { 0x480E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_175)
{
    // 16A4F 003F;	
    // (𖩏) MRO LETTER NIN	[480E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4F, 0x003F };
    uint32_t const ces[9] = { 0x480E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_176)
{
    // 16A4F 0061;	
    // (𖩏) MRO LETTER NIN	[480E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4F, 0x0061 };
    uint32_t const ces[9] = { 0x480E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_177)
{
    // 16A4F 0041;	
    // (𖩏) MRO LETTER NIN	[480E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A4F, 0x0041 };
    uint32_t const ces[9] = { 0x480E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_178)
{
    // 16A4F 0062;	
    // (𖩏) MRO LETTER NIN	[480E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A4F, 0x0062 };
    uint32_t const ces[9] = { 0x480E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_179)
{
    // 16A50 0021;	
    // (𖩐) MRO LETTER PA	[480F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A50, 0x0021 };
    uint32_t const ces[9] = { 0x480F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_180)
{
    // 16A50 003F;	
    // (𖩐) MRO LETTER PA	[480F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A50, 0x003F };
    uint32_t const ces[9] = { 0x480F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_181)
{
    // 16A50 0061;	
    // (𖩐) MRO LETTER PA	[480F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A50, 0x0061 };
    uint32_t const ces[9] = { 0x480F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_182)
{
    // 16A50 0041;	
    // (𖩐) MRO LETTER PA	[480F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A50, 0x0041 };
    uint32_t const ces[9] = { 0x480F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_183)
{
    // 16A50 0062;	
    // (𖩐) MRO LETTER PA	[480F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A50, 0x0062 };
    uint32_t const ces[9] = { 0x480F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_184)
{
    // 16A51 0021;	
    // (𖩑) MRO LETTER OO	[4810 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A51, 0x0021 };
    uint32_t const ces[9] = { 0x4810, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_185)
{
    // 16A51 003F;	
    // (𖩑) MRO LETTER OO	[4810 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A51, 0x003F };
    uint32_t const ces[9] = { 0x4810, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_186)
{
    // 16A51 0061;	
    // (𖩑) MRO LETTER OO	[4810 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A51, 0x0061 };
    uint32_t const ces[9] = { 0x4810, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_187)
{
    // 16A51 0041;	
    // (𖩑) MRO LETTER OO	[4810 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A51, 0x0041 };
    uint32_t const ces[9] = { 0x4810, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_188)
{
    // 16A51 0062;	
    // (𖩑) MRO LETTER OO	[4810 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A51, 0x0062 };
    uint32_t const ces[9] = { 0x4810, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_189)
{
    // 16A52 0021;	
    // (𖩒) MRO LETTER O	[4811 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A52, 0x0021 };
    uint32_t const ces[9] = { 0x4811, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_190)
{
    // 16A52 003F;	
    // (𖩒) MRO LETTER O	[4811 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A52, 0x003F };
    uint32_t const ces[9] = { 0x4811, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_191)
{
    // 16A52 0061;	
    // (𖩒) MRO LETTER O	[4811 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A52, 0x0061 };
    uint32_t const ces[9] = { 0x4811, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_192)
{
    // 16A52 0041;	
    // (𖩒) MRO LETTER O	[4811 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A52, 0x0041 };
    uint32_t const ces[9] = { 0x4811, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_193)
{
    // 16A52 0062;	
    // (𖩒) MRO LETTER O	[4811 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A52, 0x0062 };
    uint32_t const ces[9] = { 0x4811, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_194)
{
    // 16A53 0021;	
    // (𖩓) MRO LETTER RO	[4812 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A53, 0x0021 };
    uint32_t const ces[9] = { 0x4812, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_195)
{
    // 16A53 003F;	
    // (𖩓) MRO LETTER RO	[4812 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A53, 0x003F };
    uint32_t const ces[9] = { 0x4812, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_196)
{
    // 16A53 0061;	
    // (𖩓) MRO LETTER RO	[4812 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A53, 0x0061 };
    uint32_t const ces[9] = { 0x4812, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_197)
{
    // 16A53 0041;	
    // (𖩓) MRO LETTER RO	[4812 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A53, 0x0041 };
    uint32_t const ces[9] = { 0x4812, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_198)
{
    // 16A53 0062;	
    // (𖩓) MRO LETTER RO	[4812 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A53, 0x0062 };
    uint32_t const ces[9] = { 0x4812, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_199)
{
    // 16A54 0021;	
    // (𖩔) MRO LETTER SHI	[4813 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A54, 0x0021 };
    uint32_t const ces[9] = { 0x4813, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_200)
{
    // 16A54 003F;	
    // (𖩔) MRO LETTER SHI	[4813 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A54, 0x003F };
    uint32_t const ces[9] = { 0x4813, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_201)
{
    // 16A54 0061;	
    // (𖩔) MRO LETTER SHI	[4813 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A54, 0x0061 };
    uint32_t const ces[9] = { 0x4813, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_202)
{
    // 16A54 0041;	
    // (𖩔) MRO LETTER SHI	[4813 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A54, 0x0041 };
    uint32_t const ces[9] = { 0x4813, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_203)
{
    // 16A54 0062;	
    // (𖩔) MRO LETTER SHI	[4813 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A54, 0x0062 };
    uint32_t const ces[9] = { 0x4813, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_204)
{
    // 16A55 0021;	
    // (𖩕) MRO LETTER THEA	[4814 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A55, 0x0021 };
    uint32_t const ces[9] = { 0x4814, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_205)
{
    // 16A55 003F;	
    // (𖩕) MRO LETTER THEA	[4814 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A55, 0x003F };
    uint32_t const ces[9] = { 0x4814, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_206)
{
    // 16A55 0061;	
    // (𖩕) MRO LETTER THEA	[4814 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A55, 0x0061 };
    uint32_t const ces[9] = { 0x4814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_207)
{
    // 16A55 0041;	
    // (𖩕) MRO LETTER THEA	[4814 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A55, 0x0041 };
    uint32_t const ces[9] = { 0x4814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_208)
{
    // 16A55 0062;	
    // (𖩕) MRO LETTER THEA	[4814 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A55, 0x0062 };
    uint32_t const ces[9] = { 0x4814, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_209)
{
    // 16A56 0021;	
    // (𖩖) MRO LETTER EA	[4815 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A56, 0x0021 };
    uint32_t const ces[9] = { 0x4815, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_210)
{
    // 16A56 003F;	
    // (𖩖) MRO LETTER EA	[4815 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A56, 0x003F };
    uint32_t const ces[9] = { 0x4815, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_211)
{
    // 16A56 0061;	
    // (𖩖) MRO LETTER EA	[4815 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A56, 0x0061 };
    uint32_t const ces[9] = { 0x4815, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_212)
{
    // 16A56 0041;	
    // (𖩖) MRO LETTER EA	[4815 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A56, 0x0041 };
    uint32_t const ces[9] = { 0x4815, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_213)
{
    // 16A56 0062;	
    // (𖩖) MRO LETTER EA	[4815 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A56, 0x0062 };
    uint32_t const ces[9] = { 0x4815, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_214)
{
    // 16A57 0021;	
    // (𖩗) MRO LETTER WA	[4816 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A57, 0x0021 };
    uint32_t const ces[9] = { 0x4816, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_215)
{
    // 16A57 003F;	
    // (𖩗) MRO LETTER WA	[4816 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A57, 0x003F };
    uint32_t const ces[9] = { 0x4816, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_216)
{
    // 16A57 0061;	
    // (𖩗) MRO LETTER WA	[4816 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A57, 0x0061 };
    uint32_t const ces[9] = { 0x4816, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_217)
{
    // 16A57 0041;	
    // (𖩗) MRO LETTER WA	[4816 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A57, 0x0041 };
    uint32_t const ces[9] = { 0x4816, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_218)
{
    // 16A57 0062;	
    // (𖩗) MRO LETTER WA	[4816 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A57, 0x0062 };
    uint32_t const ces[9] = { 0x4816, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_219)
{
    // 16A58 0021;	
    // (𖩘) MRO LETTER E	[4817 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A58, 0x0021 };
    uint32_t const ces[9] = { 0x4817, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_220)
{
    // 16A58 003F;	
    // (𖩘) MRO LETTER E	[4817 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A58, 0x003F };
    uint32_t const ces[9] = { 0x4817, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_221)
{
    // 16A58 0061;	
    // (𖩘) MRO LETTER E	[4817 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A58, 0x0061 };
    uint32_t const ces[9] = { 0x4817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_222)
{
    // 16A58 0041;	
    // (𖩘) MRO LETTER E	[4817 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A58, 0x0041 };
    uint32_t const ces[9] = { 0x4817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_223)
{
    // 16A58 0062;	
    // (𖩘) MRO LETTER E	[4817 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A58, 0x0062 };
    uint32_t const ces[9] = { 0x4817, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_224)
{
    // 16A59 0021;	
    // (𖩙) MRO LETTER KO	[4818 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A59, 0x0021 };
    uint32_t const ces[9] = { 0x4818, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_225)
{
    // 16A59 003F;	
    // (𖩙) MRO LETTER KO	[4818 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A59, 0x003F };
    uint32_t const ces[9] = { 0x4818, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_226)
{
    // 16A59 0061;	
    // (𖩙) MRO LETTER KO	[4818 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A59, 0x0061 };
    uint32_t const ces[9] = { 0x4818, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_227)
{
    // 16A59 0041;	
    // (𖩙) MRO LETTER KO	[4818 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A59, 0x0041 };
    uint32_t const ces[9] = { 0x4818, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_228)
{
    // 16A59 0062;	
    // (𖩙) MRO LETTER KO	[4818 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A59, 0x0062 };
    uint32_t const ces[9] = { 0x4818, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_229)
{
    // 16A5A 0021;	
    // (𖩚) MRO LETTER LAN	[4819 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5A, 0x0021 };
    uint32_t const ces[9] = { 0x4819, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_230)
{
    // 16A5A 003F;	
    // (𖩚) MRO LETTER LAN	[4819 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5A, 0x003F };
    uint32_t const ces[9] = { 0x4819, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_231)
{
    // 16A5A 0061;	
    // (𖩚) MRO LETTER LAN	[4819 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5A, 0x0061 };
    uint32_t const ces[9] = { 0x4819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_232)
{
    // 16A5A 0041;	
    // (𖩚) MRO LETTER LAN	[4819 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A5A, 0x0041 };
    uint32_t const ces[9] = { 0x4819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_233)
{
    // 16A5A 0062;	
    // (𖩚) MRO LETTER LAN	[4819 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5A, 0x0062 };
    uint32_t const ces[9] = { 0x4819, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_234)
{
    // 16A5B 0021;	
    // (𖩛) MRO LETTER LA	[481A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5B, 0x0021 };
    uint32_t const ces[9] = { 0x481A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_235)
{
    // 16A5B 003F;	
    // (𖩛) MRO LETTER LA	[481A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5B, 0x003F };
    uint32_t const ces[9] = { 0x481A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_236)
{
    // 16A5B 0061;	
    // (𖩛) MRO LETTER LA	[481A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5B, 0x0061 };
    uint32_t const ces[9] = { 0x481A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_237)
{
    // 16A5B 0041;	
    // (𖩛) MRO LETTER LA	[481A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A5B, 0x0041 };
    uint32_t const ces[9] = { 0x481A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_238)
{
    // 16A5B 0062;	
    // (𖩛) MRO LETTER LA	[481A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5B, 0x0062 };
    uint32_t const ces[9] = { 0x481A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_239)
{
    // 16A5C 0021;	
    // (𖩜) MRO LETTER HAI	[481B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5C, 0x0021 };
    uint32_t const ces[9] = { 0x481B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_240)
{
    // 16A5C 003F;	
    // (𖩜) MRO LETTER HAI	[481B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5C, 0x003F };
    uint32_t const ces[9] = { 0x481B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_241)
{
    // 16A5C 0061;	
    // (𖩜) MRO LETTER HAI	[481B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5C, 0x0061 };
    uint32_t const ces[9] = { 0x481B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_242)
{
    // 16A5C 0041;	
    // (𖩜) MRO LETTER HAI	[481B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A5C, 0x0041 };
    uint32_t const ces[9] = { 0x481B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_243)
{
    // 16A5C 0062;	
    // (𖩜) MRO LETTER HAI	[481B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5C, 0x0062 };
    uint32_t const ces[9] = { 0x481B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_244)
{
    // 16A5D 0021;	
    // (𖩝) MRO LETTER RI	[481C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5D, 0x0021 };
    uint32_t const ces[9] = { 0x481C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_245)
{
    // 16A5D 003F;	
    // (𖩝) MRO LETTER RI	[481C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5D, 0x003F };
    uint32_t const ces[9] = { 0x481C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_246)
{
    // 16A5D 0061;	
    // (𖩝) MRO LETTER RI	[481C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5D, 0x0061 };
    uint32_t const ces[9] = { 0x481C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_247)
{
    // 16A5D 0041;	
    // (𖩝) MRO LETTER RI	[481C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A5D, 0x0041 };
    uint32_t const ces[9] = { 0x481C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_248)
{
    // 16A5D 0062;	
    // (𖩝) MRO LETTER RI	[481C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5D, 0x0062 };
    uint32_t const ces[9] = { 0x481C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_249)
{
    // 16A5E 0021;	
    // (𖩞) MRO LETTER TEK	[481D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5E, 0x0021 };
    uint32_t const ces[9] = { 0x481D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_250)
{
    // 16A5E 003F;	
    // (𖩞) MRO LETTER TEK	[481D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5E, 0x003F };
    uint32_t const ces[9] = { 0x481D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_251)
{
    // 16A5E 0061;	
    // (𖩞) MRO LETTER TEK	[481D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5E, 0x0061 };
    uint32_t const ces[9] = { 0x481D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_252)
{
    // 16A5E 0041;	
    // (𖩞) MRO LETTER TEK	[481D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A5E, 0x0041 };
    uint32_t const ces[9] = { 0x481D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_253)
{
    // 16A5E 0062;	
    // (𖩞) MRO LETTER TEK	[481D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A5E, 0x0062 };
    uint32_t const ces[9] = { 0x481D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_254)
{
    // 10000 0021;	
    // (𐀀) LINEAR B SYLLABLE B008 A	[481E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10000, 0x0021 };
    uint32_t const ces[9] = { 0x481E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_255)
{
    // 10000 003F;	
    // (𐀀) LINEAR B SYLLABLE B008 A	[481E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10000, 0x003F };
    uint32_t const ces[9] = { 0x481E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_256)
{
    // 10000 0061;	
    // (𐀀) LINEAR B SYLLABLE B008 A	[481E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10000, 0x0061 };
    uint32_t const ces[9] = { 0x481E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_257)
{
    // 10000 0041;	
    // (𐀀) LINEAR B SYLLABLE B008 A	[481E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10000, 0x0041 };
    uint32_t const ces[9] = { 0x481E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_258)
{
    // 10000 0062;	
    // (𐀀) LINEAR B SYLLABLE B008 A	[481E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10000, 0x0062 };
    uint32_t const ces[9] = { 0x481E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_259)
{
    // 10001 0021;	
    // (𐀁) LINEAR B SYLLABLE B038 E	[481F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10001, 0x0021 };
    uint32_t const ces[9] = { 0x481F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_260)
{
    // 10001 003F;	
    // (𐀁) LINEAR B SYLLABLE B038 E	[481F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10001, 0x003F };
    uint32_t const ces[9] = { 0x481F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_261)
{
    // 10001 0061;	
    // (𐀁) LINEAR B SYLLABLE B038 E	[481F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10001, 0x0061 };
    uint32_t const ces[9] = { 0x481F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_262)
{
    // 10001 0041;	
    // (𐀁) LINEAR B SYLLABLE B038 E	[481F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10001, 0x0041 };
    uint32_t const ces[9] = { 0x481F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_263)
{
    // 10001 0062;	
    // (𐀁) LINEAR B SYLLABLE B038 E	[481F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10001, 0x0062 };
    uint32_t const ces[9] = { 0x481F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_264)
{
    // 10002 0021;	
    // (𐀂) LINEAR B SYLLABLE B028 I	[4820 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10002, 0x0021 };
    uint32_t const ces[9] = { 0x4820, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_265)
{
    // 10002 003F;	
    // (𐀂) LINEAR B SYLLABLE B028 I	[4820 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10002, 0x003F };
    uint32_t const ces[9] = { 0x4820, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_266)
{
    // 10002 0061;	
    // (𐀂) LINEAR B SYLLABLE B028 I	[4820 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10002, 0x0061 };
    uint32_t const ces[9] = { 0x4820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_267)
{
    // 10002 0041;	
    // (𐀂) LINEAR B SYLLABLE B028 I	[4820 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10002, 0x0041 };
    uint32_t const ces[9] = { 0x4820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_268)
{
    // 10002 0062;	
    // (𐀂) LINEAR B SYLLABLE B028 I	[4820 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10002, 0x0062 };
    uint32_t const ces[9] = { 0x4820, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_269)
{
    // 10003 0021;	
    // (𐀃) LINEAR B SYLLABLE B061 O	[4821 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10003, 0x0021 };
    uint32_t const ces[9] = { 0x4821, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_270)
{
    // 10003 003F;	
    // (𐀃) LINEAR B SYLLABLE B061 O	[4821 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10003, 0x003F };
    uint32_t const ces[9] = { 0x4821, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_271)
{
    // 10003 0061;	
    // (𐀃) LINEAR B SYLLABLE B061 O	[4821 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10003, 0x0061 };
    uint32_t const ces[9] = { 0x4821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_272)
{
    // 10003 0041;	
    // (𐀃) LINEAR B SYLLABLE B061 O	[4821 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10003, 0x0041 };
    uint32_t const ces[9] = { 0x4821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_273)
{
    // 10003 0062;	
    // (𐀃) LINEAR B SYLLABLE B061 O	[4821 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10003, 0x0062 };
    uint32_t const ces[9] = { 0x4821, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_274)
{
    // 10004 0021;	
    // (𐀄) LINEAR B SYLLABLE B010 U	[4822 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10004, 0x0021 };
    uint32_t const ces[9] = { 0x4822, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_275)
{
    // 10004 003F;	
    // (𐀄) LINEAR B SYLLABLE B010 U	[4822 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10004, 0x003F };
    uint32_t const ces[9] = { 0x4822, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_276)
{
    // 10004 0061;	
    // (𐀄) LINEAR B SYLLABLE B010 U	[4822 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10004, 0x0061 };
    uint32_t const ces[9] = { 0x4822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_277)
{
    // 10004 0041;	
    // (𐀄) LINEAR B SYLLABLE B010 U	[4822 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10004, 0x0041 };
    uint32_t const ces[9] = { 0x4822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_278)
{
    // 10004 0062;	
    // (𐀄) LINEAR B SYLLABLE B010 U	[4822 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10004, 0x0062 };
    uint32_t const ces[9] = { 0x4822, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_279)
{
    // 10005 0021;	
    // (𐀅) LINEAR B SYLLABLE B001 DA	[4823 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10005, 0x0021 };
    uint32_t const ces[9] = { 0x4823, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_280)
{
    // 10005 003F;	
    // (𐀅) LINEAR B SYLLABLE B001 DA	[4823 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10005, 0x003F };
    uint32_t const ces[9] = { 0x4823, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_281)
{
    // 10005 0061;	
    // (𐀅) LINEAR B SYLLABLE B001 DA	[4823 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10005, 0x0061 };
    uint32_t const ces[9] = { 0x4823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_282)
{
    // 10005 0041;	
    // (𐀅) LINEAR B SYLLABLE B001 DA	[4823 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10005, 0x0041 };
    uint32_t const ces[9] = { 0x4823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_283)
{
    // 10005 0062;	
    // (𐀅) LINEAR B SYLLABLE B001 DA	[4823 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10005, 0x0062 };
    uint32_t const ces[9] = { 0x4823, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_284)
{
    // 10006 0021;	
    // (𐀆) LINEAR B SYLLABLE B045 DE	[4824 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10006, 0x0021 };
    uint32_t const ces[9] = { 0x4824, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_285)
{
    // 10006 003F;	
    // (𐀆) LINEAR B SYLLABLE B045 DE	[4824 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10006, 0x003F };
    uint32_t const ces[9] = { 0x4824, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_286)
{
    // 10006 0061;	
    // (𐀆) LINEAR B SYLLABLE B045 DE	[4824 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10006, 0x0061 };
    uint32_t const ces[9] = { 0x4824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_287)
{
    // 10006 0041;	
    // (𐀆) LINEAR B SYLLABLE B045 DE	[4824 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10006, 0x0041 };
    uint32_t const ces[9] = { 0x4824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_288)
{
    // 10006 0062;	
    // (𐀆) LINEAR B SYLLABLE B045 DE	[4824 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10006, 0x0062 };
    uint32_t const ces[9] = { 0x4824, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_289)
{
    // 10007 0021;	
    // (𐀇) LINEAR B SYLLABLE B007 DI	[4825 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10007, 0x0021 };
    uint32_t const ces[9] = { 0x4825, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_290)
{
    // 10007 003F;	
    // (𐀇) LINEAR B SYLLABLE B007 DI	[4825 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10007, 0x003F };
    uint32_t const ces[9] = { 0x4825, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_291)
{
    // 10007 0061;	
    // (𐀇) LINEAR B SYLLABLE B007 DI	[4825 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10007, 0x0061 };
    uint32_t const ces[9] = { 0x4825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_292)
{
    // 10007 0041;	
    // (𐀇) LINEAR B SYLLABLE B007 DI	[4825 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10007, 0x0041 };
    uint32_t const ces[9] = { 0x4825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_293)
{
    // 10007 0062;	
    // (𐀇) LINEAR B SYLLABLE B007 DI	[4825 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10007, 0x0062 };
    uint32_t const ces[9] = { 0x4825, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_294)
{
    // 10008 0021;	
    // (𐀈) LINEAR B SYLLABLE B014 DO	[4826 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10008, 0x0021 };
    uint32_t const ces[9] = { 0x4826, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_295)
{
    // 10008 003F;	
    // (𐀈) LINEAR B SYLLABLE B014 DO	[4826 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10008, 0x003F };
    uint32_t const ces[9] = { 0x4826, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_296)
{
    // 10008 0061;	
    // (𐀈) LINEAR B SYLLABLE B014 DO	[4826 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10008, 0x0061 };
    uint32_t const ces[9] = { 0x4826, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_297)
{
    // 10008 0041;	
    // (𐀈) LINEAR B SYLLABLE B014 DO	[4826 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10008, 0x0041 };
    uint32_t const ces[9] = { 0x4826, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_298)
{
    // 10008 0062;	
    // (𐀈) LINEAR B SYLLABLE B014 DO	[4826 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10008, 0x0062 };
    uint32_t const ces[9] = { 0x4826, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_299)
{
    // 10009 0021;	
    // (𐀉) LINEAR B SYLLABLE B051 DU	[4827 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10009, 0x0021 };
    uint32_t const ces[9] = { 0x4827, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_300)
{
    // 10009 003F;	
    // (𐀉) LINEAR B SYLLABLE B051 DU	[4827 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10009, 0x003F };
    uint32_t const ces[9] = { 0x4827, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_301)
{
    // 10009 0061;	
    // (𐀉) LINEAR B SYLLABLE B051 DU	[4827 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10009, 0x0061 };
    uint32_t const ces[9] = { 0x4827, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_302)
{
    // 10009 0041;	
    // (𐀉) LINEAR B SYLLABLE B051 DU	[4827 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10009, 0x0041 };
    uint32_t const ces[9] = { 0x4827, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_303)
{
    // 10009 0062;	
    // (𐀉) LINEAR B SYLLABLE B051 DU	[4827 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10009, 0x0062 };
    uint32_t const ces[9] = { 0x4827, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_304)
{
    // 1000A 0021;	
    // (𐀊) LINEAR B SYLLABLE B057 JA	[4828 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000A, 0x0021 };
    uint32_t const ces[9] = { 0x4828, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_305)
{
    // 1000A 003F;	
    // (𐀊) LINEAR B SYLLABLE B057 JA	[4828 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000A, 0x003F };
    uint32_t const ces[9] = { 0x4828, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_306)
{
    // 1000A 0061;	
    // (𐀊) LINEAR B SYLLABLE B057 JA	[4828 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000A, 0x0061 };
    uint32_t const ces[9] = { 0x4828, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_307)
{
    // 1000A 0041;	
    // (𐀊) LINEAR B SYLLABLE B057 JA	[4828 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1000A, 0x0041 };
    uint32_t const ces[9] = { 0x4828, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_308)
{
    // 1000A 0062;	
    // (𐀊) LINEAR B SYLLABLE B057 JA	[4828 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000A, 0x0062 };
    uint32_t const ces[9] = { 0x4828, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_309)
{
    // 1000B 0021;	
    // (𐀋) LINEAR B SYLLABLE B046 JE	[4829 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000B, 0x0021 };
    uint32_t const ces[9] = { 0x4829, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_310)
{
    // 1000B 003F;	
    // (𐀋) LINEAR B SYLLABLE B046 JE	[4829 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000B, 0x003F };
    uint32_t const ces[9] = { 0x4829, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_311)
{
    // 1000B 0061;	
    // (𐀋) LINEAR B SYLLABLE B046 JE	[4829 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000B, 0x0061 };
    uint32_t const ces[9] = { 0x4829, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_312)
{
    // 1000B 0041;	
    // (𐀋) LINEAR B SYLLABLE B046 JE	[4829 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1000B, 0x0041 };
    uint32_t const ces[9] = { 0x4829, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_313)
{
    // 1000B 0062;	
    // (𐀋) LINEAR B SYLLABLE B046 JE	[4829 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000B, 0x0062 };
    uint32_t const ces[9] = { 0x4829, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_314)
{
    // 1000D 0021;	
    // (𐀍) LINEAR B SYLLABLE B036 JO	[482A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000D, 0x0021 };
    uint32_t const ces[9] = { 0x482A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_315)
{
    // 1000D 003F;	
    // (𐀍) LINEAR B SYLLABLE B036 JO	[482A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000D, 0x003F };
    uint32_t const ces[9] = { 0x482A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_316)
{
    // 1000D 0061;	
    // (𐀍) LINEAR B SYLLABLE B036 JO	[482A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000D, 0x0061 };
    uint32_t const ces[9] = { 0x482A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_317)
{
    // 1000D 0041;	
    // (𐀍) LINEAR B SYLLABLE B036 JO	[482A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1000D, 0x0041 };
    uint32_t const ces[9] = { 0x482A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_318)
{
    // 1000D 0062;	
    // (𐀍) LINEAR B SYLLABLE B036 JO	[482A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000D, 0x0062 };
    uint32_t const ces[9] = { 0x482A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_319)
{
    // 1000E 0021;	
    // (𐀎) LINEAR B SYLLABLE B065 JU	[482B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000E, 0x0021 };
    uint32_t const ces[9] = { 0x482B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_320)
{
    // 1000E 003F;	
    // (𐀎) LINEAR B SYLLABLE B065 JU	[482B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000E, 0x003F };
    uint32_t const ces[9] = { 0x482B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_321)
{
    // 1000E 0061;	
    // (𐀎) LINEAR B SYLLABLE B065 JU	[482B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000E, 0x0061 };
    uint32_t const ces[9] = { 0x482B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_322)
{
    // 1000E 0041;	
    // (𐀎) LINEAR B SYLLABLE B065 JU	[482B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1000E, 0x0041 };
    uint32_t const ces[9] = { 0x482B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_323)
{
    // 1000E 0062;	
    // (𐀎) LINEAR B SYLLABLE B065 JU	[482B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000E, 0x0062 };
    uint32_t const ces[9] = { 0x482B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_324)
{
    // 1000F 0021;	
    // (𐀏) LINEAR B SYLLABLE B077 KA	[482C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F, 0x0021 };
    uint32_t const ces[9] = { 0x482C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_325)
{
    // 1000F 003F;	
    // (𐀏) LINEAR B SYLLABLE B077 KA	[482C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F, 0x003F };
    uint32_t const ces[9] = { 0x482C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_326)
{
    // 1000F 0061;	
    // (𐀏) LINEAR B SYLLABLE B077 KA	[482C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F, 0x0061 };
    uint32_t const ces[9] = { 0x482C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_327)
{
    // 1000F 0041;	
    // (𐀏) LINEAR B SYLLABLE B077 KA	[482C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1000F, 0x0041 };
    uint32_t const ces[9] = { 0x482C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_328)
{
    // 1000F 0062;	
    // (𐀏) LINEAR B SYLLABLE B077 KA	[482C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F, 0x0062 };
    uint32_t const ces[9] = { 0x482C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_329)
{
    // 10010 0021;	
    // (𐀐) LINEAR B SYLLABLE B044 KE	[482D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10010, 0x0021 };
    uint32_t const ces[9] = { 0x482D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_330)
{
    // 10010 003F;	
    // (𐀐) LINEAR B SYLLABLE B044 KE	[482D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10010, 0x003F };
    uint32_t const ces[9] = { 0x482D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_331)
{
    // 10010 0061;	
    // (𐀐) LINEAR B SYLLABLE B044 KE	[482D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10010, 0x0061 };
    uint32_t const ces[9] = { 0x482D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_332)
{
    // 10010 0041;	
    // (𐀐) LINEAR B SYLLABLE B044 KE	[482D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10010, 0x0041 };
    uint32_t const ces[9] = { 0x482D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_333)
{
    // 10010 0062;	
    // (𐀐) LINEAR B SYLLABLE B044 KE	[482D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10010, 0x0062 };
    uint32_t const ces[9] = { 0x482D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_334)
{
    // 10011 0021;	
    // (𐀑) LINEAR B SYLLABLE B067 KI	[482E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10011, 0x0021 };
    uint32_t const ces[9] = { 0x482E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_335)
{
    // 10011 003F;	
    // (𐀑) LINEAR B SYLLABLE B067 KI	[482E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10011, 0x003F };
    uint32_t const ces[9] = { 0x482E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_336)
{
    // 10011 0061;	
    // (𐀑) LINEAR B SYLLABLE B067 KI	[482E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10011, 0x0061 };
    uint32_t const ces[9] = { 0x482E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_337)
{
    // 10011 0041;	
    // (𐀑) LINEAR B SYLLABLE B067 KI	[482E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10011, 0x0041 };
    uint32_t const ces[9] = { 0x482E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_338)
{
    // 10011 0062;	
    // (𐀑) LINEAR B SYLLABLE B067 KI	[482E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10011, 0x0062 };
    uint32_t const ces[9] = { 0x482E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_339)
{
    // 10012 0021;	
    // (𐀒) LINEAR B SYLLABLE B070 KO	[482F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10012, 0x0021 };
    uint32_t const ces[9] = { 0x482F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_340)
{
    // 10012 003F;	
    // (𐀒) LINEAR B SYLLABLE B070 KO	[482F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10012, 0x003F };
    uint32_t const ces[9] = { 0x482F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_341)
{
    // 10012 0061;	
    // (𐀒) LINEAR B SYLLABLE B070 KO	[482F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10012, 0x0061 };
    uint32_t const ces[9] = { 0x482F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_342)
{
    // 10012 0041;	
    // (𐀒) LINEAR B SYLLABLE B070 KO	[482F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10012, 0x0041 };
    uint32_t const ces[9] = { 0x482F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_343)
{
    // 10012 0062;	
    // (𐀒) LINEAR B SYLLABLE B070 KO	[482F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10012, 0x0062 };
    uint32_t const ces[9] = { 0x482F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_344)
{
    // 10013 0021;	
    // (𐀓) LINEAR B SYLLABLE B081 KU	[4830 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10013, 0x0021 };
    uint32_t const ces[9] = { 0x4830, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_345)
{
    // 10013 003F;	
    // (𐀓) LINEAR B SYLLABLE B081 KU	[4830 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10013, 0x003F };
    uint32_t const ces[9] = { 0x4830, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_346)
{
    // 10013 0061;	
    // (𐀓) LINEAR B SYLLABLE B081 KU	[4830 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10013, 0x0061 };
    uint32_t const ces[9] = { 0x4830, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_347)
{
    // 10013 0041;	
    // (𐀓) LINEAR B SYLLABLE B081 KU	[4830 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10013, 0x0041 };
    uint32_t const ces[9] = { 0x4830, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_348)
{
    // 10013 0062;	
    // (𐀓) LINEAR B SYLLABLE B081 KU	[4830 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10013, 0x0062 };
    uint32_t const ces[9] = { 0x4830, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_349)
{
    // 10014 0021;	
    // (𐀔) LINEAR B SYLLABLE B080 MA	[4831 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10014, 0x0021 };
    uint32_t const ces[9] = { 0x4831, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_350)
{
    // 10014 003F;	
    // (𐀔) LINEAR B SYLLABLE B080 MA	[4831 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10014, 0x003F };
    uint32_t const ces[9] = { 0x4831, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_351)
{
    // 10014 0061;	
    // (𐀔) LINEAR B SYLLABLE B080 MA	[4831 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10014, 0x0061 };
    uint32_t const ces[9] = { 0x4831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_352)
{
    // 10014 0041;	
    // (𐀔) LINEAR B SYLLABLE B080 MA	[4831 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10014, 0x0041 };
    uint32_t const ces[9] = { 0x4831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_353)
{
    // 10014 0062;	
    // (𐀔) LINEAR B SYLLABLE B080 MA	[4831 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10014, 0x0062 };
    uint32_t const ces[9] = { 0x4831, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_354)
{
    // 10015 0021;	
    // (𐀕) LINEAR B SYLLABLE B013 ME	[4832 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10015, 0x0021 };
    uint32_t const ces[9] = { 0x4832, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_355)
{
    // 10015 003F;	
    // (𐀕) LINEAR B SYLLABLE B013 ME	[4832 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10015, 0x003F };
    uint32_t const ces[9] = { 0x4832, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_356)
{
    // 10015 0061;	
    // (𐀕) LINEAR B SYLLABLE B013 ME	[4832 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10015, 0x0061 };
    uint32_t const ces[9] = { 0x4832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_357)
{
    // 10015 0041;	
    // (𐀕) LINEAR B SYLLABLE B013 ME	[4832 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10015, 0x0041 };
    uint32_t const ces[9] = { 0x4832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_358)
{
    // 10015 0062;	
    // (𐀕) LINEAR B SYLLABLE B013 ME	[4832 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10015, 0x0062 };
    uint32_t const ces[9] = { 0x4832, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_359)
{
    // 10016 0021;	
    // (𐀖) LINEAR B SYLLABLE B073 MI	[4833 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10016, 0x0021 };
    uint32_t const ces[9] = { 0x4833, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_360)
{
    // 10016 003F;	
    // (𐀖) LINEAR B SYLLABLE B073 MI	[4833 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10016, 0x003F };
    uint32_t const ces[9] = { 0x4833, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_361)
{
    // 10016 0061;	
    // (𐀖) LINEAR B SYLLABLE B073 MI	[4833 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10016, 0x0061 };
    uint32_t const ces[9] = { 0x4833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_362)
{
    // 10016 0041;	
    // (𐀖) LINEAR B SYLLABLE B073 MI	[4833 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10016, 0x0041 };
    uint32_t const ces[9] = { 0x4833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_363)
{
    // 10016 0062;	
    // (𐀖) LINEAR B SYLLABLE B073 MI	[4833 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10016, 0x0062 };
    uint32_t const ces[9] = { 0x4833, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_364)
{
    // 10017 0021;	
    // (𐀗) LINEAR B SYLLABLE B015 MO	[4834 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10017, 0x0021 };
    uint32_t const ces[9] = { 0x4834, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_365)
{
    // 10017 003F;	
    // (𐀗) LINEAR B SYLLABLE B015 MO	[4834 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10017, 0x003F };
    uint32_t const ces[9] = { 0x4834, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_366)
{
    // 10017 0061;	
    // (𐀗) LINEAR B SYLLABLE B015 MO	[4834 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10017, 0x0061 };
    uint32_t const ces[9] = { 0x4834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_367)
{
    // 10017 0041;	
    // (𐀗) LINEAR B SYLLABLE B015 MO	[4834 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10017, 0x0041 };
    uint32_t const ces[9] = { 0x4834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_368)
{
    // 10017 0062;	
    // (𐀗) LINEAR B SYLLABLE B015 MO	[4834 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10017, 0x0062 };
    uint32_t const ces[9] = { 0x4834, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_369)
{
    // 10018 0021;	
    // (𐀘) LINEAR B SYLLABLE B023 MU	[4835 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10018, 0x0021 };
    uint32_t const ces[9] = { 0x4835, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_370)
{
    // 10018 003F;	
    // (𐀘) LINEAR B SYLLABLE B023 MU	[4835 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10018, 0x003F };
    uint32_t const ces[9] = { 0x4835, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_371)
{
    // 10018 0061;	
    // (𐀘) LINEAR B SYLLABLE B023 MU	[4835 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10018, 0x0061 };
    uint32_t const ces[9] = { 0x4835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_372)
{
    // 10018 0041;	
    // (𐀘) LINEAR B SYLLABLE B023 MU	[4835 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10018, 0x0041 };
    uint32_t const ces[9] = { 0x4835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_373)
{
    // 10018 0062;	
    // (𐀘) LINEAR B SYLLABLE B023 MU	[4835 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10018, 0x0062 };
    uint32_t const ces[9] = { 0x4835, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_374)
{
    // 10019 0021;	
    // (𐀙) LINEAR B SYLLABLE B006 NA	[4836 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10019, 0x0021 };
    uint32_t const ces[9] = { 0x4836, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_375)
{
    // 10019 003F;	
    // (𐀙) LINEAR B SYLLABLE B006 NA	[4836 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10019, 0x003F };
    uint32_t const ces[9] = { 0x4836, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_376)
{
    // 10019 0061;	
    // (𐀙) LINEAR B SYLLABLE B006 NA	[4836 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10019, 0x0061 };
    uint32_t const ces[9] = { 0x4836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_377)
{
    // 10019 0041;	
    // (𐀙) LINEAR B SYLLABLE B006 NA	[4836 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10019, 0x0041 };
    uint32_t const ces[9] = { 0x4836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_378)
{
    // 10019 0062;	
    // (𐀙) LINEAR B SYLLABLE B006 NA	[4836 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10019, 0x0062 };
    uint32_t const ces[9] = { 0x4836, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_379)
{
    // 1001A 0021;	
    // (𐀚) LINEAR B SYLLABLE B024 NE	[4837 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001A, 0x0021 };
    uint32_t const ces[9] = { 0x4837, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_380)
{
    // 1001A 003F;	
    // (𐀚) LINEAR B SYLLABLE B024 NE	[4837 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001A, 0x003F };
    uint32_t const ces[9] = { 0x4837, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_381)
{
    // 1001A 0061;	
    // (𐀚) LINEAR B SYLLABLE B024 NE	[4837 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001A, 0x0061 };
    uint32_t const ces[9] = { 0x4837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_382)
{
    // 1001A 0041;	
    // (𐀚) LINEAR B SYLLABLE B024 NE	[4837 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1001A, 0x0041 };
    uint32_t const ces[9] = { 0x4837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_383)
{
    // 1001A 0062;	
    // (𐀚) LINEAR B SYLLABLE B024 NE	[4837 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001A, 0x0062 };
    uint32_t const ces[9] = { 0x4837, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_384)
{
    // 1001B 0021;	
    // (𐀛) LINEAR B SYLLABLE B030 NI	[4838 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001B, 0x0021 };
    uint32_t const ces[9] = { 0x4838, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_385)
{
    // 1001B 003F;	
    // (𐀛) LINEAR B SYLLABLE B030 NI	[4838 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001B, 0x003F };
    uint32_t const ces[9] = { 0x4838, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_386)
{
    // 1001B 0061;	
    // (𐀛) LINEAR B SYLLABLE B030 NI	[4838 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001B, 0x0061 };
    uint32_t const ces[9] = { 0x4838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_387)
{
    // 1001B 0041;	
    // (𐀛) LINEAR B SYLLABLE B030 NI	[4838 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1001B, 0x0041 };
    uint32_t const ces[9] = { 0x4838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_388)
{
    // 1001B 0062;	
    // (𐀛) LINEAR B SYLLABLE B030 NI	[4838 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001B, 0x0062 };
    uint32_t const ces[9] = { 0x4838, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_389)
{
    // 1001C 0021;	
    // (𐀜) LINEAR B SYLLABLE B052 NO	[4839 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001C, 0x0021 };
    uint32_t const ces[9] = { 0x4839, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_390)
{
    // 1001C 003F;	
    // (𐀜) LINEAR B SYLLABLE B052 NO	[4839 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001C, 0x003F };
    uint32_t const ces[9] = { 0x4839, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_391)
{
    // 1001C 0061;	
    // (𐀜) LINEAR B SYLLABLE B052 NO	[4839 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001C, 0x0061 };
    uint32_t const ces[9] = { 0x4839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_392)
{
    // 1001C 0041;	
    // (𐀜) LINEAR B SYLLABLE B052 NO	[4839 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1001C, 0x0041 };
    uint32_t const ces[9] = { 0x4839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_393)
{
    // 1001C 0062;	
    // (𐀜) LINEAR B SYLLABLE B052 NO	[4839 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001C, 0x0062 };
    uint32_t const ces[9] = { 0x4839, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_394)
{
    // 1001D 0021;	
    // (𐀝) LINEAR B SYLLABLE B055 NU	[483A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001D, 0x0021 };
    uint32_t const ces[9] = { 0x483A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_395)
{
    // 1001D 003F;	
    // (𐀝) LINEAR B SYLLABLE B055 NU	[483A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001D, 0x003F };
    uint32_t const ces[9] = { 0x483A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_396)
{
    // 1001D 0061;	
    // (𐀝) LINEAR B SYLLABLE B055 NU	[483A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001D, 0x0061 };
    uint32_t const ces[9] = { 0x483A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_397)
{
    // 1001D 0041;	
    // (𐀝) LINEAR B SYLLABLE B055 NU	[483A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1001D, 0x0041 };
    uint32_t const ces[9] = { 0x483A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_398)
{
    // 1001D 0062;	
    // (𐀝) LINEAR B SYLLABLE B055 NU	[483A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001D, 0x0062 };
    uint32_t const ces[9] = { 0x483A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_399)
{
    // 1001E 0021;	
    // (𐀞) LINEAR B SYLLABLE B003 PA	[483B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001E, 0x0021 };
    uint32_t const ces[9] = { 0x483B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_400)
{
    // 1001E 003F;	
    // (𐀞) LINEAR B SYLLABLE B003 PA	[483B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001E, 0x003F };
    uint32_t const ces[9] = { 0x483B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_401)
{
    // 1001E 0061;	
    // (𐀞) LINEAR B SYLLABLE B003 PA	[483B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001E, 0x0061 };
    uint32_t const ces[9] = { 0x483B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_402)
{
    // 1001E 0041;	
    // (𐀞) LINEAR B SYLLABLE B003 PA	[483B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1001E, 0x0041 };
    uint32_t const ces[9] = { 0x483B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_403)
{
    // 1001E 0062;	
    // (𐀞) LINEAR B SYLLABLE B003 PA	[483B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001E, 0x0062 };
    uint32_t const ces[9] = { 0x483B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_404)
{
    // 1001F 0021;	
    // (𐀟) LINEAR B SYLLABLE B072 PE	[483C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001F, 0x0021 };
    uint32_t const ces[9] = { 0x483C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_405)
{
    // 1001F 003F;	
    // (𐀟) LINEAR B SYLLABLE B072 PE	[483C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001F, 0x003F };
    uint32_t const ces[9] = { 0x483C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_406)
{
    // 1001F 0061;	
    // (𐀟) LINEAR B SYLLABLE B072 PE	[483C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001F, 0x0061 };
    uint32_t const ces[9] = { 0x483C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_407)
{
    // 1001F 0041;	
    // (𐀟) LINEAR B SYLLABLE B072 PE	[483C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1001F, 0x0041 };
    uint32_t const ces[9] = { 0x483C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_408)
{
    // 1001F 0062;	
    // (𐀟) LINEAR B SYLLABLE B072 PE	[483C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1001F, 0x0062 };
    uint32_t const ces[9] = { 0x483C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_409)
{
    // 10020 0021;	
    // (𐀠) LINEAR B SYLLABLE B039 PI	[483D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10020, 0x0021 };
    uint32_t const ces[9] = { 0x483D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_410)
{
    // 10020 003F;	
    // (𐀠) LINEAR B SYLLABLE B039 PI	[483D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10020, 0x003F };
    uint32_t const ces[9] = { 0x483D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_411)
{
    // 10020 0061;	
    // (𐀠) LINEAR B SYLLABLE B039 PI	[483D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10020, 0x0061 };
    uint32_t const ces[9] = { 0x483D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_412)
{
    // 10020 0041;	
    // (𐀠) LINEAR B SYLLABLE B039 PI	[483D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10020, 0x0041 };
    uint32_t const ces[9] = { 0x483D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_413)
{
    // 10020 0062;	
    // (𐀠) LINEAR B SYLLABLE B039 PI	[483D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10020, 0x0062 };
    uint32_t const ces[9] = { 0x483D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_414)
{
    // 10021 0021;	
    // (𐀡) LINEAR B SYLLABLE B011 PO	[483E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10021, 0x0021 };
    uint32_t const ces[9] = { 0x483E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_415)
{
    // 10021 003F;	
    // (𐀡) LINEAR B SYLLABLE B011 PO	[483E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10021, 0x003F };
    uint32_t const ces[9] = { 0x483E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_416)
{
    // 10021 0061;	
    // (𐀡) LINEAR B SYLLABLE B011 PO	[483E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10021, 0x0061 };
    uint32_t const ces[9] = { 0x483E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_417)
{
    // 10021 0041;	
    // (𐀡) LINEAR B SYLLABLE B011 PO	[483E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10021, 0x0041 };
    uint32_t const ces[9] = { 0x483E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_418)
{
    // 10021 0062;	
    // (𐀡) LINEAR B SYLLABLE B011 PO	[483E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10021, 0x0062 };
    uint32_t const ces[9] = { 0x483E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_419)
{
    // 10022 0021;	
    // (𐀢) LINEAR B SYLLABLE B050 PU	[483F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10022, 0x0021 };
    uint32_t const ces[9] = { 0x483F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_420)
{
    // 10022 003F;	
    // (𐀢) LINEAR B SYLLABLE B050 PU	[483F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10022, 0x003F };
    uint32_t const ces[9] = { 0x483F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_421)
{
    // 10022 0061;	
    // (𐀢) LINEAR B SYLLABLE B050 PU	[483F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10022, 0x0061 };
    uint32_t const ces[9] = { 0x483F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_422)
{
    // 10022 0041;	
    // (𐀢) LINEAR B SYLLABLE B050 PU	[483F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10022, 0x0041 };
    uint32_t const ces[9] = { 0x483F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_423)
{
    // 10022 0062;	
    // (𐀢) LINEAR B SYLLABLE B050 PU	[483F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10022, 0x0062 };
    uint32_t const ces[9] = { 0x483F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_424)
{
    // 10023 0021;	
    // (𐀣) LINEAR B SYLLABLE B016 QA	[4840 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10023, 0x0021 };
    uint32_t const ces[9] = { 0x4840, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_425)
{
    // 10023 003F;	
    // (𐀣) LINEAR B SYLLABLE B016 QA	[4840 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10023, 0x003F };
    uint32_t const ces[9] = { 0x4840, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_426)
{
    // 10023 0061;	
    // (𐀣) LINEAR B SYLLABLE B016 QA	[4840 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10023, 0x0061 };
    uint32_t const ces[9] = { 0x4840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_427)
{
    // 10023 0041;	
    // (𐀣) LINEAR B SYLLABLE B016 QA	[4840 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10023, 0x0041 };
    uint32_t const ces[9] = { 0x4840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_428)
{
    // 10023 0062;	
    // (𐀣) LINEAR B SYLLABLE B016 QA	[4840 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10023, 0x0062 };
    uint32_t const ces[9] = { 0x4840, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_429)
{
    // 10024 0021;	
    // (𐀤) LINEAR B SYLLABLE B078 QE	[4841 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10024, 0x0021 };
    uint32_t const ces[9] = { 0x4841, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_430)
{
    // 10024 003F;	
    // (𐀤) LINEAR B SYLLABLE B078 QE	[4841 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10024, 0x003F };
    uint32_t const ces[9] = { 0x4841, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_431)
{
    // 10024 0061;	
    // (𐀤) LINEAR B SYLLABLE B078 QE	[4841 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10024, 0x0061 };
    uint32_t const ces[9] = { 0x4841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_432)
{
    // 10024 0041;	
    // (𐀤) LINEAR B SYLLABLE B078 QE	[4841 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10024, 0x0041 };
    uint32_t const ces[9] = { 0x4841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_433)
{
    // 10024 0062;	
    // (𐀤) LINEAR B SYLLABLE B078 QE	[4841 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10024, 0x0062 };
    uint32_t const ces[9] = { 0x4841, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_434)
{
    // 10025 0021;	
    // (𐀥) LINEAR B SYLLABLE B021 QI	[4842 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10025, 0x0021 };
    uint32_t const ces[9] = { 0x4842, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_435)
{
    // 10025 003F;	
    // (𐀥) LINEAR B SYLLABLE B021 QI	[4842 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10025, 0x003F };
    uint32_t const ces[9] = { 0x4842, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_436)
{
    // 10025 0061;	
    // (𐀥) LINEAR B SYLLABLE B021 QI	[4842 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10025, 0x0061 };
    uint32_t const ces[9] = { 0x4842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_437)
{
    // 10025 0041;	
    // (𐀥) LINEAR B SYLLABLE B021 QI	[4842 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10025, 0x0041 };
    uint32_t const ces[9] = { 0x4842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_438)
{
    // 10025 0062;	
    // (𐀥) LINEAR B SYLLABLE B021 QI	[4842 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10025, 0x0062 };
    uint32_t const ces[9] = { 0x4842, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_439)
{
    // 10026 0021;	
    // (𐀦) LINEAR B SYLLABLE B032 QO	[4843 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10026, 0x0021 };
    uint32_t const ces[9] = { 0x4843, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_440)
{
    // 10026 003F;	
    // (𐀦) LINEAR B SYLLABLE B032 QO	[4843 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10026, 0x003F };
    uint32_t const ces[9] = { 0x4843, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_441)
{
    // 10026 0061;	
    // (𐀦) LINEAR B SYLLABLE B032 QO	[4843 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10026, 0x0061 };
    uint32_t const ces[9] = { 0x4843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_442)
{
    // 10026 0041;	
    // (𐀦) LINEAR B SYLLABLE B032 QO	[4843 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10026, 0x0041 };
    uint32_t const ces[9] = { 0x4843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_443)
{
    // 10026 0062;	
    // (𐀦) LINEAR B SYLLABLE B032 QO	[4843 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10026, 0x0062 };
    uint32_t const ces[9] = { 0x4843, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_444)
{
    // 10028 0021;	
    // (𐀨) LINEAR B SYLLABLE B060 RA	[4844 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10028, 0x0021 };
    uint32_t const ces[9] = { 0x4844, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_445)
{
    // 10028 003F;	
    // (𐀨) LINEAR B SYLLABLE B060 RA	[4844 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10028, 0x003F };
    uint32_t const ces[9] = { 0x4844, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_446)
{
    // 10028 0061;	
    // (𐀨) LINEAR B SYLLABLE B060 RA	[4844 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10028, 0x0061 };
    uint32_t const ces[9] = { 0x4844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_447)
{
    // 10028 0041;	
    // (𐀨) LINEAR B SYLLABLE B060 RA	[4844 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10028, 0x0041 };
    uint32_t const ces[9] = { 0x4844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_448)
{
    // 10028 0062;	
    // (𐀨) LINEAR B SYLLABLE B060 RA	[4844 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10028, 0x0062 };
    uint32_t const ces[9] = { 0x4844, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_449)
{
    // 10029 0021;	
    // (𐀩) LINEAR B SYLLABLE B027 RE	[4845 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10029, 0x0021 };
    uint32_t const ces[9] = { 0x4845, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_450)
{
    // 10029 003F;	
    // (𐀩) LINEAR B SYLLABLE B027 RE	[4845 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10029, 0x003F };
    uint32_t const ces[9] = { 0x4845, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_451)
{
    // 10029 0061;	
    // (𐀩) LINEAR B SYLLABLE B027 RE	[4845 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10029, 0x0061 };
    uint32_t const ces[9] = { 0x4845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_452)
{
    // 10029 0041;	
    // (𐀩) LINEAR B SYLLABLE B027 RE	[4845 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10029, 0x0041 };
    uint32_t const ces[9] = { 0x4845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_453)
{
    // 10029 0062;	
    // (𐀩) LINEAR B SYLLABLE B027 RE	[4845 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10029, 0x0062 };
    uint32_t const ces[9] = { 0x4845, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_454)
{
    // 1002A 0021;	
    // (𐀪) LINEAR B SYLLABLE B053 RI	[4846 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002A, 0x0021 };
    uint32_t const ces[9] = { 0x4846, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_455)
{
    // 1002A 003F;	
    // (𐀪) LINEAR B SYLLABLE B053 RI	[4846 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002A, 0x003F };
    uint32_t const ces[9] = { 0x4846, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_456)
{
    // 1002A 0061;	
    // (𐀪) LINEAR B SYLLABLE B053 RI	[4846 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002A, 0x0061 };
    uint32_t const ces[9] = { 0x4846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_457)
{
    // 1002A 0041;	
    // (𐀪) LINEAR B SYLLABLE B053 RI	[4846 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1002A, 0x0041 };
    uint32_t const ces[9] = { 0x4846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_458)
{
    // 1002A 0062;	
    // (𐀪) LINEAR B SYLLABLE B053 RI	[4846 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002A, 0x0062 };
    uint32_t const ces[9] = { 0x4846, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_459)
{
    // 1002B 0021;	
    // (𐀫) LINEAR B SYLLABLE B002 RO	[4847 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002B, 0x0021 };
    uint32_t const ces[9] = { 0x4847, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_460)
{
    // 1002B 003F;	
    // (𐀫) LINEAR B SYLLABLE B002 RO	[4847 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002B, 0x003F };
    uint32_t const ces[9] = { 0x4847, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_461)
{
    // 1002B 0061;	
    // (𐀫) LINEAR B SYLLABLE B002 RO	[4847 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002B, 0x0061 };
    uint32_t const ces[9] = { 0x4847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_462)
{
    // 1002B 0041;	
    // (𐀫) LINEAR B SYLLABLE B002 RO	[4847 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1002B, 0x0041 };
    uint32_t const ces[9] = { 0x4847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_463)
{
    // 1002B 0062;	
    // (𐀫) LINEAR B SYLLABLE B002 RO	[4847 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002B, 0x0062 };
    uint32_t const ces[9] = { 0x4847, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_464)
{
    // 1002C 0021;	
    // (𐀬) LINEAR B SYLLABLE B026 RU	[4848 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002C, 0x0021 };
    uint32_t const ces[9] = { 0x4848, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_465)
{
    // 1002C 003F;	
    // (𐀬) LINEAR B SYLLABLE B026 RU	[4848 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002C, 0x003F };
    uint32_t const ces[9] = { 0x4848, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_466)
{
    // 1002C 0061;	
    // (𐀬) LINEAR B SYLLABLE B026 RU	[4848 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002C, 0x0061 };
    uint32_t const ces[9] = { 0x4848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_467)
{
    // 1002C 0041;	
    // (𐀬) LINEAR B SYLLABLE B026 RU	[4848 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1002C, 0x0041 };
    uint32_t const ces[9] = { 0x4848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_468)
{
    // 1002C 0062;	
    // (𐀬) LINEAR B SYLLABLE B026 RU	[4848 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002C, 0x0062 };
    uint32_t const ces[9] = { 0x4848, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_469)
{
    // 1002D 0021;	
    // (𐀭) LINEAR B SYLLABLE B031 SA	[4849 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002D, 0x0021 };
    uint32_t const ces[9] = { 0x4849, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_470)
{
    // 1002D 003F;	
    // (𐀭) LINEAR B SYLLABLE B031 SA	[4849 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002D, 0x003F };
    uint32_t const ces[9] = { 0x4849, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_471)
{
    // 1002D 0061;	
    // (𐀭) LINEAR B SYLLABLE B031 SA	[4849 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002D, 0x0061 };
    uint32_t const ces[9] = { 0x4849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_472)
{
    // 1002D 0041;	
    // (𐀭) LINEAR B SYLLABLE B031 SA	[4849 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1002D, 0x0041 };
    uint32_t const ces[9] = { 0x4849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_473)
{
    // 1002D 0062;	
    // (𐀭) LINEAR B SYLLABLE B031 SA	[4849 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002D, 0x0062 };
    uint32_t const ces[9] = { 0x4849, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_474)
{
    // 1002E 0021;	
    // (𐀮) LINEAR B SYLLABLE B009 SE	[484A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002E, 0x0021 };
    uint32_t const ces[9] = { 0x484A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_475)
{
    // 1002E 003F;	
    // (𐀮) LINEAR B SYLLABLE B009 SE	[484A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002E, 0x003F };
    uint32_t const ces[9] = { 0x484A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_476)
{
    // 1002E 0061;	
    // (𐀮) LINEAR B SYLLABLE B009 SE	[484A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002E, 0x0061 };
    uint32_t const ces[9] = { 0x484A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_477)
{
    // 1002E 0041;	
    // (𐀮) LINEAR B SYLLABLE B009 SE	[484A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1002E, 0x0041 };
    uint32_t const ces[9] = { 0x484A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_478)
{
    // 1002E 0062;	
    // (𐀮) LINEAR B SYLLABLE B009 SE	[484A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002E, 0x0062 };
    uint32_t const ces[9] = { 0x484A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_479)
{
    // 1002F 0021;	
    // (𐀯) LINEAR B SYLLABLE B041 SI	[484B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002F, 0x0021 };
    uint32_t const ces[9] = { 0x484B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_480)
{
    // 1002F 003F;	
    // (𐀯) LINEAR B SYLLABLE B041 SI	[484B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002F, 0x003F };
    uint32_t const ces[9] = { 0x484B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_481)
{
    // 1002F 0061;	
    // (𐀯) LINEAR B SYLLABLE B041 SI	[484B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002F, 0x0061 };
    uint32_t const ces[9] = { 0x484B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_482)
{
    // 1002F 0041;	
    // (𐀯) LINEAR B SYLLABLE B041 SI	[484B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1002F, 0x0041 };
    uint32_t const ces[9] = { 0x484B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_483)
{
    // 1002F 0062;	
    // (𐀯) LINEAR B SYLLABLE B041 SI	[484B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1002F, 0x0062 };
    uint32_t const ces[9] = { 0x484B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_484)
{
    // 10030 0021;	
    // (𐀰) LINEAR B SYLLABLE B012 SO	[484C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10030, 0x0021 };
    uint32_t const ces[9] = { 0x484C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_485)
{
    // 10030 003F;	
    // (𐀰) LINEAR B SYLLABLE B012 SO	[484C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10030, 0x003F };
    uint32_t const ces[9] = { 0x484C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_486)
{
    // 10030 0061;	
    // (𐀰) LINEAR B SYLLABLE B012 SO	[484C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10030, 0x0061 };
    uint32_t const ces[9] = { 0x484C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_487)
{
    // 10030 0041;	
    // (𐀰) LINEAR B SYLLABLE B012 SO	[484C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10030, 0x0041 };
    uint32_t const ces[9] = { 0x484C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_488)
{
    // 10030 0062;	
    // (𐀰) LINEAR B SYLLABLE B012 SO	[484C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10030, 0x0062 };
    uint32_t const ces[9] = { 0x484C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_489)
{
    // 10031 0021;	
    // (𐀱) LINEAR B SYLLABLE B058 SU	[484D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10031, 0x0021 };
    uint32_t const ces[9] = { 0x484D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_490)
{
    // 10031 003F;	
    // (𐀱) LINEAR B SYLLABLE B058 SU	[484D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10031, 0x003F };
    uint32_t const ces[9] = { 0x484D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_491)
{
    // 10031 0061;	
    // (𐀱) LINEAR B SYLLABLE B058 SU	[484D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10031, 0x0061 };
    uint32_t const ces[9] = { 0x484D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_492)
{
    // 10031 0041;	
    // (𐀱) LINEAR B SYLLABLE B058 SU	[484D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10031, 0x0041 };
    uint32_t const ces[9] = { 0x484D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_493)
{
    // 10031 0062;	
    // (𐀱) LINEAR B SYLLABLE B058 SU	[484D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10031, 0x0062 };
    uint32_t const ces[9] = { 0x484D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_494)
{
    // 10032 0021;	
    // (𐀲) LINEAR B SYLLABLE B059 TA	[484E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10032, 0x0021 };
    uint32_t const ces[9] = { 0x484E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_495)
{
    // 10032 003F;	
    // (𐀲) LINEAR B SYLLABLE B059 TA	[484E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10032, 0x003F };
    uint32_t const ces[9] = { 0x484E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_496)
{
    // 10032 0061;	
    // (𐀲) LINEAR B SYLLABLE B059 TA	[484E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10032, 0x0061 };
    uint32_t const ces[9] = { 0x484E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_497)
{
    // 10032 0041;	
    // (𐀲) LINEAR B SYLLABLE B059 TA	[484E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10032, 0x0041 };
    uint32_t const ces[9] = { 0x484E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_498)
{
    // 10032 0062;	
    // (𐀲) LINEAR B SYLLABLE B059 TA	[484E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10032, 0x0062 };
    uint32_t const ces[9] = { 0x484E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_275_499)
{
    // 10033 0021;	
    // (𐀳) LINEAR B SYLLABLE B004 TE	[484F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10033, 0x0021 };
    uint32_t const ces[9] = { 0x484F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

