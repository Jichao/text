// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_384_000)
{
    // 4A22 003F;	
    // (䨢) CJK UNIFIED IDEOGRAPH-4A22	[FB80 CA22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A22, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_001)
{
    // 4A22 0061;	
    // (䨢) CJK UNIFIED IDEOGRAPH-4A22	[FB80 CA22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A22, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_002)
{
    // 4A22 0041;	
    // (䨢) CJK UNIFIED IDEOGRAPH-4A22	[FB80 CA22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A22, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_003)
{
    // 4A22 0062;	
    // (䨢) CJK UNIFIED IDEOGRAPH-4A22	[FB80 CA22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A22, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_004)
{
    // 4A23 0021;	
    // (䨣) CJK UNIFIED IDEOGRAPH-4A23	[FB80 CA23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A23, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_005)
{
    // 4A23 003F;	
    // (䨣) CJK UNIFIED IDEOGRAPH-4A23	[FB80 CA23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A23, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_006)
{
    // 4A23 0061;	
    // (䨣) CJK UNIFIED IDEOGRAPH-4A23	[FB80 CA23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A23, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_007)
{
    // 4A23 0041;	
    // (䨣) CJK UNIFIED IDEOGRAPH-4A23	[FB80 CA23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A23, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_008)
{
    // 4A23 0062;	
    // (䨣) CJK UNIFIED IDEOGRAPH-4A23	[FB80 CA23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A23, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_009)
{
    // 4A24 0021;	
    // (䨤) CJK UNIFIED IDEOGRAPH-4A24	[FB80 CA24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A24, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_010)
{
    // 4A24 003F;	
    // (䨤) CJK UNIFIED IDEOGRAPH-4A24	[FB80 CA24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A24, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_011)
{
    // 4A24 0061;	
    // (䨤) CJK UNIFIED IDEOGRAPH-4A24	[FB80 CA24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A24, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_012)
{
    // 4A24 0041;	
    // (䨤) CJK UNIFIED IDEOGRAPH-4A24	[FB80 CA24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A24, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_013)
{
    // 4A24 0062;	
    // (䨤) CJK UNIFIED IDEOGRAPH-4A24	[FB80 CA24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A24, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_014)
{
    // 4A25 0021;	
    // (䨥) CJK UNIFIED IDEOGRAPH-4A25	[FB80 CA25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A25, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_015)
{
    // 4A25 003F;	
    // (䨥) CJK UNIFIED IDEOGRAPH-4A25	[FB80 CA25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A25, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_016)
{
    // 4A25 0061;	
    // (䨥) CJK UNIFIED IDEOGRAPH-4A25	[FB80 CA25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A25, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_017)
{
    // 4A25 0041;	
    // (䨥) CJK UNIFIED IDEOGRAPH-4A25	[FB80 CA25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A25, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_018)
{
    // 4A25 0062;	
    // (䨥) CJK UNIFIED IDEOGRAPH-4A25	[FB80 CA25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A25, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_019)
{
    // 4A26 0021;	
    // (䨦) CJK UNIFIED IDEOGRAPH-4A26	[FB80 CA26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A26, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_020)
{
    // 4A26 003F;	
    // (䨦) CJK UNIFIED IDEOGRAPH-4A26	[FB80 CA26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A26, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_021)
{
    // 4A26 0061;	
    // (䨦) CJK UNIFIED IDEOGRAPH-4A26	[FB80 CA26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A26, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_022)
{
    // 4A26 0041;	
    // (䨦) CJK UNIFIED IDEOGRAPH-4A26	[FB80 CA26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A26, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_023)
{
    // 4A26 0062;	
    // (䨦) CJK UNIFIED IDEOGRAPH-4A26	[FB80 CA26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A26, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_024)
{
    // 4A27 0021;	
    // (䨧) CJK UNIFIED IDEOGRAPH-4A27	[FB80 CA27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A27, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_025)
{
    // 4A27 003F;	
    // (䨧) CJK UNIFIED IDEOGRAPH-4A27	[FB80 CA27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A27, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_026)
{
    // 4A27 0061;	
    // (䨧) CJK UNIFIED IDEOGRAPH-4A27	[FB80 CA27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A27, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_027)
{
    // 4A27 0041;	
    // (䨧) CJK UNIFIED IDEOGRAPH-4A27	[FB80 CA27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A27, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_028)
{
    // 4A27 0062;	
    // (䨧) CJK UNIFIED IDEOGRAPH-4A27	[FB80 CA27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A27, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_029)
{
    // 4A28 0021;	
    // (䨨) CJK UNIFIED IDEOGRAPH-4A28	[FB80 CA28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A28, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_030)
{
    // 4A28 003F;	
    // (䨨) CJK UNIFIED IDEOGRAPH-4A28	[FB80 CA28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A28, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_031)
{
    // 4A28 0061;	
    // (䨨) CJK UNIFIED IDEOGRAPH-4A28	[FB80 CA28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A28, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_032)
{
    // 4A28 0041;	
    // (䨨) CJK UNIFIED IDEOGRAPH-4A28	[FB80 CA28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A28, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_033)
{
    // 4A28 0062;	
    // (䨨) CJK UNIFIED IDEOGRAPH-4A28	[FB80 CA28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A28, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_034)
{
    // 4A29 0021;	
    // (䨩) CJK UNIFIED IDEOGRAPH-4A29	[FB80 CA29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A29, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_035)
{
    // 4A29 003F;	
    // (䨩) CJK UNIFIED IDEOGRAPH-4A29	[FB80 CA29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A29, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_036)
{
    // 4A29 0061;	
    // (䨩) CJK UNIFIED IDEOGRAPH-4A29	[FB80 CA29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A29, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_037)
{
    // 4A29 0041;	
    // (䨩) CJK UNIFIED IDEOGRAPH-4A29	[FB80 CA29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A29, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_038)
{
    // 4A29 0062;	
    // (䨩) CJK UNIFIED IDEOGRAPH-4A29	[FB80 CA29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A29, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_039)
{
    // 4A2A 0021;	
    // (䨪) CJK UNIFIED IDEOGRAPH-4A2A	[FB80 CA2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_040)
{
    // 4A2A 003F;	
    // (䨪) CJK UNIFIED IDEOGRAPH-4A2A	[FB80 CA2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_041)
{
    // 4A2A 0061;	
    // (䨪) CJK UNIFIED IDEOGRAPH-4A2A	[FB80 CA2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_042)
{
    // 4A2A 0041;	
    // (䨪) CJK UNIFIED IDEOGRAPH-4A2A	[FB80 CA2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A2A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_043)
{
    // 4A2A 0062;	
    // (䨪) CJK UNIFIED IDEOGRAPH-4A2A	[FB80 CA2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_044)
{
    // 4A2B 0021;	
    // (䨫) CJK UNIFIED IDEOGRAPH-4A2B	[FB80 CA2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_045)
{
    // 4A2B 003F;	
    // (䨫) CJK UNIFIED IDEOGRAPH-4A2B	[FB80 CA2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_046)
{
    // 4A2B 0061;	
    // (䨫) CJK UNIFIED IDEOGRAPH-4A2B	[FB80 CA2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_047)
{
    // 4A2B 0041;	
    // (䨫) CJK UNIFIED IDEOGRAPH-4A2B	[FB80 CA2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A2B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_048)
{
    // 4A2B 0062;	
    // (䨫) CJK UNIFIED IDEOGRAPH-4A2B	[FB80 CA2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_049)
{
    // 4A2C 0021;	
    // (䨬) CJK UNIFIED IDEOGRAPH-4A2C	[FB80 CA2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_050)
{
    // 4A2C 003F;	
    // (䨬) CJK UNIFIED IDEOGRAPH-4A2C	[FB80 CA2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_051)
{
    // 4A2C 0061;	
    // (䨬) CJK UNIFIED IDEOGRAPH-4A2C	[FB80 CA2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_052)
{
    // 4A2C 0041;	
    // (䨬) CJK UNIFIED IDEOGRAPH-4A2C	[FB80 CA2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A2C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_053)
{
    // 4A2C 0062;	
    // (䨬) CJK UNIFIED IDEOGRAPH-4A2C	[FB80 CA2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_054)
{
    // 4A2D 0021;	
    // (䨭) CJK UNIFIED IDEOGRAPH-4A2D	[FB80 CA2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_055)
{
    // 4A2D 003F;	
    // (䨭) CJK UNIFIED IDEOGRAPH-4A2D	[FB80 CA2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_056)
{
    // 4A2D 0061;	
    // (䨭) CJK UNIFIED IDEOGRAPH-4A2D	[FB80 CA2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_057)
{
    // 4A2D 0041;	
    // (䨭) CJK UNIFIED IDEOGRAPH-4A2D	[FB80 CA2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A2D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_058)
{
    // 4A2D 0062;	
    // (䨭) CJK UNIFIED IDEOGRAPH-4A2D	[FB80 CA2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_059)
{
    // 4A2E 0021;	
    // (䨮) CJK UNIFIED IDEOGRAPH-4A2E	[FB80 CA2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_060)
{
    // 4A2E 003F;	
    // (䨮) CJK UNIFIED IDEOGRAPH-4A2E	[FB80 CA2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_061)
{
    // 4A2E 0061;	
    // (䨮) CJK UNIFIED IDEOGRAPH-4A2E	[FB80 CA2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_062)
{
    // 4A2E 0041;	
    // (䨮) CJK UNIFIED IDEOGRAPH-4A2E	[FB80 CA2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A2E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_063)
{
    // 4A2E 0062;	
    // (䨮) CJK UNIFIED IDEOGRAPH-4A2E	[FB80 CA2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_064)
{
    // 4A2F 0021;	
    // (䨯) CJK UNIFIED IDEOGRAPH-4A2F	[FB80 CA2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_065)
{
    // 4A2F 003F;	
    // (䨯) CJK UNIFIED IDEOGRAPH-4A2F	[FB80 CA2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_066)
{
    // 4A2F 0061;	
    // (䨯) CJK UNIFIED IDEOGRAPH-4A2F	[FB80 CA2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_067)
{
    // 4A2F 0041;	
    // (䨯) CJK UNIFIED IDEOGRAPH-4A2F	[FB80 CA2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A2F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_068)
{
    // 4A2F 0062;	
    // (䨯) CJK UNIFIED IDEOGRAPH-4A2F	[FB80 CA2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A2F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_069)
{
    // 4A30 0021;	
    // (䨰) CJK UNIFIED IDEOGRAPH-4A30	[FB80 CA30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A30, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_070)
{
    // 4A30 003F;	
    // (䨰) CJK UNIFIED IDEOGRAPH-4A30	[FB80 CA30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A30, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_071)
{
    // 4A30 0061;	
    // (䨰) CJK UNIFIED IDEOGRAPH-4A30	[FB80 CA30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A30, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_072)
{
    // 4A30 0041;	
    // (䨰) CJK UNIFIED IDEOGRAPH-4A30	[FB80 CA30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A30, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_073)
{
    // 4A30 0062;	
    // (䨰) CJK UNIFIED IDEOGRAPH-4A30	[FB80 CA30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A30, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_074)
{
    // 4A31 0021;	
    // (䨱) CJK UNIFIED IDEOGRAPH-4A31	[FB80 CA31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A31, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_075)
{
    // 4A31 003F;	
    // (䨱) CJK UNIFIED IDEOGRAPH-4A31	[FB80 CA31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A31, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_076)
{
    // 4A31 0061;	
    // (䨱) CJK UNIFIED IDEOGRAPH-4A31	[FB80 CA31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A31, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_077)
{
    // 4A31 0041;	
    // (䨱) CJK UNIFIED IDEOGRAPH-4A31	[FB80 CA31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A31, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_078)
{
    // 4A31 0062;	
    // (䨱) CJK UNIFIED IDEOGRAPH-4A31	[FB80 CA31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A31, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_079)
{
    // 4A32 0021;	
    // (䨲) CJK UNIFIED IDEOGRAPH-4A32	[FB80 CA32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A32, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_080)
{
    // 4A32 003F;	
    // (䨲) CJK UNIFIED IDEOGRAPH-4A32	[FB80 CA32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A32, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_081)
{
    // 4A32 0061;	
    // (䨲) CJK UNIFIED IDEOGRAPH-4A32	[FB80 CA32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A32, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_082)
{
    // 4A32 0041;	
    // (䨲) CJK UNIFIED IDEOGRAPH-4A32	[FB80 CA32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A32, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_083)
{
    // 4A32 0062;	
    // (䨲) CJK UNIFIED IDEOGRAPH-4A32	[FB80 CA32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A32, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_084)
{
    // 4A33 0021;	
    // (䨳) CJK UNIFIED IDEOGRAPH-4A33	[FB80 CA33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A33, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_085)
{
    // 4A33 003F;	
    // (䨳) CJK UNIFIED IDEOGRAPH-4A33	[FB80 CA33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A33, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_086)
{
    // 4A33 0061;	
    // (䨳) CJK UNIFIED IDEOGRAPH-4A33	[FB80 CA33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A33, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_087)
{
    // 4A33 0041;	
    // (䨳) CJK UNIFIED IDEOGRAPH-4A33	[FB80 CA33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A33, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_088)
{
    // 4A33 0062;	
    // (䨳) CJK UNIFIED IDEOGRAPH-4A33	[FB80 CA33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A33, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_089)
{
    // 4A34 0021;	
    // (䨴) CJK UNIFIED IDEOGRAPH-4A34	[FB80 CA34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A34, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_090)
{
    // 4A34 003F;	
    // (䨴) CJK UNIFIED IDEOGRAPH-4A34	[FB80 CA34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A34, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_091)
{
    // 4A34 0061;	
    // (䨴) CJK UNIFIED IDEOGRAPH-4A34	[FB80 CA34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A34, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_092)
{
    // 4A34 0041;	
    // (䨴) CJK UNIFIED IDEOGRAPH-4A34	[FB80 CA34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A34, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_093)
{
    // 4A34 0062;	
    // (䨴) CJK UNIFIED IDEOGRAPH-4A34	[FB80 CA34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A34, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_094)
{
    // 4A35 0021;	
    // (䨵) CJK UNIFIED IDEOGRAPH-4A35	[FB80 CA35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A35, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_095)
{
    // 4A35 003F;	
    // (䨵) CJK UNIFIED IDEOGRAPH-4A35	[FB80 CA35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A35, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_096)
{
    // 4A35 0061;	
    // (䨵) CJK UNIFIED IDEOGRAPH-4A35	[FB80 CA35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A35, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_097)
{
    // 4A35 0041;	
    // (䨵) CJK UNIFIED IDEOGRAPH-4A35	[FB80 CA35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A35, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_098)
{
    // 4A35 0062;	
    // (䨵) CJK UNIFIED IDEOGRAPH-4A35	[FB80 CA35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A35, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_099)
{
    // 4A36 0021;	
    // (䨶) CJK UNIFIED IDEOGRAPH-4A36	[FB80 CA36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A36, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_100)
{
    // 4A36 003F;	
    // (䨶) CJK UNIFIED IDEOGRAPH-4A36	[FB80 CA36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A36, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_101)
{
    // 4A36 0061;	
    // (䨶) CJK UNIFIED IDEOGRAPH-4A36	[FB80 CA36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A36, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_102)
{
    // 4A36 0041;	
    // (䨶) CJK UNIFIED IDEOGRAPH-4A36	[FB80 CA36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A36, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_103)
{
    // 4A36 0062;	
    // (䨶) CJK UNIFIED IDEOGRAPH-4A36	[FB80 CA36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A36, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_104)
{
    // 4A37 0021;	
    // (䨷) CJK UNIFIED IDEOGRAPH-4A37	[FB80 CA37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A37, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_105)
{
    // 4A37 003F;	
    // (䨷) CJK UNIFIED IDEOGRAPH-4A37	[FB80 CA37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A37, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_106)
{
    // 4A37 0061;	
    // (䨷) CJK UNIFIED IDEOGRAPH-4A37	[FB80 CA37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A37, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_107)
{
    // 4A37 0041;	
    // (䨷) CJK UNIFIED IDEOGRAPH-4A37	[FB80 CA37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A37, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_108)
{
    // 4A37 0062;	
    // (䨷) CJK UNIFIED IDEOGRAPH-4A37	[FB80 CA37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A37, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_109)
{
    // 4A38 0021;	
    // (䨸) CJK UNIFIED IDEOGRAPH-4A38	[FB80 CA38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A38, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_110)
{
    // 4A38 003F;	
    // (䨸) CJK UNIFIED IDEOGRAPH-4A38	[FB80 CA38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A38, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_111)
{
    // 4A38 0061;	
    // (䨸) CJK UNIFIED IDEOGRAPH-4A38	[FB80 CA38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A38, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_112)
{
    // 4A38 0041;	
    // (䨸) CJK UNIFIED IDEOGRAPH-4A38	[FB80 CA38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A38, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_113)
{
    // 4A38 0062;	
    // (䨸) CJK UNIFIED IDEOGRAPH-4A38	[FB80 CA38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A38, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_114)
{
    // 4A39 0021;	
    // (䨹) CJK UNIFIED IDEOGRAPH-4A39	[FB80 CA39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A39, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_115)
{
    // 4A39 003F;	
    // (䨹) CJK UNIFIED IDEOGRAPH-4A39	[FB80 CA39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A39, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_116)
{
    // 4A39 0061;	
    // (䨹) CJK UNIFIED IDEOGRAPH-4A39	[FB80 CA39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A39, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_117)
{
    // 4A39 0041;	
    // (䨹) CJK UNIFIED IDEOGRAPH-4A39	[FB80 CA39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A39, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_118)
{
    // 4A39 0062;	
    // (䨹) CJK UNIFIED IDEOGRAPH-4A39	[FB80 CA39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A39, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_119)
{
    // 4A3A 0021;	
    // (䨺) CJK UNIFIED IDEOGRAPH-4A3A	[FB80 CA3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_120)
{
    // 4A3A 003F;	
    // (䨺) CJK UNIFIED IDEOGRAPH-4A3A	[FB80 CA3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_121)
{
    // 4A3A 0061;	
    // (䨺) CJK UNIFIED IDEOGRAPH-4A3A	[FB80 CA3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_122)
{
    // 4A3A 0041;	
    // (䨺) CJK UNIFIED IDEOGRAPH-4A3A	[FB80 CA3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A3A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_123)
{
    // 4A3A 0062;	
    // (䨺) CJK UNIFIED IDEOGRAPH-4A3A	[FB80 CA3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_124)
{
    // 4A3B 0021;	
    // (䨻) CJK UNIFIED IDEOGRAPH-4A3B	[FB80 CA3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_125)
{
    // 4A3B 003F;	
    // (䨻) CJK UNIFIED IDEOGRAPH-4A3B	[FB80 CA3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_126)
{
    // 4A3B 0061;	
    // (䨻) CJK UNIFIED IDEOGRAPH-4A3B	[FB80 CA3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_127)
{
    // 4A3B 0041;	
    // (䨻) CJK UNIFIED IDEOGRAPH-4A3B	[FB80 CA3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A3B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_128)
{
    // 4A3B 0062;	
    // (䨻) CJK UNIFIED IDEOGRAPH-4A3B	[FB80 CA3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_129)
{
    // 4A3C 0021;	
    // (䨼) CJK UNIFIED IDEOGRAPH-4A3C	[FB80 CA3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_130)
{
    // 4A3C 003F;	
    // (䨼) CJK UNIFIED IDEOGRAPH-4A3C	[FB80 CA3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_131)
{
    // 4A3C 0061;	
    // (䨼) CJK UNIFIED IDEOGRAPH-4A3C	[FB80 CA3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_132)
{
    // 4A3C 0041;	
    // (䨼) CJK UNIFIED IDEOGRAPH-4A3C	[FB80 CA3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A3C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_133)
{
    // 4A3C 0062;	
    // (䨼) CJK UNIFIED IDEOGRAPH-4A3C	[FB80 CA3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_134)
{
    // 4A3D 0021;	
    // (䨽) CJK UNIFIED IDEOGRAPH-4A3D	[FB80 CA3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_135)
{
    // 4A3D 003F;	
    // (䨽) CJK UNIFIED IDEOGRAPH-4A3D	[FB80 CA3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_136)
{
    // 4A3D 0061;	
    // (䨽) CJK UNIFIED IDEOGRAPH-4A3D	[FB80 CA3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_137)
{
    // 4A3D 0041;	
    // (䨽) CJK UNIFIED IDEOGRAPH-4A3D	[FB80 CA3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A3D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_138)
{
    // 4A3D 0062;	
    // (䨽) CJK UNIFIED IDEOGRAPH-4A3D	[FB80 CA3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_139)
{
    // 4A3E 0021;	
    // (䨾) CJK UNIFIED IDEOGRAPH-4A3E	[FB80 CA3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_140)
{
    // 4A3E 003F;	
    // (䨾) CJK UNIFIED IDEOGRAPH-4A3E	[FB80 CA3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_141)
{
    // 4A3E 0061;	
    // (䨾) CJK UNIFIED IDEOGRAPH-4A3E	[FB80 CA3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_142)
{
    // 4A3E 0041;	
    // (䨾) CJK UNIFIED IDEOGRAPH-4A3E	[FB80 CA3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A3E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_143)
{
    // 4A3E 0062;	
    // (䨾) CJK UNIFIED IDEOGRAPH-4A3E	[FB80 CA3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_144)
{
    // 4A3F 0021;	
    // (䨿) CJK UNIFIED IDEOGRAPH-4A3F	[FB80 CA3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_145)
{
    // 4A3F 003F;	
    // (䨿) CJK UNIFIED IDEOGRAPH-4A3F	[FB80 CA3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_146)
{
    // 4A3F 0061;	
    // (䨿) CJK UNIFIED IDEOGRAPH-4A3F	[FB80 CA3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_147)
{
    // 4A3F 0041;	
    // (䨿) CJK UNIFIED IDEOGRAPH-4A3F	[FB80 CA3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A3F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_148)
{
    // 4A3F 0062;	
    // (䨿) CJK UNIFIED IDEOGRAPH-4A3F	[FB80 CA3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A3F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_149)
{
    // 4A40 0021;	
    // (䩀) CJK UNIFIED IDEOGRAPH-4A40	[FB80 CA40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A40, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_150)
{
    // 4A40 003F;	
    // (䩀) CJK UNIFIED IDEOGRAPH-4A40	[FB80 CA40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A40, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_151)
{
    // 4A40 0061;	
    // (䩀) CJK UNIFIED IDEOGRAPH-4A40	[FB80 CA40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A40, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_152)
{
    // 4A40 0041;	
    // (䩀) CJK UNIFIED IDEOGRAPH-4A40	[FB80 CA40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A40, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_153)
{
    // 4A40 0062;	
    // (䩀) CJK UNIFIED IDEOGRAPH-4A40	[FB80 CA40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A40, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_154)
{
    // 4A41 0021;	
    // (䩁) CJK UNIFIED IDEOGRAPH-4A41	[FB80 CA41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A41, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_155)
{
    // 4A41 003F;	
    // (䩁) CJK UNIFIED IDEOGRAPH-4A41	[FB80 CA41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A41, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_156)
{
    // 4A41 0061;	
    // (䩁) CJK UNIFIED IDEOGRAPH-4A41	[FB80 CA41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A41, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_157)
{
    // 4A41 0041;	
    // (䩁) CJK UNIFIED IDEOGRAPH-4A41	[FB80 CA41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A41, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_158)
{
    // 4A41 0062;	
    // (䩁) CJK UNIFIED IDEOGRAPH-4A41	[FB80 CA41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A41, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_159)
{
    // 4A42 0021;	
    // (䩂) CJK UNIFIED IDEOGRAPH-4A42	[FB80 CA42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A42, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_160)
{
    // 4A42 003F;	
    // (䩂) CJK UNIFIED IDEOGRAPH-4A42	[FB80 CA42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A42, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_161)
{
    // 4A42 0061;	
    // (䩂) CJK UNIFIED IDEOGRAPH-4A42	[FB80 CA42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A42, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_162)
{
    // 4A42 0041;	
    // (䩂) CJK UNIFIED IDEOGRAPH-4A42	[FB80 CA42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A42, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_163)
{
    // 4A42 0062;	
    // (䩂) CJK UNIFIED IDEOGRAPH-4A42	[FB80 CA42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A42, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_164)
{
    // 4A43 0021;	
    // (䩃) CJK UNIFIED IDEOGRAPH-4A43	[FB80 CA43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A43, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_165)
{
    // 4A43 003F;	
    // (䩃) CJK UNIFIED IDEOGRAPH-4A43	[FB80 CA43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A43, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_166)
{
    // 4A43 0061;	
    // (䩃) CJK UNIFIED IDEOGRAPH-4A43	[FB80 CA43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A43, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_167)
{
    // 4A43 0041;	
    // (䩃) CJK UNIFIED IDEOGRAPH-4A43	[FB80 CA43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A43, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_168)
{
    // 4A43 0062;	
    // (䩃) CJK UNIFIED IDEOGRAPH-4A43	[FB80 CA43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A43, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_169)
{
    // 4A44 0021;	
    // (䩄) CJK UNIFIED IDEOGRAPH-4A44	[FB80 CA44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A44, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_170)
{
    // 4A44 003F;	
    // (䩄) CJK UNIFIED IDEOGRAPH-4A44	[FB80 CA44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A44, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_171)
{
    // 4A44 0061;	
    // (䩄) CJK UNIFIED IDEOGRAPH-4A44	[FB80 CA44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A44, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_172)
{
    // 4A44 0041;	
    // (䩄) CJK UNIFIED IDEOGRAPH-4A44	[FB80 CA44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A44, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_173)
{
    // 4A44 0062;	
    // (䩄) CJK UNIFIED IDEOGRAPH-4A44	[FB80 CA44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A44, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_174)
{
    // 4A45 0021;	
    // (䩅) CJK UNIFIED IDEOGRAPH-4A45	[FB80 CA45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A45, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_175)
{
    // 4A45 003F;	
    // (䩅) CJK UNIFIED IDEOGRAPH-4A45	[FB80 CA45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A45, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_176)
{
    // 4A45 0061;	
    // (䩅) CJK UNIFIED IDEOGRAPH-4A45	[FB80 CA45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A45, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_177)
{
    // 4A45 0041;	
    // (䩅) CJK UNIFIED IDEOGRAPH-4A45	[FB80 CA45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A45, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_178)
{
    // 4A45 0062;	
    // (䩅) CJK UNIFIED IDEOGRAPH-4A45	[FB80 CA45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A45, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_179)
{
    // 4A46 0021;	
    // (䩆) CJK UNIFIED IDEOGRAPH-4A46	[FB80 CA46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A46, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_180)
{
    // 4A46 003F;	
    // (䩆) CJK UNIFIED IDEOGRAPH-4A46	[FB80 CA46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A46, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_181)
{
    // 4A46 0061;	
    // (䩆) CJK UNIFIED IDEOGRAPH-4A46	[FB80 CA46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A46, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_182)
{
    // 4A46 0041;	
    // (䩆) CJK UNIFIED IDEOGRAPH-4A46	[FB80 CA46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A46, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_183)
{
    // 4A46 0062;	
    // (䩆) CJK UNIFIED IDEOGRAPH-4A46	[FB80 CA46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A46, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_184)
{
    // 4A47 0021;	
    // (䩇) CJK UNIFIED IDEOGRAPH-4A47	[FB80 CA47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A47, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_185)
{
    // 4A47 003F;	
    // (䩇) CJK UNIFIED IDEOGRAPH-4A47	[FB80 CA47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A47, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_186)
{
    // 4A47 0061;	
    // (䩇) CJK UNIFIED IDEOGRAPH-4A47	[FB80 CA47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A47, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_187)
{
    // 4A47 0041;	
    // (䩇) CJK UNIFIED IDEOGRAPH-4A47	[FB80 CA47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A47, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_188)
{
    // 4A47 0062;	
    // (䩇) CJK UNIFIED IDEOGRAPH-4A47	[FB80 CA47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A47, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_189)
{
    // 4A48 0021;	
    // (䩈) CJK UNIFIED IDEOGRAPH-4A48	[FB80 CA48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A48, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_190)
{
    // 4A48 003F;	
    // (䩈) CJK UNIFIED IDEOGRAPH-4A48	[FB80 CA48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A48, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_191)
{
    // 4A48 0061;	
    // (䩈) CJK UNIFIED IDEOGRAPH-4A48	[FB80 CA48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A48, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_192)
{
    // 4A48 0041;	
    // (䩈) CJK UNIFIED IDEOGRAPH-4A48	[FB80 CA48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A48, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_193)
{
    // 4A48 0062;	
    // (䩈) CJK UNIFIED IDEOGRAPH-4A48	[FB80 CA48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A48, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_194)
{
    // 4A49 0021;	
    // (䩉) CJK UNIFIED IDEOGRAPH-4A49	[FB80 CA49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A49, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_195)
{
    // 4A49 003F;	
    // (䩉) CJK UNIFIED IDEOGRAPH-4A49	[FB80 CA49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A49, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_196)
{
    // 4A49 0061;	
    // (䩉) CJK UNIFIED IDEOGRAPH-4A49	[FB80 CA49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A49, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_197)
{
    // 4A49 0041;	
    // (䩉) CJK UNIFIED IDEOGRAPH-4A49	[FB80 CA49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A49, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_198)
{
    // 4A49 0062;	
    // (䩉) CJK UNIFIED IDEOGRAPH-4A49	[FB80 CA49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A49, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_199)
{
    // 4A4A 0021;	
    // (䩊) CJK UNIFIED IDEOGRAPH-4A4A	[FB80 CA4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_200)
{
    // 4A4A 003F;	
    // (䩊) CJK UNIFIED IDEOGRAPH-4A4A	[FB80 CA4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_201)
{
    // 4A4A 0061;	
    // (䩊) CJK UNIFIED IDEOGRAPH-4A4A	[FB80 CA4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_202)
{
    // 4A4A 0041;	
    // (䩊) CJK UNIFIED IDEOGRAPH-4A4A	[FB80 CA4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A4A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_203)
{
    // 4A4A 0062;	
    // (䩊) CJK UNIFIED IDEOGRAPH-4A4A	[FB80 CA4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_204)
{
    // 4A4B 0021;	
    // (䩋) CJK UNIFIED IDEOGRAPH-4A4B	[FB80 CA4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_205)
{
    // 4A4B 003F;	
    // (䩋) CJK UNIFIED IDEOGRAPH-4A4B	[FB80 CA4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_206)
{
    // 4A4B 0061;	
    // (䩋) CJK UNIFIED IDEOGRAPH-4A4B	[FB80 CA4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_207)
{
    // 4A4B 0041;	
    // (䩋) CJK UNIFIED IDEOGRAPH-4A4B	[FB80 CA4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A4B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_208)
{
    // 4A4B 0062;	
    // (䩋) CJK UNIFIED IDEOGRAPH-4A4B	[FB80 CA4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_209)
{
    // 4A4C 0021;	
    // (䩌) CJK UNIFIED IDEOGRAPH-4A4C	[FB80 CA4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_210)
{
    // 4A4C 003F;	
    // (䩌) CJK UNIFIED IDEOGRAPH-4A4C	[FB80 CA4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_211)
{
    // 4A4C 0061;	
    // (䩌) CJK UNIFIED IDEOGRAPH-4A4C	[FB80 CA4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_212)
{
    // 4A4C 0041;	
    // (䩌) CJK UNIFIED IDEOGRAPH-4A4C	[FB80 CA4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A4C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_213)
{
    // 4A4C 0062;	
    // (䩌) CJK UNIFIED IDEOGRAPH-4A4C	[FB80 CA4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_214)
{
    // 4A4D 0021;	
    // (䩍) CJK UNIFIED IDEOGRAPH-4A4D	[FB80 CA4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_215)
{
    // 4A4D 003F;	
    // (䩍) CJK UNIFIED IDEOGRAPH-4A4D	[FB80 CA4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_216)
{
    // 4A4D 0061;	
    // (䩍) CJK UNIFIED IDEOGRAPH-4A4D	[FB80 CA4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_217)
{
    // 4A4D 0041;	
    // (䩍) CJK UNIFIED IDEOGRAPH-4A4D	[FB80 CA4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A4D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_218)
{
    // 4A4D 0062;	
    // (䩍) CJK UNIFIED IDEOGRAPH-4A4D	[FB80 CA4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_219)
{
    // 4A4E 0021;	
    // (䩎) CJK UNIFIED IDEOGRAPH-4A4E	[FB80 CA4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_220)
{
    // 4A4E 003F;	
    // (䩎) CJK UNIFIED IDEOGRAPH-4A4E	[FB80 CA4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_221)
{
    // 4A4E 0061;	
    // (䩎) CJK UNIFIED IDEOGRAPH-4A4E	[FB80 CA4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_222)
{
    // 4A4E 0041;	
    // (䩎) CJK UNIFIED IDEOGRAPH-4A4E	[FB80 CA4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A4E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_223)
{
    // 4A4E 0062;	
    // (䩎) CJK UNIFIED IDEOGRAPH-4A4E	[FB80 CA4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_224)
{
    // 4A4F 0021;	
    // (䩏) CJK UNIFIED IDEOGRAPH-4A4F	[FB80 CA4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_225)
{
    // 4A4F 003F;	
    // (䩏) CJK UNIFIED IDEOGRAPH-4A4F	[FB80 CA4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_226)
{
    // 4A4F 0061;	
    // (䩏) CJK UNIFIED IDEOGRAPH-4A4F	[FB80 CA4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_227)
{
    // 4A4F 0041;	
    // (䩏) CJK UNIFIED IDEOGRAPH-4A4F	[FB80 CA4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A4F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_228)
{
    // 4A4F 0062;	
    // (䩏) CJK UNIFIED IDEOGRAPH-4A4F	[FB80 CA4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A4F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_229)
{
    // 4A50 0021;	
    // (䩐) CJK UNIFIED IDEOGRAPH-4A50	[FB80 CA50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A50, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_230)
{
    // 4A50 003F;	
    // (䩐) CJK UNIFIED IDEOGRAPH-4A50	[FB80 CA50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A50, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_231)
{
    // 4A50 0061;	
    // (䩐) CJK UNIFIED IDEOGRAPH-4A50	[FB80 CA50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A50, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_232)
{
    // 4A50 0041;	
    // (䩐) CJK UNIFIED IDEOGRAPH-4A50	[FB80 CA50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A50, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_233)
{
    // 4A50 0062;	
    // (䩐) CJK UNIFIED IDEOGRAPH-4A50	[FB80 CA50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A50, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_234)
{
    // 4A51 0021;	
    // (䩑) CJK UNIFIED IDEOGRAPH-4A51	[FB80 CA51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A51, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_235)
{
    // 4A51 003F;	
    // (䩑) CJK UNIFIED IDEOGRAPH-4A51	[FB80 CA51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A51, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_236)
{
    // 4A51 0061;	
    // (䩑) CJK UNIFIED IDEOGRAPH-4A51	[FB80 CA51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A51, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_237)
{
    // 4A51 0041;	
    // (䩑) CJK UNIFIED IDEOGRAPH-4A51	[FB80 CA51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A51, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_238)
{
    // 4A51 0062;	
    // (䩑) CJK UNIFIED IDEOGRAPH-4A51	[FB80 CA51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A51, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_239)
{
    // 4A52 0021;	
    // (䩒) CJK UNIFIED IDEOGRAPH-4A52	[FB80 CA52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A52, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_240)
{
    // 4A52 003F;	
    // (䩒) CJK UNIFIED IDEOGRAPH-4A52	[FB80 CA52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A52, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_241)
{
    // 4A52 0061;	
    // (䩒) CJK UNIFIED IDEOGRAPH-4A52	[FB80 CA52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A52, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_242)
{
    // 4A52 0041;	
    // (䩒) CJK UNIFIED IDEOGRAPH-4A52	[FB80 CA52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A52, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_243)
{
    // 4A52 0062;	
    // (䩒) CJK UNIFIED IDEOGRAPH-4A52	[FB80 CA52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A52, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_244)
{
    // 4A53 0021;	
    // (䩓) CJK UNIFIED IDEOGRAPH-4A53	[FB80 CA53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A53, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_245)
{
    // 4A53 003F;	
    // (䩓) CJK UNIFIED IDEOGRAPH-4A53	[FB80 CA53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A53, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_246)
{
    // 4A53 0061;	
    // (䩓) CJK UNIFIED IDEOGRAPH-4A53	[FB80 CA53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A53, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_247)
{
    // 4A53 0041;	
    // (䩓) CJK UNIFIED IDEOGRAPH-4A53	[FB80 CA53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A53, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_248)
{
    // 4A53 0062;	
    // (䩓) CJK UNIFIED IDEOGRAPH-4A53	[FB80 CA53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A53, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_249)
{
    // 4A54 0021;	
    // (䩔) CJK UNIFIED IDEOGRAPH-4A54	[FB80 CA54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A54, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_250)
{
    // 4A54 003F;	
    // (䩔) CJK UNIFIED IDEOGRAPH-4A54	[FB80 CA54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A54, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_251)
{
    // 4A54 0061;	
    // (䩔) CJK UNIFIED IDEOGRAPH-4A54	[FB80 CA54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A54, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_252)
{
    // 4A54 0041;	
    // (䩔) CJK UNIFIED IDEOGRAPH-4A54	[FB80 CA54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A54, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_253)
{
    // 4A54 0062;	
    // (䩔) CJK UNIFIED IDEOGRAPH-4A54	[FB80 CA54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A54, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_254)
{
    // 4A55 0021;	
    // (䩕) CJK UNIFIED IDEOGRAPH-4A55	[FB80 CA55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A55, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_255)
{
    // 4A55 003F;	
    // (䩕) CJK UNIFIED IDEOGRAPH-4A55	[FB80 CA55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A55, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_256)
{
    // 4A55 0061;	
    // (䩕) CJK UNIFIED IDEOGRAPH-4A55	[FB80 CA55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A55, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_257)
{
    // 4A55 0041;	
    // (䩕) CJK UNIFIED IDEOGRAPH-4A55	[FB80 CA55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A55, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_258)
{
    // 4A55 0062;	
    // (䩕) CJK UNIFIED IDEOGRAPH-4A55	[FB80 CA55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A55, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_259)
{
    // 4A56 0021;	
    // (䩖) CJK UNIFIED IDEOGRAPH-4A56	[FB80 CA56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A56, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_260)
{
    // 4A56 003F;	
    // (䩖) CJK UNIFIED IDEOGRAPH-4A56	[FB80 CA56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A56, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_261)
{
    // 4A56 0061;	
    // (䩖) CJK UNIFIED IDEOGRAPH-4A56	[FB80 CA56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A56, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_262)
{
    // 4A56 0041;	
    // (䩖) CJK UNIFIED IDEOGRAPH-4A56	[FB80 CA56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A56, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_263)
{
    // 4A56 0062;	
    // (䩖) CJK UNIFIED IDEOGRAPH-4A56	[FB80 CA56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A56, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_264)
{
    // 4A57 0021;	
    // (䩗) CJK UNIFIED IDEOGRAPH-4A57	[FB80 CA57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A57, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_265)
{
    // 4A57 003F;	
    // (䩗) CJK UNIFIED IDEOGRAPH-4A57	[FB80 CA57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A57, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_266)
{
    // 4A57 0061;	
    // (䩗) CJK UNIFIED IDEOGRAPH-4A57	[FB80 CA57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A57, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_267)
{
    // 4A57 0041;	
    // (䩗) CJK UNIFIED IDEOGRAPH-4A57	[FB80 CA57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A57, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_268)
{
    // 4A57 0062;	
    // (䩗) CJK UNIFIED IDEOGRAPH-4A57	[FB80 CA57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A57, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_269)
{
    // 4A58 0021;	
    // (䩘) CJK UNIFIED IDEOGRAPH-4A58	[FB80 CA58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A58, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_270)
{
    // 4A58 003F;	
    // (䩘) CJK UNIFIED IDEOGRAPH-4A58	[FB80 CA58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A58, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_271)
{
    // 4A58 0061;	
    // (䩘) CJK UNIFIED IDEOGRAPH-4A58	[FB80 CA58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A58, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_272)
{
    // 4A58 0041;	
    // (䩘) CJK UNIFIED IDEOGRAPH-4A58	[FB80 CA58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A58, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_273)
{
    // 4A58 0062;	
    // (䩘) CJK UNIFIED IDEOGRAPH-4A58	[FB80 CA58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A58, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_274)
{
    // 4A59 0021;	
    // (䩙) CJK UNIFIED IDEOGRAPH-4A59	[FB80 CA59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A59, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_275)
{
    // 4A59 003F;	
    // (䩙) CJK UNIFIED IDEOGRAPH-4A59	[FB80 CA59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A59, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_276)
{
    // 4A59 0061;	
    // (䩙) CJK UNIFIED IDEOGRAPH-4A59	[FB80 CA59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A59, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_277)
{
    // 4A59 0041;	
    // (䩙) CJK UNIFIED IDEOGRAPH-4A59	[FB80 CA59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A59, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_278)
{
    // 4A59 0062;	
    // (䩙) CJK UNIFIED IDEOGRAPH-4A59	[FB80 CA59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A59, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_279)
{
    // 4A5A 0021;	
    // (䩚) CJK UNIFIED IDEOGRAPH-4A5A	[FB80 CA5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_280)
{
    // 4A5A 003F;	
    // (䩚) CJK UNIFIED IDEOGRAPH-4A5A	[FB80 CA5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_281)
{
    // 4A5A 0061;	
    // (䩚) CJK UNIFIED IDEOGRAPH-4A5A	[FB80 CA5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_282)
{
    // 4A5A 0041;	
    // (䩚) CJK UNIFIED IDEOGRAPH-4A5A	[FB80 CA5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_283)
{
    // 4A5A 0062;	
    // (䩚) CJK UNIFIED IDEOGRAPH-4A5A	[FB80 CA5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_284)
{
    // 4A5B 0021;	
    // (䩛) CJK UNIFIED IDEOGRAPH-4A5B	[FB80 CA5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_285)
{
    // 4A5B 003F;	
    // (䩛) CJK UNIFIED IDEOGRAPH-4A5B	[FB80 CA5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_286)
{
    // 4A5B 0061;	
    // (䩛) CJK UNIFIED IDEOGRAPH-4A5B	[FB80 CA5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_287)
{
    // 4A5B 0041;	
    // (䩛) CJK UNIFIED IDEOGRAPH-4A5B	[FB80 CA5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_288)
{
    // 4A5B 0062;	
    // (䩛) CJK UNIFIED IDEOGRAPH-4A5B	[FB80 CA5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_289)
{
    // 4A5C 0021;	
    // (䩜) CJK UNIFIED IDEOGRAPH-4A5C	[FB80 CA5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_290)
{
    // 4A5C 003F;	
    // (䩜) CJK UNIFIED IDEOGRAPH-4A5C	[FB80 CA5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_291)
{
    // 4A5C 0061;	
    // (䩜) CJK UNIFIED IDEOGRAPH-4A5C	[FB80 CA5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_292)
{
    // 4A5C 0041;	
    // (䩜) CJK UNIFIED IDEOGRAPH-4A5C	[FB80 CA5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_293)
{
    // 4A5C 0062;	
    // (䩜) CJK UNIFIED IDEOGRAPH-4A5C	[FB80 CA5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_294)
{
    // 4A5D 0021;	
    // (䩝) CJK UNIFIED IDEOGRAPH-4A5D	[FB80 CA5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_295)
{
    // 4A5D 003F;	
    // (䩝) CJK UNIFIED IDEOGRAPH-4A5D	[FB80 CA5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_296)
{
    // 4A5D 0061;	
    // (䩝) CJK UNIFIED IDEOGRAPH-4A5D	[FB80 CA5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_297)
{
    // 4A5D 0041;	
    // (䩝) CJK UNIFIED IDEOGRAPH-4A5D	[FB80 CA5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_298)
{
    // 4A5D 0062;	
    // (䩝) CJK UNIFIED IDEOGRAPH-4A5D	[FB80 CA5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_299)
{
    // 4A5E 0021;	
    // (䩞) CJK UNIFIED IDEOGRAPH-4A5E	[FB80 CA5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_300)
{
    // 4A5E 003F;	
    // (䩞) CJK UNIFIED IDEOGRAPH-4A5E	[FB80 CA5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_301)
{
    // 4A5E 0061;	
    // (䩞) CJK UNIFIED IDEOGRAPH-4A5E	[FB80 CA5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_302)
{
    // 4A5E 0041;	
    // (䩞) CJK UNIFIED IDEOGRAPH-4A5E	[FB80 CA5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_303)
{
    // 4A5E 0062;	
    // (䩞) CJK UNIFIED IDEOGRAPH-4A5E	[FB80 CA5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_304)
{
    // 4A5F 0021;	
    // (䩟) CJK UNIFIED IDEOGRAPH-4A5F	[FB80 CA5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_305)
{
    // 4A5F 003F;	
    // (䩟) CJK UNIFIED IDEOGRAPH-4A5F	[FB80 CA5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_306)
{
    // 4A5F 0061;	
    // (䩟) CJK UNIFIED IDEOGRAPH-4A5F	[FB80 CA5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_307)
{
    // 4A5F 0041;	
    // (䩟) CJK UNIFIED IDEOGRAPH-4A5F	[FB80 CA5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_308)
{
    // 4A5F 0062;	
    // (䩟) CJK UNIFIED IDEOGRAPH-4A5F	[FB80 CA5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_309)
{
    // 4A60 0021;	
    // (䩠) CJK UNIFIED IDEOGRAPH-4A60	[FB80 CA60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A60, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_310)
{
    // 4A60 003F;	
    // (䩠) CJK UNIFIED IDEOGRAPH-4A60	[FB80 CA60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A60, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_311)
{
    // 4A60 0061;	
    // (䩠) CJK UNIFIED IDEOGRAPH-4A60	[FB80 CA60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A60, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_312)
{
    // 4A60 0041;	
    // (䩠) CJK UNIFIED IDEOGRAPH-4A60	[FB80 CA60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A60, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_313)
{
    // 4A60 0062;	
    // (䩠) CJK UNIFIED IDEOGRAPH-4A60	[FB80 CA60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A60, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_314)
{
    // 4A61 0021;	
    // (䩡) CJK UNIFIED IDEOGRAPH-4A61	[FB80 CA61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A61, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_315)
{
    // 4A61 003F;	
    // (䩡) CJK UNIFIED IDEOGRAPH-4A61	[FB80 CA61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A61, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_316)
{
    // 4A61 0061;	
    // (䩡) CJK UNIFIED IDEOGRAPH-4A61	[FB80 CA61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A61, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_317)
{
    // 4A61 0041;	
    // (䩡) CJK UNIFIED IDEOGRAPH-4A61	[FB80 CA61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A61, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_318)
{
    // 4A61 0062;	
    // (䩡) CJK UNIFIED IDEOGRAPH-4A61	[FB80 CA61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A61, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_319)
{
    // 4A62 0021;	
    // (䩢) CJK UNIFIED IDEOGRAPH-4A62	[FB80 CA62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A62, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_320)
{
    // 4A62 003F;	
    // (䩢) CJK UNIFIED IDEOGRAPH-4A62	[FB80 CA62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A62, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_321)
{
    // 4A62 0061;	
    // (䩢) CJK UNIFIED IDEOGRAPH-4A62	[FB80 CA62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A62, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_322)
{
    // 4A62 0041;	
    // (䩢) CJK UNIFIED IDEOGRAPH-4A62	[FB80 CA62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A62, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_323)
{
    // 4A62 0062;	
    // (䩢) CJK UNIFIED IDEOGRAPH-4A62	[FB80 CA62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A62, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_324)
{
    // 4A63 0021;	
    // (䩣) CJK UNIFIED IDEOGRAPH-4A63	[FB80 CA63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A63, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_325)
{
    // 4A63 003F;	
    // (䩣) CJK UNIFIED IDEOGRAPH-4A63	[FB80 CA63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A63, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_326)
{
    // 4A63 0061;	
    // (䩣) CJK UNIFIED IDEOGRAPH-4A63	[FB80 CA63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A63, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_327)
{
    // 4A63 0041;	
    // (䩣) CJK UNIFIED IDEOGRAPH-4A63	[FB80 CA63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A63, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_328)
{
    // 4A63 0062;	
    // (䩣) CJK UNIFIED IDEOGRAPH-4A63	[FB80 CA63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A63, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_329)
{
    // 4A64 0021;	
    // (䩤) CJK UNIFIED IDEOGRAPH-4A64	[FB80 CA64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A64, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_330)
{
    // 4A64 003F;	
    // (䩤) CJK UNIFIED IDEOGRAPH-4A64	[FB80 CA64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A64, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_331)
{
    // 4A64 0061;	
    // (䩤) CJK UNIFIED IDEOGRAPH-4A64	[FB80 CA64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A64, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_332)
{
    // 4A64 0041;	
    // (䩤) CJK UNIFIED IDEOGRAPH-4A64	[FB80 CA64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A64, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_333)
{
    // 4A64 0062;	
    // (䩤) CJK UNIFIED IDEOGRAPH-4A64	[FB80 CA64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A64, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_334)
{
    // 4A65 0021;	
    // (䩥) CJK UNIFIED IDEOGRAPH-4A65	[FB80 CA65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A65, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_335)
{
    // 4A65 003F;	
    // (䩥) CJK UNIFIED IDEOGRAPH-4A65	[FB80 CA65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A65, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_336)
{
    // 4A65 0061;	
    // (䩥) CJK UNIFIED IDEOGRAPH-4A65	[FB80 CA65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A65, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_337)
{
    // 4A65 0041;	
    // (䩥) CJK UNIFIED IDEOGRAPH-4A65	[FB80 CA65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A65, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_338)
{
    // 4A65 0062;	
    // (䩥) CJK UNIFIED IDEOGRAPH-4A65	[FB80 CA65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A65, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_339)
{
    // 4A66 0021;	
    // (䩦) CJK UNIFIED IDEOGRAPH-4A66	[FB80 CA66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A66, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_340)
{
    // 4A66 003F;	
    // (䩦) CJK UNIFIED IDEOGRAPH-4A66	[FB80 CA66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A66, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_341)
{
    // 4A66 0061;	
    // (䩦) CJK UNIFIED IDEOGRAPH-4A66	[FB80 CA66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A66, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_342)
{
    // 4A66 0041;	
    // (䩦) CJK UNIFIED IDEOGRAPH-4A66	[FB80 CA66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A66, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_343)
{
    // 4A66 0062;	
    // (䩦) CJK UNIFIED IDEOGRAPH-4A66	[FB80 CA66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A66, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_344)
{
    // 4A67 0021;	
    // (䩧) CJK UNIFIED IDEOGRAPH-4A67	[FB80 CA67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A67, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_345)
{
    // 4A67 003F;	
    // (䩧) CJK UNIFIED IDEOGRAPH-4A67	[FB80 CA67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A67, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_346)
{
    // 4A67 0061;	
    // (䩧) CJK UNIFIED IDEOGRAPH-4A67	[FB80 CA67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A67, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_347)
{
    // 4A67 0041;	
    // (䩧) CJK UNIFIED IDEOGRAPH-4A67	[FB80 CA67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A67, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_348)
{
    // 4A67 0062;	
    // (䩧) CJK UNIFIED IDEOGRAPH-4A67	[FB80 CA67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A67, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_349)
{
    // 4A68 0021;	
    // (䩨) CJK UNIFIED IDEOGRAPH-4A68	[FB80 CA68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A68, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_350)
{
    // 4A68 003F;	
    // (䩨) CJK UNIFIED IDEOGRAPH-4A68	[FB80 CA68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A68, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_351)
{
    // 4A68 0061;	
    // (䩨) CJK UNIFIED IDEOGRAPH-4A68	[FB80 CA68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A68, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_352)
{
    // 4A68 0041;	
    // (䩨) CJK UNIFIED IDEOGRAPH-4A68	[FB80 CA68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A68, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_353)
{
    // 4A68 0062;	
    // (䩨) CJK UNIFIED IDEOGRAPH-4A68	[FB80 CA68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A68, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_354)
{
    // 4A69 0021;	
    // (䩩) CJK UNIFIED IDEOGRAPH-4A69	[FB80 CA69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A69, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_355)
{
    // 4A69 003F;	
    // (䩩) CJK UNIFIED IDEOGRAPH-4A69	[FB80 CA69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A69, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_356)
{
    // 4A69 0061;	
    // (䩩) CJK UNIFIED IDEOGRAPH-4A69	[FB80 CA69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A69, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_357)
{
    // 4A69 0041;	
    // (䩩) CJK UNIFIED IDEOGRAPH-4A69	[FB80 CA69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A69, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_358)
{
    // 4A69 0062;	
    // (䩩) CJK UNIFIED IDEOGRAPH-4A69	[FB80 CA69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A69, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_359)
{
    // 4A6A 0021;	
    // (䩪) CJK UNIFIED IDEOGRAPH-4A6A	[FB80 CA6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_360)
{
    // 4A6A 003F;	
    // (䩪) CJK UNIFIED IDEOGRAPH-4A6A	[FB80 CA6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_361)
{
    // 4A6A 0061;	
    // (䩪) CJK UNIFIED IDEOGRAPH-4A6A	[FB80 CA6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_362)
{
    // 4A6A 0041;	
    // (䩪) CJK UNIFIED IDEOGRAPH-4A6A	[FB80 CA6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A6A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_363)
{
    // 4A6A 0062;	
    // (䩪) CJK UNIFIED IDEOGRAPH-4A6A	[FB80 CA6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_364)
{
    // 4A6B 0021;	
    // (䩫) CJK UNIFIED IDEOGRAPH-4A6B	[FB80 CA6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_365)
{
    // 4A6B 003F;	
    // (䩫) CJK UNIFIED IDEOGRAPH-4A6B	[FB80 CA6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_366)
{
    // 4A6B 0061;	
    // (䩫) CJK UNIFIED IDEOGRAPH-4A6B	[FB80 CA6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_367)
{
    // 4A6B 0041;	
    // (䩫) CJK UNIFIED IDEOGRAPH-4A6B	[FB80 CA6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A6B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_368)
{
    // 4A6B 0062;	
    // (䩫) CJK UNIFIED IDEOGRAPH-4A6B	[FB80 CA6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_369)
{
    // 4A6C 0021;	
    // (䩬) CJK UNIFIED IDEOGRAPH-4A6C	[FB80 CA6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_370)
{
    // 4A6C 003F;	
    // (䩬) CJK UNIFIED IDEOGRAPH-4A6C	[FB80 CA6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_371)
{
    // 4A6C 0061;	
    // (䩬) CJK UNIFIED IDEOGRAPH-4A6C	[FB80 CA6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_372)
{
    // 4A6C 0041;	
    // (䩬) CJK UNIFIED IDEOGRAPH-4A6C	[FB80 CA6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A6C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_373)
{
    // 4A6C 0062;	
    // (䩬) CJK UNIFIED IDEOGRAPH-4A6C	[FB80 CA6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_374)
{
    // 4A6D 0021;	
    // (䩭) CJK UNIFIED IDEOGRAPH-4A6D	[FB80 CA6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_375)
{
    // 4A6D 003F;	
    // (䩭) CJK UNIFIED IDEOGRAPH-4A6D	[FB80 CA6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_376)
{
    // 4A6D 0061;	
    // (䩭) CJK UNIFIED IDEOGRAPH-4A6D	[FB80 CA6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_377)
{
    // 4A6D 0041;	
    // (䩭) CJK UNIFIED IDEOGRAPH-4A6D	[FB80 CA6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A6D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_378)
{
    // 4A6D 0062;	
    // (䩭) CJK UNIFIED IDEOGRAPH-4A6D	[FB80 CA6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_379)
{
    // 4A6E 0021;	
    // (䩮) CJK UNIFIED IDEOGRAPH-4A6E	[FB80 CA6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_380)
{
    // 2F9F8 0021;	
    // (䩮) CJK COMPATIBILITY IDEOGRAPH-2F9F8	[FB80 CA6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_381)
{
    // 4A6E 003F;	
    // (䩮) CJK UNIFIED IDEOGRAPH-4A6E	[FB80 CA6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_382)
{
    // 2F9F8 003F;	
    // (䩮) CJK COMPATIBILITY IDEOGRAPH-2F9F8	[FB80 CA6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_383)
{
    // 4A6E 0061;	
    // (䩮) CJK UNIFIED IDEOGRAPH-4A6E	[FB80 CA6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_384)
{
    // 2F9F8 0061;	
    // (䩮) CJK COMPATIBILITY IDEOGRAPH-2F9F8	[FB80 CA6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_385)
{
    // 4A6E 0041;	
    // (䩮) CJK UNIFIED IDEOGRAPH-4A6E	[FB80 CA6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A6E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_386)
{
    // 2F9F8 0041;	
    // (䩮) CJK COMPATIBILITY IDEOGRAPH-2F9F8	[FB80 CA6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_387)
{
    // 4A6E 0062;	
    // (䩮) CJK UNIFIED IDEOGRAPH-4A6E	[FB80 CA6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_388)
{
    // 2F9F8 0062;	
    // (䩮) CJK COMPATIBILITY IDEOGRAPH-2F9F8	[FB80 CA6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_389)
{
    // 4A6F 0021;	
    // (䩯) CJK UNIFIED IDEOGRAPH-4A6F	[FB80 CA6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_390)
{
    // 4A6F 003F;	
    // (䩯) CJK UNIFIED IDEOGRAPH-4A6F	[FB80 CA6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_391)
{
    // 4A6F 0061;	
    // (䩯) CJK UNIFIED IDEOGRAPH-4A6F	[FB80 CA6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_392)
{
    // 4A6F 0041;	
    // (䩯) CJK UNIFIED IDEOGRAPH-4A6F	[FB80 CA6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A6F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_393)
{
    // 4A6F 0062;	
    // (䩯) CJK UNIFIED IDEOGRAPH-4A6F	[FB80 CA6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A6F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_394)
{
    // 4A70 0021;	
    // (䩰) CJK UNIFIED IDEOGRAPH-4A70	[FB80 CA70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A70, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_395)
{
    // 4A70 003F;	
    // (䩰) CJK UNIFIED IDEOGRAPH-4A70	[FB80 CA70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A70, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_396)
{
    // 4A70 0061;	
    // (䩰) CJK UNIFIED IDEOGRAPH-4A70	[FB80 CA70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A70, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_397)
{
    // 4A70 0041;	
    // (䩰) CJK UNIFIED IDEOGRAPH-4A70	[FB80 CA70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A70, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_398)
{
    // 4A70 0062;	
    // (䩰) CJK UNIFIED IDEOGRAPH-4A70	[FB80 CA70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A70, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_399)
{
    // 4A71 0021;	
    // (䩱) CJK UNIFIED IDEOGRAPH-4A71	[FB80 CA71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A71, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_400)
{
    // 4A71 003F;	
    // (䩱) CJK UNIFIED IDEOGRAPH-4A71	[FB80 CA71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A71, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_401)
{
    // 4A71 0061;	
    // (䩱) CJK UNIFIED IDEOGRAPH-4A71	[FB80 CA71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A71, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_402)
{
    // 4A71 0041;	
    // (䩱) CJK UNIFIED IDEOGRAPH-4A71	[FB80 CA71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A71, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_403)
{
    // 4A71 0062;	
    // (䩱) CJK UNIFIED IDEOGRAPH-4A71	[FB80 CA71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A71, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_404)
{
    // 4A72 0021;	
    // (䩲) CJK UNIFIED IDEOGRAPH-4A72	[FB80 CA72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A72, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_405)
{
    // 4A72 003F;	
    // (䩲) CJK UNIFIED IDEOGRAPH-4A72	[FB80 CA72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A72, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_406)
{
    // 4A72 0061;	
    // (䩲) CJK UNIFIED IDEOGRAPH-4A72	[FB80 CA72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A72, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_407)
{
    // 4A72 0041;	
    // (䩲) CJK UNIFIED IDEOGRAPH-4A72	[FB80 CA72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A72, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_408)
{
    // 4A72 0062;	
    // (䩲) CJK UNIFIED IDEOGRAPH-4A72	[FB80 CA72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A72, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_409)
{
    // 4A73 0021;	
    // (䩳) CJK UNIFIED IDEOGRAPH-4A73	[FB80 CA73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A73, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_410)
{
    // 4A73 003F;	
    // (䩳) CJK UNIFIED IDEOGRAPH-4A73	[FB80 CA73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A73, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_411)
{
    // 4A73 0061;	
    // (䩳) CJK UNIFIED IDEOGRAPH-4A73	[FB80 CA73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A73, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_412)
{
    // 4A73 0041;	
    // (䩳) CJK UNIFIED IDEOGRAPH-4A73	[FB80 CA73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A73, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_413)
{
    // 4A73 0062;	
    // (䩳) CJK UNIFIED IDEOGRAPH-4A73	[FB80 CA73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A73, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_414)
{
    // 4A74 0021;	
    // (䩴) CJK UNIFIED IDEOGRAPH-4A74	[FB80 CA74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A74, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_415)
{
    // 4A74 003F;	
    // (䩴) CJK UNIFIED IDEOGRAPH-4A74	[FB80 CA74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A74, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_416)
{
    // 4A74 0061;	
    // (䩴) CJK UNIFIED IDEOGRAPH-4A74	[FB80 CA74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A74, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_417)
{
    // 4A74 0041;	
    // (䩴) CJK UNIFIED IDEOGRAPH-4A74	[FB80 CA74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A74, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_418)
{
    // 4A74 0062;	
    // (䩴) CJK UNIFIED IDEOGRAPH-4A74	[FB80 CA74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A74, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_419)
{
    // 4A75 0021;	
    // (䩵) CJK UNIFIED IDEOGRAPH-4A75	[FB80 CA75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A75, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_420)
{
    // 4A75 003F;	
    // (䩵) CJK UNIFIED IDEOGRAPH-4A75	[FB80 CA75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A75, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_421)
{
    // 4A75 0061;	
    // (䩵) CJK UNIFIED IDEOGRAPH-4A75	[FB80 CA75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A75, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_422)
{
    // 4A75 0041;	
    // (䩵) CJK UNIFIED IDEOGRAPH-4A75	[FB80 CA75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A75, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_423)
{
    // 4A75 0062;	
    // (䩵) CJK UNIFIED IDEOGRAPH-4A75	[FB80 CA75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A75, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_424)
{
    // 4A76 0021;	
    // (䩶) CJK UNIFIED IDEOGRAPH-4A76	[FB80 CA76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A76, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_425)
{
    // 2F9F9 0021;	
    // (䩶) CJK COMPATIBILITY IDEOGRAPH-2F9F9	[FB80 CA76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_426)
{
    // 4A76 003F;	
    // (䩶) CJK UNIFIED IDEOGRAPH-4A76	[FB80 CA76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A76, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_427)
{
    // 2F9F9 003F;	
    // (䩶) CJK COMPATIBILITY IDEOGRAPH-2F9F9	[FB80 CA76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_428)
{
    // 4A76 0061;	
    // (䩶) CJK UNIFIED IDEOGRAPH-4A76	[FB80 CA76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A76, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_429)
{
    // 2F9F9 0061;	
    // (䩶) CJK COMPATIBILITY IDEOGRAPH-2F9F9	[FB80 CA76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_430)
{
    // 4A76 0041;	
    // (䩶) CJK UNIFIED IDEOGRAPH-4A76	[FB80 CA76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A76, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_431)
{
    // 2F9F9 0041;	
    // (䩶) CJK COMPATIBILITY IDEOGRAPH-2F9F9	[FB80 CA76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_432)
{
    // 4A76 0062;	
    // (䩶) CJK UNIFIED IDEOGRAPH-4A76	[FB80 CA76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A76, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_433)
{
    // 2F9F9 0062;	
    // (䩶) CJK COMPATIBILITY IDEOGRAPH-2F9F9	[FB80 CA76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_434)
{
    // 4A77 0021;	
    // (䩷) CJK UNIFIED IDEOGRAPH-4A77	[FB80 CA77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A77, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_435)
{
    // 4A77 003F;	
    // (䩷) CJK UNIFIED IDEOGRAPH-4A77	[FB80 CA77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A77, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_436)
{
    // 4A77 0061;	
    // (䩷) CJK UNIFIED IDEOGRAPH-4A77	[FB80 CA77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A77, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_437)
{
    // 4A77 0041;	
    // (䩷) CJK UNIFIED IDEOGRAPH-4A77	[FB80 CA77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A77, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_438)
{
    // 4A77 0062;	
    // (䩷) CJK UNIFIED IDEOGRAPH-4A77	[FB80 CA77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A77, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_439)
{
    // 4A78 0021;	
    // (䩸) CJK UNIFIED IDEOGRAPH-4A78	[FB80 CA78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A78, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_440)
{
    // 4A78 003F;	
    // (䩸) CJK UNIFIED IDEOGRAPH-4A78	[FB80 CA78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A78, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_441)
{
    // 4A78 0061;	
    // (䩸) CJK UNIFIED IDEOGRAPH-4A78	[FB80 CA78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A78, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_442)
{
    // 4A78 0041;	
    // (䩸) CJK UNIFIED IDEOGRAPH-4A78	[FB80 CA78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A78, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_443)
{
    // 4A78 0062;	
    // (䩸) CJK UNIFIED IDEOGRAPH-4A78	[FB80 CA78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A78, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_444)
{
    // 4A79 0021;	
    // (䩹) CJK UNIFIED IDEOGRAPH-4A79	[FB80 CA79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A79, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_445)
{
    // 4A79 003F;	
    // (䩹) CJK UNIFIED IDEOGRAPH-4A79	[FB80 CA79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A79, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_446)
{
    // 4A79 0061;	
    // (䩹) CJK UNIFIED IDEOGRAPH-4A79	[FB80 CA79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A79, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_447)
{
    // 4A79 0041;	
    // (䩹) CJK UNIFIED IDEOGRAPH-4A79	[FB80 CA79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A79, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_448)
{
    // 4A79 0062;	
    // (䩹) CJK UNIFIED IDEOGRAPH-4A79	[FB80 CA79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A79, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_449)
{
    // 4A7A 0021;	
    // (䩺) CJK UNIFIED IDEOGRAPH-4A7A	[FB80 CA7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_450)
{
    // 4A7A 003F;	
    // (䩺) CJK UNIFIED IDEOGRAPH-4A7A	[FB80 CA7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_451)
{
    // 4A7A 0061;	
    // (䩺) CJK UNIFIED IDEOGRAPH-4A7A	[FB80 CA7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_452)
{
    // 4A7A 0041;	
    // (䩺) CJK UNIFIED IDEOGRAPH-4A7A	[FB80 CA7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_453)
{
    // 4A7A 0062;	
    // (䩺) CJK UNIFIED IDEOGRAPH-4A7A	[FB80 CA7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_454)
{
    // 4A7B 0021;	
    // (䩻) CJK UNIFIED IDEOGRAPH-4A7B	[FB80 CA7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_455)
{
    // 4A7B 003F;	
    // (䩻) CJK UNIFIED IDEOGRAPH-4A7B	[FB80 CA7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_456)
{
    // 4A7B 0061;	
    // (䩻) CJK UNIFIED IDEOGRAPH-4A7B	[FB80 CA7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_457)
{
    // 4A7B 0041;	
    // (䩻) CJK UNIFIED IDEOGRAPH-4A7B	[FB80 CA7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_458)
{
    // 4A7B 0062;	
    // (䩻) CJK UNIFIED IDEOGRAPH-4A7B	[FB80 CA7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_459)
{
    // 4A7C 0021;	
    // (䩼) CJK UNIFIED IDEOGRAPH-4A7C	[FB80 CA7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_460)
{
    // 4A7C 003F;	
    // (䩼) CJK UNIFIED IDEOGRAPH-4A7C	[FB80 CA7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_461)
{
    // 4A7C 0061;	
    // (䩼) CJK UNIFIED IDEOGRAPH-4A7C	[FB80 CA7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_462)
{
    // 4A7C 0041;	
    // (䩼) CJK UNIFIED IDEOGRAPH-4A7C	[FB80 CA7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_463)
{
    // 4A7C 0062;	
    // (䩼) CJK UNIFIED IDEOGRAPH-4A7C	[FB80 CA7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_464)
{
    // 4A7D 0021;	
    // (䩽) CJK UNIFIED IDEOGRAPH-4A7D	[FB80 CA7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_465)
{
    // 4A7D 003F;	
    // (䩽) CJK UNIFIED IDEOGRAPH-4A7D	[FB80 CA7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_466)
{
    // 4A7D 0061;	
    // (䩽) CJK UNIFIED IDEOGRAPH-4A7D	[FB80 CA7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_467)
{
    // 4A7D 0041;	
    // (䩽) CJK UNIFIED IDEOGRAPH-4A7D	[FB80 CA7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_468)
{
    // 4A7D 0062;	
    // (䩽) CJK UNIFIED IDEOGRAPH-4A7D	[FB80 CA7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_469)
{
    // 4A7E 0021;	
    // (䩾) CJK UNIFIED IDEOGRAPH-4A7E	[FB80 CA7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_470)
{
    // 4A7E 003F;	
    // (䩾) CJK UNIFIED IDEOGRAPH-4A7E	[FB80 CA7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_471)
{
    // 4A7E 0061;	
    // (䩾) CJK UNIFIED IDEOGRAPH-4A7E	[FB80 CA7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_472)
{
    // 4A7E 0041;	
    // (䩾) CJK UNIFIED IDEOGRAPH-4A7E	[FB80 CA7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_473)
{
    // 4A7E 0062;	
    // (䩾) CJK UNIFIED IDEOGRAPH-4A7E	[FB80 CA7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_474)
{
    // 4A7F 0021;	
    // (䩿) CJK UNIFIED IDEOGRAPH-4A7F	[FB80 CA7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_475)
{
    // 4A7F 003F;	
    // (䩿) CJK UNIFIED IDEOGRAPH-4A7F	[FB80 CA7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_476)
{
    // 4A7F 0061;	
    // (䩿) CJK UNIFIED IDEOGRAPH-4A7F	[FB80 CA7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_477)
{
    // 4A7F 0041;	
    // (䩿) CJK UNIFIED IDEOGRAPH-4A7F	[FB80 CA7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_478)
{
    // 4A7F 0062;	
    // (䩿) CJK UNIFIED IDEOGRAPH-4A7F	[FB80 CA7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_479)
{
    // 4A80 0021;	
    // (䪀) CJK UNIFIED IDEOGRAPH-4A80	[FB80 CA80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A80, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_480)
{
    // 4A80 003F;	
    // (䪀) CJK UNIFIED IDEOGRAPH-4A80	[FB80 CA80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A80, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_481)
{
    // 4A80 0061;	
    // (䪀) CJK UNIFIED IDEOGRAPH-4A80	[FB80 CA80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A80, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_482)
{
    // 4A80 0041;	
    // (䪀) CJK UNIFIED IDEOGRAPH-4A80	[FB80 CA80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A80, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_483)
{
    // 4A80 0062;	
    // (䪀) CJK UNIFIED IDEOGRAPH-4A80	[FB80 CA80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A80, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_484)
{
    // 4A81 0021;	
    // (䪁) CJK UNIFIED IDEOGRAPH-4A81	[FB80 CA81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A81, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_485)
{
    // 4A81 003F;	
    // (䪁) CJK UNIFIED IDEOGRAPH-4A81	[FB80 CA81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A81, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_486)
{
    // 4A81 0061;	
    // (䪁) CJK UNIFIED IDEOGRAPH-4A81	[FB80 CA81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A81, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_487)
{
    // 4A81 0041;	
    // (䪁) CJK UNIFIED IDEOGRAPH-4A81	[FB80 CA81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A81, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_488)
{
    // 4A81 0062;	
    // (䪁) CJK UNIFIED IDEOGRAPH-4A81	[FB80 CA81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A81, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_489)
{
    // 4A82 0021;	
    // (䪂) CJK UNIFIED IDEOGRAPH-4A82	[FB80 CA82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A82, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_490)
{
    // 4A82 003F;	
    // (䪂) CJK UNIFIED IDEOGRAPH-4A82	[FB80 CA82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A82, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_491)
{
    // 4A82 0061;	
    // (䪂) CJK UNIFIED IDEOGRAPH-4A82	[FB80 CA82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A82, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_492)
{
    // 4A82 0041;	
    // (䪂) CJK UNIFIED IDEOGRAPH-4A82	[FB80 CA82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A82, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_493)
{
    // 4A82 0062;	
    // (䪂) CJK UNIFIED IDEOGRAPH-4A82	[FB80 CA82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A82, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_494)
{
    // 4A83 0021;	
    // (䪃) CJK UNIFIED IDEOGRAPH-4A83	[FB80 CA83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A83, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_495)
{
    // 4A83 003F;	
    // (䪃) CJK UNIFIED IDEOGRAPH-4A83	[FB80 CA83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A83, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_496)
{
    // 4A83 0061;	
    // (䪃) CJK UNIFIED IDEOGRAPH-4A83	[FB80 CA83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A83, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_497)
{
    // 4A83 0041;	
    // (䪃) CJK UNIFIED IDEOGRAPH-4A83	[FB80 CA83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A83, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_498)
{
    // 4A83 0062;	
    // (䪃) CJK UNIFIED IDEOGRAPH-4A83	[FB80 CA83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A83, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_384_499)
{
    // 4A84 0021;	
    // (䪄) CJK UNIFIED IDEOGRAPH-4A84	[FB80 CA84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A84, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

