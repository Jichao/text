// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_328_000)
{
    // 347F 003F;	
    // (㑿) CJK UNIFIED IDEOGRAPH-347F	[FB80 B47F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB47F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_001)
{
    // 347F 0061;	
    // (㑿) CJK UNIFIED IDEOGRAPH-347F	[FB80 B47F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB47F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_002)
{
    // 347F 0041;	
    // (㑿) CJK UNIFIED IDEOGRAPH-347F	[FB80 B47F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x347F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB47F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_003)
{
    // 347F 0062;	
    // (㑿) CJK UNIFIED IDEOGRAPH-347F	[FB80 B47F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x347F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB47F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_004)
{
    // 3480 0021;	
    // (㒀) CJK UNIFIED IDEOGRAPH-3480	[FB80 B480 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3480, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB480, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_005)
{
    // 3480 003F;	
    // (㒀) CJK UNIFIED IDEOGRAPH-3480	[FB80 B480 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3480, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB480, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_006)
{
    // 3480 0061;	
    // (㒀) CJK UNIFIED IDEOGRAPH-3480	[FB80 B480 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3480, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_007)
{
    // 3480 0041;	
    // (㒀) CJK UNIFIED IDEOGRAPH-3480	[FB80 B480 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3480, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_008)
{
    // 3480 0062;	
    // (㒀) CJK UNIFIED IDEOGRAPH-3480	[FB80 B480 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3480, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB480, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_009)
{
    // 3481 0021;	
    // (㒁) CJK UNIFIED IDEOGRAPH-3481	[FB80 B481 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3481, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB481, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_010)
{
    // 3481 003F;	
    // (㒁) CJK UNIFIED IDEOGRAPH-3481	[FB80 B481 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3481, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB481, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_011)
{
    // 3481 0061;	
    // (㒁) CJK UNIFIED IDEOGRAPH-3481	[FB80 B481 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3481, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_012)
{
    // 3481 0041;	
    // (㒁) CJK UNIFIED IDEOGRAPH-3481	[FB80 B481 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3481, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_013)
{
    // 3481 0062;	
    // (㒁) CJK UNIFIED IDEOGRAPH-3481	[FB80 B481 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3481, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB481, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_014)
{
    // 3482 0021;	
    // (㒂) CJK UNIFIED IDEOGRAPH-3482	[FB80 B482 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3482, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB482, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_015)
{
    // 3482 003F;	
    // (㒂) CJK UNIFIED IDEOGRAPH-3482	[FB80 B482 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3482, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB482, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_016)
{
    // 3482 0061;	
    // (㒂) CJK UNIFIED IDEOGRAPH-3482	[FB80 B482 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3482, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_017)
{
    // 3482 0041;	
    // (㒂) CJK UNIFIED IDEOGRAPH-3482	[FB80 B482 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3482, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_018)
{
    // 3482 0062;	
    // (㒂) CJK UNIFIED IDEOGRAPH-3482	[FB80 B482 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3482, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB482, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_019)
{
    // 3483 0021;	
    // (㒃) CJK UNIFIED IDEOGRAPH-3483	[FB80 B483 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3483, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB483, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_020)
{
    // 3483 003F;	
    // (㒃) CJK UNIFIED IDEOGRAPH-3483	[FB80 B483 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3483, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB483, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_021)
{
    // 3483 0061;	
    // (㒃) CJK UNIFIED IDEOGRAPH-3483	[FB80 B483 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3483, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_022)
{
    // 3483 0041;	
    // (㒃) CJK UNIFIED IDEOGRAPH-3483	[FB80 B483 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3483, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_023)
{
    // 3483 0062;	
    // (㒃) CJK UNIFIED IDEOGRAPH-3483	[FB80 B483 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3483, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB483, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_024)
{
    // 3484 0021;	
    // (㒄) CJK UNIFIED IDEOGRAPH-3484	[FB80 B484 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3484, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB484, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_025)
{
    // 3484 003F;	
    // (㒄) CJK UNIFIED IDEOGRAPH-3484	[FB80 B484 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3484, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB484, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_026)
{
    // 3484 0061;	
    // (㒄) CJK UNIFIED IDEOGRAPH-3484	[FB80 B484 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3484, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_027)
{
    // 3484 0041;	
    // (㒄) CJK UNIFIED IDEOGRAPH-3484	[FB80 B484 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3484, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_028)
{
    // 3484 0062;	
    // (㒄) CJK UNIFIED IDEOGRAPH-3484	[FB80 B484 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3484, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB484, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_029)
{
    // 3485 0021;	
    // (㒅) CJK UNIFIED IDEOGRAPH-3485	[FB80 B485 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3485, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB485, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_030)
{
    // 3485 003F;	
    // (㒅) CJK UNIFIED IDEOGRAPH-3485	[FB80 B485 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3485, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB485, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_031)
{
    // 3485 0061;	
    // (㒅) CJK UNIFIED IDEOGRAPH-3485	[FB80 B485 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3485, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_032)
{
    // 3485 0041;	
    // (㒅) CJK UNIFIED IDEOGRAPH-3485	[FB80 B485 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3485, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_033)
{
    // 3485 0062;	
    // (㒅) CJK UNIFIED IDEOGRAPH-3485	[FB80 B485 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3485, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB485, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_034)
{
    // 3486 0021;	
    // (㒆) CJK UNIFIED IDEOGRAPH-3486	[FB80 B486 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3486, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB486, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_035)
{
    // 3486 003F;	
    // (㒆) CJK UNIFIED IDEOGRAPH-3486	[FB80 B486 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3486, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB486, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_036)
{
    // 3486 0061;	
    // (㒆) CJK UNIFIED IDEOGRAPH-3486	[FB80 B486 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3486, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_037)
{
    // 3486 0041;	
    // (㒆) CJK UNIFIED IDEOGRAPH-3486	[FB80 B486 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3486, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_038)
{
    // 3486 0062;	
    // (㒆) CJK UNIFIED IDEOGRAPH-3486	[FB80 B486 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3486, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB486, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_039)
{
    // 3487 0021;	
    // (㒇) CJK UNIFIED IDEOGRAPH-3487	[FB80 B487 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3487, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB487, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_040)
{
    // 3487 003F;	
    // (㒇) CJK UNIFIED IDEOGRAPH-3487	[FB80 B487 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3487, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB487, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_041)
{
    // 3487 0061;	
    // (㒇) CJK UNIFIED IDEOGRAPH-3487	[FB80 B487 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3487, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB487, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_042)
{
    // 3487 0041;	
    // (㒇) CJK UNIFIED IDEOGRAPH-3487	[FB80 B487 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3487, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB487, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_043)
{
    // 3487 0062;	
    // (㒇) CJK UNIFIED IDEOGRAPH-3487	[FB80 B487 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3487, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB487, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_044)
{
    // 3488 0021;	
    // (㒈) CJK UNIFIED IDEOGRAPH-3488	[FB80 B488 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3488, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB488, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_045)
{
    // 3488 003F;	
    // (㒈) CJK UNIFIED IDEOGRAPH-3488	[FB80 B488 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3488, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB488, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_046)
{
    // 3488 0061;	
    // (㒈) CJK UNIFIED IDEOGRAPH-3488	[FB80 B488 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3488, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB488, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_047)
{
    // 3488 0041;	
    // (㒈) CJK UNIFIED IDEOGRAPH-3488	[FB80 B488 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3488, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB488, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_048)
{
    // 3488 0062;	
    // (㒈) CJK UNIFIED IDEOGRAPH-3488	[FB80 B488 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3488, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB488, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_049)
{
    // 3489 0021;	
    // (㒉) CJK UNIFIED IDEOGRAPH-3489	[FB80 B489 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3489, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB489, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_050)
{
    // 3489 003F;	
    // (㒉) CJK UNIFIED IDEOGRAPH-3489	[FB80 B489 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3489, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB489, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_051)
{
    // 3489 0061;	
    // (㒉) CJK UNIFIED IDEOGRAPH-3489	[FB80 B489 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3489, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_052)
{
    // 3489 0041;	
    // (㒉) CJK UNIFIED IDEOGRAPH-3489	[FB80 B489 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3489, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_053)
{
    // 3489 0062;	
    // (㒉) CJK UNIFIED IDEOGRAPH-3489	[FB80 B489 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3489, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB489, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_054)
{
    // 348A 0021;	
    // (㒊) CJK UNIFIED IDEOGRAPH-348A	[FB80 B48A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB48A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_055)
{
    // 348A 003F;	
    // (㒊) CJK UNIFIED IDEOGRAPH-348A	[FB80 B48A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB48A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_056)
{
    // 348A 0061;	
    // (㒊) CJK UNIFIED IDEOGRAPH-348A	[FB80 B48A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB48A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_057)
{
    // 348A 0041;	
    // (㒊) CJK UNIFIED IDEOGRAPH-348A	[FB80 B48A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x348A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB48A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_058)
{
    // 348A 0062;	
    // (㒊) CJK UNIFIED IDEOGRAPH-348A	[FB80 B48A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB48A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_059)
{
    // 348B 0021;	
    // (㒋) CJK UNIFIED IDEOGRAPH-348B	[FB80 B48B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB48B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_060)
{
    // 348B 003F;	
    // (㒋) CJK UNIFIED IDEOGRAPH-348B	[FB80 B48B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB48B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_061)
{
    // 348B 0061;	
    // (㒋) CJK UNIFIED IDEOGRAPH-348B	[FB80 B48B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB48B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_062)
{
    // 348B 0041;	
    // (㒋) CJK UNIFIED IDEOGRAPH-348B	[FB80 B48B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x348B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB48B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_063)
{
    // 348B 0062;	
    // (㒋) CJK UNIFIED IDEOGRAPH-348B	[FB80 B48B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB48B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_064)
{
    // 348C 0021;	
    // (㒌) CJK UNIFIED IDEOGRAPH-348C	[FB80 B48C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB48C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_065)
{
    // 348C 003F;	
    // (㒌) CJK UNIFIED IDEOGRAPH-348C	[FB80 B48C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB48C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_066)
{
    // 348C 0061;	
    // (㒌) CJK UNIFIED IDEOGRAPH-348C	[FB80 B48C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB48C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_067)
{
    // 348C 0041;	
    // (㒌) CJK UNIFIED IDEOGRAPH-348C	[FB80 B48C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x348C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB48C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_068)
{
    // 348C 0062;	
    // (㒌) CJK UNIFIED IDEOGRAPH-348C	[FB80 B48C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB48C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_069)
{
    // 348D 0021;	
    // (㒍) CJK UNIFIED IDEOGRAPH-348D	[FB80 B48D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB48D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_070)
{
    // 348D 003F;	
    // (㒍) CJK UNIFIED IDEOGRAPH-348D	[FB80 B48D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB48D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_071)
{
    // 348D 0061;	
    // (㒍) CJK UNIFIED IDEOGRAPH-348D	[FB80 B48D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB48D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_072)
{
    // 348D 0041;	
    // (㒍) CJK UNIFIED IDEOGRAPH-348D	[FB80 B48D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x348D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB48D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_073)
{
    // 348D 0062;	
    // (㒍) CJK UNIFIED IDEOGRAPH-348D	[FB80 B48D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB48D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_074)
{
    // 348E 0021;	
    // (㒎) CJK UNIFIED IDEOGRAPH-348E	[FB80 B48E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB48E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_075)
{
    // 348E 003F;	
    // (㒎) CJK UNIFIED IDEOGRAPH-348E	[FB80 B48E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB48E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_076)
{
    // 348E 0061;	
    // (㒎) CJK UNIFIED IDEOGRAPH-348E	[FB80 B48E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB48E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_077)
{
    // 348E 0041;	
    // (㒎) CJK UNIFIED IDEOGRAPH-348E	[FB80 B48E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x348E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB48E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_078)
{
    // 348E 0062;	
    // (㒎) CJK UNIFIED IDEOGRAPH-348E	[FB80 B48E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB48E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_079)
{
    // 348F 0021;	
    // (㒏) CJK UNIFIED IDEOGRAPH-348F	[FB80 B48F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB48F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_080)
{
    // 348F 003F;	
    // (㒏) CJK UNIFIED IDEOGRAPH-348F	[FB80 B48F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB48F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_081)
{
    // 348F 0061;	
    // (㒏) CJK UNIFIED IDEOGRAPH-348F	[FB80 B48F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB48F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_082)
{
    // 348F 0041;	
    // (㒏) CJK UNIFIED IDEOGRAPH-348F	[FB80 B48F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x348F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB48F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_083)
{
    // 348F 0062;	
    // (㒏) CJK UNIFIED IDEOGRAPH-348F	[FB80 B48F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x348F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB48F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_084)
{
    // 3490 0021;	
    // (㒐) CJK UNIFIED IDEOGRAPH-3490	[FB80 B490 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3490, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB490, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_085)
{
    // 3490 003F;	
    // (㒐) CJK UNIFIED IDEOGRAPH-3490	[FB80 B490 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3490, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB490, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_086)
{
    // 3490 0061;	
    // (㒐) CJK UNIFIED IDEOGRAPH-3490	[FB80 B490 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3490, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB490, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_087)
{
    // 3490 0041;	
    // (㒐) CJK UNIFIED IDEOGRAPH-3490	[FB80 B490 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3490, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB490, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_088)
{
    // 3490 0062;	
    // (㒐) CJK UNIFIED IDEOGRAPH-3490	[FB80 B490 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3490, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB490, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_089)
{
    // 3491 0021;	
    // (㒑) CJK UNIFIED IDEOGRAPH-3491	[FB80 B491 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3491, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB491, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_090)
{
    // 3491 003F;	
    // (㒑) CJK UNIFIED IDEOGRAPH-3491	[FB80 B491 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3491, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB491, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_091)
{
    // 3491 0061;	
    // (㒑) CJK UNIFIED IDEOGRAPH-3491	[FB80 B491 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3491, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB491, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_092)
{
    // 3491 0041;	
    // (㒑) CJK UNIFIED IDEOGRAPH-3491	[FB80 B491 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3491, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB491, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_093)
{
    // 3491 0062;	
    // (㒑) CJK UNIFIED IDEOGRAPH-3491	[FB80 B491 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3491, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB491, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_094)
{
    // 3492 0021;	
    // (㒒) CJK UNIFIED IDEOGRAPH-3492	[FB80 B492 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3492, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB492, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_095)
{
    // 3492 003F;	
    // (㒒) CJK UNIFIED IDEOGRAPH-3492	[FB80 B492 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3492, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB492, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_096)
{
    // 3492 0061;	
    // (㒒) CJK UNIFIED IDEOGRAPH-3492	[FB80 B492 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3492, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB492, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_097)
{
    // 3492 0041;	
    // (㒒) CJK UNIFIED IDEOGRAPH-3492	[FB80 B492 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3492, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB492, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_098)
{
    // 3492 0062;	
    // (㒒) CJK UNIFIED IDEOGRAPH-3492	[FB80 B492 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3492, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB492, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_099)
{
    // 3493 0021;	
    // (㒓) CJK UNIFIED IDEOGRAPH-3493	[FB80 B493 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3493, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB493, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_100)
{
    // 3493 003F;	
    // (㒓) CJK UNIFIED IDEOGRAPH-3493	[FB80 B493 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3493, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB493, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_101)
{
    // 3493 0061;	
    // (㒓) CJK UNIFIED IDEOGRAPH-3493	[FB80 B493 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3493, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB493, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_102)
{
    // 3493 0041;	
    // (㒓) CJK UNIFIED IDEOGRAPH-3493	[FB80 B493 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3493, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB493, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_103)
{
    // 3493 0062;	
    // (㒓) CJK UNIFIED IDEOGRAPH-3493	[FB80 B493 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3493, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB493, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_104)
{
    // 3494 0021;	
    // (㒔) CJK UNIFIED IDEOGRAPH-3494	[FB80 B494 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3494, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB494, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_105)
{
    // 3494 003F;	
    // (㒔) CJK UNIFIED IDEOGRAPH-3494	[FB80 B494 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3494, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB494, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_106)
{
    // 3494 0061;	
    // (㒔) CJK UNIFIED IDEOGRAPH-3494	[FB80 B494 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3494, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB494, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_107)
{
    // 3494 0041;	
    // (㒔) CJK UNIFIED IDEOGRAPH-3494	[FB80 B494 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3494, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB494, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_108)
{
    // 3494 0062;	
    // (㒔) CJK UNIFIED IDEOGRAPH-3494	[FB80 B494 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3494, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB494, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_109)
{
    // 3495 0021;	
    // (㒕) CJK UNIFIED IDEOGRAPH-3495	[FB80 B495 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3495, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB495, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_110)
{
    // 3495 003F;	
    // (㒕) CJK UNIFIED IDEOGRAPH-3495	[FB80 B495 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3495, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB495, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_111)
{
    // 3495 0061;	
    // (㒕) CJK UNIFIED IDEOGRAPH-3495	[FB80 B495 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3495, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB495, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_112)
{
    // 3495 0041;	
    // (㒕) CJK UNIFIED IDEOGRAPH-3495	[FB80 B495 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3495, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB495, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_113)
{
    // 3495 0062;	
    // (㒕) CJK UNIFIED IDEOGRAPH-3495	[FB80 B495 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3495, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB495, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_114)
{
    // 3496 0021;	
    // (㒖) CJK UNIFIED IDEOGRAPH-3496	[FB80 B496 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3496, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB496, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_115)
{
    // 3496 003F;	
    // (㒖) CJK UNIFIED IDEOGRAPH-3496	[FB80 B496 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3496, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB496, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_116)
{
    // 3496 0061;	
    // (㒖) CJK UNIFIED IDEOGRAPH-3496	[FB80 B496 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3496, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_117)
{
    // 3496 0041;	
    // (㒖) CJK UNIFIED IDEOGRAPH-3496	[FB80 B496 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3496, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_118)
{
    // 3496 0062;	
    // (㒖) CJK UNIFIED IDEOGRAPH-3496	[FB80 B496 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3496, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB496, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_119)
{
    // 3497 0021;	
    // (㒗) CJK UNIFIED IDEOGRAPH-3497	[FB80 B497 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3497, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB497, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_120)
{
    // 3497 003F;	
    // (㒗) CJK UNIFIED IDEOGRAPH-3497	[FB80 B497 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3497, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB497, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_121)
{
    // 3497 0061;	
    // (㒗) CJK UNIFIED IDEOGRAPH-3497	[FB80 B497 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3497, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB497, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_122)
{
    // 3497 0041;	
    // (㒗) CJK UNIFIED IDEOGRAPH-3497	[FB80 B497 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3497, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB497, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_123)
{
    // 3497 0062;	
    // (㒗) CJK UNIFIED IDEOGRAPH-3497	[FB80 B497 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3497, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB497, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_124)
{
    // 3498 0021;	
    // (㒘) CJK UNIFIED IDEOGRAPH-3498	[FB80 B498 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3498, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB498, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_125)
{
    // 3498 003F;	
    // (㒘) CJK UNIFIED IDEOGRAPH-3498	[FB80 B498 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3498, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB498, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_126)
{
    // 3498 0061;	
    // (㒘) CJK UNIFIED IDEOGRAPH-3498	[FB80 B498 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3498, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_127)
{
    // 3498 0041;	
    // (㒘) CJK UNIFIED IDEOGRAPH-3498	[FB80 B498 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3498, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_128)
{
    // 3498 0062;	
    // (㒘) CJK UNIFIED IDEOGRAPH-3498	[FB80 B498 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3498, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB498, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_129)
{
    // 3499 0021;	
    // (㒙) CJK UNIFIED IDEOGRAPH-3499	[FB80 B499 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3499, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB499, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_130)
{
    // 3499 003F;	
    // (㒙) CJK UNIFIED IDEOGRAPH-3499	[FB80 B499 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3499, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB499, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_131)
{
    // 3499 0061;	
    // (㒙) CJK UNIFIED IDEOGRAPH-3499	[FB80 B499 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3499, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_132)
{
    // 3499 0041;	
    // (㒙) CJK UNIFIED IDEOGRAPH-3499	[FB80 B499 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3499, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_133)
{
    // 3499 0062;	
    // (㒙) CJK UNIFIED IDEOGRAPH-3499	[FB80 B499 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3499, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB499, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_134)
{
    // 349A 0021;	
    // (㒚) CJK UNIFIED IDEOGRAPH-349A	[FB80 B49A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB49A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_135)
{
    // 349A 003F;	
    // (㒚) CJK UNIFIED IDEOGRAPH-349A	[FB80 B49A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB49A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_136)
{
    // 349A 0061;	
    // (㒚) CJK UNIFIED IDEOGRAPH-349A	[FB80 B49A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB49A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_137)
{
    // 349A 0041;	
    // (㒚) CJK UNIFIED IDEOGRAPH-349A	[FB80 B49A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x349A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB49A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_138)
{
    // 349A 0062;	
    // (㒚) CJK UNIFIED IDEOGRAPH-349A	[FB80 B49A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB49A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_139)
{
    // 349B 0021;	
    // (㒛) CJK UNIFIED IDEOGRAPH-349B	[FB80 B49B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB49B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_140)
{
    // 349B 003F;	
    // (㒛) CJK UNIFIED IDEOGRAPH-349B	[FB80 B49B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB49B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_141)
{
    // 349B 0061;	
    // (㒛) CJK UNIFIED IDEOGRAPH-349B	[FB80 B49B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB49B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_142)
{
    // 349B 0041;	
    // (㒛) CJK UNIFIED IDEOGRAPH-349B	[FB80 B49B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x349B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB49B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_143)
{
    // 349B 0062;	
    // (㒛) CJK UNIFIED IDEOGRAPH-349B	[FB80 B49B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB49B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_144)
{
    // 349C 0021;	
    // (㒜) CJK UNIFIED IDEOGRAPH-349C	[FB80 B49C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB49C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_145)
{
    // 349C 003F;	
    // (㒜) CJK UNIFIED IDEOGRAPH-349C	[FB80 B49C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB49C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_146)
{
    // 349C 0061;	
    // (㒜) CJK UNIFIED IDEOGRAPH-349C	[FB80 B49C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB49C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_147)
{
    // 349C 0041;	
    // (㒜) CJK UNIFIED IDEOGRAPH-349C	[FB80 B49C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x349C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB49C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_148)
{
    // 349C 0062;	
    // (㒜) CJK UNIFIED IDEOGRAPH-349C	[FB80 B49C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB49C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_149)
{
    // 349D 0021;	
    // (㒝) CJK UNIFIED IDEOGRAPH-349D	[FB80 B49D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB49D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_150)
{
    // 349D 003F;	
    // (㒝) CJK UNIFIED IDEOGRAPH-349D	[FB80 B49D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB49D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_151)
{
    // 349D 0061;	
    // (㒝) CJK UNIFIED IDEOGRAPH-349D	[FB80 B49D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB49D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_152)
{
    // 349D 0041;	
    // (㒝) CJK UNIFIED IDEOGRAPH-349D	[FB80 B49D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x349D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB49D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_153)
{
    // 349D 0062;	
    // (㒝) CJK UNIFIED IDEOGRAPH-349D	[FB80 B49D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB49D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_154)
{
    // 349E 0021;	
    // (㒞) CJK UNIFIED IDEOGRAPH-349E	[FB80 B49E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB49E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_155)
{
    // 2F80C 0021;	
    // (㒞) CJK COMPATIBILITY IDEOGRAPH-2F80C	[FB80 B49E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB49E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_156)
{
    // 349E 003F;	
    // (㒞) CJK UNIFIED IDEOGRAPH-349E	[FB80 B49E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB49E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_157)
{
    // 2F80C 003F;	
    // (㒞) CJK COMPATIBILITY IDEOGRAPH-2F80C	[FB80 B49E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB49E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_158)
{
    // 349E 0061;	
    // (㒞) CJK UNIFIED IDEOGRAPH-349E	[FB80 B49E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB49E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_159)
{
    // 2F80C 0061;	
    // (㒞) CJK COMPATIBILITY IDEOGRAPH-2F80C	[FB80 B49E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB49E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_160)
{
    // 349E 0041;	
    // (㒞) CJK UNIFIED IDEOGRAPH-349E	[FB80 B49E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x349E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB49E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_161)
{
    // 2F80C 0041;	
    // (㒞) CJK COMPATIBILITY IDEOGRAPH-2F80C	[FB80 B49E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F80C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB49E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_162)
{
    // 349E 0062;	
    // (㒞) CJK UNIFIED IDEOGRAPH-349E	[FB80 B49E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB49E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_163)
{
    // 2F80C 0062;	
    // (㒞) CJK COMPATIBILITY IDEOGRAPH-2F80C	[FB80 B49E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB49E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_164)
{
    // 349F 0021;	
    // (㒟) CJK UNIFIED IDEOGRAPH-349F	[FB80 B49F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB49F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_165)
{
    // 349F 003F;	
    // (㒟) CJK UNIFIED IDEOGRAPH-349F	[FB80 B49F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB49F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_166)
{
    // 349F 0061;	
    // (㒟) CJK UNIFIED IDEOGRAPH-349F	[FB80 B49F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB49F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_167)
{
    // 349F 0041;	
    // (㒟) CJK UNIFIED IDEOGRAPH-349F	[FB80 B49F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x349F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB49F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_168)
{
    // 349F 0062;	
    // (㒟) CJK UNIFIED IDEOGRAPH-349F	[FB80 B49F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x349F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB49F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_169)
{
    // 34A0 0021;	
    // (㒠) CJK UNIFIED IDEOGRAPH-34A0	[FB80 B4A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_170)
{
    // 34A0 003F;	
    // (㒠) CJK UNIFIED IDEOGRAPH-34A0	[FB80 B4A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_171)
{
    // 34A0 0061;	
    // (㒠) CJK UNIFIED IDEOGRAPH-34A0	[FB80 B4A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_172)
{
    // 34A0 0041;	
    // (㒠) CJK UNIFIED IDEOGRAPH-34A0	[FB80 B4A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_173)
{
    // 34A0 0062;	
    // (㒠) CJK UNIFIED IDEOGRAPH-34A0	[FB80 B4A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_174)
{
    // 34A1 0021;	
    // (㒡) CJK UNIFIED IDEOGRAPH-34A1	[FB80 B4A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_175)
{
    // 34A1 003F;	
    // (㒡) CJK UNIFIED IDEOGRAPH-34A1	[FB80 B4A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_176)
{
    // 34A1 0061;	
    // (㒡) CJK UNIFIED IDEOGRAPH-34A1	[FB80 B4A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_177)
{
    // 34A1 0041;	
    // (㒡) CJK UNIFIED IDEOGRAPH-34A1	[FB80 B4A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_178)
{
    // 34A1 0062;	
    // (㒡) CJK UNIFIED IDEOGRAPH-34A1	[FB80 B4A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_179)
{
    // 34A2 0021;	
    // (㒢) CJK UNIFIED IDEOGRAPH-34A2	[FB80 B4A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_180)
{
    // 34A2 003F;	
    // (㒢) CJK UNIFIED IDEOGRAPH-34A2	[FB80 B4A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_181)
{
    // 34A2 0061;	
    // (㒢) CJK UNIFIED IDEOGRAPH-34A2	[FB80 B4A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_182)
{
    // 34A2 0041;	
    // (㒢) CJK UNIFIED IDEOGRAPH-34A2	[FB80 B4A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_183)
{
    // 34A2 0062;	
    // (㒢) CJK UNIFIED IDEOGRAPH-34A2	[FB80 B4A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_184)
{
    // 34A3 0021;	
    // (㒣) CJK UNIFIED IDEOGRAPH-34A3	[FB80 B4A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_185)
{
    // 34A3 003F;	
    // (㒣) CJK UNIFIED IDEOGRAPH-34A3	[FB80 B4A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_186)
{
    // 34A3 0061;	
    // (㒣) CJK UNIFIED IDEOGRAPH-34A3	[FB80 B4A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_187)
{
    // 34A3 0041;	
    // (㒣) CJK UNIFIED IDEOGRAPH-34A3	[FB80 B4A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_188)
{
    // 34A3 0062;	
    // (㒣) CJK UNIFIED IDEOGRAPH-34A3	[FB80 B4A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_189)
{
    // 34A4 0021;	
    // (㒤) CJK UNIFIED IDEOGRAPH-34A4	[FB80 B4A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_190)
{
    // 34A4 003F;	
    // (㒤) CJK UNIFIED IDEOGRAPH-34A4	[FB80 B4A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_191)
{
    // 34A4 0061;	
    // (㒤) CJK UNIFIED IDEOGRAPH-34A4	[FB80 B4A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_192)
{
    // 34A4 0041;	
    // (㒤) CJK UNIFIED IDEOGRAPH-34A4	[FB80 B4A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_193)
{
    // 34A4 0062;	
    // (㒤) CJK UNIFIED IDEOGRAPH-34A4	[FB80 B4A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_194)
{
    // 34A5 0021;	
    // (㒥) CJK UNIFIED IDEOGRAPH-34A5	[FB80 B4A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_195)
{
    // 34A5 003F;	
    // (㒥) CJK UNIFIED IDEOGRAPH-34A5	[FB80 B4A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_196)
{
    // 34A5 0061;	
    // (㒥) CJK UNIFIED IDEOGRAPH-34A5	[FB80 B4A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_197)
{
    // 34A5 0041;	
    // (㒥) CJK UNIFIED IDEOGRAPH-34A5	[FB80 B4A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_198)
{
    // 34A5 0062;	
    // (㒥) CJK UNIFIED IDEOGRAPH-34A5	[FB80 B4A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_199)
{
    // 34A6 0021;	
    // (㒦) CJK UNIFIED IDEOGRAPH-34A6	[FB80 B4A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_200)
{
    // 34A6 003F;	
    // (㒦) CJK UNIFIED IDEOGRAPH-34A6	[FB80 B4A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_201)
{
    // 34A6 0061;	
    // (㒦) CJK UNIFIED IDEOGRAPH-34A6	[FB80 B4A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_202)
{
    // 34A6 0041;	
    // (㒦) CJK UNIFIED IDEOGRAPH-34A6	[FB80 B4A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_203)
{
    // 34A6 0062;	
    // (㒦) CJK UNIFIED IDEOGRAPH-34A6	[FB80 B4A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_204)
{
    // 34A7 0021;	
    // (㒧) CJK UNIFIED IDEOGRAPH-34A7	[FB80 B4A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_205)
{
    // 34A7 003F;	
    // (㒧) CJK UNIFIED IDEOGRAPH-34A7	[FB80 B4A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_206)
{
    // 34A7 0061;	
    // (㒧) CJK UNIFIED IDEOGRAPH-34A7	[FB80 B4A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_207)
{
    // 34A7 0041;	
    // (㒧) CJK UNIFIED IDEOGRAPH-34A7	[FB80 B4A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_208)
{
    // 34A7 0062;	
    // (㒧) CJK UNIFIED IDEOGRAPH-34A7	[FB80 B4A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_209)
{
    // 34A8 0021;	
    // (㒨) CJK UNIFIED IDEOGRAPH-34A8	[FB80 B4A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_210)
{
    // 34A8 003F;	
    // (㒨) CJK UNIFIED IDEOGRAPH-34A8	[FB80 B4A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_211)
{
    // 34A8 0061;	
    // (㒨) CJK UNIFIED IDEOGRAPH-34A8	[FB80 B4A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_212)
{
    // 34A8 0041;	
    // (㒨) CJK UNIFIED IDEOGRAPH-34A8	[FB80 B4A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_213)
{
    // 34A8 0062;	
    // (㒨) CJK UNIFIED IDEOGRAPH-34A8	[FB80 B4A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_214)
{
    // 34A9 0021;	
    // (㒩) CJK UNIFIED IDEOGRAPH-34A9	[FB80 B4A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_215)
{
    // 34A9 003F;	
    // (㒩) CJK UNIFIED IDEOGRAPH-34A9	[FB80 B4A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_216)
{
    // 34A9 0061;	
    // (㒩) CJK UNIFIED IDEOGRAPH-34A9	[FB80 B4A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_217)
{
    // 34A9 0041;	
    // (㒩) CJK UNIFIED IDEOGRAPH-34A9	[FB80 B4A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_218)
{
    // 34A9 0062;	
    // (㒩) CJK UNIFIED IDEOGRAPH-34A9	[FB80 B4A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_219)
{
    // 34AA 0021;	
    // (㒪) CJK UNIFIED IDEOGRAPH-34AA	[FB80 B4AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_220)
{
    // 34AA 003F;	
    // (㒪) CJK UNIFIED IDEOGRAPH-34AA	[FB80 B4AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_221)
{
    // 34AA 0061;	
    // (㒪) CJK UNIFIED IDEOGRAPH-34AA	[FB80 B4AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_222)
{
    // 34AA 0041;	
    // (㒪) CJK UNIFIED IDEOGRAPH-34AA	[FB80 B4AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_223)
{
    // 34AA 0062;	
    // (㒪) CJK UNIFIED IDEOGRAPH-34AA	[FB80 B4AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_224)
{
    // 34AB 0021;	
    // (㒫) CJK UNIFIED IDEOGRAPH-34AB	[FB80 B4AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_225)
{
    // 34AB 003F;	
    // (㒫) CJK UNIFIED IDEOGRAPH-34AB	[FB80 B4AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_226)
{
    // 34AB 0061;	
    // (㒫) CJK UNIFIED IDEOGRAPH-34AB	[FB80 B4AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_227)
{
    // 34AB 0041;	
    // (㒫) CJK UNIFIED IDEOGRAPH-34AB	[FB80 B4AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_228)
{
    // 34AB 0062;	
    // (㒫) CJK UNIFIED IDEOGRAPH-34AB	[FB80 B4AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_229)
{
    // 34AC 0021;	
    // (㒬) CJK UNIFIED IDEOGRAPH-34AC	[FB80 B4AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_230)
{
    // 34AC 003F;	
    // (㒬) CJK UNIFIED IDEOGRAPH-34AC	[FB80 B4AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_231)
{
    // 34AC 0061;	
    // (㒬) CJK UNIFIED IDEOGRAPH-34AC	[FB80 B4AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_232)
{
    // 34AC 0041;	
    // (㒬) CJK UNIFIED IDEOGRAPH-34AC	[FB80 B4AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_233)
{
    // 34AC 0062;	
    // (㒬) CJK UNIFIED IDEOGRAPH-34AC	[FB80 B4AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_234)
{
    // 34AD 0021;	
    // (㒭) CJK UNIFIED IDEOGRAPH-34AD	[FB80 B4AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_235)
{
    // 34AD 003F;	
    // (㒭) CJK UNIFIED IDEOGRAPH-34AD	[FB80 B4AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_236)
{
    // 34AD 0061;	
    // (㒭) CJK UNIFIED IDEOGRAPH-34AD	[FB80 B4AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_237)
{
    // 34AD 0041;	
    // (㒭) CJK UNIFIED IDEOGRAPH-34AD	[FB80 B4AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_238)
{
    // 34AD 0062;	
    // (㒭) CJK UNIFIED IDEOGRAPH-34AD	[FB80 B4AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_239)
{
    // 34AE 0021;	
    // (㒮) CJK UNIFIED IDEOGRAPH-34AE	[FB80 B4AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_240)
{
    // 34AE 003F;	
    // (㒮) CJK UNIFIED IDEOGRAPH-34AE	[FB80 B4AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_241)
{
    // 34AE 0061;	
    // (㒮) CJK UNIFIED IDEOGRAPH-34AE	[FB80 B4AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_242)
{
    // 34AE 0041;	
    // (㒮) CJK UNIFIED IDEOGRAPH-34AE	[FB80 B4AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_243)
{
    // 34AE 0062;	
    // (㒮) CJK UNIFIED IDEOGRAPH-34AE	[FB80 B4AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_244)
{
    // 34AF 0021;	
    // (㒯) CJK UNIFIED IDEOGRAPH-34AF	[FB80 B4AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_245)
{
    // 34AF 003F;	
    // (㒯) CJK UNIFIED IDEOGRAPH-34AF	[FB80 B4AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_246)
{
    // 34AF 0061;	
    // (㒯) CJK UNIFIED IDEOGRAPH-34AF	[FB80 B4AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_247)
{
    // 34AF 0041;	
    // (㒯) CJK UNIFIED IDEOGRAPH-34AF	[FB80 B4AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_248)
{
    // 34AF 0062;	
    // (㒯) CJK UNIFIED IDEOGRAPH-34AF	[FB80 B4AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_249)
{
    // 34B0 0021;	
    // (㒰) CJK UNIFIED IDEOGRAPH-34B0	[FB80 B4B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_250)
{
    // 34B0 003F;	
    // (㒰) CJK UNIFIED IDEOGRAPH-34B0	[FB80 B4B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_251)
{
    // 34B0 0061;	
    // (㒰) CJK UNIFIED IDEOGRAPH-34B0	[FB80 B4B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_252)
{
    // 34B0 0041;	
    // (㒰) CJK UNIFIED IDEOGRAPH-34B0	[FB80 B4B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_253)
{
    // 34B0 0062;	
    // (㒰) CJK UNIFIED IDEOGRAPH-34B0	[FB80 B4B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_254)
{
    // 34B1 0021;	
    // (㒱) CJK UNIFIED IDEOGRAPH-34B1	[FB80 B4B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_255)
{
    // 34B1 003F;	
    // (㒱) CJK UNIFIED IDEOGRAPH-34B1	[FB80 B4B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_256)
{
    // 34B1 0061;	
    // (㒱) CJK UNIFIED IDEOGRAPH-34B1	[FB80 B4B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_257)
{
    // 34B1 0041;	
    // (㒱) CJK UNIFIED IDEOGRAPH-34B1	[FB80 B4B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_258)
{
    // 34B1 0062;	
    // (㒱) CJK UNIFIED IDEOGRAPH-34B1	[FB80 B4B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_259)
{
    // 34B2 0021;	
    // (㒲) CJK UNIFIED IDEOGRAPH-34B2	[FB80 B4B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_260)
{
    // 34B2 003F;	
    // (㒲) CJK UNIFIED IDEOGRAPH-34B2	[FB80 B4B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_261)
{
    // 34B2 0061;	
    // (㒲) CJK UNIFIED IDEOGRAPH-34B2	[FB80 B4B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_262)
{
    // 34B2 0041;	
    // (㒲) CJK UNIFIED IDEOGRAPH-34B2	[FB80 B4B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_263)
{
    // 34B2 0062;	
    // (㒲) CJK UNIFIED IDEOGRAPH-34B2	[FB80 B4B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_264)
{
    // 34B3 0021;	
    // (㒳) CJK UNIFIED IDEOGRAPH-34B3	[FB80 B4B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_265)
{
    // 34B3 003F;	
    // (㒳) CJK UNIFIED IDEOGRAPH-34B3	[FB80 B4B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_266)
{
    // 34B3 0061;	
    // (㒳) CJK UNIFIED IDEOGRAPH-34B3	[FB80 B4B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_267)
{
    // 34B3 0041;	
    // (㒳) CJK UNIFIED IDEOGRAPH-34B3	[FB80 B4B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_268)
{
    // 34B3 0062;	
    // (㒳) CJK UNIFIED IDEOGRAPH-34B3	[FB80 B4B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_269)
{
    // 34B4 0021;	
    // (㒴) CJK UNIFIED IDEOGRAPH-34B4	[FB80 B4B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_270)
{
    // 34B4 003F;	
    // (㒴) CJK UNIFIED IDEOGRAPH-34B4	[FB80 B4B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_271)
{
    // 34B4 0061;	
    // (㒴) CJK UNIFIED IDEOGRAPH-34B4	[FB80 B4B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_272)
{
    // 34B4 0041;	
    // (㒴) CJK UNIFIED IDEOGRAPH-34B4	[FB80 B4B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_273)
{
    // 34B4 0062;	
    // (㒴) CJK UNIFIED IDEOGRAPH-34B4	[FB80 B4B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_274)
{
    // 34B5 0021;	
    // (㒵) CJK UNIFIED IDEOGRAPH-34B5	[FB80 B4B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_275)
{
    // 34B5 003F;	
    // (㒵) CJK UNIFIED IDEOGRAPH-34B5	[FB80 B4B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_276)
{
    // 34B5 0061;	
    // (㒵) CJK UNIFIED IDEOGRAPH-34B5	[FB80 B4B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_277)
{
    // 34B5 0041;	
    // (㒵) CJK UNIFIED IDEOGRAPH-34B5	[FB80 B4B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_278)
{
    // 34B5 0062;	
    // (㒵) CJK UNIFIED IDEOGRAPH-34B5	[FB80 B4B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_279)
{
    // 34B6 0021;	
    // (㒶) CJK UNIFIED IDEOGRAPH-34B6	[FB80 B4B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_280)
{
    // 34B6 003F;	
    // (㒶) CJK UNIFIED IDEOGRAPH-34B6	[FB80 B4B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_281)
{
    // 34B6 0061;	
    // (㒶) CJK UNIFIED IDEOGRAPH-34B6	[FB80 B4B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_282)
{
    // 34B6 0041;	
    // (㒶) CJK UNIFIED IDEOGRAPH-34B6	[FB80 B4B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_283)
{
    // 34B6 0062;	
    // (㒶) CJK UNIFIED IDEOGRAPH-34B6	[FB80 B4B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_284)
{
    // 34B7 0021;	
    // (㒷) CJK UNIFIED IDEOGRAPH-34B7	[FB80 B4B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_285)
{
    // 34B7 003F;	
    // (㒷) CJK UNIFIED IDEOGRAPH-34B7	[FB80 B4B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_286)
{
    // 34B7 0061;	
    // (㒷) CJK UNIFIED IDEOGRAPH-34B7	[FB80 B4B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_287)
{
    // 34B7 0041;	
    // (㒷) CJK UNIFIED IDEOGRAPH-34B7	[FB80 B4B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_288)
{
    // 34B7 0062;	
    // (㒷) CJK UNIFIED IDEOGRAPH-34B7	[FB80 B4B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_289)
{
    // 34B8 0021;	
    // (㒸) CJK UNIFIED IDEOGRAPH-34B8	[FB80 B4B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_290)
{
    // 34B8 003F;	
    // (㒸) CJK UNIFIED IDEOGRAPH-34B8	[FB80 B4B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_291)
{
    // 34B8 0061;	
    // (㒸) CJK UNIFIED IDEOGRAPH-34B8	[FB80 B4B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_292)
{
    // 34B8 0041;	
    // (㒸) CJK UNIFIED IDEOGRAPH-34B8	[FB80 B4B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_293)
{
    // 34B8 0062;	
    // (㒸) CJK UNIFIED IDEOGRAPH-34B8	[FB80 B4B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_294)
{
    // 34B9 0021;	
    // (㒹) CJK UNIFIED IDEOGRAPH-34B9	[FB80 B4B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_295)
{
    // 2F813 0021;	
    // (㒹) CJK COMPATIBILITY IDEOGRAPH-2F813	[FB80 B4B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F813, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_296)
{
    // 34B9 003F;	
    // (㒹) CJK UNIFIED IDEOGRAPH-34B9	[FB80 B4B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_297)
{
    // 2F813 003F;	
    // (㒹) CJK COMPATIBILITY IDEOGRAPH-2F813	[FB80 B4B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F813, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_298)
{
    // 34B9 0061;	
    // (㒹) CJK UNIFIED IDEOGRAPH-34B9	[FB80 B4B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_299)
{
    // 2F813 0061;	
    // (㒹) CJK COMPATIBILITY IDEOGRAPH-2F813	[FB80 B4B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F813, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_300)
{
    // 34B9 0041;	
    // (㒹) CJK UNIFIED IDEOGRAPH-34B9	[FB80 B4B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_301)
{
    // 2F813 0041;	
    // (㒹) CJK COMPATIBILITY IDEOGRAPH-2F813	[FB80 B4B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F813, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_302)
{
    // 34B9 0062;	
    // (㒹) CJK UNIFIED IDEOGRAPH-34B9	[FB80 B4B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_303)
{
    // 2F813 0062;	
    // (㒹) CJK COMPATIBILITY IDEOGRAPH-2F813	[FB80 B4B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F813, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_304)
{
    // 34BA 0021;	
    // (㒺) CJK UNIFIED IDEOGRAPH-34BA	[FB80 B4BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_305)
{
    // 34BA 003F;	
    // (㒺) CJK UNIFIED IDEOGRAPH-34BA	[FB80 B4BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_306)
{
    // 34BA 0061;	
    // (㒺) CJK UNIFIED IDEOGRAPH-34BA	[FB80 B4BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_307)
{
    // 34BA 0041;	
    // (㒺) CJK UNIFIED IDEOGRAPH-34BA	[FB80 B4BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_308)
{
    // 34BA 0062;	
    // (㒺) CJK UNIFIED IDEOGRAPH-34BA	[FB80 B4BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_309)
{
    // 34BB 0021;	
    // (㒻) CJK UNIFIED IDEOGRAPH-34BB	[FB80 B4BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_310)
{
    // 2F9CA 0021;	
    // (㒻) CJK COMPATIBILITY IDEOGRAPH-2F9CA	[FB80 B4BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_311)
{
    // 34BB 003F;	
    // (㒻) CJK UNIFIED IDEOGRAPH-34BB	[FB80 B4BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_312)
{
    // 2F9CA 003F;	
    // (㒻) CJK COMPATIBILITY IDEOGRAPH-2F9CA	[FB80 B4BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_313)
{
    // 34BB 0061;	
    // (㒻) CJK UNIFIED IDEOGRAPH-34BB	[FB80 B4BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_314)
{
    // 2F9CA 0061;	
    // (㒻) CJK COMPATIBILITY IDEOGRAPH-2F9CA	[FB80 B4BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_315)
{
    // 34BB 0041;	
    // (㒻) CJK UNIFIED IDEOGRAPH-34BB	[FB80 B4BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_316)
{
    // 2F9CA 0041;	
    // (㒻) CJK COMPATIBILITY IDEOGRAPH-2F9CA	[FB80 B4BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_317)
{
    // 34BB 0062;	
    // (㒻) CJK UNIFIED IDEOGRAPH-34BB	[FB80 B4BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_318)
{
    // 2F9CA 0062;	
    // (㒻) CJK COMPATIBILITY IDEOGRAPH-2F9CA	[FB80 B4BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_319)
{
    // 34BC 0021;	
    // (㒼) CJK UNIFIED IDEOGRAPH-34BC	[FB80 B4BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_320)
{
    // 34BC 003F;	
    // (㒼) CJK UNIFIED IDEOGRAPH-34BC	[FB80 B4BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_321)
{
    // 34BC 0061;	
    // (㒼) CJK UNIFIED IDEOGRAPH-34BC	[FB80 B4BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_322)
{
    // 34BC 0041;	
    // (㒼) CJK UNIFIED IDEOGRAPH-34BC	[FB80 B4BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_323)
{
    // 34BC 0062;	
    // (㒼) CJK UNIFIED IDEOGRAPH-34BC	[FB80 B4BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_324)
{
    // 34BD 0021;	
    // (㒽) CJK UNIFIED IDEOGRAPH-34BD	[FB80 B4BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_325)
{
    // 34BD 003F;	
    // (㒽) CJK UNIFIED IDEOGRAPH-34BD	[FB80 B4BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_326)
{
    // 34BD 0061;	
    // (㒽) CJK UNIFIED IDEOGRAPH-34BD	[FB80 B4BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_327)
{
    // 34BD 0041;	
    // (㒽) CJK UNIFIED IDEOGRAPH-34BD	[FB80 B4BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_328)
{
    // 34BD 0062;	
    // (㒽) CJK UNIFIED IDEOGRAPH-34BD	[FB80 B4BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_329)
{
    // 34BE 0021;	
    // (㒾) CJK UNIFIED IDEOGRAPH-34BE	[FB80 B4BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_330)
{
    // 34BE 003F;	
    // (㒾) CJK UNIFIED IDEOGRAPH-34BE	[FB80 B4BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_331)
{
    // 34BE 0061;	
    // (㒾) CJK UNIFIED IDEOGRAPH-34BE	[FB80 B4BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_332)
{
    // 34BE 0041;	
    // (㒾) CJK UNIFIED IDEOGRAPH-34BE	[FB80 B4BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_333)
{
    // 34BE 0062;	
    // (㒾) CJK UNIFIED IDEOGRAPH-34BE	[FB80 B4BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_334)
{
    // 34BF 0021;	
    // (㒿) CJK UNIFIED IDEOGRAPH-34BF	[FB80 B4BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_335)
{
    // 34BF 003F;	
    // (㒿) CJK UNIFIED IDEOGRAPH-34BF	[FB80 B4BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_336)
{
    // 34BF 0061;	
    // (㒿) CJK UNIFIED IDEOGRAPH-34BF	[FB80 B4BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_337)
{
    // 34BF 0041;	
    // (㒿) CJK UNIFIED IDEOGRAPH-34BF	[FB80 B4BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_338)
{
    // 34BF 0062;	
    // (㒿) CJK UNIFIED IDEOGRAPH-34BF	[FB80 B4BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_339)
{
    // 34C0 0021;	
    // (㓀) CJK UNIFIED IDEOGRAPH-34C0	[FB80 B4C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_340)
{
    // 34C0 003F;	
    // (㓀) CJK UNIFIED IDEOGRAPH-34C0	[FB80 B4C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_341)
{
    // 34C0 0061;	
    // (㓀) CJK UNIFIED IDEOGRAPH-34C0	[FB80 B4C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_342)
{
    // 34C0 0041;	
    // (㓀) CJK UNIFIED IDEOGRAPH-34C0	[FB80 B4C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_343)
{
    // 34C0 0062;	
    // (㓀) CJK UNIFIED IDEOGRAPH-34C0	[FB80 B4C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_344)
{
    // 34C1 0021;	
    // (㓁) CJK UNIFIED IDEOGRAPH-34C1	[FB80 B4C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_345)
{
    // 34C1 003F;	
    // (㓁) CJK UNIFIED IDEOGRAPH-34C1	[FB80 B4C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_346)
{
    // 34C1 0061;	
    // (㓁) CJK UNIFIED IDEOGRAPH-34C1	[FB80 B4C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_347)
{
    // 34C1 0041;	
    // (㓁) CJK UNIFIED IDEOGRAPH-34C1	[FB80 B4C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_348)
{
    // 34C1 0062;	
    // (㓁) CJK UNIFIED IDEOGRAPH-34C1	[FB80 B4C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_349)
{
    // 34C2 0021;	
    // (㓂) CJK UNIFIED IDEOGRAPH-34C2	[FB80 B4C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_350)
{
    // 34C2 003F;	
    // (㓂) CJK UNIFIED IDEOGRAPH-34C2	[FB80 B4C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_351)
{
    // 34C2 0061;	
    // (㓂) CJK UNIFIED IDEOGRAPH-34C2	[FB80 B4C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_352)
{
    // 34C2 0041;	
    // (㓂) CJK UNIFIED IDEOGRAPH-34C2	[FB80 B4C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_353)
{
    // 34C2 0062;	
    // (㓂) CJK UNIFIED IDEOGRAPH-34C2	[FB80 B4C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_354)
{
    // 34C3 0021;	
    // (㓃) CJK UNIFIED IDEOGRAPH-34C3	[FB80 B4C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_355)
{
    // 34C3 003F;	
    // (㓃) CJK UNIFIED IDEOGRAPH-34C3	[FB80 B4C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_356)
{
    // 34C3 0061;	
    // (㓃) CJK UNIFIED IDEOGRAPH-34C3	[FB80 B4C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_357)
{
    // 34C3 0041;	
    // (㓃) CJK UNIFIED IDEOGRAPH-34C3	[FB80 B4C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_358)
{
    // 34C3 0062;	
    // (㓃) CJK UNIFIED IDEOGRAPH-34C3	[FB80 B4C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_359)
{
    // 34C4 0021;	
    // (㓄) CJK UNIFIED IDEOGRAPH-34C4	[FB80 B4C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_360)
{
    // 34C4 003F;	
    // (㓄) CJK UNIFIED IDEOGRAPH-34C4	[FB80 B4C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_361)
{
    // 34C4 0061;	
    // (㓄) CJK UNIFIED IDEOGRAPH-34C4	[FB80 B4C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_362)
{
    // 34C4 0041;	
    // (㓄) CJK UNIFIED IDEOGRAPH-34C4	[FB80 B4C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_363)
{
    // 34C4 0062;	
    // (㓄) CJK UNIFIED IDEOGRAPH-34C4	[FB80 B4C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_364)
{
    // 34C5 0021;	
    // (㓅) CJK UNIFIED IDEOGRAPH-34C5	[FB80 B4C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_365)
{
    // 34C5 003F;	
    // (㓅) CJK UNIFIED IDEOGRAPH-34C5	[FB80 B4C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_366)
{
    // 34C5 0061;	
    // (㓅) CJK UNIFIED IDEOGRAPH-34C5	[FB80 B4C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_367)
{
    // 34C5 0041;	
    // (㓅) CJK UNIFIED IDEOGRAPH-34C5	[FB80 B4C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_368)
{
    // 34C5 0062;	
    // (㓅) CJK UNIFIED IDEOGRAPH-34C5	[FB80 B4C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_369)
{
    // 34C6 0021;	
    // (㓆) CJK UNIFIED IDEOGRAPH-34C6	[FB80 B4C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_370)
{
    // 34C6 003F;	
    // (㓆) CJK UNIFIED IDEOGRAPH-34C6	[FB80 B4C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_371)
{
    // 34C6 0061;	
    // (㓆) CJK UNIFIED IDEOGRAPH-34C6	[FB80 B4C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_372)
{
    // 34C6 0041;	
    // (㓆) CJK UNIFIED IDEOGRAPH-34C6	[FB80 B4C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_373)
{
    // 34C6 0062;	
    // (㓆) CJK UNIFIED IDEOGRAPH-34C6	[FB80 B4C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_374)
{
    // 34C7 0021;	
    // (㓇) CJK UNIFIED IDEOGRAPH-34C7	[FB80 B4C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_375)
{
    // 34C7 003F;	
    // (㓇) CJK UNIFIED IDEOGRAPH-34C7	[FB80 B4C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_376)
{
    // 34C7 0061;	
    // (㓇) CJK UNIFIED IDEOGRAPH-34C7	[FB80 B4C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_377)
{
    // 34C7 0041;	
    // (㓇) CJK UNIFIED IDEOGRAPH-34C7	[FB80 B4C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_378)
{
    // 34C7 0062;	
    // (㓇) CJK UNIFIED IDEOGRAPH-34C7	[FB80 B4C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_379)
{
    // 34C8 0021;	
    // (㓈) CJK UNIFIED IDEOGRAPH-34C8	[FB80 B4C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_380)
{
    // 34C8 003F;	
    // (㓈) CJK UNIFIED IDEOGRAPH-34C8	[FB80 B4C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_381)
{
    // 34C8 0061;	
    // (㓈) CJK UNIFIED IDEOGRAPH-34C8	[FB80 B4C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_382)
{
    // 34C8 0041;	
    // (㓈) CJK UNIFIED IDEOGRAPH-34C8	[FB80 B4C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_383)
{
    // 34C8 0062;	
    // (㓈) CJK UNIFIED IDEOGRAPH-34C8	[FB80 B4C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_384)
{
    // 34C9 0021;	
    // (㓉) CJK UNIFIED IDEOGRAPH-34C9	[FB80 B4C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_385)
{
    // 34C9 003F;	
    // (㓉) CJK UNIFIED IDEOGRAPH-34C9	[FB80 B4C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_386)
{
    // 34C9 0061;	
    // (㓉) CJK UNIFIED IDEOGRAPH-34C9	[FB80 B4C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_387)
{
    // 34C9 0041;	
    // (㓉) CJK UNIFIED IDEOGRAPH-34C9	[FB80 B4C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_388)
{
    // 34C9 0062;	
    // (㓉) CJK UNIFIED IDEOGRAPH-34C9	[FB80 B4C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_389)
{
    // 34CA 0021;	
    // (㓊) CJK UNIFIED IDEOGRAPH-34CA	[FB80 B4CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_390)
{
    // 34CA 003F;	
    // (㓊) CJK UNIFIED IDEOGRAPH-34CA	[FB80 B4CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_391)
{
    // 34CA 0061;	
    // (㓊) CJK UNIFIED IDEOGRAPH-34CA	[FB80 B4CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_392)
{
    // 34CA 0041;	
    // (㓊) CJK UNIFIED IDEOGRAPH-34CA	[FB80 B4CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_393)
{
    // 34CA 0062;	
    // (㓊) CJK UNIFIED IDEOGRAPH-34CA	[FB80 B4CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_394)
{
    // 34CB 0021;	
    // (㓋) CJK UNIFIED IDEOGRAPH-34CB	[FB80 B4CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_395)
{
    // 34CB 003F;	
    // (㓋) CJK UNIFIED IDEOGRAPH-34CB	[FB80 B4CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_396)
{
    // 34CB 0061;	
    // (㓋) CJK UNIFIED IDEOGRAPH-34CB	[FB80 B4CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_397)
{
    // 34CB 0041;	
    // (㓋) CJK UNIFIED IDEOGRAPH-34CB	[FB80 B4CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_398)
{
    // 34CB 0062;	
    // (㓋) CJK UNIFIED IDEOGRAPH-34CB	[FB80 B4CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_399)
{
    // 34CC 0021;	
    // (㓌) CJK UNIFIED IDEOGRAPH-34CC	[FB80 B4CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_400)
{
    // 34CC 003F;	
    // (㓌) CJK UNIFIED IDEOGRAPH-34CC	[FB80 B4CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_401)
{
    // 34CC 0061;	
    // (㓌) CJK UNIFIED IDEOGRAPH-34CC	[FB80 B4CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_402)
{
    // 34CC 0041;	
    // (㓌) CJK UNIFIED IDEOGRAPH-34CC	[FB80 B4CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_403)
{
    // 34CC 0062;	
    // (㓌) CJK UNIFIED IDEOGRAPH-34CC	[FB80 B4CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_404)
{
    // 34CD 0021;	
    // (㓍) CJK UNIFIED IDEOGRAPH-34CD	[FB80 B4CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_405)
{
    // 34CD 003F;	
    // (㓍) CJK UNIFIED IDEOGRAPH-34CD	[FB80 B4CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_406)
{
    // 34CD 0061;	
    // (㓍) CJK UNIFIED IDEOGRAPH-34CD	[FB80 B4CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_407)
{
    // 34CD 0041;	
    // (㓍) CJK UNIFIED IDEOGRAPH-34CD	[FB80 B4CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_408)
{
    // 34CD 0062;	
    // (㓍) CJK UNIFIED IDEOGRAPH-34CD	[FB80 B4CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_409)
{
    // 34CE 0021;	
    // (㓎) CJK UNIFIED IDEOGRAPH-34CE	[FB80 B4CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_410)
{
    // 34CE 003F;	
    // (㓎) CJK UNIFIED IDEOGRAPH-34CE	[FB80 B4CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_411)
{
    // 34CE 0061;	
    // (㓎) CJK UNIFIED IDEOGRAPH-34CE	[FB80 B4CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_412)
{
    // 34CE 0041;	
    // (㓎) CJK UNIFIED IDEOGRAPH-34CE	[FB80 B4CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_413)
{
    // 34CE 0062;	
    // (㓎) CJK UNIFIED IDEOGRAPH-34CE	[FB80 B4CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_414)
{
    // 34CF 0021;	
    // (㓏) CJK UNIFIED IDEOGRAPH-34CF	[FB80 B4CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_415)
{
    // 34CF 003F;	
    // (㓏) CJK UNIFIED IDEOGRAPH-34CF	[FB80 B4CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_416)
{
    // 34CF 0061;	
    // (㓏) CJK UNIFIED IDEOGRAPH-34CF	[FB80 B4CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_417)
{
    // 34CF 0041;	
    // (㓏) CJK UNIFIED IDEOGRAPH-34CF	[FB80 B4CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_418)
{
    // 34CF 0062;	
    // (㓏) CJK UNIFIED IDEOGRAPH-34CF	[FB80 B4CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_419)
{
    // 34D0 0021;	
    // (㓐) CJK UNIFIED IDEOGRAPH-34D0	[FB80 B4D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_420)
{
    // 34D0 003F;	
    // (㓐) CJK UNIFIED IDEOGRAPH-34D0	[FB80 B4D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_421)
{
    // 34D0 0061;	
    // (㓐) CJK UNIFIED IDEOGRAPH-34D0	[FB80 B4D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_422)
{
    // 34D0 0041;	
    // (㓐) CJK UNIFIED IDEOGRAPH-34D0	[FB80 B4D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_423)
{
    // 34D0 0062;	
    // (㓐) CJK UNIFIED IDEOGRAPH-34D0	[FB80 B4D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_424)
{
    // 34D1 0021;	
    // (㓑) CJK UNIFIED IDEOGRAPH-34D1	[FB80 B4D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_425)
{
    // 34D1 003F;	
    // (㓑) CJK UNIFIED IDEOGRAPH-34D1	[FB80 B4D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_426)
{
    // 34D1 0061;	
    // (㓑) CJK UNIFIED IDEOGRAPH-34D1	[FB80 B4D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_427)
{
    // 34D1 0041;	
    // (㓑) CJK UNIFIED IDEOGRAPH-34D1	[FB80 B4D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_428)
{
    // 34D1 0062;	
    // (㓑) CJK UNIFIED IDEOGRAPH-34D1	[FB80 B4D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_429)
{
    // 34D2 0021;	
    // (㓒) CJK UNIFIED IDEOGRAPH-34D2	[FB80 B4D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_430)
{
    // 34D2 003F;	
    // (㓒) CJK UNIFIED IDEOGRAPH-34D2	[FB80 B4D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_431)
{
    // 34D2 0061;	
    // (㓒) CJK UNIFIED IDEOGRAPH-34D2	[FB80 B4D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_432)
{
    // 34D2 0041;	
    // (㓒) CJK UNIFIED IDEOGRAPH-34D2	[FB80 B4D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_433)
{
    // 34D2 0062;	
    // (㓒) CJK UNIFIED IDEOGRAPH-34D2	[FB80 B4D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_434)
{
    // 34D3 0021;	
    // (㓓) CJK UNIFIED IDEOGRAPH-34D3	[FB80 B4D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_435)
{
    // 34D3 003F;	
    // (㓓) CJK UNIFIED IDEOGRAPH-34D3	[FB80 B4D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_436)
{
    // 34D3 0061;	
    // (㓓) CJK UNIFIED IDEOGRAPH-34D3	[FB80 B4D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_437)
{
    // 34D3 0041;	
    // (㓓) CJK UNIFIED IDEOGRAPH-34D3	[FB80 B4D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_438)
{
    // 34D3 0062;	
    // (㓓) CJK UNIFIED IDEOGRAPH-34D3	[FB80 B4D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_439)
{
    // 34D4 0021;	
    // (㓔) CJK UNIFIED IDEOGRAPH-34D4	[FB80 B4D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_440)
{
    // 34D4 003F;	
    // (㓔) CJK UNIFIED IDEOGRAPH-34D4	[FB80 B4D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_441)
{
    // 34D4 0061;	
    // (㓔) CJK UNIFIED IDEOGRAPH-34D4	[FB80 B4D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_442)
{
    // 34D4 0041;	
    // (㓔) CJK UNIFIED IDEOGRAPH-34D4	[FB80 B4D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_443)
{
    // 34D4 0062;	
    // (㓔) CJK UNIFIED IDEOGRAPH-34D4	[FB80 B4D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_444)
{
    // 34D5 0021;	
    // (㓕) CJK UNIFIED IDEOGRAPH-34D5	[FB80 B4D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_445)
{
    // 34D5 003F;	
    // (㓕) CJK UNIFIED IDEOGRAPH-34D5	[FB80 B4D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_446)
{
    // 34D5 0061;	
    // (㓕) CJK UNIFIED IDEOGRAPH-34D5	[FB80 B4D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_447)
{
    // 34D5 0041;	
    // (㓕) CJK UNIFIED IDEOGRAPH-34D5	[FB80 B4D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_448)
{
    // 34D5 0062;	
    // (㓕) CJK UNIFIED IDEOGRAPH-34D5	[FB80 B4D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_449)
{
    // 34D6 0021;	
    // (㓖) CJK UNIFIED IDEOGRAPH-34D6	[FB80 B4D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_450)
{
    // 34D6 003F;	
    // (㓖) CJK UNIFIED IDEOGRAPH-34D6	[FB80 B4D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_451)
{
    // 34D6 0061;	
    // (㓖) CJK UNIFIED IDEOGRAPH-34D6	[FB80 B4D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_452)
{
    // 34D6 0041;	
    // (㓖) CJK UNIFIED IDEOGRAPH-34D6	[FB80 B4D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_453)
{
    // 34D6 0062;	
    // (㓖) CJK UNIFIED IDEOGRAPH-34D6	[FB80 B4D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_454)
{
    // 34D7 0021;	
    // (㓗) CJK UNIFIED IDEOGRAPH-34D7	[FB80 B4D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_455)
{
    // 34D7 003F;	
    // (㓗) CJK UNIFIED IDEOGRAPH-34D7	[FB80 B4D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_456)
{
    // 34D7 0061;	
    // (㓗) CJK UNIFIED IDEOGRAPH-34D7	[FB80 B4D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_457)
{
    // 34D7 0041;	
    // (㓗) CJK UNIFIED IDEOGRAPH-34D7	[FB80 B4D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_458)
{
    // 34D7 0062;	
    // (㓗) CJK UNIFIED IDEOGRAPH-34D7	[FB80 B4D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_459)
{
    // 34D8 0021;	
    // (㓘) CJK UNIFIED IDEOGRAPH-34D8	[FB80 B4D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_460)
{
    // 34D8 003F;	
    // (㓘) CJK UNIFIED IDEOGRAPH-34D8	[FB80 B4D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_461)
{
    // 34D8 0061;	
    // (㓘) CJK UNIFIED IDEOGRAPH-34D8	[FB80 B4D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_462)
{
    // 34D8 0041;	
    // (㓘) CJK UNIFIED IDEOGRAPH-34D8	[FB80 B4D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_463)
{
    // 34D8 0062;	
    // (㓘) CJK UNIFIED IDEOGRAPH-34D8	[FB80 B4D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_464)
{
    // 34D9 0021;	
    // (㓙) CJK UNIFIED IDEOGRAPH-34D9	[FB80 B4D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_465)
{
    // 34D9 003F;	
    // (㓙) CJK UNIFIED IDEOGRAPH-34D9	[FB80 B4D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_466)
{
    // 34D9 0061;	
    // (㓙) CJK UNIFIED IDEOGRAPH-34D9	[FB80 B4D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_467)
{
    // 34D9 0041;	
    // (㓙) CJK UNIFIED IDEOGRAPH-34D9	[FB80 B4D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_468)
{
    // 34D9 0062;	
    // (㓙) CJK UNIFIED IDEOGRAPH-34D9	[FB80 B4D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_469)
{
    // 34DA 0021;	
    // (㓚) CJK UNIFIED IDEOGRAPH-34DA	[FB80 B4DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_470)
{
    // 34DA 003F;	
    // (㓚) CJK UNIFIED IDEOGRAPH-34DA	[FB80 B4DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_471)
{
    // 34DA 0061;	
    // (㓚) CJK UNIFIED IDEOGRAPH-34DA	[FB80 B4DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_472)
{
    // 34DA 0041;	
    // (㓚) CJK UNIFIED IDEOGRAPH-34DA	[FB80 B4DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_473)
{
    // 34DA 0062;	
    // (㓚) CJK UNIFIED IDEOGRAPH-34DA	[FB80 B4DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_474)
{
    // 34DB 0021;	
    // (㓛) CJK UNIFIED IDEOGRAPH-34DB	[FB80 B4DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_475)
{
    // 34DB 003F;	
    // (㓛) CJK UNIFIED IDEOGRAPH-34DB	[FB80 B4DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_476)
{
    // 34DB 0061;	
    // (㓛) CJK UNIFIED IDEOGRAPH-34DB	[FB80 B4DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_477)
{
    // 34DB 0041;	
    // (㓛) CJK UNIFIED IDEOGRAPH-34DB	[FB80 B4DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_478)
{
    // 34DB 0062;	
    // (㓛) CJK UNIFIED IDEOGRAPH-34DB	[FB80 B4DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_479)
{
    // 34DC 0021;	
    // (㓜) CJK UNIFIED IDEOGRAPH-34DC	[FB80 B4DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_480)
{
    // 34DC 003F;	
    // (㓜) CJK UNIFIED IDEOGRAPH-34DC	[FB80 B4DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_481)
{
    // 34DC 0061;	
    // (㓜) CJK UNIFIED IDEOGRAPH-34DC	[FB80 B4DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_482)
{
    // 34DC 0041;	
    // (㓜) CJK UNIFIED IDEOGRAPH-34DC	[FB80 B4DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_483)
{
    // 34DC 0062;	
    // (㓜) CJK UNIFIED IDEOGRAPH-34DC	[FB80 B4DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_484)
{
    // 34DD 0021;	
    // (㓝) CJK UNIFIED IDEOGRAPH-34DD	[FB80 B4DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_485)
{
    // 34DD 003F;	
    // (㓝) CJK UNIFIED IDEOGRAPH-34DD	[FB80 B4DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_486)
{
    // 34DD 0061;	
    // (㓝) CJK UNIFIED IDEOGRAPH-34DD	[FB80 B4DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_487)
{
    // 34DD 0041;	
    // (㓝) CJK UNIFIED IDEOGRAPH-34DD	[FB80 B4DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_488)
{
    // 34DD 0062;	
    // (㓝) CJK UNIFIED IDEOGRAPH-34DD	[FB80 B4DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_489)
{
    // 34DE 0021;	
    // (㓞) CJK UNIFIED IDEOGRAPH-34DE	[FB80 B4DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_490)
{
    // 34DE 003F;	
    // (㓞) CJK UNIFIED IDEOGRAPH-34DE	[FB80 B4DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_491)
{
    // 34DE 0061;	
    // (㓞) CJK UNIFIED IDEOGRAPH-34DE	[FB80 B4DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_492)
{
    // 34DE 0041;	
    // (㓞) CJK UNIFIED IDEOGRAPH-34DE	[FB80 B4DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x34DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_493)
{
    // 34DE 0062;	
    // (㓞) CJK UNIFIED IDEOGRAPH-34DE	[FB80 B4DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_494)
{
    // 34DF 0021;	
    // (㓟) CJK UNIFIED IDEOGRAPH-34DF	[FB80 B4DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_495)
{
    // 2F81F 0021;	
    // (㓟) CJK COMPATIBILITY IDEOGRAPH-2F81F	[FB80 B4DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_496)
{
    // 34DF 003F;	
    // (㓟) CJK UNIFIED IDEOGRAPH-34DF	[FB80 B4DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_497)
{
    // 2F81F 003F;	
    // (㓟) CJK COMPATIBILITY IDEOGRAPH-2F81F	[FB80 B4DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB4DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_498)
{
    // 34DF 0061;	
    // (㓟) CJK UNIFIED IDEOGRAPH-34DF	[FB80 B4DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x34DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_328_499)
{
    // 2F81F 0061;	
    // (㓟) CJK COMPATIBILITY IDEOGRAPH-2F81F	[FB80 B4DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB4DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

