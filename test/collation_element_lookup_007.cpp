// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_007_000)
{
    // 041E  ; [.214D.0020.0008] 
    // CYRILLIC CAPITAL LETTER O

    uint32_t const cps[1] = { 0x41e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x214d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_001)
{
    // 041F  ; [.2155.0020.0008] 
    // CYRILLIC CAPITAL LETTER PE

    uint32_t const cps[1] = { 0x41f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2155), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_002)
{
    // 0420  ; [.2162.0020.0008] 
    // CYRILLIC CAPITAL LETTER ER

    uint32_t const cps[1] = { 0x420 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2162), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_003)
{
    // 0421  ; [.216B.0020.0008] 
    // CYRILLIC CAPITAL LETTER ES

    uint32_t const cps[1] = { 0x421 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x216b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_004)
{
    // 0422  ; [.2174.0020.0008] 
    // CYRILLIC CAPITAL LETTER TE

    uint32_t const cps[1] = { 0x422 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2174), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_005)
{
    // 0423  ; [.2183.0020.0008] 
    // CYRILLIC CAPITAL LETTER U

    uint32_t const cps[1] = { 0x423 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2183), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_006)
{
    // 0424  ; [.2194.0020.0008] 
    // CYRILLIC CAPITAL LETTER EF

    uint32_t const cps[1] = { 0x424 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2194), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_007)
{
    // 0425  ; [.2198.0020.0008] 
    // CYRILLIC CAPITAL LETTER HA

    uint32_t const cps[1] = { 0x425 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2198), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_008)
{
    // 0426  ; [.21BF.0020.0008] 
    // CYRILLIC CAPITAL LETTER TSE

    uint32_t const cps[1] = { 0x426 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21bf), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_009)
{
    // 0427  ; [.21CA.0020.0008] 
    // CYRILLIC CAPITAL LETTER CHE

    uint32_t const cps[1] = { 0x427 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21ca), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_010)
{
    // 0428  ; [.21E9.0020.0008] 
    // CYRILLIC CAPITAL LETTER SHA

    uint32_t const cps[1] = { 0x428 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21e9), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_011)
{
    // 0429  ; [.21EE.0020.0008] 
    // CYRILLIC CAPITAL LETTER SHCHA

    uint32_t const cps[1] = { 0x429 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21ee), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_012)
{
    // 042A  ; [.21F5.0020.0008] 
    // CYRILLIC CAPITAL LETTER HARD SIGN

    uint32_t const cps[1] = { 0x42a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21f5), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_013)
{
    // 042B  ; [.21FA.0020.0008] 
    // CYRILLIC CAPITAL LETTER YERU

    uint32_t const cps[1] = { 0x42b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21fa), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_014)
{
    // 042C  ; [.21FE.0020.0008] 
    // CYRILLIC CAPITAL LETTER SOFT SIGN

    uint32_t const cps[1] = { 0x42c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21fe), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_015)
{
    // 042D  ; [.220B.0020.0008] 
    // CYRILLIC CAPITAL LETTER E

    uint32_t const cps[1] = { 0x42d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x220b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_016)
{
    // 042E  ; [.220F.0020.0008] 
    // CYRILLIC CAPITAL LETTER YU

    uint32_t const cps[1] = { 0x42e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x220f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_017)
{
    // 042F  ; [.2215.0020.0008] 
    // CYRILLIC CAPITAL LETTER YA

    uint32_t const cps[1] = { 0x42f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2215), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_018)
{
    // 0430  ; [.2088.0020.0002] 
    // CYRILLIC SMALL LETTER A

    uint32_t const cps[1] = { 0x430 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2088), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_019)
{
    // 0431  ; [.2094.0020.0002] 
    // CYRILLIC SMALL LETTER BE

    uint32_t const cps[1] = { 0x431 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2094), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_020)
{
    // 0432  ; [.2098.0020.0002] 
    // CYRILLIC SMALL LETTER VE

    uint32_t const cps[1] = { 0x432 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2098), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_021)
{
    // 0433  ; [.209C.0020.0002] 
    // CYRILLIC SMALL LETTER GHE

    uint32_t const cps[1] = { 0x433 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x209c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_022)
{
    // 0434  ; [.20B0.0020.0002] 
    // CYRILLIC SMALL LETTER DE

    uint32_t const cps[1] = { 0x434 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_023)
{
    // 0435  ; [.20C0.0020.0002] 
    // CYRILLIC SMALL LETTER IE

    uint32_t const cps[1] = { 0x435 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_024)
{
    // 0436  ; [.20C8.0020.0002] 
    // CYRILLIC SMALL LETTER ZHE

    uint32_t const cps[1] = { 0x436 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_025)
{
    // 0437  ; [.20D2.0020.0002] 
    // CYRILLIC SMALL LETTER ZE

    uint32_t const cps[1] = { 0x437 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_026)
{
    // 0438  ; [.20E6.0020.0002] 
    // CYRILLIC SMALL LETTER I

    uint32_t const cps[1] = { 0x438 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_027)
{
    // 0438 0306 ; [.20F3.0020.0002] 
    // CYRILLIC SMALL LETTER SHORT I

    uint32_t const cps[1] = { 0x439 }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_028)
{
    // 0439  ; [.20F3.0020.0002] 
    // CYRILLIC SMALL LETTER SHORT I

    uint32_t const cps[1] = { 0x439 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_029)
{
    // 043A  ; [.20FC.0020.0002] 
    // CYRILLIC SMALL LETTER KA

    uint32_t const cps[1] = { 0x43a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_030)
{
    // 043B  ; [.2116.0020.0002] 
    // CYRILLIC SMALL LETTER EL

    uint32_t const cps[1] = { 0x43b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2116), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_031)
{
    // 043C  ; [.2129.0020.0002] 
    // CYRILLIC SMALL LETTER EM

    uint32_t const cps[1] = { 0x43c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2129), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_032)
{
    // 043D  ; [.2132.0020.0002] 
    // CYRILLIC SMALL LETTER EN

    uint32_t const cps[1] = { 0x43d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2132), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_033)
{
    // 043E  ; [.214D.0020.0002] 
    // CYRILLIC SMALL LETTER O

    uint32_t const cps[1] = { 0x43e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x214d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_034)
{
    // 043F  ; [.2155.0020.0002] 
    // CYRILLIC SMALL LETTER PE

    uint32_t const cps[1] = { 0x43f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2155), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_035)
{
    // 0440  ; [.2162.0020.0002] 
    // CYRILLIC SMALL LETTER ER

    uint32_t const cps[1] = { 0x440 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2162), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_036)
{
    // 0441  ; [.216B.0020.0002] 
    // CYRILLIC SMALL LETTER ES

    uint32_t const cps[1] = { 0x441 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x216b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_037)
{
    // 0442  ; [.2174.0020.0002] 
    // CYRILLIC SMALL LETTER TE

    uint32_t const cps[1] = { 0x442 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2174), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_038)
{
    // 0443  ; [.2183.0020.0002] 
    // CYRILLIC SMALL LETTER U

    uint32_t const cps[1] = { 0x443 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2183), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_039)
{
    // 0444  ; [.2194.0020.0002] 
    // CYRILLIC SMALL LETTER EF

    uint32_t const cps[1] = { 0x444 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2194), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_040)
{
    // 0445  ; [.2198.0020.0002] 
    // CYRILLIC SMALL LETTER HA

    uint32_t const cps[1] = { 0x445 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2198), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_041)
{
    // 0446  ; [.21BF.0020.0002] 
    // CYRILLIC SMALL LETTER TSE

    uint32_t const cps[1] = { 0x446 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_042)
{
    // 0447  ; [.21CA.0020.0002] 
    // CYRILLIC SMALL LETTER CHE

    uint32_t const cps[1] = { 0x447 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_043)
{
    // 0448  ; [.21E9.0020.0002] 
    // CYRILLIC SMALL LETTER SHA

    uint32_t const cps[1] = { 0x448 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_044)
{
    // 0449  ; [.21EE.0020.0002] 
    // CYRILLIC SMALL LETTER SHCHA

    uint32_t const cps[1] = { 0x449 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_045)
{
    // 044A  ; [.21F5.0020.0002] 
    // CYRILLIC SMALL LETTER HARD SIGN

    uint32_t const cps[1] = { 0x44a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_046)
{
    // 044B  ; [.21FA.0020.0002] 
    // CYRILLIC SMALL LETTER YERU

    uint32_t const cps[1] = { 0x44b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_047)
{
    // 044C  ; [.21FE.0020.0002] 
    // CYRILLIC SMALL LETTER SOFT SIGN

    uint32_t const cps[1] = { 0x44c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_048)
{
    // 044D  ; [.220B.0020.0002] 
    // CYRILLIC SMALL LETTER E

    uint32_t const cps[1] = { 0x44d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x220b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_049)
{
    // 044E  ; [.220F.0020.0002] 
    // CYRILLIC SMALL LETTER YU

    uint32_t const cps[1] = { 0x44e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x220f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_050)
{
    // 044F  ; [.2215.0020.0002] 
    // CYRILLIC SMALL LETTER YA

    uint32_t const cps[1] = { 0x44f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2215), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_051)
{
    // 0450  ; [.20C0.0020.0002][.0000.0025.0002] 
    // CYRILLIC SMALL LETTER IE WITH GRAVE

    uint32_t const cps[1] = { 0x450 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x20c0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_007_052)
{
    // 0451  ; [.20C0.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER IO

    uint32_t const cps[1] = { 0x451 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x20c0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_007_053)
{
    // 0452  ; [.20B6.0020.0002] 
    // CYRILLIC SMALL LETTER DJE

    uint32_t const cps[1] = { 0x452 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_054)
{
    // 0453  ; [.209C.0020.0002][.0000.0024.0002] 
    // CYRILLIC SMALL LETTER GJE

    uint32_t const cps[1] = { 0x453 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x209c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_007_055)
{
    // 0454  ; [.20C4.0020.0002] 
    // CYRILLIC SMALL LETTER UKRAINIAN IE

    uint32_t const cps[1] = { 0x454 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_056)
{
    // 0455  ; [.20DA.0020.0002] 
    // CYRILLIC SMALL LETTER DZE

    uint32_t const cps[1] = { 0x455 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_057)
{
    // 0456  ; [.20EE.0020.0002] 
    // CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I

    uint32_t const cps[1] = { 0x456 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_058)
{
    // 0457  ; [.20EE.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER YI

    uint32_t const cps[1] = { 0x457 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x20ee), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_007_059)
{
    // 0458  ; [.20F7.0020.0002] 
    // CYRILLIC SMALL LETTER JE

    uint32_t const cps[1] = { 0x458 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_060)
{
    // 0459  ; [.2122.0020.0002] 
    // CYRILLIC SMALL LETTER LJE

    uint32_t const cps[1] = { 0x459 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2122), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_061)
{
    // 045A  ; [.2148.0020.0002] 
    // CYRILLIC SMALL LETTER NJE

    uint32_t const cps[1] = { 0x45a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2148), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_062)
{
    // 045B  ; [.217F.0020.0002] 
    // CYRILLIC SMALL LETTER TSHE

    uint32_t const cps[1] = { 0x45b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x217f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_063)
{
    // 045C  ; [.20FC.0020.0002][.0000.0024.0002] 
    // CYRILLIC SMALL LETTER KJE

    uint32_t const cps[1] = { 0x45c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x20fc), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_007_064)
{
    // 045D  ; [.20E6.0020.0002][.0000.0025.0002] 
    // CYRILLIC SMALL LETTER I WITH GRAVE

    uint32_t const cps[1] = { 0x45d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x20e6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_007_065)
{
    // 045E  ; [.2183.0020.0002][.0000.0026.0002] 
    // CYRILLIC SMALL LETTER SHORT U

    uint32_t const cps[1] = { 0x45e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2183), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_007_066)
{
    // 045F  ; [.21E5.0020.0002] 
    // CYRILLIC SMALL LETTER DZHE

    uint32_t const cps[1] = { 0x45f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_067)
{
    // 0460  ; [.21AE.0020.0008] 
    // CYRILLIC CAPITAL LETTER OMEGA

    uint32_t const cps[1] = { 0x460 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21ae), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_068)
{
    // 0461  ; [.21AE.0020.0002] 
    // CYRILLIC SMALL LETTER OMEGA

    uint32_t const cps[1] = { 0x461 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_069)
{
    // 0462  ; [.2206.0020.0008] 
    // CYRILLIC CAPITAL LETTER YAT

    uint32_t const cps[1] = { 0x462 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2206), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_070)
{
    // 0463  ; [.2206.0020.0002] 
    // CYRILLIC SMALL LETTER YAT

    uint32_t const cps[1] = { 0x463 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2206), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_071)
{
    // 0464  ; [.221A.0020.0008] 
    // CYRILLIC CAPITAL LETTER IOTIFIED E

    uint32_t const cps[1] = { 0x464 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x221a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_072)
{
    // 0465  ; [.221A.0020.0002] 
    // CYRILLIC SMALL LETTER IOTIFIED E

    uint32_t const cps[1] = { 0x465 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x221a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_073)
{
    // 0466  ; [.221E.0020.0008] 
    // CYRILLIC CAPITAL LETTER LITTLE YUS

    uint32_t const cps[1] = { 0x466 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x221e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_074)
{
    // 0467  ; [.221E.0020.0002] 
    // CYRILLIC SMALL LETTER LITTLE YUS

    uint32_t const cps[1] = { 0x467 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x221e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_075)
{
    // 0468  ; [.2228.0020.0008] 
    // CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS

    uint32_t const cps[1] = { 0x468 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2228), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_076)
{
    // 0469  ; [.2228.0020.0002] 
    // CYRILLIC SMALL LETTER IOTIFIED LITTLE YUS

    uint32_t const cps[1] = { 0x469 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2228), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_077)
{
    // 046A  ; [.2223.0020.0008] 
    // CYRILLIC CAPITAL LETTER BIG YUS

    uint32_t const cps[1] = { 0x46a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2223), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_078)
{
    // 046B  ; [.2223.0020.0002] 
    // CYRILLIC SMALL LETTER BIG YUS

    uint32_t const cps[1] = { 0x46b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2223), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_079)
{
    // 046C  ; [.222D.0020.0008] 
    // CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS

    uint32_t const cps[1] = { 0x46c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x222d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_080)
{
    // 046D  ; [.222D.0020.0002] 
    // CYRILLIC SMALL LETTER IOTIFIED BIG YUS

    uint32_t const cps[1] = { 0x46d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x222d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_081)
{
    // 046E  ; [.2231.0020.0008] 
    // CYRILLIC CAPITAL LETTER KSI

    uint32_t const cps[1] = { 0x46e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2231), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_082)
{
    // 046F  ; [.2231.0020.0002] 
    // CYRILLIC SMALL LETTER KSI

    uint32_t const cps[1] = { 0x46f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2231), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_083)
{
    // 0470  ; [.2235.0020.0008] 
    // CYRILLIC CAPITAL LETTER PSI

    uint32_t const cps[1] = { 0x470 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2235), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_084)
{
    // 0471  ; [.2235.0020.0002] 
    // CYRILLIC SMALL LETTER PSI

    uint32_t const cps[1] = { 0x471 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2235), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_085)
{
    // 0472  ; [.2239.0020.0008] 
    // CYRILLIC CAPITAL LETTER FITA

    uint32_t const cps[1] = { 0x472 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2239), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_086)
{
    // 0473  ; [.2239.0020.0002] 
    // CYRILLIC SMALL LETTER FITA

    uint32_t const cps[1] = { 0x473 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2239), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_087)
{
    // 0474  ; [.223D.0020.0008] 
    // CYRILLIC CAPITAL LETTER IZHITSA

    uint32_t const cps[1] = { 0x474 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x223d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_088)
{
    // 0475  ; [.223D.0020.0002] 
    // CYRILLIC SMALL LETTER IZHITSA

    uint32_t const cps[1] = { 0x475 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x223d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_089)
{
    // 0476  ; [.223D.0020.0008][.0000.003C.0002] 
    // CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT

    uint32_t const cps[1] = { 0x476 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x223d), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_007_090)
{
    // 0477  ; [.223D.0020.0002][.0000.003C.0002] 
    // CYRILLIC SMALL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT

    uint32_t const cps[1] = { 0x477 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x223d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_007_091)
{
    // 0478  ; [.2190.0020.0008] 
    // CYRILLIC CAPITAL LETTER UK

    uint32_t const cps[1] = { 0x478 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2190), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_092)
{
    // 0479  ; [.2190.0020.0002] 
    // CYRILLIC SMALL LETTER UK

    uint32_t const cps[1] = { 0x479 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2190), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_093)
{
    // 047A  ; [.21BB.0020.0008] 
    // CYRILLIC CAPITAL LETTER ROUND OMEGA

    uint32_t const cps[1] = { 0x47a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21bb), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_094)
{
    // 047B  ; [.21BB.0020.0002] 
    // CYRILLIC SMALL LETTER ROUND OMEGA

    uint32_t const cps[1] = { 0x47b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_095)
{
    // 047C  ; [.21B7.0020.0008] 
    // CYRILLIC CAPITAL LETTER OMEGA WITH TITLO

    uint32_t const cps[1] = { 0x47c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21b7), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_096)
{
    // 047D  ; [.21B7.0020.0002] 
    // CYRILLIC SMALL LETTER OMEGA WITH TITLO

    uint32_t const cps[1] = { 0x47d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_097)
{
    // 047E  ; [.21B2.0020.0008] 
    // CYRILLIC CAPITAL LETTER OT

    uint32_t const cps[1] = { 0x47e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21b2), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_098)
{
    // 047F  ; [.21B2.0020.0002] 
    // CYRILLIC SMALL LETTER OT

    uint32_t const cps[1] = { 0x47f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_099)
{
    // 0480  ; [.215E.0020.0008] 
    // CYRILLIC CAPITAL LETTER KOPPA

    uint32_t const cps[1] = { 0x480 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x215e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_100)
{
    // 0481  ; [.215E.0020.0002] 
    // CYRILLIC SMALL LETTER KOPPA

    uint32_t const cps[1] = { 0x481 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x215e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_101)
{
    // 0482  ; [*050D.0020.0002] 
    // CYRILLIC THOUSANDS SIGN

    uint32_t const cps[1] = { 0x482 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x50d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_102)
{
    // 0483  ; [.0000.0050.0002] 
    // COMBINING CYRILLIC TITLO

    uint32_t const cps[1] = { 0x483 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x30), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_103)
{
    // 0484  ; [.0000.0033.0002] 
    // COMBINING CYRILLIC PALATALIZATION

    uint32_t const cps[1] = { 0x484 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_104)
{
    // 0485  ; [.0000.0023.0002] 
    // COMBINING CYRILLIC DASIA PNEUMATA

    uint32_t const cps[1] = { 0x485 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_105)
{
    // 0486  ; [.0000.0022.0002] 
    // COMBINING CYRILLIC PSILI PNEUMATA

    uint32_t const cps[1] = { 0x486 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_106)
{
    // 0487  ; [.0000.0033.0002] 
    // COMBINING CYRILLIC POKRYTIE

    uint32_t const cps[1] = { 0x487 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_107)
{
    // 0488  ; [.0000.0000.0000] 
    // COMBINING CYRILLIC HUNDRED THOUSANDS SIGN

    uint32_t const cps[1] = { 0x488 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_108)
{
    // 0489  ; [.0000.0000.0000] 
    // COMBINING CYRILLIC MILLIONS SIGN

    uint32_t const cps[1] = { 0x489 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_109)
{
    // 048A  ; [.20EA.0020.0008] 
    // CYRILLIC CAPITAL LETTER SHORT I WITH TAIL

    uint32_t const cps[1] = { 0x48a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20ea), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_110)
{
    // 048B  ; [.20EA.0020.0002] 
    // CYRILLIC SMALL LETTER SHORT I WITH TAIL

    uint32_t const cps[1] = { 0x48b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_111)
{
    // 048C  ; [.2202.0020.0008] 
    // CYRILLIC CAPITAL LETTER SEMISOFT SIGN

    uint32_t const cps[1] = { 0x48c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2202), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_112)
{
    // 048D  ; [.2202.0020.0002] 
    // CYRILLIC SMALL LETTER SEMISOFT SIGN

    uint32_t const cps[1] = { 0x48d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2202), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_113)
{
    // 048E  ; [.2166.0020.0008] 
    // CYRILLIC CAPITAL LETTER ER WITH TICK

    uint32_t const cps[1] = { 0x48e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2166), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_114)
{
    // 048F  ; [.2166.0020.0002] 
    // CYRILLIC SMALL LETTER ER WITH TICK

    uint32_t const cps[1] = { 0x48f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2166), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_115)
{
    // 0490  ; [.209C.0020.000A][.0000.0112.0004] 
    // CYRILLIC CAPITAL LETTER GHE WITH UPTURN

    uint32_t const cps[1] = { 0x490 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x209c), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_007_116)
{
    // 0491  ; [.209C.0020.0004][.0000.0112.0004] 
    // CYRILLIC SMALL LETTER GHE WITH UPTURN

    uint32_t const cps[1] = { 0x491 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x209c), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_007_117)
{
    // 0492  ; [.20A0.0020.0008] 
    // CYRILLIC CAPITAL LETTER GHE WITH STROKE

    uint32_t const cps[1] = { 0x492 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20a0), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_118)
{
    // 0493  ; [.20A0.0020.0002] 
    // CYRILLIC SMALL LETTER GHE WITH STROKE

    uint32_t const cps[1] = { 0x493 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_119)
{
    // 0494  ; [.20A8.0020.0008] 
    // CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK

    uint32_t const cps[1] = { 0x494 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20a8), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_120)
{
    // 0495  ; [.20A8.0020.0002] 
    // CYRILLIC SMALL LETTER GHE WITH MIDDLE HOOK

    uint32_t const cps[1] = { 0x495 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_121)
{
    // 0496  ; [.20CE.0020.0008] 
    // CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER

    uint32_t const cps[1] = { 0x496 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20ce), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_122)
{
    // 0497  ; [.20CE.0020.0002] 
    // CYRILLIC SMALL LETTER ZHE WITH DESCENDER

    uint32_t const cps[1] = { 0x497 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_123)
{
    // 0498  ; [.20BC.0020.0008] 
    // CYRILLIC CAPITAL LETTER ZE WITH DESCENDER

    uint32_t const cps[1] = { 0x498 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20bc), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_124)
{
    // 0499  ; [.20BC.0020.0002] 
    // CYRILLIC SMALL LETTER ZE WITH DESCENDER

    uint32_t const cps[1] = { 0x499 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x20bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_125)
{
    // 049A  ; [.2100.0020.0008] 
    // CYRILLIC CAPITAL LETTER KA WITH DESCENDER

    uint32_t const cps[1] = { 0x49a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2100), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_126)
{
    // 049B  ; [.2100.0020.0002] 
    // CYRILLIC SMALL LETTER KA WITH DESCENDER

    uint32_t const cps[1] = { 0x49b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2100), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_127)
{
    // 049C  ; [.2110.0020.0008] 
    // CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x49c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2110), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_128)
{
    // 049D  ; [.2110.0020.0002] 
    // CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x49d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2110), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_129)
{
    // 049E  ; [.210C.0020.0008] 
    // CYRILLIC CAPITAL LETTER KA WITH STROKE

    uint32_t const cps[1] = { 0x49e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x210c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_130)
{
    // 049F  ; [.210C.0020.0002] 
    // CYRILLIC SMALL LETTER KA WITH STROKE

    uint32_t const cps[1] = { 0x49f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x210c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_131)
{
    // 04A0  ; [.2108.0020.0008] 
    // CYRILLIC CAPITAL LETTER BASHKIR KA

    uint32_t const cps[1] = { 0x4a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2108), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_132)
{
    // 04A1  ; [.2108.0020.0002] 
    // CYRILLIC SMALL LETTER BASHKIR KA

    uint32_t const cps[1] = { 0x4a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2108), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_133)
{
    // 04A2  ; [.213B.0020.0008] 
    // CYRILLIC CAPITAL LETTER EN WITH DESCENDER

    uint32_t const cps[1] = { 0x4a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x213b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_134)
{
    // 04A3  ; [.213B.0020.0002] 
    // CYRILLIC SMALL LETTER EN WITH DESCENDER

    uint32_t const cps[1] = { 0x4a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x213b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_135)
{
    // 04A4  ; [.2144.0020.0008] 
    // CYRILLIC CAPITAL LIGATURE EN GHE

    uint32_t const cps[1] = { 0x4a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2144), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_136)
{
    // 04A5  ; [.2144.0020.0002] 
    // CYRILLIC SMALL LIGATURE EN GHE

    uint32_t const cps[1] = { 0x4a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2144), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_137)
{
    // 04A6  ; [.215A.0020.0008] 
    // CYRILLIC CAPITAL LETTER PE WITH MIDDLE HOOK

    uint32_t const cps[1] = { 0x4a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x215a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_138)
{
    // 04A7  ; [.215A.0020.0002] 
    // CYRILLIC SMALL LETTER PE WITH MIDDLE HOOK

    uint32_t const cps[1] = { 0x4a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x215a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_139)
{
    // 04A8  ; [.2242.0020.0008] 
    // CYRILLIC CAPITAL LETTER ABKHASIAN HA

    uint32_t const cps[1] = { 0x4a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2242), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_140)
{
    // 04A9  ; [.2242.0020.0002] 
    // CYRILLIC SMALL LETTER ABKHASIAN HA

    uint32_t const cps[1] = { 0x4a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2242), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_141)
{
    // 04AA  ; [.2170.0020.0008] 
    // CYRILLIC CAPITAL LETTER ES WITH DESCENDER

    uint32_t const cps[1] = { 0x4aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2170), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_142)
{
    // 04AB  ; [.2170.0020.0002] 
    // CYRILLIC SMALL LETTER ES WITH DESCENDER

    uint32_t const cps[1] = { 0x4ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2170), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_143)
{
    // 04AC  ; [.217A.0020.0008] 
    // CYRILLIC CAPITAL LETTER TE WITH DESCENDER

    uint32_t const cps[1] = { 0x4ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x217a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_144)
{
    // 04AD  ; [.217A.0020.0002] 
    // CYRILLIC SMALL LETTER TE WITH DESCENDER

    uint32_t const cps[1] = { 0x4ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x217a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_145)
{
    // 04AE  ; [.2187.0020.0008] 
    // CYRILLIC CAPITAL LETTER STRAIGHT U

    uint32_t const cps[1] = { 0x4ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2187), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_146)
{
    // 04AF  ; [.2187.0020.0002] 
    // CYRILLIC SMALL LETTER STRAIGHT U

    uint32_t const cps[1] = { 0x4af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2187), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_147)
{
    // 04B0  ; [.218B.0020.0008] 
    // CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE

    uint32_t const cps[1] = { 0x4b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x218b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_148)
{
    // 04B1  ; [.218B.0020.0002] 
    // CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE

    uint32_t const cps[1] = { 0x4b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x218b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_007_149)
{
    // 04B2  ; [.21A4.0020.0008] 
    // CYRILLIC CAPITAL LETTER HA WITH DESCENDER

    uint32_t const cps[1] = { 0x4b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x21a4), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

