// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_251_000)
{
    // 1B048 003F;	
    // (õÅà) HENTAIGANA LETTER SI-5	[3EE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B048, 0x003F };
    uint32_t const ces[9] = { 0x3EE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_001)
{
    // 1B048 0061;	
    // (õÅà) HENTAIGANA LETTER SI-5	[3EE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B048, 0x0061 };
    uint32_t const ces[9] = { 0x3EE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_002)
{
    // 1B048 0041;	
    // (õÅà) HENTAIGANA LETTER SI-5	[3EE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B048, 0x0041 };
    uint32_t const ces[9] = { 0x3EE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_003)
{
    // 1B048 0062;	
    // (õÅà) HENTAIGANA LETTER SI-5	[3EE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B048, 0x0062 };
    uint32_t const ces[9] = { 0x3EE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_004)
{
    // 1B049 0021;	
    // (õÅâ) HENTAIGANA LETTER SI-6	[3EEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B049, 0x0021 };
    uint32_t const ces[9] = { 0x3EEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_005)
{
    // 1B049 003F;	
    // (õÅâ) HENTAIGANA LETTER SI-6	[3EEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B049, 0x003F };
    uint32_t const ces[9] = { 0x3EEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_006)
{
    // 1B049 0061;	
    // (õÅâ) HENTAIGANA LETTER SI-6	[3EEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B049, 0x0061 };
    uint32_t const ces[9] = { 0x3EEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_007)
{
    // 1B049 0041;	
    // (õÅâ) HENTAIGANA LETTER SI-6	[3EEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B049, 0x0041 };
    uint32_t const ces[9] = { 0x3EEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_008)
{
    // 1B049 0062;	
    // (õÅâ) HENTAIGANA LETTER SI-6	[3EEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B049, 0x0062 };
    uint32_t const ces[9] = { 0x3EEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_009)
{
    // 1B04A 0021;	
    // (õÅä) HENTAIGANA LETTER SU-1	[3EEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04A, 0x0021 };
    uint32_t const ces[9] = { 0x3EEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_010)
{
    // 1B04A 003F;	
    // (õÅä) HENTAIGANA LETTER SU-1	[3EEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04A, 0x003F };
    uint32_t const ces[9] = { 0x3EEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_011)
{
    // 1B04A 0061;	
    // (õÅä) HENTAIGANA LETTER SU-1	[3EEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04A, 0x0061 };
    uint32_t const ces[9] = { 0x3EEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_012)
{
    // 1B04A 0041;	
    // (õÅä) HENTAIGANA LETTER SU-1	[3EEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B04A, 0x0041 };
    uint32_t const ces[9] = { 0x3EEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_013)
{
    // 1B04A 0062;	
    // (õÅä) HENTAIGANA LETTER SU-1	[3EEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04A, 0x0062 };
    uint32_t const ces[9] = { 0x3EEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_014)
{
    // 1B04B 0021;	
    // (õÅã) HENTAIGANA LETTER SU-2	[3EEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04B, 0x0021 };
    uint32_t const ces[9] = { 0x3EEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_015)
{
    // 1B04B 003F;	
    // (õÅã) HENTAIGANA LETTER SU-2	[3EEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04B, 0x003F };
    uint32_t const ces[9] = { 0x3EEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_016)
{
    // 1B04B 0061;	
    // (õÅã) HENTAIGANA LETTER SU-2	[3EEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04B, 0x0061 };
    uint32_t const ces[9] = { 0x3EEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_017)
{
    // 1B04B 0041;	
    // (õÅã) HENTAIGANA LETTER SU-2	[3EEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B04B, 0x0041 };
    uint32_t const ces[9] = { 0x3EEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_018)
{
    // 1B04B 0062;	
    // (õÅã) HENTAIGANA LETTER SU-2	[3EEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04B, 0x0062 };
    uint32_t const ces[9] = { 0x3EEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_019)
{
    // 1B04C 0021;	
    // (õÅå) HENTAIGANA LETTER SU-3	[3EED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04C, 0x0021 };
    uint32_t const ces[9] = { 0x3EED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_020)
{
    // 1B04C 003F;	
    // (õÅå) HENTAIGANA LETTER SU-3	[3EED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04C, 0x003F };
    uint32_t const ces[9] = { 0x3EED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_021)
{
    // 1B04C 0061;	
    // (õÅå) HENTAIGANA LETTER SU-3	[3EED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04C, 0x0061 };
    uint32_t const ces[9] = { 0x3EED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_022)
{
    // 1B04C 0041;	
    // (õÅå) HENTAIGANA LETTER SU-3	[3EED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B04C, 0x0041 };
    uint32_t const ces[9] = { 0x3EED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_023)
{
    // 1B04C 0062;	
    // (õÅå) HENTAIGANA LETTER SU-3	[3EED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04C, 0x0062 };
    uint32_t const ces[9] = { 0x3EED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_024)
{
    // 1B04D 0021;	
    // (õÅç) HENTAIGANA LETTER SU-4	[3EEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04D, 0x0021 };
    uint32_t const ces[9] = { 0x3EEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_025)
{
    // 1B04D 003F;	
    // (õÅç) HENTAIGANA LETTER SU-4	[3EEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04D, 0x003F };
    uint32_t const ces[9] = { 0x3EEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_026)
{
    // 1B04D 0061;	
    // (õÅç) HENTAIGANA LETTER SU-4	[3EEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04D, 0x0061 };
    uint32_t const ces[9] = { 0x3EEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_027)
{
    // 1B04D 0041;	
    // (õÅç) HENTAIGANA LETTER SU-4	[3EEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B04D, 0x0041 };
    uint32_t const ces[9] = { 0x3EEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_028)
{
    // 1B04D 0062;	
    // (õÅç) HENTAIGANA LETTER SU-4	[3EEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04D, 0x0062 };
    uint32_t const ces[9] = { 0x3EEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_029)
{
    // 1B04E 0021;	
    // (õÅé) HENTAIGANA LETTER SU-5	[3EEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04E, 0x0021 };
    uint32_t const ces[9] = { 0x3EEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_030)
{
    // 1B04E 003F;	
    // (õÅé) HENTAIGANA LETTER SU-5	[3EEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04E, 0x003F };
    uint32_t const ces[9] = { 0x3EEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_031)
{
    // 1B04E 0061;	
    // (õÅé) HENTAIGANA LETTER SU-5	[3EEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04E, 0x0061 };
    uint32_t const ces[9] = { 0x3EEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_032)
{
    // 1B04E 0041;	
    // (õÅé) HENTAIGANA LETTER SU-5	[3EEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B04E, 0x0041 };
    uint32_t const ces[9] = { 0x3EEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_033)
{
    // 1B04E 0062;	
    // (õÅé) HENTAIGANA LETTER SU-5	[3EEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04E, 0x0062 };
    uint32_t const ces[9] = { 0x3EEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_034)
{
    // 1B04F 0021;	
    // (õÅè) HENTAIGANA LETTER SU-6	[3EF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04F, 0x0021 };
    uint32_t const ces[9] = { 0x3EF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_035)
{
    // 1B04F 003F;	
    // (õÅè) HENTAIGANA LETTER SU-6	[3EF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04F, 0x003F };
    uint32_t const ces[9] = { 0x3EF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_036)
{
    // 1B04F 0061;	
    // (õÅè) HENTAIGANA LETTER SU-6	[3EF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04F, 0x0061 };
    uint32_t const ces[9] = { 0x3EF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_037)
{
    // 1B04F 0041;	
    // (õÅè) HENTAIGANA LETTER SU-6	[3EF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B04F, 0x0041 };
    uint32_t const ces[9] = { 0x3EF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_038)
{
    // 1B04F 0062;	
    // (õÅè) HENTAIGANA LETTER SU-6	[3EF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04F, 0x0062 };
    uint32_t const ces[9] = { 0x3EF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_039)
{
    // 1B050 0021;	
    // (õÅê) HENTAIGANA LETTER SU-7	[3EF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B050, 0x0021 };
    uint32_t const ces[9] = { 0x3EF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_040)
{
    // 1B050 003F;	
    // (õÅê) HENTAIGANA LETTER SU-7	[3EF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B050, 0x003F };
    uint32_t const ces[9] = { 0x3EF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_041)
{
    // 1B050 0061;	
    // (õÅê) HENTAIGANA LETTER SU-7	[3EF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B050, 0x0061 };
    uint32_t const ces[9] = { 0x3EF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_042)
{
    // 1B050 0041;	
    // (õÅê) HENTAIGANA LETTER SU-7	[3EF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B050, 0x0041 };
    uint32_t const ces[9] = { 0x3EF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_043)
{
    // 1B050 0062;	
    // (õÅê) HENTAIGANA LETTER SU-7	[3EF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B050, 0x0062 };
    uint32_t const ces[9] = { 0x3EF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_044)
{
    // 1B051 0021;	
    // (õÅë) HENTAIGANA LETTER SU-8	[3EF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B051, 0x0021 };
    uint32_t const ces[9] = { 0x3EF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_045)
{
    // 1B051 003F;	
    // (õÅë) HENTAIGANA LETTER SU-8	[3EF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B051, 0x003F };
    uint32_t const ces[9] = { 0x3EF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_046)
{
    // 1B051 0061;	
    // (õÅë) HENTAIGANA LETTER SU-8	[3EF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B051, 0x0061 };
    uint32_t const ces[9] = { 0x3EF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_047)
{
    // 1B051 0041;	
    // (õÅë) HENTAIGANA LETTER SU-8	[3EF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B051, 0x0041 };
    uint32_t const ces[9] = { 0x3EF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_048)
{
    // 1B051 0062;	
    // (õÅë) HENTAIGANA LETTER SU-8	[3EF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B051, 0x0062 };
    uint32_t const ces[9] = { 0x3EF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_049)
{
    // 1B052 0021;	
    // (õÅí) HENTAIGANA LETTER SE-1	[3EF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B052, 0x0021 };
    uint32_t const ces[9] = { 0x3EF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_050)
{
    // 1B052 003F;	
    // (õÅí) HENTAIGANA LETTER SE-1	[3EF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B052, 0x003F };
    uint32_t const ces[9] = { 0x3EF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_051)
{
    // 1B052 0061;	
    // (õÅí) HENTAIGANA LETTER SE-1	[3EF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B052, 0x0061 };
    uint32_t const ces[9] = { 0x3EF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_052)
{
    // 1B052 0041;	
    // (õÅí) HENTAIGANA LETTER SE-1	[3EF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B052, 0x0041 };
    uint32_t const ces[9] = { 0x3EF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_053)
{
    // 1B052 0062;	
    // (õÅí) HENTAIGANA LETTER SE-1	[3EF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B052, 0x0062 };
    uint32_t const ces[9] = { 0x3EF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_054)
{
    // 1B053 0021;	
    // (õÅì) HENTAIGANA LETTER SE-2	[3EF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B053, 0x0021 };
    uint32_t const ces[9] = { 0x3EF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_055)
{
    // 1B053 003F;	
    // (õÅì) HENTAIGANA LETTER SE-2	[3EF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B053, 0x003F };
    uint32_t const ces[9] = { 0x3EF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_056)
{
    // 1B053 0061;	
    // (õÅì) HENTAIGANA LETTER SE-2	[3EF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B053, 0x0061 };
    uint32_t const ces[9] = { 0x3EF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_057)
{
    // 1B053 0041;	
    // (õÅì) HENTAIGANA LETTER SE-2	[3EF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B053, 0x0041 };
    uint32_t const ces[9] = { 0x3EF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_058)
{
    // 1B053 0062;	
    // (õÅì) HENTAIGANA LETTER SE-2	[3EF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B053, 0x0062 };
    uint32_t const ces[9] = { 0x3EF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_059)
{
    // 1B054 0021;	
    // (õÅî) HENTAIGANA LETTER SE-3	[3EF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B054, 0x0021 };
    uint32_t const ces[9] = { 0x3EF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_060)
{
    // 1B054 003F;	
    // (õÅî) HENTAIGANA LETTER SE-3	[3EF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B054, 0x003F };
    uint32_t const ces[9] = { 0x3EF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_061)
{
    // 1B054 0061;	
    // (õÅî) HENTAIGANA LETTER SE-3	[3EF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B054, 0x0061 };
    uint32_t const ces[9] = { 0x3EF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_062)
{
    // 1B054 0041;	
    // (õÅî) HENTAIGANA LETTER SE-3	[3EF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B054, 0x0041 };
    uint32_t const ces[9] = { 0x3EF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_063)
{
    // 1B054 0062;	
    // (õÅî) HENTAIGANA LETTER SE-3	[3EF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B054, 0x0062 };
    uint32_t const ces[9] = { 0x3EF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_064)
{
    // 1B055 0021;	
    // (õÅï) HENTAIGANA LETTER SE-4	[3EF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B055, 0x0021 };
    uint32_t const ces[9] = { 0x3EF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_065)
{
    // 1B055 003F;	
    // (õÅï) HENTAIGANA LETTER SE-4	[3EF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B055, 0x003F };
    uint32_t const ces[9] = { 0x3EF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_066)
{
    // 1B055 0061;	
    // (õÅï) HENTAIGANA LETTER SE-4	[3EF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B055, 0x0061 };
    uint32_t const ces[9] = { 0x3EF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_067)
{
    // 1B055 0041;	
    // (õÅï) HENTAIGANA LETTER SE-4	[3EF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B055, 0x0041 };
    uint32_t const ces[9] = { 0x3EF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_068)
{
    // 1B055 0062;	
    // (õÅï) HENTAIGANA LETTER SE-4	[3EF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B055, 0x0062 };
    uint32_t const ces[9] = { 0x3EF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_069)
{
    // 1B056 0021;	
    // (õÅñ) HENTAIGANA LETTER SE-5	[3EF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B056, 0x0021 };
    uint32_t const ces[9] = { 0x3EF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_070)
{
    // 1B056 003F;	
    // (õÅñ) HENTAIGANA LETTER SE-5	[3EF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B056, 0x003F };
    uint32_t const ces[9] = { 0x3EF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_071)
{
    // 1B056 0061;	
    // (õÅñ) HENTAIGANA LETTER SE-5	[3EF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B056, 0x0061 };
    uint32_t const ces[9] = { 0x3EF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_072)
{
    // 1B056 0041;	
    // (õÅñ) HENTAIGANA LETTER SE-5	[3EF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B056, 0x0041 };
    uint32_t const ces[9] = { 0x3EF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_073)
{
    // 1B056 0062;	
    // (õÅñ) HENTAIGANA LETTER SE-5	[3EF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B056, 0x0062 };
    uint32_t const ces[9] = { 0x3EF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_074)
{
    // 1B057 0021;	
    // (õÅó) HENTAIGANA LETTER SO-1	[3EF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B057, 0x0021 };
    uint32_t const ces[9] = { 0x3EF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_075)
{
    // 1B057 003F;	
    // (õÅó) HENTAIGANA LETTER SO-1	[3EF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B057, 0x003F };
    uint32_t const ces[9] = { 0x3EF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_076)
{
    // 1B057 0061;	
    // (õÅó) HENTAIGANA LETTER SO-1	[3EF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B057, 0x0061 };
    uint32_t const ces[9] = { 0x3EF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_077)
{
    // 1B057 0041;	
    // (õÅó) HENTAIGANA LETTER SO-1	[3EF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B057, 0x0041 };
    uint32_t const ces[9] = { 0x3EF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_078)
{
    // 1B057 0062;	
    // (õÅó) HENTAIGANA LETTER SO-1	[3EF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B057, 0x0062 };
    uint32_t const ces[9] = { 0x3EF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_079)
{
    // 1B058 0021;	
    // (õÅò) HENTAIGANA LETTER SO-2	[3EF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B058, 0x0021 };
    uint32_t const ces[9] = { 0x3EF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_080)
{
    // 1B058 003F;	
    // (õÅò) HENTAIGANA LETTER SO-2	[3EF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B058, 0x003F };
    uint32_t const ces[9] = { 0x3EF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_081)
{
    // 1B058 0061;	
    // (õÅò) HENTAIGANA LETTER SO-2	[3EF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B058, 0x0061 };
    uint32_t const ces[9] = { 0x3EF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_082)
{
    // 1B058 0041;	
    // (õÅò) HENTAIGANA LETTER SO-2	[3EF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B058, 0x0041 };
    uint32_t const ces[9] = { 0x3EF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_083)
{
    // 1B058 0062;	
    // (õÅò) HENTAIGANA LETTER SO-2	[3EF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B058, 0x0062 };
    uint32_t const ces[9] = { 0x3EF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_084)
{
    // 1B059 0021;	
    // (õÅô) HENTAIGANA LETTER SO-3	[3EFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B059, 0x0021 };
    uint32_t const ces[9] = { 0x3EFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_085)
{
    // 1B059 003F;	
    // (õÅô) HENTAIGANA LETTER SO-3	[3EFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B059, 0x003F };
    uint32_t const ces[9] = { 0x3EFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_086)
{
    // 1B059 0061;	
    // (õÅô) HENTAIGANA LETTER SO-3	[3EFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B059, 0x0061 };
    uint32_t const ces[9] = { 0x3EFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_087)
{
    // 1B059 0041;	
    // (õÅô) HENTAIGANA LETTER SO-3	[3EFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B059, 0x0041 };
    uint32_t const ces[9] = { 0x3EFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_088)
{
    // 1B059 0062;	
    // (õÅô) HENTAIGANA LETTER SO-3	[3EFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B059, 0x0062 };
    uint32_t const ces[9] = { 0x3EFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_089)
{
    // 1B05A 0021;	
    // (õÅö) HENTAIGANA LETTER SO-4	[3EFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05A, 0x0021 };
    uint32_t const ces[9] = { 0x3EFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_090)
{
    // 1B05A 003F;	
    // (õÅö) HENTAIGANA LETTER SO-4	[3EFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05A, 0x003F };
    uint32_t const ces[9] = { 0x3EFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_091)
{
    // 1B05A 0061;	
    // (õÅö) HENTAIGANA LETTER SO-4	[3EFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05A, 0x0061 };
    uint32_t const ces[9] = { 0x3EFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_092)
{
    // 1B05A 0041;	
    // (õÅö) HENTAIGANA LETTER SO-4	[3EFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B05A, 0x0041 };
    uint32_t const ces[9] = { 0x3EFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_093)
{
    // 1B05A 0062;	
    // (õÅö) HENTAIGANA LETTER SO-4	[3EFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05A, 0x0062 };
    uint32_t const ces[9] = { 0x3EFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_094)
{
    // 1B05B 0021;	
    // (õÅõ) HENTAIGANA LETTER SO-5	[3EFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05B, 0x0021 };
    uint32_t const ces[9] = { 0x3EFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_095)
{
    // 1B05B 003F;	
    // (õÅõ) HENTAIGANA LETTER SO-5	[3EFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05B, 0x003F };
    uint32_t const ces[9] = { 0x3EFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_096)
{
    // 1B05B 0061;	
    // (õÅõ) HENTAIGANA LETTER SO-5	[3EFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05B, 0x0061 };
    uint32_t const ces[9] = { 0x3EFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_097)
{
    // 1B05B 0041;	
    // (õÅõ) HENTAIGANA LETTER SO-5	[3EFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B05B, 0x0041 };
    uint32_t const ces[9] = { 0x3EFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_098)
{
    // 1B05B 0062;	
    // (õÅõ) HENTAIGANA LETTER SO-5	[3EFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05B, 0x0062 };
    uint32_t const ces[9] = { 0x3EFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_099)
{
    // 1B05C 0021;	
    // (õÅú) HENTAIGANA LETTER SO-6	[3EFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05C, 0x0021 };
    uint32_t const ces[9] = { 0x3EFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_100)
{
    // 1B05C 003F;	
    // (õÅú) HENTAIGANA LETTER SO-6	[3EFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05C, 0x003F };
    uint32_t const ces[9] = { 0x3EFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_101)
{
    // 1B05C 0061;	
    // (õÅú) HENTAIGANA LETTER SO-6	[3EFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05C, 0x0061 };
    uint32_t const ces[9] = { 0x3EFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_102)
{
    // 1B05C 0041;	
    // (õÅú) HENTAIGANA LETTER SO-6	[3EFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B05C, 0x0041 };
    uint32_t const ces[9] = { 0x3EFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_103)
{
    // 1B05C 0062;	
    // (õÅú) HENTAIGANA LETTER SO-6	[3EFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05C, 0x0062 };
    uint32_t const ces[9] = { 0x3EFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_104)
{
    // 1B05D 0021;	
    // (õÅù) HENTAIGANA LETTER SO-7	[3EFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05D, 0x0021 };
    uint32_t const ces[9] = { 0x3EFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_105)
{
    // 1B05D 003F;	
    // (õÅù) HENTAIGANA LETTER SO-7	[3EFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05D, 0x003F };
    uint32_t const ces[9] = { 0x3EFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_106)
{
    // 1B05D 0061;	
    // (õÅù) HENTAIGANA LETTER SO-7	[3EFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05D, 0x0061 };
    uint32_t const ces[9] = { 0x3EFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_107)
{
    // 1B05D 0041;	
    // (õÅù) HENTAIGANA LETTER SO-7	[3EFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B05D, 0x0041 };
    uint32_t const ces[9] = { 0x3EFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_108)
{
    // 1B05D 0062;	
    // (õÅù) HENTAIGANA LETTER SO-7	[3EFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05D, 0x0062 };
    uint32_t const ces[9] = { 0x3EFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_109)
{
    // 1B05E 0021;	
    // (õÅû) HENTAIGANA LETTER TA-1	[3EFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05E, 0x0021 };
    uint32_t const ces[9] = { 0x3EFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_110)
{
    // 1B05E 003F;	
    // (õÅû) HENTAIGANA LETTER TA-1	[3EFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05E, 0x003F };
    uint32_t const ces[9] = { 0x3EFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_111)
{
    // 1B05E 0061;	
    // (õÅû) HENTAIGANA LETTER TA-1	[3EFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05E, 0x0061 };
    uint32_t const ces[9] = { 0x3EFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_112)
{
    // 1B05E 0041;	
    // (õÅû) HENTAIGANA LETTER TA-1	[3EFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B05E, 0x0041 };
    uint32_t const ces[9] = { 0x3EFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_113)
{
    // 1B05E 0062;	
    // (õÅû) HENTAIGANA LETTER TA-1	[3EFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05E, 0x0062 };
    uint32_t const ces[9] = { 0x3EFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_114)
{
    // 1B05F 0021;	
    // (õÅü) HENTAIGANA LETTER TA-2	[3F00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05F, 0x0021 };
    uint32_t const ces[9] = { 0x3F00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_115)
{
    // 1B05F 003F;	
    // (õÅü) HENTAIGANA LETTER TA-2	[3F00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05F, 0x003F };
    uint32_t const ces[9] = { 0x3F00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_116)
{
    // 1B05F 0061;	
    // (õÅü) HENTAIGANA LETTER TA-2	[3F00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05F, 0x0061 };
    uint32_t const ces[9] = { 0x3F00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_117)
{
    // 1B05F 0041;	
    // (õÅü) HENTAIGANA LETTER TA-2	[3F00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B05F, 0x0041 };
    uint32_t const ces[9] = { 0x3F00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_118)
{
    // 1B05F 0062;	
    // (õÅü) HENTAIGANA LETTER TA-2	[3F00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B05F, 0x0062 };
    uint32_t const ces[9] = { 0x3F00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_119)
{
    // 1B060 0021;	
    // (õÅ†) HENTAIGANA LETTER TA-3	[3F01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B060, 0x0021 };
    uint32_t const ces[9] = { 0x3F01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_120)
{
    // 1B060 003F;	
    // (õÅ†) HENTAIGANA LETTER TA-3	[3F01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B060, 0x003F };
    uint32_t const ces[9] = { 0x3F01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_121)
{
    // 1B060 0061;	
    // (õÅ†) HENTAIGANA LETTER TA-3	[3F01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B060, 0x0061 };
    uint32_t const ces[9] = { 0x3F01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_122)
{
    // 1B060 0041;	
    // (õÅ†) HENTAIGANA LETTER TA-3	[3F01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B060, 0x0041 };
    uint32_t const ces[9] = { 0x3F01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_123)
{
    // 1B060 0062;	
    // (õÅ†) HENTAIGANA LETTER TA-3	[3F01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B060, 0x0062 };
    uint32_t const ces[9] = { 0x3F01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_124)
{
    // 1B061 0021;	
    // (õÅ°) HENTAIGANA LETTER TA-4	[3F02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B061, 0x0021 };
    uint32_t const ces[9] = { 0x3F02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_125)
{
    // 1B061 003F;	
    // (õÅ°) HENTAIGANA LETTER TA-4	[3F02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B061, 0x003F };
    uint32_t const ces[9] = { 0x3F02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_126)
{
    // 1B061 0061;	
    // (õÅ°) HENTAIGANA LETTER TA-4	[3F02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B061, 0x0061 };
    uint32_t const ces[9] = { 0x3F02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_127)
{
    // 1B061 0041;	
    // (õÅ°) HENTAIGANA LETTER TA-4	[3F02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B061, 0x0041 };
    uint32_t const ces[9] = { 0x3F02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_128)
{
    // 1B061 0062;	
    // (õÅ°) HENTAIGANA LETTER TA-4	[3F02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B061, 0x0062 };
    uint32_t const ces[9] = { 0x3F02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_129)
{
    // 1B062 0021;	
    // (õÅ¢) HENTAIGANA LETTER TI-1	[3F03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B062, 0x0021 };
    uint32_t const ces[9] = { 0x3F03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_130)
{
    // 1B062 003F;	
    // (õÅ¢) HENTAIGANA LETTER TI-1	[3F03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B062, 0x003F };
    uint32_t const ces[9] = { 0x3F03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_131)
{
    // 1B062 0061;	
    // (õÅ¢) HENTAIGANA LETTER TI-1	[3F03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B062, 0x0061 };
    uint32_t const ces[9] = { 0x3F03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_132)
{
    // 1B062 0041;	
    // (õÅ¢) HENTAIGANA LETTER TI-1	[3F03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B062, 0x0041 };
    uint32_t const ces[9] = { 0x3F03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_133)
{
    // 1B062 0062;	
    // (õÅ¢) HENTAIGANA LETTER TI-1	[3F03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B062, 0x0062 };
    uint32_t const ces[9] = { 0x3F03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_134)
{
    // 1B063 0021;	
    // (õÅ£) HENTAIGANA LETTER TI-2	[3F04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B063, 0x0021 };
    uint32_t const ces[9] = { 0x3F04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_135)
{
    // 1B063 003F;	
    // (õÅ£) HENTAIGANA LETTER TI-2	[3F04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B063, 0x003F };
    uint32_t const ces[9] = { 0x3F04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_136)
{
    // 1B063 0061;	
    // (õÅ£) HENTAIGANA LETTER TI-2	[3F04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B063, 0x0061 };
    uint32_t const ces[9] = { 0x3F04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_137)
{
    // 1B063 0041;	
    // (õÅ£) HENTAIGANA LETTER TI-2	[3F04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B063, 0x0041 };
    uint32_t const ces[9] = { 0x3F04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_138)
{
    // 1B063 0062;	
    // (õÅ£) HENTAIGANA LETTER TI-2	[3F04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B063, 0x0062 };
    uint32_t const ces[9] = { 0x3F04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_139)
{
    // 1B064 0021;	
    // (õÅ§) HENTAIGANA LETTER TI-3	[3F05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B064, 0x0021 };
    uint32_t const ces[9] = { 0x3F05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_140)
{
    // 1B064 003F;	
    // (õÅ§) HENTAIGANA LETTER TI-3	[3F05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B064, 0x003F };
    uint32_t const ces[9] = { 0x3F05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_141)
{
    // 1B064 0061;	
    // (õÅ§) HENTAIGANA LETTER TI-3	[3F05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B064, 0x0061 };
    uint32_t const ces[9] = { 0x3F05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_142)
{
    // 1B064 0041;	
    // (õÅ§) HENTAIGANA LETTER TI-3	[3F05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B064, 0x0041 };
    uint32_t const ces[9] = { 0x3F05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_143)
{
    // 1B064 0062;	
    // (õÅ§) HENTAIGANA LETTER TI-3	[3F05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B064, 0x0062 };
    uint32_t const ces[9] = { 0x3F05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_144)
{
    // 1B065 0021;	
    // (õÅ•) HENTAIGANA LETTER TI-4	[3F06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B065, 0x0021 };
    uint32_t const ces[9] = { 0x3F06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_145)
{
    // 1B065 003F;	
    // (õÅ•) HENTAIGANA LETTER TI-4	[3F06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B065, 0x003F };
    uint32_t const ces[9] = { 0x3F06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_146)
{
    // 1B065 0061;	
    // (õÅ•) HENTAIGANA LETTER TI-4	[3F06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B065, 0x0061 };
    uint32_t const ces[9] = { 0x3F06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_147)
{
    // 1B065 0041;	
    // (õÅ•) HENTAIGANA LETTER TI-4	[3F06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B065, 0x0041 };
    uint32_t const ces[9] = { 0x3F06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_148)
{
    // 1B065 0062;	
    // (õÅ•) HENTAIGANA LETTER TI-4	[3F06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B065, 0x0062 };
    uint32_t const ces[9] = { 0x3F06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_149)
{
    // 1B066 0021;	
    // (õÅ¶) HENTAIGANA LETTER TI-5	[3F07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B066, 0x0021 };
    uint32_t const ces[9] = { 0x3F07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_150)
{
    // 1B066 003F;	
    // (õÅ¶) HENTAIGANA LETTER TI-5	[3F07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B066, 0x003F };
    uint32_t const ces[9] = { 0x3F07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_151)
{
    // 1B066 0061;	
    // (õÅ¶) HENTAIGANA LETTER TI-5	[3F07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B066, 0x0061 };
    uint32_t const ces[9] = { 0x3F07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_152)
{
    // 1B066 0041;	
    // (õÅ¶) HENTAIGANA LETTER TI-5	[3F07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B066, 0x0041 };
    uint32_t const ces[9] = { 0x3F07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_153)
{
    // 1B066 0062;	
    // (õÅ¶) HENTAIGANA LETTER TI-5	[3F07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B066, 0x0062 };
    uint32_t const ces[9] = { 0x3F07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_154)
{
    // 1B067 0021;	
    // (õÅß) HENTAIGANA LETTER TI-6	[3F08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B067, 0x0021 };
    uint32_t const ces[9] = { 0x3F08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_155)
{
    // 1B067 003F;	
    // (õÅß) HENTAIGANA LETTER TI-6	[3F08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B067, 0x003F };
    uint32_t const ces[9] = { 0x3F08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_156)
{
    // 1B067 0061;	
    // (õÅß) HENTAIGANA LETTER TI-6	[3F08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B067, 0x0061 };
    uint32_t const ces[9] = { 0x3F08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_157)
{
    // 1B067 0041;	
    // (õÅß) HENTAIGANA LETTER TI-6	[3F08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B067, 0x0041 };
    uint32_t const ces[9] = { 0x3F08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_158)
{
    // 1B067 0062;	
    // (õÅß) HENTAIGANA LETTER TI-6	[3F08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B067, 0x0062 };
    uint32_t const ces[9] = { 0x3F08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_159)
{
    // 1B068 0021;	
    // (õÅ®) HENTAIGANA LETTER TI-7	[3F09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B068, 0x0021 };
    uint32_t const ces[9] = { 0x3F09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_160)
{
    // 1B068 003F;	
    // (õÅ®) HENTAIGANA LETTER TI-7	[3F09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B068, 0x003F };
    uint32_t const ces[9] = { 0x3F09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_161)
{
    // 1B068 0061;	
    // (õÅ®) HENTAIGANA LETTER TI-7	[3F09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B068, 0x0061 };
    uint32_t const ces[9] = { 0x3F09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_162)
{
    // 1B068 0041;	
    // (õÅ®) HENTAIGANA LETTER TI-7	[3F09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B068, 0x0041 };
    uint32_t const ces[9] = { 0x3F09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_163)
{
    // 1B068 0062;	
    // (õÅ®) HENTAIGANA LETTER TI-7	[3F09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B068, 0x0062 };
    uint32_t const ces[9] = { 0x3F09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_164)
{
    // 1B069 0021;	
    // (õÅ©) HENTAIGANA LETTER TU-1	[3F0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B069, 0x0021 };
    uint32_t const ces[9] = { 0x3F0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_165)
{
    // 1B069 003F;	
    // (õÅ©) HENTAIGANA LETTER TU-1	[3F0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B069, 0x003F };
    uint32_t const ces[9] = { 0x3F0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_166)
{
    // 1B069 0061;	
    // (õÅ©) HENTAIGANA LETTER TU-1	[3F0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B069, 0x0061 };
    uint32_t const ces[9] = { 0x3F0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_167)
{
    // 1B069 0041;	
    // (õÅ©) HENTAIGANA LETTER TU-1	[3F0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B069, 0x0041 };
    uint32_t const ces[9] = { 0x3F0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_168)
{
    // 1B069 0062;	
    // (õÅ©) HENTAIGANA LETTER TU-1	[3F0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B069, 0x0062 };
    uint32_t const ces[9] = { 0x3F0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_169)
{
    // 1B06A 0021;	
    // (õÅ™) HENTAIGANA LETTER TU-2	[3F0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06A, 0x0021 };
    uint32_t const ces[9] = { 0x3F0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_170)
{
    // 1B06A 003F;	
    // (õÅ™) HENTAIGANA LETTER TU-2	[3F0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06A, 0x003F };
    uint32_t const ces[9] = { 0x3F0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_171)
{
    // 1B06A 0061;	
    // (õÅ™) HENTAIGANA LETTER TU-2	[3F0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06A, 0x0061 };
    uint32_t const ces[9] = { 0x3F0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_172)
{
    // 1B06A 0041;	
    // (õÅ™) HENTAIGANA LETTER TU-2	[3F0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B06A, 0x0041 };
    uint32_t const ces[9] = { 0x3F0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_173)
{
    // 1B06A 0062;	
    // (õÅ™) HENTAIGANA LETTER TU-2	[3F0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06A, 0x0062 };
    uint32_t const ces[9] = { 0x3F0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_174)
{
    // 1B06B 0021;	
    // (õÅ´) HENTAIGANA LETTER TU-3	[3F0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06B, 0x0021 };
    uint32_t const ces[9] = { 0x3F0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_175)
{
    // 1B06B 003F;	
    // (õÅ´) HENTAIGANA LETTER TU-3	[3F0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06B, 0x003F };
    uint32_t const ces[9] = { 0x3F0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_176)
{
    // 1B06B 0061;	
    // (õÅ´) HENTAIGANA LETTER TU-3	[3F0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06B, 0x0061 };
    uint32_t const ces[9] = { 0x3F0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_177)
{
    // 1B06B 0041;	
    // (õÅ´) HENTAIGANA LETTER TU-3	[3F0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B06B, 0x0041 };
    uint32_t const ces[9] = { 0x3F0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_178)
{
    // 1B06B 0062;	
    // (õÅ´) HENTAIGANA LETTER TU-3	[3F0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06B, 0x0062 };
    uint32_t const ces[9] = { 0x3F0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_179)
{
    // 1B06C 0021;	
    // (õÅ¨) HENTAIGANA LETTER TU-4	[3F0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06C, 0x0021 };
    uint32_t const ces[9] = { 0x3F0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_180)
{
    // 1B06C 003F;	
    // (õÅ¨) HENTAIGANA LETTER TU-4	[3F0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06C, 0x003F };
    uint32_t const ces[9] = { 0x3F0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_181)
{
    // 1B06C 0061;	
    // (õÅ¨) HENTAIGANA LETTER TU-4	[3F0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06C, 0x0061 };
    uint32_t const ces[9] = { 0x3F0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_182)
{
    // 1B06C 0041;	
    // (õÅ¨) HENTAIGANA LETTER TU-4	[3F0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B06C, 0x0041 };
    uint32_t const ces[9] = { 0x3F0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_183)
{
    // 1B06C 0062;	
    // (õÅ¨) HENTAIGANA LETTER TU-4	[3F0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06C, 0x0062 };
    uint32_t const ces[9] = { 0x3F0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_184)
{
    // 1B06D 0021;	
    // (õÅ≠) HENTAIGANA LETTER TU-TO	[3F0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06D, 0x0021 };
    uint32_t const ces[9] = { 0x3F0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_185)
{
    // 1B06D 003F;	
    // (õÅ≠) HENTAIGANA LETTER TU-TO	[3F0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06D, 0x003F };
    uint32_t const ces[9] = { 0x3F0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_186)
{
    // 1B06D 0061;	
    // (õÅ≠) HENTAIGANA LETTER TU-TO	[3F0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06D, 0x0061 };
    uint32_t const ces[9] = { 0x3F0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_187)
{
    // 1B06D 0041;	
    // (õÅ≠) HENTAIGANA LETTER TU-TO	[3F0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B06D, 0x0041 };
    uint32_t const ces[9] = { 0x3F0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_188)
{
    // 1B06D 0062;	
    // (õÅ≠) HENTAIGANA LETTER TU-TO	[3F0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06D, 0x0062 };
    uint32_t const ces[9] = { 0x3F0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_189)
{
    // 1B06E 0021;	
    // (õÅÆ) HENTAIGANA LETTER TE-1	[3F0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06E, 0x0021 };
    uint32_t const ces[9] = { 0x3F0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_190)
{
    // 1B06E 003F;	
    // (õÅÆ) HENTAIGANA LETTER TE-1	[3F0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06E, 0x003F };
    uint32_t const ces[9] = { 0x3F0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_191)
{
    // 1B06E 0061;	
    // (õÅÆ) HENTAIGANA LETTER TE-1	[3F0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06E, 0x0061 };
    uint32_t const ces[9] = { 0x3F0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_192)
{
    // 1B06E 0041;	
    // (õÅÆ) HENTAIGANA LETTER TE-1	[3F0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B06E, 0x0041 };
    uint32_t const ces[9] = { 0x3F0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_193)
{
    // 1B06E 0062;	
    // (õÅÆ) HENTAIGANA LETTER TE-1	[3F0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06E, 0x0062 };
    uint32_t const ces[9] = { 0x3F0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_194)
{
    // 1B06F 0021;	
    // (õÅØ) HENTAIGANA LETTER TE-2	[3F10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06F, 0x0021 };
    uint32_t const ces[9] = { 0x3F10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_195)
{
    // 1B06F 003F;	
    // (õÅØ) HENTAIGANA LETTER TE-2	[3F10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06F, 0x003F };
    uint32_t const ces[9] = { 0x3F10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_196)
{
    // 1B06F 0061;	
    // (õÅØ) HENTAIGANA LETTER TE-2	[3F10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06F, 0x0061 };
    uint32_t const ces[9] = { 0x3F10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_197)
{
    // 1B06F 0041;	
    // (õÅØ) HENTAIGANA LETTER TE-2	[3F10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B06F, 0x0041 };
    uint32_t const ces[9] = { 0x3F10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_198)
{
    // 1B06F 0062;	
    // (õÅØ) HENTAIGANA LETTER TE-2	[3F10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B06F, 0x0062 };
    uint32_t const ces[9] = { 0x3F10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_199)
{
    // 1B070 0021;	
    // (õÅ∞) HENTAIGANA LETTER TE-3	[3F11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B070, 0x0021 };
    uint32_t const ces[9] = { 0x3F11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_200)
{
    // 1B070 003F;	
    // (õÅ∞) HENTAIGANA LETTER TE-3	[3F11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B070, 0x003F };
    uint32_t const ces[9] = { 0x3F11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_201)
{
    // 1B070 0061;	
    // (õÅ∞) HENTAIGANA LETTER TE-3	[3F11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B070, 0x0061 };
    uint32_t const ces[9] = { 0x3F11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_202)
{
    // 1B070 0041;	
    // (õÅ∞) HENTAIGANA LETTER TE-3	[3F11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B070, 0x0041 };
    uint32_t const ces[9] = { 0x3F11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_203)
{
    // 1B070 0062;	
    // (õÅ∞) HENTAIGANA LETTER TE-3	[3F11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B070, 0x0062 };
    uint32_t const ces[9] = { 0x3F11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_204)
{
    // 1B071 0021;	
    // (õÅ±) HENTAIGANA LETTER TE-4	[3F12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B071, 0x0021 };
    uint32_t const ces[9] = { 0x3F12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_205)
{
    // 1B071 003F;	
    // (õÅ±) HENTAIGANA LETTER TE-4	[3F12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B071, 0x003F };
    uint32_t const ces[9] = { 0x3F12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_206)
{
    // 1B071 0061;	
    // (õÅ±) HENTAIGANA LETTER TE-4	[3F12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B071, 0x0061 };
    uint32_t const ces[9] = { 0x3F12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_207)
{
    // 1B071 0041;	
    // (õÅ±) HENTAIGANA LETTER TE-4	[3F12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B071, 0x0041 };
    uint32_t const ces[9] = { 0x3F12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_208)
{
    // 1B071 0062;	
    // (õÅ±) HENTAIGANA LETTER TE-4	[3F12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B071, 0x0062 };
    uint32_t const ces[9] = { 0x3F12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_209)
{
    // 1B072 0021;	
    // (õÅ≤) HENTAIGANA LETTER TE-5	[3F13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B072, 0x0021 };
    uint32_t const ces[9] = { 0x3F13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_210)
{
    // 1B072 003F;	
    // (õÅ≤) HENTAIGANA LETTER TE-5	[3F13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B072, 0x003F };
    uint32_t const ces[9] = { 0x3F13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_211)
{
    // 1B072 0061;	
    // (õÅ≤) HENTAIGANA LETTER TE-5	[3F13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B072, 0x0061 };
    uint32_t const ces[9] = { 0x3F13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_212)
{
    // 1B072 0041;	
    // (õÅ≤) HENTAIGANA LETTER TE-5	[3F13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B072, 0x0041 };
    uint32_t const ces[9] = { 0x3F13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_213)
{
    // 1B072 0062;	
    // (õÅ≤) HENTAIGANA LETTER TE-5	[3F13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B072, 0x0062 };
    uint32_t const ces[9] = { 0x3F13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_214)
{
    // 1B073 0021;	
    // (õÅ≥) HENTAIGANA LETTER TE-6	[3F14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B073, 0x0021 };
    uint32_t const ces[9] = { 0x3F14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_215)
{
    // 1B073 003F;	
    // (õÅ≥) HENTAIGANA LETTER TE-6	[3F14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B073, 0x003F };
    uint32_t const ces[9] = { 0x3F14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_216)
{
    // 1B073 0061;	
    // (õÅ≥) HENTAIGANA LETTER TE-6	[3F14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B073, 0x0061 };
    uint32_t const ces[9] = { 0x3F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_217)
{
    // 1B073 0041;	
    // (õÅ≥) HENTAIGANA LETTER TE-6	[3F14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B073, 0x0041 };
    uint32_t const ces[9] = { 0x3F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_218)
{
    // 1B073 0062;	
    // (õÅ≥) HENTAIGANA LETTER TE-6	[3F14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B073, 0x0062 };
    uint32_t const ces[9] = { 0x3F14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_219)
{
    // 1B074 0021;	
    // (õÅ¥) HENTAIGANA LETTER TE-7	[3F15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B074, 0x0021 };
    uint32_t const ces[9] = { 0x3F15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_220)
{
    // 1B074 003F;	
    // (õÅ¥) HENTAIGANA LETTER TE-7	[3F15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B074, 0x003F };
    uint32_t const ces[9] = { 0x3F15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_221)
{
    // 1B074 0061;	
    // (õÅ¥) HENTAIGANA LETTER TE-7	[3F15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B074, 0x0061 };
    uint32_t const ces[9] = { 0x3F15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_222)
{
    // 1B074 0041;	
    // (õÅ¥) HENTAIGANA LETTER TE-7	[3F15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B074, 0x0041 };
    uint32_t const ces[9] = { 0x3F15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_223)
{
    // 1B074 0062;	
    // (õÅ¥) HENTAIGANA LETTER TE-7	[3F15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B074, 0x0062 };
    uint32_t const ces[9] = { 0x3F15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_224)
{
    // 1B075 0021;	
    // (õÅµ) HENTAIGANA LETTER TE-8	[3F16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B075, 0x0021 };
    uint32_t const ces[9] = { 0x3F16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_225)
{
    // 1B075 003F;	
    // (õÅµ) HENTAIGANA LETTER TE-8	[3F16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B075, 0x003F };
    uint32_t const ces[9] = { 0x3F16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_226)
{
    // 1B075 0061;	
    // (õÅµ) HENTAIGANA LETTER TE-8	[3F16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B075, 0x0061 };
    uint32_t const ces[9] = { 0x3F16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_227)
{
    // 1B075 0041;	
    // (õÅµ) HENTAIGANA LETTER TE-8	[3F16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B075, 0x0041 };
    uint32_t const ces[9] = { 0x3F16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_228)
{
    // 1B075 0062;	
    // (õÅµ) HENTAIGANA LETTER TE-8	[3F16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B075, 0x0062 };
    uint32_t const ces[9] = { 0x3F16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_229)
{
    // 1B076 0021;	
    // (õÅ∂) HENTAIGANA LETTER TE-9	[3F17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B076, 0x0021 };
    uint32_t const ces[9] = { 0x3F17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_230)
{
    // 1B076 003F;	
    // (õÅ∂) HENTAIGANA LETTER TE-9	[3F17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B076, 0x003F };
    uint32_t const ces[9] = { 0x3F17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_231)
{
    // 1B076 0061;	
    // (õÅ∂) HENTAIGANA LETTER TE-9	[3F17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B076, 0x0061 };
    uint32_t const ces[9] = { 0x3F17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_232)
{
    // 1B076 0041;	
    // (õÅ∂) HENTAIGANA LETTER TE-9	[3F17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B076, 0x0041 };
    uint32_t const ces[9] = { 0x3F17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_233)
{
    // 1B076 0062;	
    // (õÅ∂) HENTAIGANA LETTER TE-9	[3F17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B076, 0x0062 };
    uint32_t const ces[9] = { 0x3F17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_234)
{
    // 1B077 0021;	
    // (õÅ∑) HENTAIGANA LETTER TO-1	[3F18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B077, 0x0021 };
    uint32_t const ces[9] = { 0x3F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_235)
{
    // 1B077 003F;	
    // (õÅ∑) HENTAIGANA LETTER TO-1	[3F18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B077, 0x003F };
    uint32_t const ces[9] = { 0x3F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_236)
{
    // 1B077 0061;	
    // (õÅ∑) HENTAIGANA LETTER TO-1	[3F18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B077, 0x0061 };
    uint32_t const ces[9] = { 0x3F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_237)
{
    // 1B077 0041;	
    // (õÅ∑) HENTAIGANA LETTER TO-1	[3F18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B077, 0x0041 };
    uint32_t const ces[9] = { 0x3F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_238)
{
    // 1B077 0062;	
    // (õÅ∑) HENTAIGANA LETTER TO-1	[3F18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B077, 0x0062 };
    uint32_t const ces[9] = { 0x3F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_239)
{
    // 1B078 0021;	
    // (õÅ∏) HENTAIGANA LETTER TO-2	[3F19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B078, 0x0021 };
    uint32_t const ces[9] = { 0x3F19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_240)
{
    // 1B078 003F;	
    // (õÅ∏) HENTAIGANA LETTER TO-2	[3F19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B078, 0x003F };
    uint32_t const ces[9] = { 0x3F19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_241)
{
    // 1B078 0061;	
    // (õÅ∏) HENTAIGANA LETTER TO-2	[3F19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B078, 0x0061 };
    uint32_t const ces[9] = { 0x3F19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_242)
{
    // 1B078 0041;	
    // (õÅ∏) HENTAIGANA LETTER TO-2	[3F19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B078, 0x0041 };
    uint32_t const ces[9] = { 0x3F19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_243)
{
    // 1B078 0062;	
    // (õÅ∏) HENTAIGANA LETTER TO-2	[3F19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B078, 0x0062 };
    uint32_t const ces[9] = { 0x3F19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_244)
{
    // 1B079 0021;	
    // (õÅπ) HENTAIGANA LETTER TO-3	[3F1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B079, 0x0021 };
    uint32_t const ces[9] = { 0x3F1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_245)
{
    // 1B079 003F;	
    // (õÅπ) HENTAIGANA LETTER TO-3	[3F1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B079, 0x003F };
    uint32_t const ces[9] = { 0x3F1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_246)
{
    // 1B079 0061;	
    // (õÅπ) HENTAIGANA LETTER TO-3	[3F1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B079, 0x0061 };
    uint32_t const ces[9] = { 0x3F1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_247)
{
    // 1B079 0041;	
    // (õÅπ) HENTAIGANA LETTER TO-3	[3F1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B079, 0x0041 };
    uint32_t const ces[9] = { 0x3F1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_248)
{
    // 1B079 0062;	
    // (õÅπ) HENTAIGANA LETTER TO-3	[3F1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B079, 0x0062 };
    uint32_t const ces[9] = { 0x3F1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_249)
{
    // 1B07A 0021;	
    // (õÅ∫) HENTAIGANA LETTER TO-4	[3F1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07A, 0x0021 };
    uint32_t const ces[9] = { 0x3F1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_250)
{
    // 1B07A 003F;	
    // (õÅ∫) HENTAIGANA LETTER TO-4	[3F1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07A, 0x003F };
    uint32_t const ces[9] = { 0x3F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_251)
{
    // 1B07A 0061;	
    // (õÅ∫) HENTAIGANA LETTER TO-4	[3F1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07A, 0x0061 };
    uint32_t const ces[9] = { 0x3F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_252)
{
    // 1B07A 0041;	
    // (õÅ∫) HENTAIGANA LETTER TO-4	[3F1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B07A, 0x0041 };
    uint32_t const ces[9] = { 0x3F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_253)
{
    // 1B07A 0062;	
    // (õÅ∫) HENTAIGANA LETTER TO-4	[3F1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07A, 0x0062 };
    uint32_t const ces[9] = { 0x3F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_254)
{
    // 1B07B 0021;	
    // (õÅª) HENTAIGANA LETTER TO-5	[3F1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07B, 0x0021 };
    uint32_t const ces[9] = { 0x3F1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_255)
{
    // 1B07B 003F;	
    // (õÅª) HENTAIGANA LETTER TO-5	[3F1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07B, 0x003F };
    uint32_t const ces[9] = { 0x3F1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_256)
{
    // 1B07B 0061;	
    // (õÅª) HENTAIGANA LETTER TO-5	[3F1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07B, 0x0061 };
    uint32_t const ces[9] = { 0x3F1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_257)
{
    // 1B07B 0041;	
    // (õÅª) HENTAIGANA LETTER TO-5	[3F1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B07B, 0x0041 };
    uint32_t const ces[9] = { 0x3F1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_258)
{
    // 1B07B 0062;	
    // (õÅª) HENTAIGANA LETTER TO-5	[3F1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07B, 0x0062 };
    uint32_t const ces[9] = { 0x3F1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_259)
{
    // 1B07C 0021;	
    // (õÅº) HENTAIGANA LETTER TO-6	[3F1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07C, 0x0021 };
    uint32_t const ces[9] = { 0x3F1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_260)
{
    // 1B07C 003F;	
    // (õÅº) HENTAIGANA LETTER TO-6	[3F1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07C, 0x003F };
    uint32_t const ces[9] = { 0x3F1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_261)
{
    // 1B07C 0061;	
    // (õÅº) HENTAIGANA LETTER TO-6	[3F1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07C, 0x0061 };
    uint32_t const ces[9] = { 0x3F1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_262)
{
    // 1B07C 0041;	
    // (õÅº) HENTAIGANA LETTER TO-6	[3F1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B07C, 0x0041 };
    uint32_t const ces[9] = { 0x3F1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_263)
{
    // 1B07C 0062;	
    // (õÅº) HENTAIGANA LETTER TO-6	[3F1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07C, 0x0062 };
    uint32_t const ces[9] = { 0x3F1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_264)
{
    // 1B07D 0021;	
    // (õÅΩ) HENTAIGANA LETTER TO-RA	[3F1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07D, 0x0021 };
    uint32_t const ces[9] = { 0x3F1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_265)
{
    // 1B07D 003F;	
    // (õÅΩ) HENTAIGANA LETTER TO-RA	[3F1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07D, 0x003F };
    uint32_t const ces[9] = { 0x3F1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_266)
{
    // 1B07D 0061;	
    // (õÅΩ) HENTAIGANA LETTER TO-RA	[3F1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07D, 0x0061 };
    uint32_t const ces[9] = { 0x3F1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_267)
{
    // 1B07D 0041;	
    // (õÅΩ) HENTAIGANA LETTER TO-RA	[3F1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B07D, 0x0041 };
    uint32_t const ces[9] = { 0x3F1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_268)
{
    // 1B07D 0062;	
    // (õÅΩ) HENTAIGANA LETTER TO-RA	[3F1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07D, 0x0062 };
    uint32_t const ces[9] = { 0x3F1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_269)
{
    // 1B07E 0021;	
    // (õÅæ) HENTAIGANA LETTER NA-1	[3F1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07E, 0x0021 };
    uint32_t const ces[9] = { 0x3F1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_270)
{
    // 1B07E 003F;	
    // (õÅæ) HENTAIGANA LETTER NA-1	[3F1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07E, 0x003F };
    uint32_t const ces[9] = { 0x3F1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_271)
{
    // 1B07E 0061;	
    // (õÅæ) HENTAIGANA LETTER NA-1	[3F1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07E, 0x0061 };
    uint32_t const ces[9] = { 0x3F1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_272)
{
    // 1B07E 0041;	
    // (õÅæ) HENTAIGANA LETTER NA-1	[3F1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B07E, 0x0041 };
    uint32_t const ces[9] = { 0x3F1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_273)
{
    // 1B07E 0062;	
    // (õÅæ) HENTAIGANA LETTER NA-1	[3F1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07E, 0x0062 };
    uint32_t const ces[9] = { 0x3F1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_274)
{
    // 1B07F 0021;	
    // (õÅø) HENTAIGANA LETTER NA-2	[3F20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07F, 0x0021 };
    uint32_t const ces[9] = { 0x3F20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_275)
{
    // 1B07F 003F;	
    // (õÅø) HENTAIGANA LETTER NA-2	[3F20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07F, 0x003F };
    uint32_t const ces[9] = { 0x3F20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_276)
{
    // 1B07F 0061;	
    // (õÅø) HENTAIGANA LETTER NA-2	[3F20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07F, 0x0061 };
    uint32_t const ces[9] = { 0x3F20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_277)
{
    // 1B07F 0041;	
    // (õÅø) HENTAIGANA LETTER NA-2	[3F20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B07F, 0x0041 };
    uint32_t const ces[9] = { 0x3F20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_278)
{
    // 1B07F 0062;	
    // (õÅø) HENTAIGANA LETTER NA-2	[3F20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B07F, 0x0062 };
    uint32_t const ces[9] = { 0x3F20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_279)
{
    // 1B080 0021;	
    // (õÇÄ) HENTAIGANA LETTER NA-3	[3F21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B080, 0x0021 };
    uint32_t const ces[9] = { 0x3F21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_280)
{
    // 1B080 003F;	
    // (õÇÄ) HENTAIGANA LETTER NA-3	[3F21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B080, 0x003F };
    uint32_t const ces[9] = { 0x3F21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_281)
{
    // 1B080 0061;	
    // (õÇÄ) HENTAIGANA LETTER NA-3	[3F21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B080, 0x0061 };
    uint32_t const ces[9] = { 0x3F21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_282)
{
    // 1B080 0041;	
    // (õÇÄ) HENTAIGANA LETTER NA-3	[3F21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B080, 0x0041 };
    uint32_t const ces[9] = { 0x3F21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_283)
{
    // 1B080 0062;	
    // (õÇÄ) HENTAIGANA LETTER NA-3	[3F21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B080, 0x0062 };
    uint32_t const ces[9] = { 0x3F21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_284)
{
    // 1B081 0021;	
    // (õÇÅ) HENTAIGANA LETTER NA-4	[3F22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B081, 0x0021 };
    uint32_t const ces[9] = { 0x3F22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_285)
{
    // 1B081 003F;	
    // (õÇÅ) HENTAIGANA LETTER NA-4	[3F22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B081, 0x003F };
    uint32_t const ces[9] = { 0x3F22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_286)
{
    // 1B081 0061;	
    // (õÇÅ) HENTAIGANA LETTER NA-4	[3F22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B081, 0x0061 };
    uint32_t const ces[9] = { 0x3F22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_287)
{
    // 1B081 0041;	
    // (õÇÅ) HENTAIGANA LETTER NA-4	[3F22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B081, 0x0041 };
    uint32_t const ces[9] = { 0x3F22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_288)
{
    // 1B081 0062;	
    // (õÇÅ) HENTAIGANA LETTER NA-4	[3F22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B081, 0x0062 };
    uint32_t const ces[9] = { 0x3F22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_289)
{
    // 1B082 0021;	
    // (õÇÇ) HENTAIGANA LETTER NA-5	[3F23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B082, 0x0021 };
    uint32_t const ces[9] = { 0x3F23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_290)
{
    // 1B082 003F;	
    // (õÇÇ) HENTAIGANA LETTER NA-5	[3F23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B082, 0x003F };
    uint32_t const ces[9] = { 0x3F23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_291)
{
    // 1B082 0061;	
    // (õÇÇ) HENTAIGANA LETTER NA-5	[3F23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B082, 0x0061 };
    uint32_t const ces[9] = { 0x3F23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_292)
{
    // 1B082 0041;	
    // (õÇÇ) HENTAIGANA LETTER NA-5	[3F23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B082, 0x0041 };
    uint32_t const ces[9] = { 0x3F23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_293)
{
    // 1B082 0062;	
    // (õÇÇ) HENTAIGANA LETTER NA-5	[3F23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B082, 0x0062 };
    uint32_t const ces[9] = { 0x3F23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_294)
{
    // 1B083 0021;	
    // (õÇÉ) HENTAIGANA LETTER NA-6	[3F24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B083, 0x0021 };
    uint32_t const ces[9] = { 0x3F24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_295)
{
    // 1B083 003F;	
    // (õÇÉ) HENTAIGANA LETTER NA-6	[3F24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B083, 0x003F };
    uint32_t const ces[9] = { 0x3F24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_296)
{
    // 1B083 0061;	
    // (õÇÉ) HENTAIGANA LETTER NA-6	[3F24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B083, 0x0061 };
    uint32_t const ces[9] = { 0x3F24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_297)
{
    // 1B083 0041;	
    // (õÇÉ) HENTAIGANA LETTER NA-6	[3F24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B083, 0x0041 };
    uint32_t const ces[9] = { 0x3F24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_298)
{
    // 1B083 0062;	
    // (õÇÉ) HENTAIGANA LETTER NA-6	[3F24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B083, 0x0062 };
    uint32_t const ces[9] = { 0x3F24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_299)
{
    // 1B084 0021;	
    // (õÇÑ) HENTAIGANA LETTER NA-7	[3F25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B084, 0x0021 };
    uint32_t const ces[9] = { 0x3F25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_300)
{
    // 1B084 003F;	
    // (õÇÑ) HENTAIGANA LETTER NA-7	[3F25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B084, 0x003F };
    uint32_t const ces[9] = { 0x3F25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_301)
{
    // 1B084 0061;	
    // (õÇÑ) HENTAIGANA LETTER NA-7	[3F25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B084, 0x0061 };
    uint32_t const ces[9] = { 0x3F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_302)
{
    // 1B084 0041;	
    // (õÇÑ) HENTAIGANA LETTER NA-7	[3F25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B084, 0x0041 };
    uint32_t const ces[9] = { 0x3F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_303)
{
    // 1B084 0062;	
    // (õÇÑ) HENTAIGANA LETTER NA-7	[3F25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B084, 0x0062 };
    uint32_t const ces[9] = { 0x3F25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_304)
{
    // 1B085 0021;	
    // (õÇÖ) HENTAIGANA LETTER NA-8	[3F26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B085, 0x0021 };
    uint32_t const ces[9] = { 0x3F26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_305)
{
    // 1B085 003F;	
    // (õÇÖ) HENTAIGANA LETTER NA-8	[3F26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B085, 0x003F };
    uint32_t const ces[9] = { 0x3F26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_306)
{
    // 1B085 0061;	
    // (õÇÖ) HENTAIGANA LETTER NA-8	[3F26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B085, 0x0061 };
    uint32_t const ces[9] = { 0x3F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_307)
{
    // 1B085 0041;	
    // (õÇÖ) HENTAIGANA LETTER NA-8	[3F26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B085, 0x0041 };
    uint32_t const ces[9] = { 0x3F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_308)
{
    // 1B085 0062;	
    // (õÇÖ) HENTAIGANA LETTER NA-8	[3F26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B085, 0x0062 };
    uint32_t const ces[9] = { 0x3F26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_309)
{
    // 1B086 0021;	
    // (õÇÜ) HENTAIGANA LETTER NA-9	[3F27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B086, 0x0021 };
    uint32_t const ces[9] = { 0x3F27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_310)
{
    // 1B086 003F;	
    // (õÇÜ) HENTAIGANA LETTER NA-9	[3F27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B086, 0x003F };
    uint32_t const ces[9] = { 0x3F27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_311)
{
    // 1B086 0061;	
    // (õÇÜ) HENTAIGANA LETTER NA-9	[3F27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B086, 0x0061 };
    uint32_t const ces[9] = { 0x3F27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_312)
{
    // 1B086 0041;	
    // (õÇÜ) HENTAIGANA LETTER NA-9	[3F27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B086, 0x0041 };
    uint32_t const ces[9] = { 0x3F27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_313)
{
    // 1B086 0062;	
    // (õÇÜ) HENTAIGANA LETTER NA-9	[3F27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B086, 0x0062 };
    uint32_t const ces[9] = { 0x3F27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_314)
{
    // 1B087 0021;	
    // (õÇá) HENTAIGANA LETTER NI-1	[3F28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B087, 0x0021 };
    uint32_t const ces[9] = { 0x3F28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_315)
{
    // 1B087 003F;	
    // (õÇá) HENTAIGANA LETTER NI-1	[3F28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B087, 0x003F };
    uint32_t const ces[9] = { 0x3F28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_316)
{
    // 1B087 0061;	
    // (õÇá) HENTAIGANA LETTER NI-1	[3F28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B087, 0x0061 };
    uint32_t const ces[9] = { 0x3F28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_317)
{
    // 1B087 0041;	
    // (õÇá) HENTAIGANA LETTER NI-1	[3F28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B087, 0x0041 };
    uint32_t const ces[9] = { 0x3F28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_318)
{
    // 1B087 0062;	
    // (õÇá) HENTAIGANA LETTER NI-1	[3F28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B087, 0x0062 };
    uint32_t const ces[9] = { 0x3F28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_319)
{
    // 1B088 0021;	
    // (õÇà) HENTAIGANA LETTER NI-2	[3F29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B088, 0x0021 };
    uint32_t const ces[9] = { 0x3F29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_320)
{
    // 1B088 003F;	
    // (õÇà) HENTAIGANA LETTER NI-2	[3F29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B088, 0x003F };
    uint32_t const ces[9] = { 0x3F29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_321)
{
    // 1B088 0061;	
    // (õÇà) HENTAIGANA LETTER NI-2	[3F29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B088, 0x0061 };
    uint32_t const ces[9] = { 0x3F29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_322)
{
    // 1B088 0041;	
    // (õÇà) HENTAIGANA LETTER NI-2	[3F29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B088, 0x0041 };
    uint32_t const ces[9] = { 0x3F29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_323)
{
    // 1B088 0062;	
    // (õÇà) HENTAIGANA LETTER NI-2	[3F29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B088, 0x0062 };
    uint32_t const ces[9] = { 0x3F29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_324)
{
    // 1B089 0021;	
    // (õÇâ) HENTAIGANA LETTER NI-3	[3F2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B089, 0x0021 };
    uint32_t const ces[9] = { 0x3F2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_325)
{
    // 1B089 003F;	
    // (õÇâ) HENTAIGANA LETTER NI-3	[3F2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B089, 0x003F };
    uint32_t const ces[9] = { 0x3F2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_326)
{
    // 1B089 0061;	
    // (õÇâ) HENTAIGANA LETTER NI-3	[3F2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B089, 0x0061 };
    uint32_t const ces[9] = { 0x3F2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_327)
{
    // 1B089 0041;	
    // (õÇâ) HENTAIGANA LETTER NI-3	[3F2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B089, 0x0041 };
    uint32_t const ces[9] = { 0x3F2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_328)
{
    // 1B089 0062;	
    // (õÇâ) HENTAIGANA LETTER NI-3	[3F2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B089, 0x0062 };
    uint32_t const ces[9] = { 0x3F2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_329)
{
    // 1B08A 0021;	
    // (õÇä) HENTAIGANA LETTER NI-4	[3F2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08A, 0x0021 };
    uint32_t const ces[9] = { 0x3F2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_330)
{
    // 1B08A 003F;	
    // (õÇä) HENTAIGANA LETTER NI-4	[3F2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08A, 0x003F };
    uint32_t const ces[9] = { 0x3F2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_331)
{
    // 1B08A 0061;	
    // (õÇä) HENTAIGANA LETTER NI-4	[3F2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08A, 0x0061 };
    uint32_t const ces[9] = { 0x3F2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_332)
{
    // 1B08A 0041;	
    // (õÇä) HENTAIGANA LETTER NI-4	[3F2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B08A, 0x0041 };
    uint32_t const ces[9] = { 0x3F2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_333)
{
    // 1B08A 0062;	
    // (õÇä) HENTAIGANA LETTER NI-4	[3F2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08A, 0x0062 };
    uint32_t const ces[9] = { 0x3F2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_334)
{
    // 1B08B 0021;	
    // (õÇã) HENTAIGANA LETTER NI-5	[3F2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08B, 0x0021 };
    uint32_t const ces[9] = { 0x3F2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_335)
{
    // 1B08B 003F;	
    // (õÇã) HENTAIGANA LETTER NI-5	[3F2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08B, 0x003F };
    uint32_t const ces[9] = { 0x3F2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_336)
{
    // 1B08B 0061;	
    // (õÇã) HENTAIGANA LETTER NI-5	[3F2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08B, 0x0061 };
    uint32_t const ces[9] = { 0x3F2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_337)
{
    // 1B08B 0041;	
    // (õÇã) HENTAIGANA LETTER NI-5	[3F2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B08B, 0x0041 };
    uint32_t const ces[9] = { 0x3F2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_338)
{
    // 1B08B 0062;	
    // (õÇã) HENTAIGANA LETTER NI-5	[3F2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08B, 0x0062 };
    uint32_t const ces[9] = { 0x3F2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_339)
{
    // 1B08C 0021;	
    // (õÇå) HENTAIGANA LETTER NI-6	[3F2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08C, 0x0021 };
    uint32_t const ces[9] = { 0x3F2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_340)
{
    // 1B08C 003F;	
    // (õÇå) HENTAIGANA LETTER NI-6	[3F2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08C, 0x003F };
    uint32_t const ces[9] = { 0x3F2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_341)
{
    // 1B08C 0061;	
    // (õÇå) HENTAIGANA LETTER NI-6	[3F2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08C, 0x0061 };
    uint32_t const ces[9] = { 0x3F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_342)
{
    // 1B08C 0041;	
    // (õÇå) HENTAIGANA LETTER NI-6	[3F2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B08C, 0x0041 };
    uint32_t const ces[9] = { 0x3F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_343)
{
    // 1B08C 0062;	
    // (õÇå) HENTAIGANA LETTER NI-6	[3F2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08C, 0x0062 };
    uint32_t const ces[9] = { 0x3F2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_344)
{
    // 1B08D 0021;	
    // (õÇç) HENTAIGANA LETTER NI-7	[3F2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08D, 0x0021 };
    uint32_t const ces[9] = { 0x3F2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_345)
{
    // 1B08D 003F;	
    // (õÇç) HENTAIGANA LETTER NI-7	[3F2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08D, 0x003F };
    uint32_t const ces[9] = { 0x3F2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_346)
{
    // 1B08D 0061;	
    // (õÇç) HENTAIGANA LETTER NI-7	[3F2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08D, 0x0061 };
    uint32_t const ces[9] = { 0x3F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_347)
{
    // 1B08D 0041;	
    // (õÇç) HENTAIGANA LETTER NI-7	[3F2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B08D, 0x0041 };
    uint32_t const ces[9] = { 0x3F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_348)
{
    // 1B08D 0062;	
    // (õÇç) HENTAIGANA LETTER NI-7	[3F2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08D, 0x0062 };
    uint32_t const ces[9] = { 0x3F2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_349)
{
    // 1B08E 0021;	
    // (õÇé) HENTAIGANA LETTER NI-TE	[3F2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08E, 0x0021 };
    uint32_t const ces[9] = { 0x3F2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_350)
{
    // 1B08E 003F;	
    // (õÇé) HENTAIGANA LETTER NI-TE	[3F2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08E, 0x003F };
    uint32_t const ces[9] = { 0x3F2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_351)
{
    // 1B08E 0061;	
    // (õÇé) HENTAIGANA LETTER NI-TE	[3F2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08E, 0x0061 };
    uint32_t const ces[9] = { 0x3F2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_352)
{
    // 1B08E 0041;	
    // (õÇé) HENTAIGANA LETTER NI-TE	[3F2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B08E, 0x0041 };
    uint32_t const ces[9] = { 0x3F2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_353)
{
    // 1B08E 0062;	
    // (õÇé) HENTAIGANA LETTER NI-TE	[3F2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08E, 0x0062 };
    uint32_t const ces[9] = { 0x3F2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_354)
{
    // 1B08F 0021;	
    // (õÇè) HENTAIGANA LETTER NU-1	[3F30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08F, 0x0021 };
    uint32_t const ces[9] = { 0x3F30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_355)
{
    // 1B08F 003F;	
    // (õÇè) HENTAIGANA LETTER NU-1	[3F30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08F, 0x003F };
    uint32_t const ces[9] = { 0x3F30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_356)
{
    // 1B08F 0061;	
    // (õÇè) HENTAIGANA LETTER NU-1	[3F30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08F, 0x0061 };
    uint32_t const ces[9] = { 0x3F30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_357)
{
    // 1B08F 0041;	
    // (õÇè) HENTAIGANA LETTER NU-1	[3F30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B08F, 0x0041 };
    uint32_t const ces[9] = { 0x3F30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_358)
{
    // 1B08F 0062;	
    // (õÇè) HENTAIGANA LETTER NU-1	[3F30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B08F, 0x0062 };
    uint32_t const ces[9] = { 0x3F30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_359)
{
    // 1B090 0021;	
    // (õÇê) HENTAIGANA LETTER NU-2	[3F31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B090, 0x0021 };
    uint32_t const ces[9] = { 0x3F31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_360)
{
    // 1B090 003F;	
    // (õÇê) HENTAIGANA LETTER NU-2	[3F31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B090, 0x003F };
    uint32_t const ces[9] = { 0x3F31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_361)
{
    // 1B090 0061;	
    // (õÇê) HENTAIGANA LETTER NU-2	[3F31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B090, 0x0061 };
    uint32_t const ces[9] = { 0x3F31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_362)
{
    // 1B090 0041;	
    // (õÇê) HENTAIGANA LETTER NU-2	[3F31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B090, 0x0041 };
    uint32_t const ces[9] = { 0x3F31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_363)
{
    // 1B090 0062;	
    // (õÇê) HENTAIGANA LETTER NU-2	[3F31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B090, 0x0062 };
    uint32_t const ces[9] = { 0x3F31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_364)
{
    // 1B091 0021;	
    // (õÇë) HENTAIGANA LETTER NU-3	[3F32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B091, 0x0021 };
    uint32_t const ces[9] = { 0x3F32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_365)
{
    // 1B091 003F;	
    // (õÇë) HENTAIGANA LETTER NU-3	[3F32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B091, 0x003F };
    uint32_t const ces[9] = { 0x3F32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_366)
{
    // 1B091 0061;	
    // (õÇë) HENTAIGANA LETTER NU-3	[3F32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B091, 0x0061 };
    uint32_t const ces[9] = { 0x3F32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_367)
{
    // 1B091 0041;	
    // (õÇë) HENTAIGANA LETTER NU-3	[3F32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B091, 0x0041 };
    uint32_t const ces[9] = { 0x3F32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_368)
{
    // 1B091 0062;	
    // (õÇë) HENTAIGANA LETTER NU-3	[3F32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B091, 0x0062 };
    uint32_t const ces[9] = { 0x3F32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_369)
{
    // 1B092 0021;	
    // (õÇí) HENTAIGANA LETTER NE-1	[3F33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B092, 0x0021 };
    uint32_t const ces[9] = { 0x3F33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_370)
{
    // 1B092 003F;	
    // (õÇí) HENTAIGANA LETTER NE-1	[3F33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B092, 0x003F };
    uint32_t const ces[9] = { 0x3F33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_371)
{
    // 1B092 0061;	
    // (õÇí) HENTAIGANA LETTER NE-1	[3F33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B092, 0x0061 };
    uint32_t const ces[9] = { 0x3F33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_372)
{
    // 1B092 0041;	
    // (õÇí) HENTAIGANA LETTER NE-1	[3F33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B092, 0x0041 };
    uint32_t const ces[9] = { 0x3F33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_373)
{
    // 1B092 0062;	
    // (õÇí) HENTAIGANA LETTER NE-1	[3F33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B092, 0x0062 };
    uint32_t const ces[9] = { 0x3F33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_374)
{
    // 1B093 0021;	
    // (õÇì) HENTAIGANA LETTER NE-2	[3F34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B093, 0x0021 };
    uint32_t const ces[9] = { 0x3F34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_375)
{
    // 1B093 003F;	
    // (õÇì) HENTAIGANA LETTER NE-2	[3F34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B093, 0x003F };
    uint32_t const ces[9] = { 0x3F34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_376)
{
    // 1B093 0061;	
    // (õÇì) HENTAIGANA LETTER NE-2	[3F34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B093, 0x0061 };
    uint32_t const ces[9] = { 0x3F34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_377)
{
    // 1B093 0041;	
    // (õÇì) HENTAIGANA LETTER NE-2	[3F34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B093, 0x0041 };
    uint32_t const ces[9] = { 0x3F34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_378)
{
    // 1B093 0062;	
    // (õÇì) HENTAIGANA LETTER NE-2	[3F34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B093, 0x0062 };
    uint32_t const ces[9] = { 0x3F34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_379)
{
    // 1B094 0021;	
    // (õÇî) HENTAIGANA LETTER NE-3	[3F35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B094, 0x0021 };
    uint32_t const ces[9] = { 0x3F35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_380)
{
    // 1B094 003F;	
    // (õÇî) HENTAIGANA LETTER NE-3	[3F35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B094, 0x003F };
    uint32_t const ces[9] = { 0x3F35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_381)
{
    // 1B094 0061;	
    // (õÇî) HENTAIGANA LETTER NE-3	[3F35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B094, 0x0061 };
    uint32_t const ces[9] = { 0x3F35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_382)
{
    // 1B094 0041;	
    // (õÇî) HENTAIGANA LETTER NE-3	[3F35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B094, 0x0041 };
    uint32_t const ces[9] = { 0x3F35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_383)
{
    // 1B094 0062;	
    // (õÇî) HENTAIGANA LETTER NE-3	[3F35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B094, 0x0062 };
    uint32_t const ces[9] = { 0x3F35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_384)
{
    // 1B095 0021;	
    // (õÇï) HENTAIGANA LETTER NE-4	[3F36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B095, 0x0021 };
    uint32_t const ces[9] = { 0x3F36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_385)
{
    // 1B095 003F;	
    // (õÇï) HENTAIGANA LETTER NE-4	[3F36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B095, 0x003F };
    uint32_t const ces[9] = { 0x3F36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_386)
{
    // 1B095 0061;	
    // (õÇï) HENTAIGANA LETTER NE-4	[3F36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B095, 0x0061 };
    uint32_t const ces[9] = { 0x3F36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_387)
{
    // 1B095 0041;	
    // (õÇï) HENTAIGANA LETTER NE-4	[3F36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B095, 0x0041 };
    uint32_t const ces[9] = { 0x3F36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_388)
{
    // 1B095 0062;	
    // (õÇï) HENTAIGANA LETTER NE-4	[3F36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B095, 0x0062 };
    uint32_t const ces[9] = { 0x3F36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_389)
{
    // 1B096 0021;	
    // (õÇñ) HENTAIGANA LETTER NE-5	[3F37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B096, 0x0021 };
    uint32_t const ces[9] = { 0x3F37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_390)
{
    // 1B096 003F;	
    // (õÇñ) HENTAIGANA LETTER NE-5	[3F37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B096, 0x003F };
    uint32_t const ces[9] = { 0x3F37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_391)
{
    // 1B096 0061;	
    // (õÇñ) HENTAIGANA LETTER NE-5	[3F37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B096, 0x0061 };
    uint32_t const ces[9] = { 0x3F37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_392)
{
    // 1B096 0041;	
    // (õÇñ) HENTAIGANA LETTER NE-5	[3F37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B096, 0x0041 };
    uint32_t const ces[9] = { 0x3F37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_393)
{
    // 1B096 0062;	
    // (õÇñ) HENTAIGANA LETTER NE-5	[3F37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B096, 0x0062 };
    uint32_t const ces[9] = { 0x3F37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_394)
{
    // 1B097 0021;	
    // (õÇó) HENTAIGANA LETTER NE-6	[3F38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B097, 0x0021 };
    uint32_t const ces[9] = { 0x3F38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_395)
{
    // 1B097 003F;	
    // (õÇó) HENTAIGANA LETTER NE-6	[3F38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B097, 0x003F };
    uint32_t const ces[9] = { 0x3F38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_396)
{
    // 1B097 0061;	
    // (õÇó) HENTAIGANA LETTER NE-6	[3F38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B097, 0x0061 };
    uint32_t const ces[9] = { 0x3F38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_397)
{
    // 1B097 0041;	
    // (õÇó) HENTAIGANA LETTER NE-6	[3F38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B097, 0x0041 };
    uint32_t const ces[9] = { 0x3F38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_398)
{
    // 1B097 0062;	
    // (õÇó) HENTAIGANA LETTER NE-6	[3F38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B097, 0x0062 };
    uint32_t const ces[9] = { 0x3F38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_399)
{
    // 1B098 0021;	
    // (õÇò) HENTAIGANA LETTER NE-KO	[3F39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B098, 0x0021 };
    uint32_t const ces[9] = { 0x3F39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_400)
{
    // 1B098 003F;	
    // (õÇò) HENTAIGANA LETTER NE-KO	[3F39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B098, 0x003F };
    uint32_t const ces[9] = { 0x3F39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_401)
{
    // 1B098 0061;	
    // (õÇò) HENTAIGANA LETTER NE-KO	[3F39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B098, 0x0061 };
    uint32_t const ces[9] = { 0x3F39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_402)
{
    // 1B098 0041;	
    // (õÇò) HENTAIGANA LETTER NE-KO	[3F39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B098, 0x0041 };
    uint32_t const ces[9] = { 0x3F39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_403)
{
    // 1B098 0062;	
    // (õÇò) HENTAIGANA LETTER NE-KO	[3F39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B098, 0x0062 };
    uint32_t const ces[9] = { 0x3F39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_404)
{
    // 1B099 0021;	
    // (õÇô) HENTAIGANA LETTER NO-1	[3F3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B099, 0x0021 };
    uint32_t const ces[9] = { 0x3F3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_405)
{
    // 1B099 003F;	
    // (õÇô) HENTAIGANA LETTER NO-1	[3F3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B099, 0x003F };
    uint32_t const ces[9] = { 0x3F3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_406)
{
    // 1B099 0061;	
    // (õÇô) HENTAIGANA LETTER NO-1	[3F3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B099, 0x0061 };
    uint32_t const ces[9] = { 0x3F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_407)
{
    // 1B099 0041;	
    // (õÇô) HENTAIGANA LETTER NO-1	[3F3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B099, 0x0041 };
    uint32_t const ces[9] = { 0x3F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_408)
{
    // 1B099 0062;	
    // (õÇô) HENTAIGANA LETTER NO-1	[3F3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B099, 0x0062 };
    uint32_t const ces[9] = { 0x3F3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_409)
{
    // 1B09A 0021;	
    // (õÇö) HENTAIGANA LETTER NO-2	[3F3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09A, 0x0021 };
    uint32_t const ces[9] = { 0x3F3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_410)
{
    // 1B09A 003F;	
    // (õÇö) HENTAIGANA LETTER NO-2	[3F3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09A, 0x003F };
    uint32_t const ces[9] = { 0x3F3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_411)
{
    // 1B09A 0061;	
    // (õÇö) HENTAIGANA LETTER NO-2	[3F3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09A, 0x0061 };
    uint32_t const ces[9] = { 0x3F3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_412)
{
    // 1B09A 0041;	
    // (õÇö) HENTAIGANA LETTER NO-2	[3F3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B09A, 0x0041 };
    uint32_t const ces[9] = { 0x3F3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_413)
{
    // 1B09A 0062;	
    // (õÇö) HENTAIGANA LETTER NO-2	[3F3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09A, 0x0062 };
    uint32_t const ces[9] = { 0x3F3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_414)
{
    // 1B09B 0021;	
    // (õÇõ) HENTAIGANA LETTER NO-3	[3F3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09B, 0x0021 };
    uint32_t const ces[9] = { 0x3F3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_415)
{
    // 1B09B 003F;	
    // (õÇõ) HENTAIGANA LETTER NO-3	[3F3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09B, 0x003F };
    uint32_t const ces[9] = { 0x3F3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_416)
{
    // 1B09B 0061;	
    // (õÇõ) HENTAIGANA LETTER NO-3	[3F3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09B, 0x0061 };
    uint32_t const ces[9] = { 0x3F3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_417)
{
    // 1B09B 0041;	
    // (õÇõ) HENTAIGANA LETTER NO-3	[3F3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B09B, 0x0041 };
    uint32_t const ces[9] = { 0x3F3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_418)
{
    // 1B09B 0062;	
    // (õÇõ) HENTAIGANA LETTER NO-3	[3F3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09B, 0x0062 };
    uint32_t const ces[9] = { 0x3F3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_419)
{
    // 1B09C 0021;	
    // (õÇú) HENTAIGANA LETTER NO-4	[3F3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09C, 0x0021 };
    uint32_t const ces[9] = { 0x3F3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_420)
{
    // 1B09C 003F;	
    // (õÇú) HENTAIGANA LETTER NO-4	[3F3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09C, 0x003F };
    uint32_t const ces[9] = { 0x3F3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_421)
{
    // 1B09C 0061;	
    // (õÇú) HENTAIGANA LETTER NO-4	[3F3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09C, 0x0061 };
    uint32_t const ces[9] = { 0x3F3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_422)
{
    // 1B09C 0041;	
    // (õÇú) HENTAIGANA LETTER NO-4	[3F3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B09C, 0x0041 };
    uint32_t const ces[9] = { 0x3F3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_423)
{
    // 1B09C 0062;	
    // (õÇú) HENTAIGANA LETTER NO-4	[3F3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09C, 0x0062 };
    uint32_t const ces[9] = { 0x3F3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_424)
{
    // 1B09D 0021;	
    // (õÇù) HENTAIGANA LETTER NO-5	[3F3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09D, 0x0021 };
    uint32_t const ces[9] = { 0x3F3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_425)
{
    // 1B09D 003F;	
    // (õÇù) HENTAIGANA LETTER NO-5	[3F3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09D, 0x003F };
    uint32_t const ces[9] = { 0x3F3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_426)
{
    // 1B09D 0061;	
    // (õÇù) HENTAIGANA LETTER NO-5	[3F3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09D, 0x0061 };
    uint32_t const ces[9] = { 0x3F3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_427)
{
    // 1B09D 0041;	
    // (õÇù) HENTAIGANA LETTER NO-5	[3F3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B09D, 0x0041 };
    uint32_t const ces[9] = { 0x3F3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_428)
{
    // 1B09D 0062;	
    // (õÇù) HENTAIGANA LETTER NO-5	[3F3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09D, 0x0062 };
    uint32_t const ces[9] = { 0x3F3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_429)
{
    // 1B09E 0021;	
    // (õÇû) HENTAIGANA LETTER HA-1	[3F3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09E, 0x0021 };
    uint32_t const ces[9] = { 0x3F3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_430)
{
    // 1B09E 003F;	
    // (õÇû) HENTAIGANA LETTER HA-1	[3F3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09E, 0x003F };
    uint32_t const ces[9] = { 0x3F3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_431)
{
    // 1B09E 0061;	
    // (õÇû) HENTAIGANA LETTER HA-1	[3F3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09E, 0x0061 };
    uint32_t const ces[9] = { 0x3F3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_432)
{
    // 1B09E 0041;	
    // (õÇû) HENTAIGANA LETTER HA-1	[3F3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B09E, 0x0041 };
    uint32_t const ces[9] = { 0x3F3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_433)
{
    // 1B09E 0062;	
    // (õÇû) HENTAIGANA LETTER HA-1	[3F3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09E, 0x0062 };
    uint32_t const ces[9] = { 0x3F3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_434)
{
    // 1B09F 0021;	
    // (õÇü) HENTAIGANA LETTER HA-2	[3F40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09F, 0x0021 };
    uint32_t const ces[9] = { 0x3F40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_435)
{
    // 1B09F 003F;	
    // (õÇü) HENTAIGANA LETTER HA-2	[3F40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09F, 0x003F };
    uint32_t const ces[9] = { 0x3F40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_436)
{
    // 1B09F 0061;	
    // (õÇü) HENTAIGANA LETTER HA-2	[3F40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09F, 0x0061 };
    uint32_t const ces[9] = { 0x3F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_437)
{
    // 1B09F 0041;	
    // (õÇü) HENTAIGANA LETTER HA-2	[3F40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B09F, 0x0041 };
    uint32_t const ces[9] = { 0x3F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_438)
{
    // 1B09F 0062;	
    // (õÇü) HENTAIGANA LETTER HA-2	[3F40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B09F, 0x0062 };
    uint32_t const ces[9] = { 0x3F40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_439)
{
    // 1B0A0 0021;	
    // (õÇ†) HENTAIGANA LETTER HA-3	[3F41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A0, 0x0021 };
    uint32_t const ces[9] = { 0x3F41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_440)
{
    // 1B0A0 003F;	
    // (õÇ†) HENTAIGANA LETTER HA-3	[3F41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A0, 0x003F };
    uint32_t const ces[9] = { 0x3F41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_441)
{
    // 1B0A0 0061;	
    // (õÇ†) HENTAIGANA LETTER HA-3	[3F41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A0, 0x0061 };
    uint32_t const ces[9] = { 0x3F41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_442)
{
    // 1B0A0 0041;	
    // (õÇ†) HENTAIGANA LETTER HA-3	[3F41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0A0, 0x0041 };
    uint32_t const ces[9] = { 0x3F41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_443)
{
    // 1B0A0 0062;	
    // (õÇ†) HENTAIGANA LETTER HA-3	[3F41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A0, 0x0062 };
    uint32_t const ces[9] = { 0x3F41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_444)
{
    // 1B0A1 0021;	
    // (õÇ°) HENTAIGANA LETTER HA-4	[3F42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A1, 0x0021 };
    uint32_t const ces[9] = { 0x3F42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_445)
{
    // 1B0A1 003F;	
    // (õÇ°) HENTAIGANA LETTER HA-4	[3F42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A1, 0x003F };
    uint32_t const ces[9] = { 0x3F42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_446)
{
    // 1B0A1 0061;	
    // (õÇ°) HENTAIGANA LETTER HA-4	[3F42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A1, 0x0061 };
    uint32_t const ces[9] = { 0x3F42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_447)
{
    // 1B0A1 0041;	
    // (õÇ°) HENTAIGANA LETTER HA-4	[3F42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0A1, 0x0041 };
    uint32_t const ces[9] = { 0x3F42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_448)
{
    // 1B0A1 0062;	
    // (õÇ°) HENTAIGANA LETTER HA-4	[3F42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A1, 0x0062 };
    uint32_t const ces[9] = { 0x3F42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_449)
{
    // 1B0A2 0021;	
    // (õÇ¢) HENTAIGANA LETTER HA-5	[3F43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A2, 0x0021 };
    uint32_t const ces[9] = { 0x3F43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_450)
{
    // 1B0A2 003F;	
    // (õÇ¢) HENTAIGANA LETTER HA-5	[3F43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A2, 0x003F };
    uint32_t const ces[9] = { 0x3F43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_451)
{
    // 1B0A2 0061;	
    // (õÇ¢) HENTAIGANA LETTER HA-5	[3F43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A2, 0x0061 };
    uint32_t const ces[9] = { 0x3F43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_452)
{
    // 1B0A2 0041;	
    // (õÇ¢) HENTAIGANA LETTER HA-5	[3F43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0A2, 0x0041 };
    uint32_t const ces[9] = { 0x3F43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_453)
{
    // 1B0A2 0062;	
    // (õÇ¢) HENTAIGANA LETTER HA-5	[3F43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A2, 0x0062 };
    uint32_t const ces[9] = { 0x3F43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_454)
{
    // 1B0A3 0021;	
    // (õÇ£) HENTAIGANA LETTER HA-6	[3F44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A3, 0x0021 };
    uint32_t const ces[9] = { 0x3F44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_455)
{
    // 1B0A3 003F;	
    // (õÇ£) HENTAIGANA LETTER HA-6	[3F44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A3, 0x003F };
    uint32_t const ces[9] = { 0x3F44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_456)
{
    // 1B0A3 0061;	
    // (õÇ£) HENTAIGANA LETTER HA-6	[3F44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A3, 0x0061 };
    uint32_t const ces[9] = { 0x3F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_457)
{
    // 1B0A3 0041;	
    // (õÇ£) HENTAIGANA LETTER HA-6	[3F44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0A3, 0x0041 };
    uint32_t const ces[9] = { 0x3F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_458)
{
    // 1B0A3 0062;	
    // (õÇ£) HENTAIGANA LETTER HA-6	[3F44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A3, 0x0062 };
    uint32_t const ces[9] = { 0x3F44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_459)
{
    // 1B0A4 0021;	
    // (õÇ§) HENTAIGANA LETTER HA-7	[3F45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A4, 0x0021 };
    uint32_t const ces[9] = { 0x3F45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_460)
{
    // 1B0A4 003F;	
    // (õÇ§) HENTAIGANA LETTER HA-7	[3F45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A4, 0x003F };
    uint32_t const ces[9] = { 0x3F45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_461)
{
    // 1B0A4 0061;	
    // (õÇ§) HENTAIGANA LETTER HA-7	[3F45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A4, 0x0061 };
    uint32_t const ces[9] = { 0x3F45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_462)
{
    // 1B0A4 0041;	
    // (õÇ§) HENTAIGANA LETTER HA-7	[3F45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0A4, 0x0041 };
    uint32_t const ces[9] = { 0x3F45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_463)
{
    // 1B0A4 0062;	
    // (õÇ§) HENTAIGANA LETTER HA-7	[3F45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A4, 0x0062 };
    uint32_t const ces[9] = { 0x3F45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_464)
{
    // 1B0A5 0021;	
    // (õÇ•) HENTAIGANA LETTER HA-8	[3F46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A5, 0x0021 };
    uint32_t const ces[9] = { 0x3F46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_465)
{
    // 1B0A5 003F;	
    // (õÇ•) HENTAIGANA LETTER HA-8	[3F46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A5, 0x003F };
    uint32_t const ces[9] = { 0x3F46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_466)
{
    // 1B0A5 0061;	
    // (õÇ•) HENTAIGANA LETTER HA-8	[3F46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A5, 0x0061 };
    uint32_t const ces[9] = { 0x3F46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_467)
{
    // 1B0A5 0041;	
    // (õÇ•) HENTAIGANA LETTER HA-8	[3F46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0A5, 0x0041 };
    uint32_t const ces[9] = { 0x3F46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_468)
{
    // 1B0A5 0062;	
    // (õÇ•) HENTAIGANA LETTER HA-8	[3F46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A5, 0x0062 };
    uint32_t const ces[9] = { 0x3F46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_469)
{
    // 1B0A6 0021;	
    // (õÇ¶) HENTAIGANA LETTER HA-9	[3F47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A6, 0x0021 };
    uint32_t const ces[9] = { 0x3F47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_470)
{
    // 1B0A6 003F;	
    // (õÇ¶) HENTAIGANA LETTER HA-9	[3F47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A6, 0x003F };
    uint32_t const ces[9] = { 0x3F47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_471)
{
    // 1B0A6 0061;	
    // (õÇ¶) HENTAIGANA LETTER HA-9	[3F47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A6, 0x0061 };
    uint32_t const ces[9] = { 0x3F47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_472)
{
    // 1B0A6 0041;	
    // (õÇ¶) HENTAIGANA LETTER HA-9	[3F47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0A6, 0x0041 };
    uint32_t const ces[9] = { 0x3F47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_473)
{
    // 1B0A6 0062;	
    // (õÇ¶) HENTAIGANA LETTER HA-9	[3F47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A6, 0x0062 };
    uint32_t const ces[9] = { 0x3F47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_474)
{
    // 1B0A7 0021;	
    // (õÇß) HENTAIGANA LETTER HA-10	[3F48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A7, 0x0021 };
    uint32_t const ces[9] = { 0x3F48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_475)
{
    // 1B0A7 003F;	
    // (õÇß) HENTAIGANA LETTER HA-10	[3F48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A7, 0x003F };
    uint32_t const ces[9] = { 0x3F48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_476)
{
    // 1B0A7 0061;	
    // (õÇß) HENTAIGANA LETTER HA-10	[3F48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A7, 0x0061 };
    uint32_t const ces[9] = { 0x3F48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_477)
{
    // 1B0A7 0041;	
    // (õÇß) HENTAIGANA LETTER HA-10	[3F48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0A7, 0x0041 };
    uint32_t const ces[9] = { 0x3F48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_478)
{
    // 1B0A7 0062;	
    // (õÇß) HENTAIGANA LETTER HA-10	[3F48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A7, 0x0062 };
    uint32_t const ces[9] = { 0x3F48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_479)
{
    // 1B0A8 0021;	
    // (õÇ®) HENTAIGANA LETTER HA-11	[3F49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A8, 0x0021 };
    uint32_t const ces[9] = { 0x3F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_480)
{
    // 1B0A8 003F;	
    // (õÇ®) HENTAIGANA LETTER HA-11	[3F49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A8, 0x003F };
    uint32_t const ces[9] = { 0x3F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_481)
{
    // 1B0A8 0061;	
    // (õÇ®) HENTAIGANA LETTER HA-11	[3F49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A8, 0x0061 };
    uint32_t const ces[9] = { 0x3F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_482)
{
    // 1B0A8 0041;	
    // (õÇ®) HENTAIGANA LETTER HA-11	[3F49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0A8, 0x0041 };
    uint32_t const ces[9] = { 0x3F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_483)
{
    // 1B0A8 0062;	
    // (õÇ®) HENTAIGANA LETTER HA-11	[3F49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A8, 0x0062 };
    uint32_t const ces[9] = { 0x3F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_484)
{
    // 1B0A9 0021;	
    // (õÇ©) HENTAIGANA LETTER HI-1	[3F4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A9, 0x0021 };
    uint32_t const ces[9] = { 0x3F4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_485)
{
    // 1B0A9 003F;	
    // (õÇ©) HENTAIGANA LETTER HI-1	[3F4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A9, 0x003F };
    uint32_t const ces[9] = { 0x3F4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_486)
{
    // 1B0A9 0061;	
    // (õÇ©) HENTAIGANA LETTER HI-1	[3F4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A9, 0x0061 };
    uint32_t const ces[9] = { 0x3F4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_487)
{
    // 1B0A9 0041;	
    // (õÇ©) HENTAIGANA LETTER HI-1	[3F4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0A9, 0x0041 };
    uint32_t const ces[9] = { 0x3F4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_488)
{
    // 1B0A9 0062;	
    // (õÇ©) HENTAIGANA LETTER HI-1	[3F4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0A9, 0x0062 };
    uint32_t const ces[9] = { 0x3F4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_489)
{
    // 1B0AA 0021;	
    // (õÇ™) HENTAIGANA LETTER HI-2	[3F4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AA, 0x0021 };
    uint32_t const ces[9] = { 0x3F4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_490)
{
    // 1B0AA 003F;	
    // (õÇ™) HENTAIGANA LETTER HI-2	[3F4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AA, 0x003F };
    uint32_t const ces[9] = { 0x3F4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_491)
{
    // 1B0AA 0061;	
    // (õÇ™) HENTAIGANA LETTER HI-2	[3F4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AA, 0x0061 };
    uint32_t const ces[9] = { 0x3F4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_492)
{
    // 1B0AA 0041;	
    // (õÇ™) HENTAIGANA LETTER HI-2	[3F4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0AA, 0x0041 };
    uint32_t const ces[9] = { 0x3F4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_493)
{
    // 1B0AA 0062;	
    // (õÇ™) HENTAIGANA LETTER HI-2	[3F4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AA, 0x0062 };
    uint32_t const ces[9] = { 0x3F4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_494)
{
    // 1B0AB 0021;	
    // (õÇ´) HENTAIGANA LETTER HI-3	[3F4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AB, 0x0021 };
    uint32_t const ces[9] = { 0x3F4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_495)
{
    // 1B0AB 003F;	
    // (õÇ´) HENTAIGANA LETTER HI-3	[3F4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AB, 0x003F };
    uint32_t const ces[9] = { 0x3F4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_496)
{
    // 1B0AB 0061;	
    // (õÇ´) HENTAIGANA LETTER HI-3	[3F4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AB, 0x0061 };
    uint32_t const ces[9] = { 0x3F4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_497)
{
    // 1B0AB 0041;	
    // (õÇ´) HENTAIGANA LETTER HI-3	[3F4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0AB, 0x0041 };
    uint32_t const ces[9] = { 0x3F4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_498)
{
    // 1B0AB 0062;	
    // (õÇ´) HENTAIGANA LETTER HI-3	[3F4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AB, 0x0062 };
    uint32_t const ces[9] = { 0x3F4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_251_499)
{
    // 1B0AC 0021;	
    // (õÇ¨) HENTAIGANA LETTER HI-4	[3F4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AC, 0x0021 };
    uint32_t const ces[9] = { 0x3F4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

