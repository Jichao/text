// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_009_000)
{
    // 0711 003F;	
    // (ܑ) SYRIAC LETTER SUPERSCRIPT ALAPH	[0267 | 0099 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0711, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0099, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_001)
{
    // 0730 003F;	
    // (ܰ) SYRIAC PTHAHA ABOVE	[0267 | 009A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0730, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x009A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_002)
{
    // 0731 003F;	
    // (ܱ) SYRIAC PTHAHA BELOW	[0267 | 009B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0731, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x009B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_003)
{
    // 0732 003F;	
    // (ܲ) SYRIAC PTHAHA DOTTED	[0267 | 009C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0732, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x009C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_004)
{
    // 0733 003F;	
    // (ܳ) SYRIAC ZQAPHA ABOVE	[0267 | 009D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0733, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x009D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_005)
{
    // 0734 003F;	
    // (ܴ) SYRIAC ZQAPHA BELOW	[0267 | 009E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0734, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x009E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_006)
{
    // 0735 003F;	
    // (ܵ) SYRIAC ZQAPHA DOTTED	[0267 | 009F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0735, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x009F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_007)
{
    // 0736 003F;	
    // (ܶ) SYRIAC RBASA ABOVE	[0267 | 00A0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0736, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00A0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_008)
{
    // 0737 003F;	
    // (ܷ) SYRIAC RBASA BELOW	[0267 | 00A1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0737, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00A1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_009)
{
    // 0738 003F;	
    // (ܸ) SYRIAC DOTTED ZLAMA HORIZONTAL	[0267 | 00A2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0738, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00A2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_010)
{
    // 0739 003F;	
    // (ܹ) SYRIAC DOTTED ZLAMA ANGULAR	[0267 | 00A3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0739, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00A3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_011)
{
    // 073A 003F;	
    // (ܺ) SYRIAC HBASA ABOVE	[0267 | 00A4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00A4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_012)
{
    // 073B 003F;	
    // (ܻ) SYRIAC HBASA BELOW	[0267 | 00A5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00A5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_013)
{
    // 073C 003F;	
    // (ܼ) SYRIAC HBASA-ESASA DOTTED	[0267 | 00A6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00A6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_014)
{
    // 073D 003F;	
    // (ܽ) SYRIAC ESASA ABOVE	[0267 | 00A7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00A7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_015)
{
    // 073E 003F;	
    // (ܾ) SYRIAC ESASA BELOW	[0267 | 00A8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00A8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_016)
{
    // 073F 003F;	
    // (ܿ) SYRIAC RWAHA	[0267 | 00A9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00A9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_017)
{
    // 07EB 003F;	
    // (߫) NKO COMBINING SHORT HIGH TONE	[0267 | 00AA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00AA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_018)
{
    // 07EC 003F;	
    // (߬) NKO COMBINING SHORT LOW TONE	[0267 | 00AB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00AB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_019)
{
    // 07ED 003F;	
    // (߭) NKO COMBINING SHORT RISING TONE	[0267 | 00AC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07ED, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00AC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_020)
{
    // 07EE 003F;	
    // (߮) NKO COMBINING LONG DESCENDING TONE	[0267 | 00AD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EE, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00AD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_021)
{
    // 07EF 003F;	
    // (߯) NKO COMBINING LONG HIGH TONE	[0267 | 00AE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00AE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_022)
{
    // 07F0 003F;	
    // (߰) NKO COMBINING LONG LOW TONE	[0267 | 00AF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00AF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_023)
{
    // 07F1 003F;	
    // (߱) NKO COMBINING LONG RISING TONE	[0267 | 00B0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00B0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_024)
{
    // 07F2 003F;	
    // (߲) NKO COMBINING NASALIZATION MARK	[0267 | 00B1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F2, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00B1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_025)
{
    // 07F3 003F;	
    // (߳) NKO COMBINING DOUBLE DOT ABOVE	[0267 | 00B2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F3, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00B2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_026)
{
    // 135F 003F;	
    // (፟) ETHIOPIC COMBINING GEMINATION MARK	[0267 | 00B3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00B3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_027)
{
    // 135E 003F;	
    // (፞) ETHIOPIC COMBINING VOWEL LENGTH MARK	[0267 | 00B4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00B4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_028)
{
    // 135D 003F;	
    // (፝) ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK	[0267 | 00B5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00B5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_029)
{
    // A6F0 003F;	
    // (꛰) BAMUM COMBINING MARK KOQNDON	[0267 | 00B6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00B6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_030)
{
    // A6F1 003F;	
    // (꛱) BAMUM COMBINING MARK TUKWENTIS	[0267 | 00B7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00B7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_031)
{
    // 16AF0 003F;	
    // (𖫰) BASSA VAH COMBINING HIGH TONE	[0267 | 00B8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00B8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_032)
{
    // 16AF1 003F;	
    // (𖫱) BASSA VAH COMBINING LOW TONE	[0267 | 00B9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00B9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_033)
{
    // 16AF2 003F;	
    // (𖫲) BASSA VAH COMBINING MID TONE	[0267 | 00BA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF2, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00BA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_034)
{
    // 16AF3 003F;	
    // (𖫳) BASSA VAH COMBINING LOW-MID TONE	[0267 | 00BB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF3, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00BB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_035)
{
    // 16AF4 003F;	
    // (𖫴) BASSA VAH COMBINING HIGH-LOW TONE	[0267 | 00BC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF4, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00BC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_036)
{
    // 1E944 003F;	
    // (𞥄) ADLAM ALIF LENGTHENER	[0267 | 00BD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E944, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00BD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_037)
{
    // 1E945 003F;	
    // (𞥅) ADLAM VOWEL LENGTHENER	[0267 | 00BD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E945, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00BD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_038)
{
    // 1E946 003F;	
    // (𞥆) ADLAM GEMINATION MARK	[0267 | 00BD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E946, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00BD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_039)
{
    // 1E94A 003F;	
    // (𞥊) ADLAM NUKTA	[0267 | 00BE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E94A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00BE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_040)
{
    // 1E947 003F;	
    // (𞥇) ADLAM HAMZA	[0267 | 00BF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E947, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00BF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_041)
{
    // 1E948 003F;	
    // (𞥈) ADLAM CONSONANT MODIFIER	[0267 | 00C0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E948, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_042)
{
    // 1E949 003F;	
    // (𞥉) ADLAM GEMINATE CONSONANT MODIFIER	[0267 | 00C1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E949, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_043)
{
    // 093C 003F;	
    // (़) DEVANAGARI SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_044)
{
    // 09BC 003F;	
    // (়) BENGALI SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09BC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_045)
{
    // 0A3C 003F;	
    // (਼) GURMUKHI SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_046)
{
    // 0ABC 003F;	
    // (઼) GUJARATI SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_047)
{
    // 0AFD 003F;	
    // (૽) GUJARATI SIGN THREE-DOT NUKTA ABOVE	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFD, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_048)
{
    // 0AFE 003F;	
    // (૾) GUJARATI SIGN CIRCLE NUKTA ABOVE	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFE, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_049)
{
    // 0AFF 003F;	
    // (૿) GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_050)
{
    // 0B3C 003F;	
    // (଼) ORIYA SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_051)
{
    // 0CBC 003F;	
    // (಼) KANNADA SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_052)
{
    // 1B34 003F;	
    // (᬴) BALINESE SIGN REREKAN	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B34, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_053)
{
    // 1BE6 003F;	
    // (᯦) BATAK SIGN TOMPI	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BE6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_054)
{
    // 1C37 003F;	
    // (᰷) LEPCHA SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C37, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_055)
{
    // A9B3 003F;	
    // (꦳) JAVANESE SIGN CECAK TELU	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B3, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_056)
{
    // 110BA 003F;	
    // (𑂺) KAITHI SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110BA, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_057)
{
    // 11173 003F;	
    // (𑅳) MAHAJANI SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11173, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_058)
{
    // 111CA 003F;	
    // (𑇊) SHARADA SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111CA, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_059)
{
    // 11236 003F;	
    // (𑈶) KHOJKI SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11236, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_060)
{
    // 112E9 003F;	
    // (𑋩) KHUDAWADI SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E9, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_061)
{
    // 1133C 003F;	
    // (𑌼) GRANTHA SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_062)
{
    // 11446 003F;	
    // (𑑆) NEWA SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11446, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_063)
{
    // 114C3 003F;	
    // (𑓃) TIRHUTA SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C3, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_064)
{
    // 115C0 003F;	
    // (𑗀) SIDDHAM SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_065)
{
    // 116B7 003F;	
    // (𑚷) TAKRI SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B7, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_066)
{
    // 11A33 003F;	
    // (𑨳) ZANABAZAR SQUARE FINAL CONSONANT MARK	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A33, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_067)
{
    // 11D42 003F;	
    // (𑵂) MASARAM GONDI SIGN NUKTA	[0267 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D42, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_068)
{
    // 0900 003F;	
    // (ऀ) DEVANAGARI SIGN INVERTED CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0900, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_069)
{
    // 0901 003F;	
    // (ँ) DEVANAGARI SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0901, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_070)
{
    // 0981 003F;	
    // (ঁ) BENGALI SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0981, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_071)
{
    // 0A01 003F;	
    // (ਁ) GURMUKHI SIGN ADAK BINDI	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A01, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_072)
{
    // 0A81 003F;	
    // (ઁ) GUJARATI SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A81, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_073)
{
    // 0B01 003F;	
    // (ଁ) ORIYA SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B01, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_074)
{
    // 0C00 003F;	
    // (ఀ) TELUGU SIGN COMBINING CANDRABINDU ABOVE	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C00, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_075)
{
    // 0C01 003F;	
    // (ఁ) TELUGU SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C01, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_076)
{
    // 0C81 003F;	
    // (ಁ) KANNADA SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C81, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_077)
{
    // 0D01 003F;	
    // (ഁ) MALAYALAM SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D01, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_078)
{
    // 1B00 003F;	
    // (ᬀ) BALINESE SIGN ULU RICEM	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B00, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_079)
{
    // 1B01 003F;	
    // (ᬁ) BALINESE SIGN ULU CANDRA	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B01, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_080)
{
    // A8C5 003F;	
    // (ꣅ) SAURASHTRA SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8C5, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_081)
{
    // A980 003F;	
    // (ꦀ) JAVANESE SIGN PANYANGGA	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA980, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_082)
{
    // 11000 003F;	
    // (𑀀) BRAHMI SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11000, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_083)
{
    // 11080 003F;	
    // (𑂀) KAITHI SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11080, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_084)
{
    // 11100 003F;	
    // (𑄀) CHAKMA SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11100, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_085)
{
    // 11180 003F;	
    // (𑆀) SHARADA SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11180, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_086)
{
    // 11301 003F;	
    // (𑌁) GRANTHA SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11301, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_087)
{
    // 11443 003F;	
    // (𑑃) NEWA SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11443, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_088)
{
    // 114BF 003F;	
    // (𑒿) TIRHUTA SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_089)
{
    // 115BC 003F;	
    // (𑖼) SIDDHAM SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_090)
{
    // 11640 003F;	
    // (𑙀) MODI SIGN ARDHACANDRA	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11640, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_091)
{
    // 11A35 003F;	
    // (𑨵) ZANABAZAR SQUARE SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A35, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_092)
{
    // 11A36 003F;	
    // (𑨶) ZANABAZAR SQUARE SIGN CANDRABINDU WITH ORNAMENT	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A36, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_093)
{
    // 11A37 003F;	
    // (𑨷) ZANABAZAR SQUARE SIGN CANDRA WITH ORNAMENT	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A37, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_094)
{
    // 11C3C 003F;	
    // (𑰼) BHAIKSUKI SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_095)
{
    // 11CB6 003F;	
    // (𑲶) MARCHEN SIGN CANDRABINDU	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_096)
{
    // 11D43 003F;	
    // (𑵃) MASARAM GONDI SIGN CANDRA	[0267 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D43, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_097)
{
    // 0902 003F;	
    // (ं) DEVANAGARI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0902, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_098)
{
    // 0982 003F;	
    // (ং) BENGALI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0982, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_099)
{
    // 0A02 003F;	
    // (ਂ) GURMUKHI SIGN BINDI	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A02, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_100)
{
    // 0A82 003F;	
    // (ં) GUJARATI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A82, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_101)
{
    // 0B02 003F;	
    // (ଂ) ORIYA SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B02, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_102)
{
    // 0B82 003F;	
    // (ஂ) TAMIL SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B82, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_103)
{
    // 0C02 003F;	
    // (ం) TELUGU SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C02, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_104)
{
    // 0C82 003F;	
    // (ಂ) KANNADA SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C82, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_105)
{
    // 0D00 003F;	
    // (ഀ) MALAYALAM SIGN COMBINING ANUSVARA ABOVE	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D00, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_106)
{
    // 0D02 003F;	
    // (ം) MALAYALAM SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D02, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_107)
{
    // 0D82 003F;	
    // (ං) SINHALA SIGN ANUSVARAYA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D82, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_108)
{
    // 0F7E 003F;	
    // (ཾ) TIBETAN SIGN RJES SU NGA RO	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F7E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_109)
{
    // 1036 003F;	
    // (ံ) MYANMAR SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1036, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_110)
{
    // 17C6 003F;	
    // (ំ) KHMER SIGN NIKAHIT	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17C6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_111)
{
    // 1A74 003F;	
    // (ᩴ) TAI THAM SIGN MAI KANG	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A74, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_112)
{
    // 1B02 003F;	
    // (ᬂ) BALINESE SIGN CECEK	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B02, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_113)
{
    // 1B80 003F;	
    // (ᮀ) SUNDANESE SIGN PANYECEK	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B80, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_114)
{
    // 1CED 003F;	
    // (᳭) VEDIC SIGN TIRYAK	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CED, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_115)
{
    // A80B 003F;	
    // (ꠋ) SYLOTI NAGRI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_116)
{
    // A880 003F;	
    // (ꢀ) SAURASHTRA SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA880, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_117)
{
    // A981 003F;	
    // (ꦁ) JAVANESE SIGN CECAK	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA981, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_118)
{
    // 10A0E 003F;	
    // (𐨎) KHAROSHTHI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_119)
{
    // 11001 003F;	
    // (𑀁) BRAHMI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11001, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_120)
{
    // 11081 003F;	
    // (𑂁) KAITHI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11081, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_121)
{
    // 11101 003F;	
    // (𑄁) CHAKMA SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11101, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_122)
{
    // 11181 003F;	
    // (𑆁) SHARADA SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11181, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_123)
{
    // 11234 003F;	
    // (𑈴) KHOJKI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11234, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_124)
{
    // 112DF 003F;	
    // (𑋟) KHUDAWADI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_125)
{
    // 11300 003F;	
    // (𑌀) GRANTHA SIGN COMBINING ANUSVARA ABOVE	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11300, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_126)
{
    // 11302 003F;	
    // (𑌂) GRANTHA SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11302, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_127)
{
    // 11444 003F;	
    // (𑑄) NEWA SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11444, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_128)
{
    // 114C0 003F;	
    // (𑓀) TIRHUTA SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_129)
{
    // 115BD 003F;	
    // (𑖽) SIDDHAM SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BD, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_130)
{
    // 1163D 003F;	
    // (𑘽) MODI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_131)
{
    // 116AB 003F;	
    // (𑚫) TAKRI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_132)
{
    // 11A38 003F;	
    // (𑨸) ZANABAZAR SQUARE SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A38, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_133)
{
    // 11A96 003F;	
    // (𑪖) SOYOMBO SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A96, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_134)
{
    // 11C3D 003F;	
    // (𑰽) BHAIKSUKI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_135)
{
    // 11CB5 003F;	
    // (𑲵) MARCHEN SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB5, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_136)
{
    // 11D40 003F;	
    // (𑵀) MASARAM GONDI SIGN ANUSVARA	[0267 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D40, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_137)
{
    // 0903 003F;	
    // (ः) DEVANAGARI SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0903, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_138)
{
    // 0983 003F;	
    // (ঃ) BENGALI SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0983, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_139)
{
    // 0A03 003F;	
    // (ਃ) GURMUKHI SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A03, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_140)
{
    // 0A83 003F;	
    // (ઃ) GUJARATI SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A83, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_141)
{
    // 0B03 003F;	
    // (ଃ) ORIYA SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B03, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_142)
{
    // 0C03 003F;	
    // (ః) TELUGU SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C03, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_143)
{
    // 0C83 003F;	
    // (ಃ) KANNADA SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C83, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_144)
{
    // 0D03 003F;	
    // (ഃ) MALAYALAM SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D03, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_145)
{
    // 0D83 003F;	
    // (ඃ) SINHALA SIGN VISARGAYA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D83, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_146)
{
    // 0F7F 003F;	
    // (ཿ) TIBETAN SIGN RNAM BCAD	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F7F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_147)
{
    // 1038 003F;	
    // (း) MYANMAR SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_148)
{
    // 17C7 003F;	
    // (ះ) KHMER SIGN REAHMUK	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17C7, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_149)
{
    // 1B04 003F;	
    // (ᬄ) BALINESE SIGN BISAH	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_150)
{
    // 1B82 003F;	
    // (ᮂ) SUNDANESE SIGN PANGWISAD	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B82, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_151)
{
    // 1CF2 003F;	
    // (ᳲ) VEDIC SIGN ARDHAVISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF2, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_152)
{
    // 1CF3 003F;	
    // (ᳳ) VEDIC SIGN ROTATED ARDHAVISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF3, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_153)
{
    // A881 003F;	
    // (ꢁ) SAURASHTRA SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA881, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_154)
{
    // A983 003F;	
    // (ꦃ) JAVANESE SIGN WIGNYAN	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA983, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_155)
{
    // 10A0F 003F;	
    // (𐨏) KHAROSHTHI SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_156)
{
    // 11002 003F;	
    // (𑀂) BRAHMI SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11002, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_157)
{
    // 11082 003F;	
    // (𑂂) KAITHI SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11082, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_158)
{
    // 11102 003F;	
    // (𑄂) CHAKMA SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11102, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_159)
{
    // 11182 003F;	
    // (𑆂) SHARADA SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11182, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_160)
{
    // 11303 003F;	
    // (𑌃) GRANTHA SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11303, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_161)
{
    // 11445 003F;	
    // (𑑅) NEWA SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11445, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_162)
{
    // 114C1 003F;	
    // (𑓁) TIRHUTA SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_163)
{
    // 115BE 003F;	
    // (𑖾) SIDDHAM SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BE, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_164)
{
    // 1163E 003F;	
    // (𑘾) MODI SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_165)
{
    // 116AC 003F;	
    // (𑚬) TAKRI SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_166)
{
    // 11A39 003F;	
    // (𑨹) ZANABAZAR SQUARE SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A39, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_167)
{
    // 11A97 003F;	
    // (𑪗) SOYOMBO SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A97, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_168)
{
    // 11C3E 003F;	
    // (𑰾) BHAIKSUKI SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_169)
{
    // 11D41 003F;	
    // (𑵁) MASARAM GONDI SIGN VISARGA	[0267 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D41, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_170)
{
    // 0A70 003F;	
    // (ੰ) GURMUKHI TIPPI	[0267 | 00C6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A70, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_171)
{
    // 0A71 003F;	
    // (ੱ) GURMUKHI ADDAK	[0267 | 00C7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A71, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_172)
{
    // 1B03 003F;	
    // (ᬃ) BALINESE SIGN SURANG	[0267 | 00C8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B03, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_173)
{
    // A982 003F;	
    // (ꦂ) JAVANESE SIGN LAYAR	[0267 | 00C9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA982, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00C9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_174)
{
    // 1B81 003F;	
    // (ᮁ) SUNDANESE SIGN PANGLAYAR	[0267 | 00CA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B81, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00CA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_175)
{
    // ABEC 003F;	
    // (꯬) MEETEI MAYEK LUM IYEK	[0267 | 00CB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABEC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00CB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_176)
{
    // 10A38 003F;	
    // (𐨸) KHAROSHTHI SIGN BAR ABOVE	[0267 | 00CC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A38, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00CC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_177)
{
    // 10A39 003F;	
    // (𐨹) KHAROSHTHI SIGN CAUDA	[0267 | 00CD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A39, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00CD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_178)
{
    // 10A3A 003F;	
    // (𐨺) KHAROSHTHI SIGN DOT BELOW	[0267 | 00CE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A3A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00CE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_179)
{
    // 111CB 003F;	
    // (𑇋) SHARADA VOWEL MODIFIER MARK	[0267 | 00CF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111CB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00CF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_180)
{
    // 111CC 003F;	
    // (𑇌) SHARADA EXTRA SHORT VOWEL MARK	[0267 | 00D0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111CC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00D0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_181)
{
    // 11A98 003F;	
    // (𑪘) SOYOMBO GEMINATION MARK	[0267 | 00D1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A98, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00D1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_182)
{
    // 0E4E 003F;	
    // (๎) THAI CHARACTER YAMAKKAN	[0267 | 00D2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00D2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_183)
{
    // 0E47 003F;	
    // (็) THAI CHARACTER MAITAIKHU	[0267 | 00D3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E47, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00D3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_184)
{
    // 0E48 003F;	
    // (่) THAI CHARACTER MAI EK	[0267 | 00D4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E48, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00D4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_185)
{
    // 0E49 003F;	
    // (้) THAI CHARACTER MAI THO	[0267 | 00D5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E49, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00D5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_186)
{
    // 0E4A 003F;	
    // (๊) THAI CHARACTER MAI TRI	[0267 | 00D6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00D6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_187)
{
    // 0E4B 003F;	
    // (๋) THAI CHARACTER MAI CHATTAWA	[0267 | 00D7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00D7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_188)
{
    // 0E4C 003F;	
    // (์) THAI CHARACTER THANTHAKHAT	[0267 | 00D8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00D8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_189)
{
    // 0E4D 003F;	
    // (ํ) THAI CHARACTER NIKHAHIT	[0267 | 00D9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00D9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_190)
{
    // 0EC8 003F;	
    // (່) LAO TONE MAI EK	[0267 | 00DA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC8, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00DA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_191)
{
    // 0EC9 003F;	
    // (້) LAO TONE MAI THO	[0267 | 00DB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC9, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00DB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_192)
{
    // 0ECA 003F;	
    // (໊) LAO TONE MAI TI	[0267 | 00DC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ECA, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00DC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_193)
{
    // 0ECB 003F;	
    // (໋) LAO TONE MAI CATAWA	[0267 | 00DD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ECB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00DD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_194)
{
    // 0ECC 003F;	
    // (໌) LAO CANCELLATION MARK	[0267 | 00DE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ECC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00DE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_195)
{
    // 0ECD 003F;	
    // (ໍ) LAO NIGGAHITA	[0267 | 00DF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ECD, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00DF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_196)
{
    // AABF 003F;	
    // (꪿) TAI VIET TONE MAI EK	[0267 | 00E0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAABF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00E0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_197)
{
    // AAC1 003F;	
    // (꫁) TAI VIET TONE MAI THO	[0267 | 00E1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAC1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00E1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_198)
{
    // 0F39 003F;	
    // (༹) TIBETAN MARK TSA -PHRU	[0267 | 00E2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F39, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00E2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_199)
{
    // A92B 003F;	
    // (꤫) KAYAH LI TONE PLOPHU	[0267 | 00E3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA92B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00E3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_200)
{
    // A92C 003F;	
    // (꤬) KAYAH LI TONE CALYA	[0267 | 00E4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA92C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00E4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_201)
{
    // A92D 003F;	
    // (꤭) KAYAH LI TONE CALYA PLOPHU	[0267 | 00E5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA92D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00E5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_202)
{
    // 1037 003F;	
    // (့) MYANMAR SIGN DOT BELOW	[0267 | 00E6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1037, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00E6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_203)
{
    // 17C8 003F;	
    // (ៈ) KHMER SIGN YUUKALEAPINTU	[0267 | 00E7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17C8, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00E7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_204)
{
    // 17C9 003F;	
    // (៉) KHMER SIGN MUUSIKATOAN	[0267 | 00E8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17C9, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00E8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_205)
{
    // 17CA 003F;	
    // (៊) KHMER SIGN TRIISAP	[0267 | 00E9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CA, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00E9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_206)
{
    // 1A75 003F;	
    // (᩵) TAI THAM SIGN TONE-1	[0267 | 00EA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A75, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00EA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_207)
{
    // 1A76 003F;	
    // (᩶) TAI THAM SIGN TONE-2	[0267 | 00EB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A76, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00EB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_208)
{
    // 1A77 003F;	
    // (᩷) TAI THAM SIGN KHUEN TONE-3	[0267 | 00EC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A77, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00EC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_209)
{
    // 1A78 003F;	
    // (᩸) TAI THAM SIGN KHUEN TONE-4	[0267 | 00ED 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A78, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00ED, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_210)
{
    // 1A79 003F;	
    // (᩹) TAI THAM SIGN KHUEN TONE-5	[0267 | 00EE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A79, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00EE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_211)
{
    // 1A7A 003F;	
    // (᩺) TAI THAM SIGN RA HAAM	[0267 | 00EF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A7A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00EF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_212)
{
    // 1A7B 003F;	
    // (᩻) TAI THAM SIGN MAI SAM	[0267 | 00F0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A7B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00F0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_213)
{
    // 1A7C 003F;	
    // (᩼) TAI THAM SIGN KHUEN-LUE KARAN	[0267 | 00F1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A7C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00F1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_214)
{
    // 1939 003F;	
    // (᤹) LIMBU SIGN MUKPHRENG	[0267 | 00F2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1939, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00F2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_215)
{
    // 193A 003F;	
    // (᤺) LIMBU SIGN KEMPHRENG	[0267 | 00F3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x193A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00F3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_216)
{
    // 193B 003F;	
    // (᤻) LIMBU SIGN SA-I	[0267 | 00F4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x193B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00F4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_217)
{
    // 16B30 003F;	
    // (𖬰) PAHAWH HMONG MARK CIM TUB	[0267 | 00F5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B30, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00F5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_218)
{
    // 16B31 003F;	
    // (𖬱) PAHAWH HMONG MARK CIM SO	[0267 | 00F6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B31, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00F6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_219)
{
    // 16B32 003F;	
    // (𖬲) PAHAWH HMONG MARK CIM KES	[0267 | 00F7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B32, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00F7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_220)
{
    // 16B33 003F;	
    // (𖬳) PAHAWH HMONG MARK CIM KHAV	[0267 | 00F8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B33, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00F8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_221)
{
    // 16B34 003F;	
    // (𖬴) PAHAWH HMONG MARK CIM SUAM	[0267 | 00F9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B34, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00F9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_222)
{
    // 16B35 003F;	
    // (𖬵) PAHAWH HMONG MARK CIM HOM	[0267 | 00FA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B35, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00FA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_223)
{
    // 16B36 003F;	
    // (𖬶) PAHAWH HMONG MARK CIM TAUM	[0267 | 00FB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B36, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00FB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_224)
{
    // 302A 003F;	
    // (〪) IDEOGRAPHIC LEVEL TONE MARK	[0267 | 00FC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00FC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_225)
{
    // 302B 003F;	
    // (〫) IDEOGRAPHIC RISING TONE MARK	[0267 | 00FD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00FD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_226)
{
    // 302C 003F;	
    // (〬) IDEOGRAPHIC DEPARTING TONE MARK	[0267 | 00FE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00FE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_227)
{
    // 302D 003F;	
    // (〭) IDEOGRAPHIC ENTERING TONE MARK	[0267 | 00FF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x00FF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_228)
{
    // 302E 003F;	
    // (〮) HANGUL SINGLE DOT TONE MARK	[0267 | 0100 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0100, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_229)
{
    // 302F 003F;	
    // (〯) HANGUL DOUBLE DOT TONE MARK	[0267 | 0101 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0101, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_230)
{
    // 20D0 003F;	
    // (⃐) COMBINING LEFT HARPOON ABOVE	[0267 | 0102 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0102, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_231)
{
    // 20D1 003F;	
    // (⃑) COMBINING RIGHT HARPOON ABOVE	[0267 | 0103 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0103, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_232)
{
    // 20D2 003F;	
    // (⃒) COMBINING LONG VERTICAL LINE OVERLAY	[0267 | 0104 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D2, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0104, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_233)
{
    // 20D3 003F;	
    // (⃓) COMBINING SHORT VERTICAL LINE OVERLAY	[0267 | 0104 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D3, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0104, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_234)
{
    // 20D4 003F;	
    // (⃔) COMBINING ANTICLOCKWISE ARROW ABOVE	[0267 | 0105 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D4, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0105, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_235)
{
    // 20D5 003F;	
    // (⃕) COMBINING CLOCKWISE ARROW ABOVE	[0267 | 0106 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D5, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0106, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_236)
{
    // 20D6 003F;	
    // (⃖) COMBINING LEFT ARROW ABOVE	[0267 | 0107 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0107, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_237)
{
    // 20D7 003F;	
    // (⃗) COMBINING RIGHT ARROW ABOVE	[0267 | 0108 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D7, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0108, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_238)
{
    // 20DB 003F;	
    // (⃛) COMBINING THREE DOTS ABOVE	[0267 | 0109 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0109, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_239)
{
    // 20DC 003F;	
    // (⃜) COMBINING FOUR DOTS ABOVE	[0267 | 010A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x010A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_240)
{
    // 20E1 003F;	
    // (⃡) COMBINING LEFT RIGHT ARROW ABOVE	[0267 | 010B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x010B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_241)
{
    // 20E6 003F;	
    // (⃦) COMBINING DOUBLE VERTICAL STROKE OVERLAY	[0267 | 010C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x010C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_242)
{
    // 20E7 003F;	
    // (⃧) COMBINING ANNUITY SYMBOL	[0267 | 010D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E7, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x010D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_243)
{
    // 20E8 003F;	
    // (⃨) COMBINING TRIPLE UNDERDOT	[0267 | 010E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E8, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x010E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_244)
{
    // 20E9 003F;	
    // (⃩) COMBINING WIDE BRIDGE ABOVE	[0267 | 010F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E9, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x010F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_245)
{
    // 101FD 003F;	
    // (𐇽) PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE	[0267 | 0110 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101FD, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0110, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_246)
{
    // 003F 0021;	
    // ('?') QUESTION MARK	[0267 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003F, 0x0021 };
    uint32_t const ces[9] = { 0x0267, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_247)
{
    // FF1F 0021;	
    // (？) FULLWIDTH QUESTION MARK	[0267 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1F, 0x0021 };
    uint32_t const ces[9] = { 0x0267, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_248)
{
    // FE56 0021;	
    // (﹖) SMALL QUESTION MARK	[0267 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE56, 0x0021 };
    uint32_t const ces[9] = { 0x0267, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_249)
{
    // FE16 0021;	
    // (︖) PRESENTATION FORM FOR VERTICAL QUESTION MARK	[0267 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE16, 0x0021 };
    uint32_t const ces[9] = { 0x0267, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_250)
{
    // 2048 0021;	
    // (⁈) QUESTION EXCLAMATION MARK	[0267 0261 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2048, 0x0021 };
    uint32_t const ces[12] = { 0x0267, 0x0261, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_251)
{
    // 2048 003F;	
    // (⁈) QUESTION EXCLAMATION MARK	[0267 0261 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2048, 0x003F };
    uint32_t const ces[12] = { 0x0267, 0x0261, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_252)
{
    // 2048 0061;	
    // (⁈) QUESTION EXCLAMATION MARK	[0267 0261 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2048, 0x0061 };
    uint32_t const ces[12] = { 0x0267, 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_253)
{
    // 2048 0041;	
    // (⁈) QUESTION EXCLAMATION MARK	[0267 0261 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2048, 0x0041 };
    uint32_t const ces[12] = { 0x0267, 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_254)
{
    // 2048 0062;	
    // (⁈) QUESTION EXCLAMATION MARK	[0267 0261 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2048, 0x0062 };
    uint32_t const ces[12] = { 0x0267, 0x0261, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_255)
{
    // 003F 003F;	
    // ('?') QUESTION MARK	[0267 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003F, 0x003F };
    uint32_t const ces[9] = { 0x0267, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_256)
{
    // FF1F 003F;	
    // (？) FULLWIDTH QUESTION MARK	[0267 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1F, 0x003F };
    uint32_t const ces[9] = { 0x0267, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_257)
{
    // FE56 003F;	
    // (﹖) SMALL QUESTION MARK	[0267 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE56, 0x003F };
    uint32_t const ces[9] = { 0x0267, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_258)
{
    // FE16 003F;	
    // (︖) PRESENTATION FORM FOR VERTICAL QUESTION MARK	[0267 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE16, 0x003F };
    uint32_t const ces[9] = { 0x0267, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_259)
{
    // 2047 0021;	
    // (⁇) DOUBLE QUESTION MARK	[0267 0267 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2047, 0x0021 };
    uint32_t const ces[12] = { 0x0267, 0x0267, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_260)
{
    // 2047 003F;	
    // (⁇) DOUBLE QUESTION MARK	[0267 0267 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2047, 0x003F };
    uint32_t const ces[12] = { 0x0267, 0x0267, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_261)
{
    // 2047 0061;	
    // (⁇) DOUBLE QUESTION MARK	[0267 0267 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2047, 0x0061 };
    uint32_t const ces[12] = { 0x0267, 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_262)
{
    // 2047 0041;	
    // (⁇) DOUBLE QUESTION MARK	[0267 0267 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2047, 0x0041 };
    uint32_t const ces[12] = { 0x0267, 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_263)
{
    // 2047 0062;	
    // (⁇) DOUBLE QUESTION MARK	[0267 0267 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2047, 0x0062 };
    uint32_t const ces[12] = { 0x0267, 0x0267, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_264)
{
    // 003F 0061;	
    // ('?') QUESTION MARK	[0267 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003F, 0x0061 };
    uint32_t const ces[9] = { 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_265)
{
    // 003F 0041;	
    // ('?') QUESTION MARK	[0267 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x003F, 0x0041 };
    uint32_t const ces[9] = { 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_266)
{
    // FF1F 0061;	
    // (？) FULLWIDTH QUESTION MARK	[0267 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1F, 0x0061 };
    uint32_t const ces[9] = { 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_267)
{
    // FF1F 0041;	
    // (？) FULLWIDTH QUESTION MARK	[0267 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF1F, 0x0041 };
    uint32_t const ces[9] = { 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_268)
{
    // FE56 0061;	
    // (﹖) SMALL QUESTION MARK	[0267 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE56, 0x0061 };
    uint32_t const ces[9] = { 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_269)
{
    // FE56 0041;	
    // (﹖) SMALL QUESTION MARK	[0267 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE56, 0x0041 };
    uint32_t const ces[9] = { 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_270)
{
    // FE16 0061;	
    // (︖) PRESENTATION FORM FOR VERTICAL QUESTION MARK	[0267 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE16, 0x0061 };
    uint32_t const ces[9] = { 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_271)
{
    // FE16 0041;	
    // (︖) PRESENTATION FORM FOR VERTICAL QUESTION MARK	[0267 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE16, 0x0041 };
    uint32_t const ces[9] = { 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_272)
{
    // 003F 0062;	
    // ('?') QUESTION MARK	[0267 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x003F, 0x0062 };
    uint32_t const ces[9] = { 0x0267, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_273)
{
    // FF1F 0062;	
    // (？) FULLWIDTH QUESTION MARK	[0267 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF1F, 0x0062 };
    uint32_t const ces[9] = { 0x0267, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_274)
{
    // FE56 0062;	
    // (﹖) SMALL QUESTION MARK	[0267 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE56, 0x0062 };
    uint32_t const ces[9] = { 0x0267, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_275)
{
    // FE16 0062;	
    // (︖) PRESENTATION FORM FOR VERTICAL QUESTION MARK	[0267 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE16, 0x0062 };
    uint32_t const ces[9] = { 0x0267, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_276)
{
    // 00BF 0021;	
    // (¿) INVERTED QUESTION MARK	[0268 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00BF, 0x0021 };
    uint32_t const ces[9] = { 0x0268, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_277)
{
    // 00BF 003F;	
    // (¿) INVERTED QUESTION MARK	[0268 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00BF, 0x003F };
    uint32_t const ces[9] = { 0x0268, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_278)
{
    // 00BF 0061;	
    // (¿) INVERTED QUESTION MARK	[0268 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00BF, 0x0061 };
    uint32_t const ces[9] = { 0x0268, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_279)
{
    // 00BF 0041;	
    // (¿) INVERTED QUESTION MARK	[0268 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00BF, 0x0041 };
    uint32_t const ces[9] = { 0x0268, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_280)
{
    // 00BF 0062;	
    // (¿) INVERTED QUESTION MARK	[0268 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00BF, 0x0062 };
    uint32_t const ces[9] = { 0x0268, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_281)
{
    // 2E2E 0021;	
    // (⸮) REVERSED QUESTION MARK	[0269 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E2E, 0x0021 };
    uint32_t const ces[9] = { 0x0269, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_282)
{
    // 2E2E 003F;	
    // (⸮) REVERSED QUESTION MARK	[0269 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E2E, 0x003F };
    uint32_t const ces[9] = { 0x0269, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_283)
{
    // 2E2E 0061;	
    // (⸮) REVERSED QUESTION MARK	[0269 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E2E, 0x0061 };
    uint32_t const ces[9] = { 0x0269, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_284)
{
    // 2E2E 0041;	
    // (⸮) REVERSED QUESTION MARK	[0269 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E2E, 0x0041 };
    uint32_t const ces[9] = { 0x0269, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_285)
{
    // 2E2E 0062;	
    // (⸮) REVERSED QUESTION MARK	[0269 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E2E, 0x0062 };
    uint32_t const ces[9] = { 0x0269, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_286)
{
    // 055E 0021;	
    // (՞) ARMENIAN QUESTION MARK	[026A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055E, 0x0021 };
    uint32_t const ces[9] = { 0x026A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_287)
{
    // 055E 003F;	
    // (՞) ARMENIAN QUESTION MARK	[026A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055E, 0x003F };
    uint32_t const ces[9] = { 0x026A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_288)
{
    // 055E 0061;	
    // (՞) ARMENIAN QUESTION MARK	[026A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055E, 0x0061 };
    uint32_t const ces[9] = { 0x026A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_289)
{
    // 055E 0041;	
    // (՞) ARMENIAN QUESTION MARK	[026A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x055E, 0x0041 };
    uint32_t const ces[9] = { 0x026A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_290)
{
    // 055E 0062;	
    // (՞) ARMENIAN QUESTION MARK	[026A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055E, 0x0062 };
    uint32_t const ces[9] = { 0x026A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_291)
{
    // 061F 0021;	
    // (‎‎؟‎‎) ARABIC QUESTION MARK	[026B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061F, 0x0021 };
    uint32_t const ces[9] = { 0x026B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_292)
{
    // 061F 003F;	
    // (‎‎؟‎‎) ARABIC QUESTION MARK	[026B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061F, 0x003F };
    uint32_t const ces[9] = { 0x026B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_293)
{
    // 061F 0061;	
    // (‎‎؟‎‎) ARABIC QUESTION MARK	[026B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061F, 0x0061 };
    uint32_t const ces[9] = { 0x026B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_294)
{
    // 061F 0041;	
    // (‎‎؟‎‎) ARABIC QUESTION MARK	[026B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x061F, 0x0041 };
    uint32_t const ces[9] = { 0x026B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_295)
{
    // 061F 0062;	
    // (‎‎؟‎‎) ARABIC QUESTION MARK	[026B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x061F, 0x0062 };
    uint32_t const ces[9] = { 0x026B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_296)
{
    // 0709 0021;	
    // (‎‎܉‎‎) SYRIAC SUBLINEAR COLON SKEWED RIGHT	[026C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0709, 0x0021 };
    uint32_t const ces[9] = { 0x026C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_297)
{
    // 0709 003F;	
    // (‎‎܉‎‎) SYRIAC SUBLINEAR COLON SKEWED RIGHT	[026C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0709, 0x003F };
    uint32_t const ces[9] = { 0x026C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_298)
{
    // 0709 0061;	
    // (‎‎܉‎‎) SYRIAC SUBLINEAR COLON SKEWED RIGHT	[026C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0709, 0x0061 };
    uint32_t const ces[9] = { 0x026C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_299)
{
    // 0709 0041;	
    // (‎‎܉‎‎) SYRIAC SUBLINEAR COLON SKEWED RIGHT	[026C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0709, 0x0041 };
    uint32_t const ces[9] = { 0x026C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_300)
{
    // 0709 0062;	
    // (‎‎܉‎‎) SYRIAC SUBLINEAR COLON SKEWED RIGHT	[026C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0709, 0x0062 };
    uint32_t const ces[9] = { 0x026C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_301)
{
    // 1367 0021;	
    // (፧) ETHIOPIC QUESTION MARK	[026D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1367, 0x0021 };
    uint32_t const ces[9] = { 0x026D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_302)
{
    // 1367 003F;	
    // (፧) ETHIOPIC QUESTION MARK	[026D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1367, 0x003F };
    uint32_t const ces[9] = { 0x026D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_303)
{
    // 1367 0061;	
    // (፧) ETHIOPIC QUESTION MARK	[026D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1367, 0x0061 };
    uint32_t const ces[9] = { 0x026D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_304)
{
    // 1367 0041;	
    // (፧) ETHIOPIC QUESTION MARK	[026D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1367, 0x0041 };
    uint32_t const ces[9] = { 0x026D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_305)
{
    // 1367 0062;	
    // (፧) ETHIOPIC QUESTION MARK	[026D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1367, 0x0062 };
    uint32_t const ces[9] = { 0x026D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_306)
{
    // 1945 0021;	
    // (᥅) LIMBU QUESTION MARK	[026E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1945, 0x0021 };
    uint32_t const ces[9] = { 0x026E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_307)
{
    // 1945 003F;	
    // (᥅) LIMBU QUESTION MARK	[026E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1945, 0x003F };
    uint32_t const ces[9] = { 0x026E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_308)
{
    // 1945 0061;	
    // (᥅) LIMBU QUESTION MARK	[026E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1945, 0x0061 };
    uint32_t const ces[9] = { 0x026E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_309)
{
    // 1945 0041;	
    // (᥅) LIMBU QUESTION MARK	[026E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1945, 0x0041 };
    uint32_t const ces[9] = { 0x026E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_310)
{
    // 1945 0062;	
    // (᥅) LIMBU QUESTION MARK	[026E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1945, 0x0062 };
    uint32_t const ces[9] = { 0x026E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_311)
{
    // 2CFA 0021;	
    // (⳺) COPTIC OLD NUBIAN DIRECT QUESTION MARK	[026F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFA, 0x0021 };
    uint32_t const ces[9] = { 0x026F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_312)
{
    // 2CFA 003F;	
    // (⳺) COPTIC OLD NUBIAN DIRECT QUESTION MARK	[026F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFA, 0x003F };
    uint32_t const ces[9] = { 0x026F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_313)
{
    // 2CFA 0061;	
    // (⳺) COPTIC OLD NUBIAN DIRECT QUESTION MARK	[026F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFA, 0x0061 };
    uint32_t const ces[9] = { 0x026F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_314)
{
    // 2CFA 0041;	
    // (⳺) COPTIC OLD NUBIAN DIRECT QUESTION MARK	[026F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CFA, 0x0041 };
    uint32_t const ces[9] = { 0x026F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_315)
{
    // 2CFA 0062;	
    // (⳺) COPTIC OLD NUBIAN DIRECT QUESTION MARK	[026F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFA, 0x0062 };
    uint32_t const ces[9] = { 0x026F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_316)
{
    // 2CFB 0021;	
    // (⳻) COPTIC OLD NUBIAN INDIRECT QUESTION MARK	[0270 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFB, 0x0021 };
    uint32_t const ces[9] = { 0x0270, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_317)
{
    // 2CFB 003F;	
    // (⳻) COPTIC OLD NUBIAN INDIRECT QUESTION MARK	[0270 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFB, 0x003F };
    uint32_t const ces[9] = { 0x0270, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_318)
{
    // 2CFB 0061;	
    // (⳻) COPTIC OLD NUBIAN INDIRECT QUESTION MARK	[0270 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFB, 0x0061 };
    uint32_t const ces[9] = { 0x0270, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_319)
{
    // 2CFB 0041;	
    // (⳻) COPTIC OLD NUBIAN INDIRECT QUESTION MARK	[0270 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CFB, 0x0041 };
    uint32_t const ces[9] = { 0x0270, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_320)
{
    // 2CFB 0062;	
    // (⳻) COPTIC OLD NUBIAN INDIRECT QUESTION MARK	[0270 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFB, 0x0062 };
    uint32_t const ces[9] = { 0x0270, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_321)
{
    // A60F 0021;	
    // (꘏) VAI QUESTION MARK	[0271 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60F, 0x0021 };
    uint32_t const ces[9] = { 0x0271, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_322)
{
    // A60F 003F;	
    // (꘏) VAI QUESTION MARK	[0271 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60F, 0x003F };
    uint32_t const ces[9] = { 0x0271, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_323)
{
    // A60F 0061;	
    // (꘏) VAI QUESTION MARK	[0271 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60F, 0x0061 };
    uint32_t const ces[9] = { 0x0271, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_324)
{
    // A60F 0041;	
    // (꘏) VAI QUESTION MARK	[0271 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA60F, 0x0041 };
    uint32_t const ces[9] = { 0x0271, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_325)
{
    // A60F 0062;	
    // (꘏) VAI QUESTION MARK	[0271 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60F, 0x0062 };
    uint32_t const ces[9] = { 0x0271, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_326)
{
    // A6F7 0021;	
    // (꛷) BAMUM QUESTION MARK	[0272 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F7, 0x0021 };
    uint32_t const ces[9] = { 0x0272, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_327)
{
    // A6F7 003F;	
    // (꛷) BAMUM QUESTION MARK	[0272 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F7, 0x003F };
    uint32_t const ces[9] = { 0x0272, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_328)
{
    // A6F7 0061;	
    // (꛷) BAMUM QUESTION MARK	[0272 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F7, 0x0061 };
    uint32_t const ces[9] = { 0x0272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_329)
{
    // A6F7 0041;	
    // (꛷) BAMUM QUESTION MARK	[0272 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6F7, 0x0041 };
    uint32_t const ces[9] = { 0x0272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_330)
{
    // A6F7 0062;	
    // (꛷) BAMUM QUESTION MARK	[0272 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F7, 0x0062 };
    uint32_t const ces[9] = { 0x0272, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_331)
{
    // AAF1 0021;	
    // (꫱) MEETEI MAYEK AHANG KHUDAM	[0273 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF1, 0x0021 };
    uint32_t const ces[9] = { 0x0273, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_332)
{
    // AAF1 003F;	
    // (꫱) MEETEI MAYEK AHANG KHUDAM	[0273 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF1, 0x003F };
    uint32_t const ces[9] = { 0x0273, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_333)
{
    // AAF1 0061;	
    // (꫱) MEETEI MAYEK AHANG KHUDAM	[0273 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF1, 0x0061 };
    uint32_t const ces[9] = { 0x0273, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_334)
{
    // AAF1 0041;	
    // (꫱) MEETEI MAYEK AHANG KHUDAM	[0273 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAF1, 0x0041 };
    uint32_t const ces[9] = { 0x0273, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_335)
{
    // AAF1 0062;	
    // (꫱) MEETEI MAYEK AHANG KHUDAM	[0273 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF1, 0x0062 };
    uint32_t const ces[9] = { 0x0273, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_336)
{
    // 11143 0021;	
    // (𑅃) CHAKMA QUESTION MARK	[0274 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11143, 0x0021 };
    uint32_t const ces[9] = { 0x0274, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_337)
{
    // 11143 003F;	
    // (𑅃) CHAKMA QUESTION MARK	[0274 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11143, 0x003F };
    uint32_t const ces[9] = { 0x0274, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_338)
{
    // 11143 0061;	
    // (𑅃) CHAKMA QUESTION MARK	[0274 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11143, 0x0061 };
    uint32_t const ces[9] = { 0x0274, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_339)
{
    // 11143 0041;	
    // (𑅃) CHAKMA QUESTION MARK	[0274 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11143, 0x0041 };
    uint32_t const ces[9] = { 0x0274, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_340)
{
    // 11143 0062;	
    // (𑅃) CHAKMA QUESTION MARK	[0274 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11143, 0x0062 };
    uint32_t const ces[9] = { 0x0274, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_341)
{
    // 1E95F 0021;	
    // (‎‎𞥟‎‎) ADLAM INITIAL QUESTION MARK	[0275 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E95F, 0x0021 };
    uint32_t const ces[9] = { 0x0275, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_342)
{
    // 1E95F 003F;	
    // (‎‎𞥟‎‎) ADLAM INITIAL QUESTION MARK	[0275 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E95F, 0x003F };
    uint32_t const ces[9] = { 0x0275, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_343)
{
    // 1E95F 0061;	
    // (‎‎𞥟‎‎) ADLAM INITIAL QUESTION MARK	[0275 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E95F, 0x0061 };
    uint32_t const ces[9] = { 0x0275, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_344)
{
    // 1E95F 0041;	
    // (‎‎𞥟‎‎) ADLAM INITIAL QUESTION MARK	[0275 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E95F, 0x0041 };
    uint32_t const ces[9] = { 0x0275, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_345)
{
    // 1E95F 0062;	
    // (‎‎𞥟‎‎) ADLAM INITIAL QUESTION MARK	[0275 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E95F, 0x0062 };
    uint32_t const ces[9] = { 0x0275, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_346)
{
    // 203D 0021;	
    // (‽) INTERROBANG	[0276 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203D, 0x0021 };
    uint32_t const ces[9] = { 0x0276, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_347)
{
    // 203D 003F;	
    // (‽) INTERROBANG	[0276 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203D, 0x003F };
    uint32_t const ces[9] = { 0x0276, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_348)
{
    // 203D 0061;	
    // (‽) INTERROBANG	[0276 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203D, 0x0061 };
    uint32_t const ces[9] = { 0x0276, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_349)
{
    // 203D 0041;	
    // (‽) INTERROBANG	[0276 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x203D, 0x0041 };
    uint32_t const ces[9] = { 0x0276, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_350)
{
    // 203D 0062;	
    // (‽) INTERROBANG	[0276 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203D, 0x0062 };
    uint32_t const ces[9] = { 0x0276, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_351)
{
    // 2E18 0021;	
    // (⸘) INVERTED INTERROBANG	[0277 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E18, 0x0021 };
    uint32_t const ces[9] = { 0x0277, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_352)
{
    // 2E18 003F;	
    // (⸘) INVERTED INTERROBANG	[0277 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E18, 0x003F };
    uint32_t const ces[9] = { 0x0277, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_353)
{
    // 2E18 0061;	
    // (⸘) INVERTED INTERROBANG	[0277 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E18, 0x0061 };
    uint32_t const ces[9] = { 0x0277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_354)
{
    // 2E18 0041;	
    // (⸘) INVERTED INTERROBANG	[0277 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E18, 0x0041 };
    uint32_t const ces[9] = { 0x0277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_355)
{
    // 2E18 0062;	
    // (⸘) INVERTED INTERROBANG	[0277 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E18, 0x0062 };
    uint32_t const ces[9] = { 0x0277, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_356)
{
    // 002E 0021;	
    // ('.') FULL STOP	[0278 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002E, 0x0021 };
    uint32_t const ces[9] = { 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_357)
{
    // FF0E 0021;	
    // (．) FULLWIDTH FULL STOP	[0278 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0E, 0x0021 };
    uint32_t const ces[9] = { 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_358)
{
    // 2024 0021;	
    // (․) ONE DOT LEADER	[0278 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2024, 0x0021 };
    uint32_t const ces[9] = { 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_359)
{
    // FE52 0021;	
    // (﹒) SMALL FULL STOP	[0278 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE52, 0x0021 };
    uint32_t const ces[9] = { 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_360)
{
    // 002E 003F;	
    // ('.') FULL STOP	[0278 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002E, 0x003F };
    uint32_t const ces[9] = { 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_361)
{
    // FF0E 003F;	
    // (．) FULLWIDTH FULL STOP	[0278 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0E, 0x003F };
    uint32_t const ces[9] = { 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_362)
{
    // 2024 003F;	
    // (․) ONE DOT LEADER	[0278 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2024, 0x003F };
    uint32_t const ces[9] = { 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_363)
{
    // FE52 003F;	
    // (﹒) SMALL FULL STOP	[0278 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE52, 0x003F };
    uint32_t const ces[9] = { 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_364)
{
    // 2025 0021;	
    // (‥) TWO DOT LEADER	[0278 0278 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2025, 0x0021 };
    uint32_t const ces[12] = { 0x0278, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_365)
{
    // FE30 0021;	
    // (︰) PRESENTATION FORM FOR VERTICAL TWO DOT LEADER	[0278 0278 0261 | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0xFE30, 0x0021 };
    uint32_t const ces[12] = { 0x0278, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_366)
{
    // 2025 003F;	
    // (‥) TWO DOT LEADER	[0278 0278 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2025, 0x003F };
    uint32_t const ces[12] = { 0x0278, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_367)
{
    // FE30 003F;	
    // (︰) PRESENTATION FORM FOR VERTICAL TWO DOT LEADER	[0278 0278 0267 | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0xFE30, 0x003F };
    uint32_t const ces[12] = { 0x0278, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_368)
{
    // 2026 0021;	
    // (…) HORIZONTAL ELLIPSIS	[0278 0278 0278 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2026, 0x0021 };
    uint32_t const ces[15] = { 0x0278, 0x0278, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_369)
{
    // FE19 0021;	
    // (︙) PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS	[0278 0278 0278 0261 | 0020 0020 0020 0020 | 0016 0016 0016 0002 |]

    uint32_t cps[2] = { 0xFE19, 0x0021 };
    uint32_t const ces[15] = { 0x0278, 0x0278, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_370)
{
    // 2026 003F;	
    // (…) HORIZONTAL ELLIPSIS	[0278 0278 0278 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2026, 0x003F };
    uint32_t const ces[15] = { 0x0278, 0x0278, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_371)
{
    // FE19 003F;	
    // (︙) PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS	[0278 0278 0278 0267 | 0020 0020 0020 0020 | 0016 0016 0016 0002 |]

    uint32_t cps[2] = { 0xFE19, 0x003F };
    uint32_t const ces[15] = { 0x0278, 0x0278, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_372)
{
    // 2026 0061;	
    // (…) HORIZONTAL ELLIPSIS	[0278 0278 0278 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2026, 0x0061 };
    uint32_t const ces[15] = { 0x0278, 0x0278, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_373)
{
    // 2026 0041;	
    // (…) HORIZONTAL ELLIPSIS	[0278 0278 0278 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2026, 0x0041 };
    uint32_t const ces[15] = { 0x0278, 0x0278, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_374)
{
    // FE19 0061;	
    // (︙) PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS	[0278 0278 0278 1CAD | 0020 0020 0020 0020 | 0016 0016 0016 0002 |]

    uint32_t cps[2] = { 0xFE19, 0x0061 };
    uint32_t const ces[15] = { 0x0278, 0x0278, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_375)
{
    // FE19 0041;	
    // (︙) PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS	[0278 0278 0278 1CAD | 0020 0020 0020 0020 | 0016 0016 0016 0008 |]

    uint32_t cps[2] = { 0xFE19, 0x0041 };
    uint32_t const ces[15] = { 0x0278, 0x0278, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_376)
{
    // 2026 0062;	
    // (…) HORIZONTAL ELLIPSIS	[0278 0278 0278 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2026, 0x0062 };
    uint32_t const ces[15] = { 0x0278, 0x0278, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_377)
{
    // FE19 0062;	
    // (︙) PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS	[0278 0278 0278 1CC6 | 0020 0020 0020 0020 | 0016 0016 0016 0002 |]

    uint32_t cps[2] = { 0xFE19, 0x0062 };
    uint32_t const ces[15] = { 0x0278, 0x0278, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_378)
{
    // 2025 0061;	
    // (‥) TWO DOT LEADER	[0278 0278 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2025, 0x0061 };
    uint32_t const ces[12] = { 0x0278, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_379)
{
    // 2025 0041;	
    // (‥) TWO DOT LEADER	[0278 0278 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2025, 0x0041 };
    uint32_t const ces[12] = { 0x0278, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_380)
{
    // FE30 0061;	
    // (︰) PRESENTATION FORM FOR VERTICAL TWO DOT LEADER	[0278 0278 1CAD | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0xFE30, 0x0061 };
    uint32_t const ces[12] = { 0x0278, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_381)
{
    // FE30 0041;	
    // (︰) PRESENTATION FORM FOR VERTICAL TWO DOT LEADER	[0278 0278 1CAD | 0020 0020 0020 | 0016 0016 0008 |]

    uint32_t cps[2] = { 0xFE30, 0x0041 };
    uint32_t const ces[12] = { 0x0278, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_382)
{
    // 2025 0062;	
    // (‥) TWO DOT LEADER	[0278 0278 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2025, 0x0062 };
    uint32_t const ces[12] = { 0x0278, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_383)
{
    // FE30 0062;	
    // (︰) PRESENTATION FORM FOR VERTICAL TWO DOT LEADER	[0278 0278 1CC6 | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0xFE30, 0x0062 };
    uint32_t const ces[12] = { 0x0278, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_384)
{
    // 002E 0061;	
    // ('.') FULL STOP	[0278 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002E, 0x0061 };
    uint32_t const ces[9] = { 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_385)
{
    // 002E 0041;	
    // ('.') FULL STOP	[0278 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x002E, 0x0041 };
    uint32_t const ces[9] = { 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_386)
{
    // FF0E 0061;	
    // (．) FULLWIDTH FULL STOP	[0278 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0E, 0x0061 };
    uint32_t const ces[9] = { 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_387)
{
    // FF0E 0041;	
    // (．) FULLWIDTH FULL STOP	[0278 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF0E, 0x0041 };
    uint32_t const ces[9] = { 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_388)
{
    // 2024 0061;	
    // (․) ONE DOT LEADER	[0278 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2024, 0x0061 };
    uint32_t const ces[9] = { 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_389)
{
    // 2024 0041;	
    // (․) ONE DOT LEADER	[0278 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2024, 0x0041 };
    uint32_t const ces[9] = { 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_390)
{
    // FE52 0061;	
    // (﹒) SMALL FULL STOP	[0278 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE52, 0x0061 };
    uint32_t const ces[9] = { 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_391)
{
    // FE52 0041;	
    // (﹒) SMALL FULL STOP	[0278 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE52, 0x0041 };
    uint32_t const ces[9] = { 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_392)
{
    // 002E 0062;	
    // ('.') FULL STOP	[0278 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002E, 0x0062 };
    uint32_t const ces[9] = { 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_393)
{
    // FF0E 0062;	
    // (．) FULLWIDTH FULL STOP	[0278 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0E, 0x0062 };
    uint32_t const ces[9] = { 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_394)
{
    // 2024 0062;	
    // (․) ONE DOT LEADER	[0278 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2024, 0x0062 };
    uint32_t const ces[9] = { 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_395)
{
    // FE52 0062;	
    // (﹒) SMALL FULL STOP	[0278 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE52, 0x0062 };
    uint32_t const ces[9] = { 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_396)
{
    // 1801 0021;	
    // (᠁) MONGOLIAN ELLIPSIS	[0279 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1801, 0x0021 };
    uint32_t const ces[9] = { 0x0279, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_397)
{
    // 1801 003F;	
    // (᠁) MONGOLIAN ELLIPSIS	[0279 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1801, 0x003F };
    uint32_t const ces[9] = { 0x0279, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_398)
{
    // 1801 0061;	
    // (᠁) MONGOLIAN ELLIPSIS	[0279 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1801, 0x0061 };
    uint32_t const ces[9] = { 0x0279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_399)
{
    // 1801 0041;	
    // (᠁) MONGOLIAN ELLIPSIS	[0279 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1801, 0x0041 };
    uint32_t const ces[9] = { 0x0279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_400)
{
    // 1801 0062;	
    // (᠁) MONGOLIAN ELLIPSIS	[0279 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1801, 0x0062 };
    uint32_t const ces[9] = { 0x0279, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_401)
{
    // 06D4 0021;	
    // (‎‎۔‎‎) ARABIC FULL STOP	[027A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D4, 0x0021 };
    uint32_t const ces[9] = { 0x027A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_402)
{
    // 06D4 003F;	
    // (‎‎۔‎‎) ARABIC FULL STOP	[027A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D4, 0x003F };
    uint32_t const ces[9] = { 0x027A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_403)
{
    // 06D4 0061;	
    // (‎‎۔‎‎) ARABIC FULL STOP	[027A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D4, 0x0061 };
    uint32_t const ces[9] = { 0x027A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_404)
{
    // 06D4 0041;	
    // (‎‎۔‎‎) ARABIC FULL STOP	[027A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06D4, 0x0041 };
    uint32_t const ces[9] = { 0x027A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_405)
{
    // 06D4 0062;	
    // (‎‎۔‎‎) ARABIC FULL STOP	[027A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D4, 0x0062 };
    uint32_t const ces[9] = { 0x027A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_406)
{
    // 0701 0021;	
    // (‎‎܁‎‎) SYRIAC SUPRALINEAR FULL STOP	[027B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0701, 0x0021 };
    uint32_t const ces[9] = { 0x027B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_407)
{
    // 0701 003F;	
    // (‎‎܁‎‎) SYRIAC SUPRALINEAR FULL STOP	[027B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0701, 0x003F };
    uint32_t const ces[9] = { 0x027B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_408)
{
    // 0701 0061;	
    // (‎‎܁‎‎) SYRIAC SUPRALINEAR FULL STOP	[027B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0701, 0x0061 };
    uint32_t const ces[9] = { 0x027B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_409)
{
    // 0701 0041;	
    // (‎‎܁‎‎) SYRIAC SUPRALINEAR FULL STOP	[027B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0701, 0x0041 };
    uint32_t const ces[9] = { 0x027B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_410)
{
    // 0701 0062;	
    // (‎‎܁‎‎) SYRIAC SUPRALINEAR FULL STOP	[027B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0701, 0x0062 };
    uint32_t const ces[9] = { 0x027B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_411)
{
    // 0702 0021;	
    // (‎‎܂‎‎) SYRIAC SUBLINEAR FULL STOP	[027C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0702, 0x0021 };
    uint32_t const ces[9] = { 0x027C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_412)
{
    // 0702 003F;	
    // (‎‎܂‎‎) SYRIAC SUBLINEAR FULL STOP	[027C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0702, 0x003F };
    uint32_t const ces[9] = { 0x027C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_413)
{
    // 0702 0061;	
    // (‎‎܂‎‎) SYRIAC SUBLINEAR FULL STOP	[027C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0702, 0x0061 };
    uint32_t const ces[9] = { 0x027C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_414)
{
    // 0702 0041;	
    // (‎‎܂‎‎) SYRIAC SUBLINEAR FULL STOP	[027C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0702, 0x0041 };
    uint32_t const ces[9] = { 0x027C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_415)
{
    // 0702 0062;	
    // (‎‎܂‎‎) SYRIAC SUBLINEAR FULL STOP	[027C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0702, 0x0062 };
    uint32_t const ces[9] = { 0x027C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_416)
{
    // 1362 0021;	
    // (።) ETHIOPIC FULL STOP	[027D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1362, 0x0021 };
    uint32_t const ces[9] = { 0x027D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_417)
{
    // 1362 003F;	
    // (።) ETHIOPIC FULL STOP	[027D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1362, 0x003F };
    uint32_t const ces[9] = { 0x027D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_418)
{
    // 1362 0061;	
    // (።) ETHIOPIC FULL STOP	[027D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1362, 0x0061 };
    uint32_t const ces[9] = { 0x027D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_419)
{
    // 1362 0041;	
    // (።) ETHIOPIC FULL STOP	[027D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1362, 0x0041 };
    uint32_t const ces[9] = { 0x027D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_420)
{
    // 1362 0062;	
    // (።) ETHIOPIC FULL STOP	[027D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1362, 0x0062 };
    uint32_t const ces[9] = { 0x027D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_421)
{
    // 1803 0021;	
    // (᠃) MONGOLIAN FULL STOP	[027E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1803, 0x0021 };
    uint32_t const ces[9] = { 0x027E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_422)
{
    // 1803 003F;	
    // (᠃) MONGOLIAN FULL STOP	[027E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1803, 0x003F };
    uint32_t const ces[9] = { 0x027E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_423)
{
    // 1803 0061;	
    // (᠃) MONGOLIAN FULL STOP	[027E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1803, 0x0061 };
    uint32_t const ces[9] = { 0x027E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_424)
{
    // 1803 0041;	
    // (᠃) MONGOLIAN FULL STOP	[027E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1803, 0x0041 };
    uint32_t const ces[9] = { 0x027E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_425)
{
    // 1803 0062;	
    // (᠃) MONGOLIAN FULL STOP	[027E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1803, 0x0062 };
    uint32_t const ces[9] = { 0x027E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_426)
{
    // 1809 0021;	
    // (᠉) MONGOLIAN MANCHU FULL STOP	[027F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1809, 0x0021 };
    uint32_t const ces[9] = { 0x027F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_427)
{
    // 1809 003F;	
    // (᠉) MONGOLIAN MANCHU FULL STOP	[027F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1809, 0x003F };
    uint32_t const ces[9] = { 0x027F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_428)
{
    // 1809 0061;	
    // (᠉) MONGOLIAN MANCHU FULL STOP	[027F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1809, 0x0061 };
    uint32_t const ces[9] = { 0x027F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_429)
{
    // 1809 0041;	
    // (᠉) MONGOLIAN MANCHU FULL STOP	[027F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1809, 0x0041 };
    uint32_t const ces[9] = { 0x027F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_430)
{
    // 1809 0062;	
    // (᠉) MONGOLIAN MANCHU FULL STOP	[027F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1809, 0x0062 };
    uint32_t const ces[9] = { 0x027F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_431)
{
    // 166E 0021;	
    // (᙮) CANADIAN SYLLABICS FULL STOP	[0280 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166E, 0x0021 };
    uint32_t const ces[9] = { 0x0280, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_432)
{
    // 166E 003F;	
    // (᙮) CANADIAN SYLLABICS FULL STOP	[0280 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166E, 0x003F };
    uint32_t const ces[9] = { 0x0280, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_433)
{
    // 166E 0061;	
    // (᙮) CANADIAN SYLLABICS FULL STOP	[0280 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166E, 0x0061 };
    uint32_t const ces[9] = { 0x0280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_434)
{
    // 166E 0041;	
    // (᙮) CANADIAN SYLLABICS FULL STOP	[0280 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x166E, 0x0041 };
    uint32_t const ces[9] = { 0x0280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_435)
{
    // 166E 0062;	
    // (᙮) CANADIAN SYLLABICS FULL STOP	[0280 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x166E, 0x0062 };
    uint32_t const ces[9] = { 0x0280, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_436)
{
    // 1B5C 0021;	
    // (᭜) BALINESE WINDU	[0281 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B5C, 0x0021 };
    uint32_t const ces[9] = { 0x0281, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_437)
{
    // 1B5C 003F;	
    // (᭜) BALINESE WINDU	[0281 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B5C, 0x003F };
    uint32_t const ces[9] = { 0x0281, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_438)
{
    // 1B5C 0061;	
    // (᭜) BALINESE WINDU	[0281 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B5C, 0x0061 };
    uint32_t const ces[9] = { 0x0281, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_439)
{
    // 1B5C 0041;	
    // (᭜) BALINESE WINDU	[0281 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B5C, 0x0041 };
    uint32_t const ces[9] = { 0x0281, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_440)
{
    // 1B5C 0062;	
    // (᭜) BALINESE WINDU	[0281 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B5C, 0x0062 };
    uint32_t const ces[9] = { 0x0281, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_441)
{
    // 2CF9 0021;	
    // (⳹) COPTIC OLD NUBIAN FULL STOP	[0282 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF9, 0x0021 };
    uint32_t const ces[9] = { 0x0282, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_442)
{
    // 2CF9 003F;	
    // (⳹) COPTIC OLD NUBIAN FULL STOP	[0282 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF9, 0x003F };
    uint32_t const ces[9] = { 0x0282, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_443)
{
    // 2CF9 0061;	
    // (⳹) COPTIC OLD NUBIAN FULL STOP	[0282 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF9, 0x0061 };
    uint32_t const ces[9] = { 0x0282, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_444)
{
    // 2CF9 0041;	
    // (⳹) COPTIC OLD NUBIAN FULL STOP	[0282 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CF9, 0x0041 };
    uint32_t const ces[9] = { 0x0282, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_445)
{
    // 2CF9 0062;	
    // (⳹) COPTIC OLD NUBIAN FULL STOP	[0282 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF9, 0x0062 };
    uint32_t const ces[9] = { 0x0282, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_446)
{
    // 2CFE 0021;	
    // (⳾) COPTIC FULL STOP	[0283 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFE, 0x0021 };
    uint32_t const ces[9] = { 0x0283, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_447)
{
    // 2CFE 003F;	
    // (⳾) COPTIC FULL STOP	[0283 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFE, 0x003F };
    uint32_t const ces[9] = { 0x0283, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_448)
{
    // 2CFE 0061;	
    // (⳾) COPTIC FULL STOP	[0283 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFE, 0x0061 };
    uint32_t const ces[9] = { 0x0283, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_449)
{
    // 2CFE 0041;	
    // (⳾) COPTIC FULL STOP	[0283 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CFE, 0x0041 };
    uint32_t const ces[9] = { 0x0283, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_450)
{
    // 2CFE 0062;	
    // (⳾) COPTIC FULL STOP	[0283 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFE, 0x0062 };
    uint32_t const ces[9] = { 0x0283, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_451)
{
    // 2E30 0021;	
    // (⸰) RING POINT	[0284 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E30, 0x0021 };
    uint32_t const ces[9] = { 0x0284, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_452)
{
    // 2E30 003F;	
    // (⸰) RING POINT	[0284 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E30, 0x003F };
    uint32_t const ces[9] = { 0x0284, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_453)
{
    // 2E30 0061;	
    // (⸰) RING POINT	[0284 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E30, 0x0061 };
    uint32_t const ces[9] = { 0x0284, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_454)
{
    // 2E30 0041;	
    // (⸰) RING POINT	[0284 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E30, 0x0041 };
    uint32_t const ces[9] = { 0x0284, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_455)
{
    // 2E30 0062;	
    // (⸰) RING POINT	[0284 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E30, 0x0062 };
    uint32_t const ces[9] = { 0x0284, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_456)
{
    // 2E3C 0021;	
    // (⸼) STENOGRAPHIC FULL STOP	[0285 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3C, 0x0021 };
    uint32_t const ces[9] = { 0x0285, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_457)
{
    // 2E3C 003F;	
    // (⸼) STENOGRAPHIC FULL STOP	[0285 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3C, 0x003F };
    uint32_t const ces[9] = { 0x0285, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_458)
{
    // 2E3C 0061;	
    // (⸼) STENOGRAPHIC FULL STOP	[0285 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3C, 0x0061 };
    uint32_t const ces[9] = { 0x0285, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_459)
{
    // 2E3C 0041;	
    // (⸼) STENOGRAPHIC FULL STOP	[0285 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E3C, 0x0041 };
    uint32_t const ces[9] = { 0x0285, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_460)
{
    // 2E3C 0062;	
    // (⸼) STENOGRAPHIC FULL STOP	[0285 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3C, 0x0062 };
    uint32_t const ces[9] = { 0x0285, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_461)
{
    // A4FF 0021;	
    // (꓿) LISU PUNCTUATION FULL STOP	[0286 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4FF, 0x0021 };
    uint32_t const ces[9] = { 0x0286, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_462)
{
    // A4FF 003F;	
    // (꓿) LISU PUNCTUATION FULL STOP	[0286 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4FF, 0x003F };
    uint32_t const ces[9] = { 0x0286, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_463)
{
    // A4FF 0061;	
    // (꓿) LISU PUNCTUATION FULL STOP	[0286 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4FF, 0x0061 };
    uint32_t const ces[9] = { 0x0286, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_464)
{
    // A4FF 0041;	
    // (꓿) LISU PUNCTUATION FULL STOP	[0286 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4FF, 0x0041 };
    uint32_t const ces[9] = { 0x0286, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_465)
{
    // A4FF 0062;	
    // (꓿) LISU PUNCTUATION FULL STOP	[0286 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4FF, 0x0062 };
    uint32_t const ces[9] = { 0x0286, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_466)
{
    // A60E 0021;	
    // (꘎) VAI FULL STOP	[0287 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60E, 0x0021 };
    uint32_t const ces[9] = { 0x0287, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_467)
{
    // A60E 003F;	
    // (꘎) VAI FULL STOP	[0287 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60E, 0x003F };
    uint32_t const ces[9] = { 0x0287, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_468)
{
    // A60E 0061;	
    // (꘎) VAI FULL STOP	[0287 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60E, 0x0061 };
    uint32_t const ces[9] = { 0x0287, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_469)
{
    // A60E 0041;	
    // (꘎) VAI FULL STOP	[0287 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA60E, 0x0041 };
    uint32_t const ces[9] = { 0x0287, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_470)
{
    // A60E 0062;	
    // (꘎) VAI FULL STOP	[0287 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA60E, 0x0062 };
    uint32_t const ces[9] = { 0x0287, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_471)
{
    // A6F3 0021;	
    // (꛳) BAMUM FULL STOP	[0288 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F3, 0x0021 };
    uint32_t const ces[9] = { 0x0288, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_472)
{
    // A6F3 003F;	
    // (꛳) BAMUM FULL STOP	[0288 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F3, 0x003F };
    uint32_t const ces[9] = { 0x0288, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_473)
{
    // A6F3 0061;	
    // (꛳) BAMUM FULL STOP	[0288 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F3, 0x0061 };
    uint32_t const ces[9] = { 0x0288, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_474)
{
    // A6F3 0041;	
    // (꛳) BAMUM FULL STOP	[0288 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA6F3, 0x0041 };
    uint32_t const ces[9] = { 0x0288, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_475)
{
    // A6F3 0062;	
    // (꛳) BAMUM FULL STOP	[0288 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F3, 0x0062 };
    uint32_t const ces[9] = { 0x0288, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_476)
{
    // 16AF5 0021;	
    // (𖫵) BASSA VAH FULL STOP	[0289 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF5, 0x0021 };
    uint32_t const ces[9] = { 0x0289, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_477)
{
    // 16AF5 003F;	
    // (𖫵) BASSA VAH FULL STOP	[0289 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF5, 0x003F };
    uint32_t const ces[9] = { 0x0289, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_478)
{
    // 16AF5 0061;	
    // (𖫵) BASSA VAH FULL STOP	[0289 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF5, 0x0061 };
    uint32_t const ces[9] = { 0x0289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_479)
{
    // 16AF5 0041;	
    // (𖫵) BASSA VAH FULL STOP	[0289 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AF5, 0x0041 };
    uint32_t const ces[9] = { 0x0289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_480)
{
    // 16AF5 0062;	
    // (𖫵) BASSA VAH FULL STOP	[0289 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF5, 0x0062 };
    uint32_t const ces[9] = { 0x0289, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_481)
{
    // 1BC9F 0021;	
    // (𛲟) DUPLOYAN PUNCTUATION CHINOOK FULL STOP	[028A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9F, 0x0021 };
    uint32_t const ces[9] = { 0x028A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_482)
{
    // 1BC9F 003F;	
    // (𛲟) DUPLOYAN PUNCTUATION CHINOOK FULL STOP	[028A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9F, 0x003F };
    uint32_t const ces[9] = { 0x028A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_483)
{
    // 1BC9F 0061;	
    // (𛲟) DUPLOYAN PUNCTUATION CHINOOK FULL STOP	[028A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9F, 0x0061 };
    uint32_t const ces[9] = { 0x028A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_484)
{
    // 1BC9F 0041;	
    // (𛲟) DUPLOYAN PUNCTUATION CHINOOK FULL STOP	[028A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC9F, 0x0041 };
    uint32_t const ces[9] = { 0x028A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_485)
{
    // 1BC9F 0062;	
    // (𛲟) DUPLOYAN PUNCTUATION CHINOOK FULL STOP	[028A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9F, 0x0062 };
    uint32_t const ces[9] = { 0x028A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_486)
{
    // 3002 0021;	
    // (。) IDEOGRAPHIC FULL STOP	[028B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3002, 0x0021 };
    uint32_t const ces[9] = { 0x028B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_487)
{
    // FF61 0021;	
    // (｡) HALFWIDTH IDEOGRAPHIC FULL STOP	[028B 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF61, 0x0021 };
    uint32_t const ces[9] = { 0x028B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_488)
{
    // FE12 0021;	
    // (︒) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP	[028B 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE12, 0x0021 };
    uint32_t const ces[9] = { 0x028B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_489)
{
    // 3002 003F;	
    // (。) IDEOGRAPHIC FULL STOP	[028B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3002, 0x003F };
    uint32_t const ces[9] = { 0x028B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_490)
{
    // FF61 003F;	
    // (｡) HALFWIDTH IDEOGRAPHIC FULL STOP	[028B 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF61, 0x003F };
    uint32_t const ces[9] = { 0x028B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_491)
{
    // FE12 003F;	
    // (︒) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP	[028B 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE12, 0x003F };
    uint32_t const ces[9] = { 0x028B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_492)
{
    // 3002 0061;	
    // (。) IDEOGRAPHIC FULL STOP	[028B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3002, 0x0061 };
    uint32_t const ces[9] = { 0x028B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_493)
{
    // 3002 0041;	
    // (。) IDEOGRAPHIC FULL STOP	[028B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3002, 0x0041 };
    uint32_t const ces[9] = { 0x028B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_494)
{
    // FF61 0061;	
    // (｡) HALFWIDTH IDEOGRAPHIC FULL STOP	[028B 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF61, 0x0061 };
    uint32_t const ces[9] = { 0x028B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_495)
{
    // FF61 0041;	
    // (｡) HALFWIDTH IDEOGRAPHIC FULL STOP	[028B 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF61, 0x0041 };
    uint32_t const ces[9] = { 0x028B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_496)
{
    // FE12 0061;	
    // (︒) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP	[028B 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE12, 0x0061 };
    uint32_t const ces[9] = { 0x028B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_497)
{
    // FE12 0041;	
    // (︒) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP	[028B 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE12, 0x0041 };
    uint32_t const ces[9] = { 0x028B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_498)
{
    // 3002 0062;	
    // (。) IDEOGRAPHIC FULL STOP	[028B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3002, 0x0062 };
    uint32_t const ces[9] = { 0x028B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_009_499)
{
    // FF61 0062;	
    // (｡) HALFWIDTH IDEOGRAPHIC FULL STOP	[028B 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF61, 0x0062 };
    uint32_t const ces[9] = { 0x028B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

