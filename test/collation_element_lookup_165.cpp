// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_165_000)
{
    // 169C2 ; [.3B90.0020.0002] 
    // BAMUM LETTER PHASE-E POON

    uint32_t const cps[1] = { 0x169c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_001)
{
    // 169C3 ; [.3B91.0020.0002] 
    // BAMUM LETTER PHASE-E MIEE

    uint32_t const cps[1] = { 0x169c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_002)
{
    // 169C4 ; [.3B92.0020.0002] 
    // BAMUM LETTER PHASE-E FUET

    uint32_t const cps[1] = { 0x169c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_003)
{
    // 169C5 ; [.3B93.0020.0002] 
    // BAMUM LETTER PHASE-E NAE

    uint32_t const cps[1] = { 0x169c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_004)
{
    // 169C6 ; [.3B94.0020.0002] 
    // BAMUM LETTER PHASE-E MUAE

    uint32_t const cps[1] = { 0x169c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_005)
{
    // 169C7 ; [.3B95.0020.0002] 
    // BAMUM LETTER PHASE-E GHEUAE

    uint32_t const cps[1] = { 0x169c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_006)
{
    // 169C8 ; [.3B96.0020.0002] 
    // BAMUM LETTER PHASE-E FU I

    uint32_t const cps[1] = { 0x169c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_007)
{
    // 169C9 ; [.3B97.0020.0002] 
    // BAMUM LETTER PHASE-E MVI

    uint32_t const cps[1] = { 0x169c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_008)
{
    // 169CA ; [.3B98.0020.0002] 
    // BAMUM LETTER PHASE-E PUAQ

    uint32_t const cps[1] = { 0x169ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_009)
{
    // 169CB ; [.3B99.0020.0002] 
    // BAMUM LETTER PHASE-E NGKUM

    uint32_t const cps[1] = { 0x169cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_010)
{
    // 169CC ; [.3B9A.0020.0002] 
    // BAMUM LETTER PHASE-E KUT

    uint32_t const cps[1] = { 0x169cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_011)
{
    // 169CD ; [.3B9B.0020.0002] 
    // BAMUM LETTER PHASE-E PIET

    uint32_t const cps[1] = { 0x169cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_012)
{
    // 169CE ; [.3B9C.0020.0002] 
    // BAMUM LETTER PHASE-E NTAP

    uint32_t const cps[1] = { 0x169ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_013)
{
    // 169CF ; [.3B9D.0020.0002] 
    // BAMUM LETTER PHASE-E YEUAET

    uint32_t const cps[1] = { 0x169cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_014)
{
    // 169D0 ; [.3B9E.0020.0002] 
    // BAMUM LETTER PHASE-E NGGUP

    uint32_t const cps[1] = { 0x169d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_015)
{
    // 169D1 ; [.3B9F.0020.0002] 
    // BAMUM LETTER PHASE-E PA PEOPLE

    uint32_t const cps[1] = { 0x169d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3b9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_016)
{
    // 169D2 ; [.3BA0.0020.0002] 
    // BAMUM LETTER PHASE-E FU CALL

    uint32_t const cps[1] = { 0x169d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ba0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_017)
{
    // 169D3 ; [.3BA1.0020.0002] 
    // BAMUM LETTER PHASE-E FOM

    uint32_t const cps[1] = { 0x169d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ba1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_018)
{
    // 169D4 ; [.3BA2.0020.0002] 
    // BAMUM LETTER PHASE-E NJEE

    uint32_t const cps[1] = { 0x169d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ba2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_019)
{
    // 169D5 ; [.3BA3.0020.0002] 
    // BAMUM LETTER PHASE-E A

    uint32_t const cps[1] = { 0x169d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ba3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_020)
{
    // 169D6 ; [.3BA4.0020.0002] 
    // BAMUM LETTER PHASE-E TOQ

    uint32_t const cps[1] = { 0x169d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ba4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_021)
{
    // 169D7 ; [.3BA5.0020.0002] 
    // BAMUM LETTER PHASE-E O

    uint32_t const cps[1] = { 0x169d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ba5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_022)
{
    // 169D8 ; [.3BA6.0020.0002] 
    // BAMUM LETTER PHASE-E I

    uint32_t const cps[1] = { 0x169d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ba6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_023)
{
    // 169D9 ; [.3BA7.0020.0002] 
    // BAMUM LETTER PHASE-E LAQ

    uint32_t const cps[1] = { 0x169d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ba7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_024)
{
    // 169DA ; [.3BA8.0020.0002] 
    // BAMUM LETTER PHASE-E PA PLURAL

    uint32_t const cps[1] = { 0x169da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ba8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_025)
{
    // 169DB ; [.3BA9.0020.0002] 
    // BAMUM LETTER PHASE-E TAA

    uint32_t const cps[1] = { 0x169db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ba9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_026)
{
    // 169DC ; [.3BAA.0020.0002] 
    // BAMUM LETTER PHASE-E TAQ

    uint32_t const cps[1] = { 0x169dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3baa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_027)
{
    // 169DD ; [.3BAB.0020.0002] 
    // BAMUM LETTER PHASE-E NDAA MY HOUSE

    uint32_t const cps[1] = { 0x169dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_028)
{
    // 169DE ; [.3BAC.0020.0002] 
    // BAMUM LETTER PHASE-E SHIQ

    uint32_t const cps[1] = { 0x169de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_029)
{
    // 169DF ; [.3BAD.0020.0002] 
    // BAMUM LETTER PHASE-E YEUX

    uint32_t const cps[1] = { 0x169df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_030)
{
    // 169E0 ; [.3BAE.0020.0002] 
    // BAMUM LETTER PHASE-E NGUAE

    uint32_t const cps[1] = { 0x169e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_031)
{
    // 169E1 ; [.3BAF.0020.0002] 
    // BAMUM LETTER PHASE-E YUAEN

    uint32_t const cps[1] = { 0x169e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3baf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_032)
{
    // 169E2 ; [.3BB0.0020.0002] 
    // BAMUM LETTER PHASE-E YOQ SWIMMING

    uint32_t const cps[1] = { 0x169e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bb0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_033)
{
    // 169E3 ; [.3BB1.0020.0002] 
    // BAMUM LETTER PHASE-E YOQ COVER

    uint32_t const cps[1] = { 0x169e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bb1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_034)
{
    // 169E4 ; [.3BB2.0020.0002] 
    // BAMUM LETTER PHASE-E YUQ

    uint32_t const cps[1] = { 0x169e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bb2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_035)
{
    // 169E5 ; [.3BB3.0020.0002] 
    // BAMUM LETTER PHASE-E YUN

    uint32_t const cps[1] = { 0x169e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bb3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_036)
{
    // 169E6 ; [.3BB4.0020.0002] 
    // BAMUM LETTER PHASE-E KEUX

    uint32_t const cps[1] = { 0x169e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bb4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_037)
{
    // 169E7 ; [.3BB5.0020.0002] 
    // BAMUM LETTER PHASE-E PEUX

    uint32_t const cps[1] = { 0x169e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bb5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_038)
{
    // 169E8 ; [.3BB6.0020.0002] 
    // BAMUM LETTER PHASE-E NJEE EPOCH

    uint32_t const cps[1] = { 0x169e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bb6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_039)
{
    // 169E9 ; [.3BB7.0020.0002] 
    // BAMUM LETTER PHASE-E PUE

    uint32_t const cps[1] = { 0x169e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bb7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_040)
{
    // 169EA ; [.3BB8.0020.0002] 
    // BAMUM LETTER PHASE-E WUE

    uint32_t const cps[1] = { 0x169ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bb8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_041)
{
    // 169EB ; [.3BB9.0020.0002] 
    // BAMUM LETTER PHASE-E FEE

    uint32_t const cps[1] = { 0x169eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bb9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_042)
{
    // 169EC ; [.3BBA.0020.0002] 
    // BAMUM LETTER PHASE-E VEE

    uint32_t const cps[1] = { 0x169ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_043)
{
    // 169ED ; [.3BBB.0020.0002] 
    // BAMUM LETTER PHASE-E LU

    uint32_t const cps[1] = { 0x169ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bbb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_044)
{
    // 169EE ; [.3BBC.0020.0002] 
    // BAMUM LETTER PHASE-E MI

    uint32_t const cps[1] = { 0x169ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bbc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_045)
{
    // 169EF ; [.3BBD.0020.0002] 
    // BAMUM LETTER PHASE-E REUX

    uint32_t const cps[1] = { 0x169ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bbd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_046)
{
    // 169F0 ; [.3BBE.0020.0002] 
    // BAMUM LETTER PHASE-E RAE

    uint32_t const cps[1] = { 0x169f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bbe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_047)
{
    // 169F1 ; [.3BBF.0020.0002] 
    // BAMUM LETTER PHASE-E NGUAET

    uint32_t const cps[1] = { 0x169f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bbf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_048)
{
    // 169F2 ; [.3BC0.0020.0002] 
    // BAMUM LETTER PHASE-E NGA

    uint32_t const cps[1] = { 0x169f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bc0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_049)
{
    // 169F3 ; [.3BC1.0020.0002] 
    // BAMUM LETTER PHASE-E SHO

    uint32_t const cps[1] = { 0x169f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bc1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_050)
{
    // 169F4 ; [.3BC2.0020.0002] 
    // BAMUM LETTER PHASE-E SHOQ

    uint32_t const cps[1] = { 0x169f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bc2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_051)
{
    // 169F5 ; [.3BC3.0020.0002] 
    // BAMUM LETTER PHASE-E FU REMEDY

    uint32_t const cps[1] = { 0x169f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bc3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_052)
{
    // 169F6 ; [.3BC4.0020.0002] 
    // BAMUM LETTER PHASE-E NA

    uint32_t const cps[1] = { 0x169f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bc4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_053)
{
    // 169F7 ; [.3BC5.0020.0002] 
    // BAMUM LETTER PHASE-E PI

    uint32_t const cps[1] = { 0x169f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bc5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_054)
{
    // 169F8 ; [.3BC6.0020.0002] 
    // BAMUM LETTER PHASE-E LOQ

    uint32_t const cps[1] = { 0x169f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bc6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_055)
{
    // 169F9 ; [.3BC7.0020.0002] 
    // BAMUM LETTER PHASE-E KO

    uint32_t const cps[1] = { 0x169f9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bc7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_056)
{
    // 169FA ; [.3BC8.0020.0002] 
    // BAMUM LETTER PHASE-E MEN

    uint32_t const cps[1] = { 0x169fa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bc8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_057)
{
    // 169FB ; [.3BC9.0020.0002] 
    // BAMUM LETTER PHASE-E MA

    uint32_t const cps[1] = { 0x169fb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bc9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_058)
{
    // 169FC ; [.3BCA.0020.0002] 
    // BAMUM LETTER PHASE-E MAQ

    uint32_t const cps[1] = { 0x169fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_059)
{
    // 169FD ; [.3BCB.0020.0002] 
    // BAMUM LETTER PHASE-E TEU

    uint32_t const cps[1] = { 0x169fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bcb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_060)
{
    // 169FE ; [.3BCC.0020.0002] 
    // BAMUM LETTER PHASE-E KI

    uint32_t const cps[1] = { 0x169fe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bcc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_061)
{
    // 169FF ; [.3BCD.0020.0002] 
    // BAMUM LETTER PHASE-E MON

    uint32_t const cps[1] = { 0x169ff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bcd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_062)
{
    // 16A00 ; [.3BCE.0020.0002] 
    // BAMUM LETTER PHASE-E TEN

    uint32_t const cps[1] = { 0x16a00 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_063)
{
    // 16A01 ; [.3BCF.0020.0002] 
    // BAMUM LETTER PHASE-E FAQ

    uint32_t const cps[1] = { 0x16a01 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bcf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_064)
{
    // 16A02 ; [.3BD0.0020.0002] 
    // BAMUM LETTER PHASE-E GHOM

    uint32_t const cps[1] = { 0x16a02 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bd0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_065)
{
    // 16A03 ; [.3BD1.0020.0002] 
    // BAMUM LETTER PHASE-F KA

    uint32_t const cps[1] = { 0x16a03 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bd1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_066)
{
    // 16A04 ; [.3BD2.0020.0002] 
    // BAMUM LETTER PHASE-F U

    uint32_t const cps[1] = { 0x16a04 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bd2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_067)
{
    // 16A05 ; [.3BD3.0020.0002] 
    // BAMUM LETTER PHASE-F KU

    uint32_t const cps[1] = { 0x16a05 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bd3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_068)
{
    // 16A06 ; [.3BD4.0020.0002] 
    // BAMUM LETTER PHASE-F EE

    uint32_t const cps[1] = { 0x16a06 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bd4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_069)
{
    // 16A07 ; [.3BD5.0020.0002] 
    // BAMUM LETTER PHASE-F REE

    uint32_t const cps[1] = { 0x16a07 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bd5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_070)
{
    // 16A08 ; [.3BD6.0020.0002] 
    // BAMUM LETTER PHASE-F TAE

    uint32_t const cps[1] = { 0x16a08 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bd6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_071)
{
    // 16A09 ; [.3BD7.0020.0002] 
    // BAMUM LETTER PHASE-F NYI

    uint32_t const cps[1] = { 0x16a09 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bd7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_072)
{
    // 16A0A ; [.3BD8.0020.0002] 
    // BAMUM LETTER PHASE-F LA

    uint32_t const cps[1] = { 0x16a0a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bd8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_073)
{
    // 16A0B ; [.3BD9.0020.0002] 
    // BAMUM LETTER PHASE-F RII

    uint32_t const cps[1] = { 0x16a0b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bd9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_074)
{
    // 16A0C ; [.3BDA.0020.0002] 
    // BAMUM LETTER PHASE-F RIEE

    uint32_t const cps[1] = { 0x16a0c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_075)
{
    // 16A0D ; [.3BDB.0020.0002] 
    // BAMUM LETTER PHASE-F MEEEE

    uint32_t const cps[1] = { 0x16a0d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bdb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_076)
{
    // 16A0E ; [.3BDC.0020.0002] 
    // BAMUM LETTER PHASE-F TAA

    uint32_t const cps[1] = { 0x16a0e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bdc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_077)
{
    // 16A0F ; [.3BDD.0020.0002] 
    // BAMUM LETTER PHASE-F NDAA

    uint32_t const cps[1] = { 0x16a0f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bdd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_078)
{
    // 16A10 ; [.3BDE.0020.0002] 
    // BAMUM LETTER PHASE-F NJAEM

    uint32_t const cps[1] = { 0x16a10 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bde), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_079)
{
    // 16A11 ; [.3BDF.0020.0002] 
    // BAMUM LETTER PHASE-F M

    uint32_t const cps[1] = { 0x16a11 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bdf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_080)
{
    // 16A12 ; [.3BE0.0020.0002] 
    // BAMUM LETTER PHASE-F SUU

    uint32_t const cps[1] = { 0x16a12 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3be0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_081)
{
    // 16A13 ; [.3BE1.0020.0002] 
    // BAMUM LETTER PHASE-F SHII

    uint32_t const cps[1] = { 0x16a13 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3be1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_082)
{
    // 16A14 ; [.3BE2.0020.0002] 
    // BAMUM LETTER PHASE-F SI

    uint32_t const cps[1] = { 0x16a14 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3be2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_083)
{
    // 16A15 ; [.3BE3.0020.0002] 
    // BAMUM LETTER PHASE-F SEUX

    uint32_t const cps[1] = { 0x16a15 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3be3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_084)
{
    // 16A16 ; [.3BE4.0020.0002] 
    // BAMUM LETTER PHASE-F KYEE

    uint32_t const cps[1] = { 0x16a16 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3be4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_085)
{
    // 16A17 ; [.3BE5.0020.0002] 
    // BAMUM LETTER PHASE-F KET

    uint32_t const cps[1] = { 0x16a17 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3be5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_086)
{
    // 16A18 ; [.3BE6.0020.0002] 
    // BAMUM LETTER PHASE-F NUAE

    uint32_t const cps[1] = { 0x16a18 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3be6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_087)
{
    // 16A19 ; [.3BE7.0020.0002] 
    // BAMUM LETTER PHASE-F NU

    uint32_t const cps[1] = { 0x16a19 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3be7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_088)
{
    // 16A1A ; [.3BE8.0020.0002] 
    // BAMUM LETTER PHASE-F NJUAE

    uint32_t const cps[1] = { 0x16a1a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3be8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_089)
{
    // 16A1B ; [.3BE9.0020.0002] 
    // BAMUM LETTER PHASE-F YOQ

    uint32_t const cps[1] = { 0x16a1b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3be9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_090)
{
    // 16A1C ; [.3BEA.0020.0002] 
    // BAMUM LETTER PHASE-F SHU

    uint32_t const cps[1] = { 0x16a1c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_091)
{
    // 16A1D ; [.3BEB.0020.0002] 
    // BAMUM LETTER PHASE-F YA

    uint32_t const cps[1] = { 0x16a1d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3beb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_092)
{
    // 16A1E ; [.3BEC.0020.0002] 
    // BAMUM LETTER PHASE-F NSHA

    uint32_t const cps[1] = { 0x16a1e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_093)
{
    // 16A1F ; [.3BED.0020.0002] 
    // BAMUM LETTER PHASE-F PEUX

    uint32_t const cps[1] = { 0x16a1f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_094)
{
    // 16A20 ; [.3BEE.0020.0002] 
    // BAMUM LETTER PHASE-F NTEE

    uint32_t const cps[1] = { 0x16a20 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_095)
{
    // 16A21 ; [.3BEF.0020.0002] 
    // BAMUM LETTER PHASE-F WUE

    uint32_t const cps[1] = { 0x16a21 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_096)
{
    // 16A22 ; [.3BF0.0020.0002] 
    // BAMUM LETTER PHASE-F PEE

    uint32_t const cps[1] = { 0x16a22 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bf0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_097)
{
    // 16A23 ; [.3BF1.0020.0002] 
    // BAMUM LETTER PHASE-F RU

    uint32_t const cps[1] = { 0x16a23 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bf1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_098)
{
    // 16A24 ; [.3BF2.0020.0002] 
    // BAMUM LETTER PHASE-F NI

    uint32_t const cps[1] = { 0x16a24 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bf2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_099)
{
    // 16A25 ; [.3BF3.0020.0002] 
    // BAMUM LETTER PHASE-F REUX

    uint32_t const cps[1] = { 0x16a25 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bf3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_100)
{
    // 16A26 ; [.3BF4.0020.0002] 
    // BAMUM LETTER PHASE-F KEN

    uint32_t const cps[1] = { 0x16a26 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bf4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_101)
{
    // 16A27 ; [.3BF5.0020.0002] 
    // BAMUM LETTER PHASE-F NGKWAEN

    uint32_t const cps[1] = { 0x16a27 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bf5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_102)
{
    // 16A28 ; [.3BF6.0020.0002] 
    // BAMUM LETTER PHASE-F NGGA

    uint32_t const cps[1] = { 0x16a28 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bf6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_103)
{
    // 16A29 ; [.3BF7.0020.0002] 
    // BAMUM LETTER PHASE-F SHO

    uint32_t const cps[1] = { 0x16a29 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bf7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_104)
{
    // 16A2A ; [.3BF8.0020.0002] 
    // BAMUM LETTER PHASE-F PUAE

    uint32_t const cps[1] = { 0x16a2a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bf8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_105)
{
    // 16A2B ; [.3BF9.0020.0002] 
    // BAMUM LETTER PHASE-F FOM

    uint32_t const cps[1] = { 0x16a2b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bf9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_106)
{
    // 16A2C ; [.3BFA.0020.0002] 
    // BAMUM LETTER PHASE-F WA

    uint32_t const cps[1] = { 0x16a2c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bfa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_107)
{
    // 16A2D ; [.3BFB.0020.0002] 
    // BAMUM LETTER PHASE-F LI

    uint32_t const cps[1] = { 0x16a2d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bfb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_108)
{
    // 16A2E ; [.3BFC.0020.0002] 
    // BAMUM LETTER PHASE-F LOQ

    uint32_t const cps[1] = { 0x16a2e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bfc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_109)
{
    // 16A2F ; [.3BFD.0020.0002] 
    // BAMUM LETTER PHASE-F KO

    uint32_t const cps[1] = { 0x16a2f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bfd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_110)
{
    // 16A30 ; [.3BFE.0020.0002] 
    // BAMUM LETTER PHASE-F MBEN

    uint32_t const cps[1] = { 0x16a30 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bfe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_111)
{
    // 16A31 ; [.3BFF.0020.0002] 
    // BAMUM LETTER PHASE-F REN

    uint32_t const cps[1] = { 0x16a31 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3bff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_112)
{
    // 16A32 ; [.3C00.0020.0002] 
    // BAMUM LETTER PHASE-F MA

    uint32_t const cps[1] = { 0x16a32 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_113)
{
    // 16A33 ; [.3C01.0020.0002] 
    // BAMUM LETTER PHASE-F MO

    uint32_t const cps[1] = { 0x16a33 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c01), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_114)
{
    // 16A34 ; [.3C02.0020.0002] 
    // BAMUM LETTER PHASE-F MBAA

    uint32_t const cps[1] = { 0x16a34 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_115)
{
    // 16A35 ; [.3C03.0020.0002] 
    // BAMUM LETTER PHASE-F TET

    uint32_t const cps[1] = { 0x16a35 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c03), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_116)
{
    // 16A36 ; [.3C04.0020.0002] 
    // BAMUM LETTER PHASE-F KPA

    uint32_t const cps[1] = { 0x16a36 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c04), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_117)
{
    // 16A37 ; [.3C05.0020.0002] 
    // BAMUM LETTER PHASE-F SAMBA

    uint32_t const cps[1] = { 0x16a37 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c05), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_118)
{
    // 16A38 ; [.3C06.0020.0002] 
    // BAMUM LETTER PHASE-F VUEQ

    uint32_t const cps[1] = { 0x16a38 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_119)
{
    // 16A40 ; [.47FF.0020.0002] 
    // MRO LETTER TA

    uint32_t const cps[1] = { 0x16a40 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x47ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_120)
{
    // 16A41 ; [.4800.0020.0002] 
    // MRO LETTER NGI

    uint32_t const cps[1] = { 0x16a41 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4800), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_121)
{
    // 16A42 ; [.4801.0020.0002] 
    // MRO LETTER YO

    uint32_t const cps[1] = { 0x16a42 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4801), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_122)
{
    // 16A43 ; [.4802.0020.0002] 
    // MRO LETTER MIM

    uint32_t const cps[1] = { 0x16a43 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4802), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_123)
{
    // 16A44 ; [.4803.0020.0002] 
    // MRO LETTER BA

    uint32_t const cps[1] = { 0x16a44 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4803), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_124)
{
    // 16A45 ; [.4804.0020.0002] 
    // MRO LETTER DA

    uint32_t const cps[1] = { 0x16a45 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4804), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_125)
{
    // 16A46 ; [.4805.0020.0002] 
    // MRO LETTER A

    uint32_t const cps[1] = { 0x16a46 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4805), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_126)
{
    // 16A47 ; [.4806.0020.0002] 
    // MRO LETTER PHI

    uint32_t const cps[1] = { 0x16a47 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4806), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_127)
{
    // 16A48 ; [.4807.0020.0002] 
    // MRO LETTER KHAI

    uint32_t const cps[1] = { 0x16a48 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4807), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_128)
{
    // 16A49 ; [.4808.0020.0002] 
    // MRO LETTER HAO

    uint32_t const cps[1] = { 0x16a49 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4808), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_129)
{
    // 16A4A ; [.4809.0020.0002] 
    // MRO LETTER DAI

    uint32_t const cps[1] = { 0x16a4a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4809), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_130)
{
    // 16A4B ; [.480A.0020.0002] 
    // MRO LETTER CHU

    uint32_t const cps[1] = { 0x16a4b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x480a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_131)
{
    // 16A4C ; [.480B.0020.0002] 
    // MRO LETTER KEAAE

    uint32_t const cps[1] = { 0x16a4c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x480b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_132)
{
    // 16A4D ; [.480C.0020.0002] 
    // MRO LETTER OL

    uint32_t const cps[1] = { 0x16a4d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x480c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_133)
{
    // 16A4E ; [.480D.0020.0002] 
    // MRO LETTER MAEM

    uint32_t const cps[1] = { 0x16a4e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x480d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_134)
{
    // 16A4F ; [.480E.0020.0002] 
    // MRO LETTER NIN

    uint32_t const cps[1] = { 0x16a4f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x480e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_135)
{
    // 16A50 ; [.480F.0020.0002] 
    // MRO LETTER PA

    uint32_t const cps[1] = { 0x16a50 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x480f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_136)
{
    // 16A51 ; [.4810.0020.0002] 
    // MRO LETTER OO

    uint32_t const cps[1] = { 0x16a51 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4810), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_137)
{
    // 16A52 ; [.4811.0020.0002] 
    // MRO LETTER O

    uint32_t const cps[1] = { 0x16a52 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4811), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_138)
{
    // 16A53 ; [.4812.0020.0002] 
    // MRO LETTER RO

    uint32_t const cps[1] = { 0x16a53 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4812), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_139)
{
    // 16A54 ; [.4813.0020.0002] 
    // MRO LETTER SHI

    uint32_t const cps[1] = { 0x16a54 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4813), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_140)
{
    // 16A55 ; [.4814.0020.0002] 
    // MRO LETTER THEA

    uint32_t const cps[1] = { 0x16a55 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4814), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_141)
{
    // 16A56 ; [.4815.0020.0002] 
    // MRO LETTER EA

    uint32_t const cps[1] = { 0x16a56 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4815), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_142)
{
    // 16A57 ; [.4816.0020.0002] 
    // MRO LETTER WA

    uint32_t const cps[1] = { 0x16a57 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4816), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_143)
{
    // 16A58 ; [.4817.0020.0002] 
    // MRO LETTER E

    uint32_t const cps[1] = { 0x16a58 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4817), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_144)
{
    // 16A59 ; [.4818.0020.0002] 
    // MRO LETTER KO

    uint32_t const cps[1] = { 0x16a59 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4818), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_145)
{
    // 16A5A ; [.4819.0020.0002] 
    // MRO LETTER LAN

    uint32_t const cps[1] = { 0x16a5a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4819), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_146)
{
    // 16A5B ; [.481A.0020.0002] 
    // MRO LETTER LA

    uint32_t const cps[1] = { 0x16a5b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x481a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_147)
{
    // 16A5C ; [.481B.0020.0002] 
    // MRO LETTER HAI

    uint32_t const cps[1] = { 0x16a5c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x481b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_148)
{
    // 16A5D ; [.481C.0020.0002] 
    // MRO LETTER RI

    uint32_t const cps[1] = { 0x16a5d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x481c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_165_149)
{
    // 16A5E ; [.481D.0020.0002] 
    // MRO LETTER TEK

    uint32_t const cps[1] = { 0x16a5e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x481d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

