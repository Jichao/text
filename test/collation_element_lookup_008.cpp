// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_008_000)
{
    // 04B3  ; [.21A4.0020.0002] 
    // CYRILLIC SMALL LETTER HA WITH DESCENDER

    uint32_t const cps[1] = { 0x4b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_001)
{
    // 04B4  ; [.21C5.0020.0008] 
    // CYRILLIC CAPITAL LIGATURE TE TSE

    uint32_t const cps[1] = { 0x4b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21c5), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_002)
{
    // 04B5  ; [.21C5.0020.0002] 
    // CYRILLIC SMALL LIGATURE TE TSE

    uint32_t const cps[1] = { 0x4b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_003)
{
    // 04B6  ; [.21D0.0020.0008] 
    // CYRILLIC CAPITAL LETTER CHE WITH DESCENDER

    uint32_t const cps[1] = { 0x4b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21d0), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_004)
{
    // 04B7  ; [.21D0.0020.0002] 
    // CYRILLIC SMALL LETTER CHE WITH DESCENDER

    uint32_t const cps[1] = { 0x4b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_005)
{
    // 04B8  ; [.21D8.0020.0008] 
    // CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x4b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21d8), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_006)
{
    // 04B9  ; [.21D8.0020.0002] 
    // CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x4b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_007)
{
    // 04BA  ; [.21A8.0020.0008] 
    // CYRILLIC CAPITAL LETTER SHHA

    uint32_t const cps[1] = { 0x4ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21a8), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_008)
{
    // 04BB  ; [.21A8.0020.0002] 
    // CYRILLIC SMALL LETTER SHHA

    uint32_t const cps[1] = { 0x4bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_009)
{
    // 04BC  ; [.21DD.0020.0008] 
    // CYRILLIC CAPITAL LETTER ABKHASIAN CHE

    uint32_t const cps[1] = { 0x4bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21dd), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_010)
{
    // 04BD  ; [.21DD.0020.0002] 
    // CYRILLIC SMALL LETTER ABKHASIAN CHE

    uint32_t const cps[1] = { 0x4bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_011)
{
    // 04BE  ; [.21E1.0020.0008] 
    // CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER

    uint32_t const cps[1] = { 0x4be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21e1), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_012)
{
    // 04BF  ; [.21E1.0020.0002] 
    // CYRILLIC SMALL LETTER ABKHASIAN CHE WITH DESCENDER

    uint32_t const cps[1] = { 0x4bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_013)
{
    // 04C0  ; [.2247.0020.0008] 
    // CYRILLIC LETTER PALOCHKA

    uint32_t const cps[1] = { 0x4c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2247), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_014)
{
    // 04C1  ; [.20C8.0020.0008][.0000.0026.0002] 
    // CYRILLIC CAPITAL LETTER ZHE WITH BREVE

    uint32_t const cps[1] = { 0x4c1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20c8), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_015)
{
    // 04C2  ; [.20C8.0020.0002][.0000.0026.0002] 
    // CYRILLIC SMALL LETTER ZHE WITH BREVE

    uint32_t const cps[1] = { 0x4c2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20c8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_016)
{
    // 04C3  ; [.2104.0020.0008] 
    // CYRILLIC CAPITAL LETTER KA WITH HOOK

    uint32_t const cps[1] = { 0x4c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2104), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_017)
{
    // 04C4  ; [.2104.0020.0002] 
    // CYRILLIC SMALL LETTER KA WITH HOOK

    uint32_t const cps[1] = { 0x4c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2104), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_018)
{
    // 04C5  ; [.211B.0020.0008] 
    // CYRILLIC CAPITAL LETTER EL WITH TAIL

    uint32_t const cps[1] = { 0x4c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x211b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_019)
{
    // 04C6  ; [.211B.0020.0002] 
    // CYRILLIC SMALL LETTER EL WITH TAIL

    uint32_t const cps[1] = { 0x4c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x211b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_020)
{
    // 04C7  ; [.213F.0020.0008] 
    // CYRILLIC CAPITAL LETTER EN WITH HOOK

    uint32_t const cps[1] = { 0x4c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x213f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_021)
{
    // 04C8  ; [.213F.0020.0002] 
    // CYRILLIC SMALL LETTER EN WITH HOOK

    uint32_t const cps[1] = { 0x4c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x213f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_022)
{
    // 04C9  ; [.2137.0020.0008] 
    // CYRILLIC CAPITAL LETTER EN WITH TAIL

    uint32_t const cps[1] = { 0x4c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2137), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_023)
{
    // 04CA  ; [.2137.0020.0002] 
    // CYRILLIC SMALL LETTER EN WITH TAIL

    uint32_t const cps[1] = { 0x4ca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2137), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_024)
{
    // 04CB  ; [.21D4.0020.0008] 
    // CYRILLIC CAPITAL LETTER KHAKASSIAN CHE

    uint32_t const cps[1] = { 0x4cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21d4), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_025)
{
    // 04CC  ; [.21D4.0020.0002] 
    // CYRILLIC SMALL LETTER KHAKASSIAN CHE

    uint32_t const cps[1] = { 0x4cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_026)
{
    // 04CD  ; [.212D.0020.0008] 
    // CYRILLIC CAPITAL LETTER EM WITH TAIL

    uint32_t const cps[1] = { 0x4cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x212d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_027)
{
    // 04CE  ; [.212D.0020.0002] 
    // CYRILLIC SMALL LETTER EM WITH TAIL

    uint32_t const cps[1] = { 0x4ce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x212d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_028)
{
    // 04CF  ; [.2247.0020.0002] 
    // CYRILLIC SMALL LETTER PALOCHKA

    uint32_t const cps[1] = { 0x4cf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2247), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_029)
{
    // 04D0  ; [.2088.0020.0008][.0000.0026.0002] 
    // CYRILLIC CAPITAL LETTER A WITH BREVE

    uint32_t const cps[1] = { 0x4d0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2088), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_030)
{
    // 04D1  ; [.2088.0020.0002][.0000.0026.0002] 
    // CYRILLIC SMALL LETTER A WITH BREVE

    uint32_t const cps[1] = { 0x4d1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2088), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_031)
{
    // 04D2  ; [.2088.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER A WITH DIAERESIS

    uint32_t const cps[1] = { 0x4d2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2088), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_032)
{
    // 04D3  ; [.2088.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER A WITH DIAERESIS

    uint32_t const cps[1] = { 0x4d3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2088), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_033)
{
    // 04D4  ; [.2090.0020.0008] 
    // CYRILLIC CAPITAL LIGATURE A IE

    uint32_t const cps[1] = { 0x4d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2090), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_034)
{
    // 04D5  ; [.2090.0020.0002] 
    // CYRILLIC SMALL LIGATURE A IE

    uint32_t const cps[1] = { 0x4d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2090), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_035)
{
    // 04D6  ; [.20C0.0020.0008][.0000.0026.0002] 
    // CYRILLIC CAPITAL LETTER IE WITH BREVE

    uint32_t const cps[1] = { 0x4d6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20c0), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_036)
{
    // 04D7  ; [.20C0.0020.0002][.0000.0026.0002] 
    // CYRILLIC SMALL LETTER IE WITH BREVE

    uint32_t const cps[1] = { 0x4d7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20c0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_037)
{
    // 04D8  ; [.208C.0020.0008] 
    // CYRILLIC CAPITAL LETTER SCHWA

    uint32_t const cps[1] = { 0x4d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x208c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_038)
{
    // 04D9  ; [.208C.0020.0002] 
    // CYRILLIC SMALL LETTER SCHWA

    uint32_t const cps[1] = { 0x4d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x208c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_039)
{
    // 04DA  ; [.208C.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER SCHWA WITH DIAERESIS

    uint32_t const cps[1] = { 0x4da };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x208c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_040)
{
    // 04DB  ; [.208C.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER SCHWA WITH DIAERESIS

    uint32_t const cps[1] = { 0x4db };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x208c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_041)
{
    // 04DC  ; [.20C8.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER ZHE WITH DIAERESIS

    uint32_t const cps[1] = { 0x4dc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20c8), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_042)
{
    // 04DD  ; [.20C8.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER ZHE WITH DIAERESIS

    uint32_t const cps[1] = { 0x4dd };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20c8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_043)
{
    // 04DE  ; [.20D2.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER ZE WITH DIAERESIS

    uint32_t const cps[1] = { 0x4de };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20d2), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_044)
{
    // 04DF  ; [.20D2.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER ZE WITH DIAERESIS

    uint32_t const cps[1] = { 0x4df };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20d2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_045)
{
    // 04E0  ; [.20DF.0020.0008] 
    // CYRILLIC CAPITAL LETTER ABKHASIAN DZE

    uint32_t const cps[1] = { 0x4e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20df), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_046)
{
    // 04E1  ; [.20DF.0020.0002] 
    // CYRILLIC SMALL LETTER ABKHASIAN DZE

    uint32_t const cps[1] = { 0x4e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_047)
{
    // 04E2  ; [.20E6.0020.0008][.0000.0032.0002] 
    // CYRILLIC CAPITAL LETTER I WITH MACRON

    uint32_t const cps[1] = { 0x4e2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20e6), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_048)
{
    // 04E3  ; [.20E6.0020.0002][.0000.0032.0002] 
    // CYRILLIC SMALL LETTER I WITH MACRON

    uint32_t const cps[1] = { 0x4e3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20e6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_049)
{
    // 04E4  ; [.20E6.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER I WITH DIAERESIS

    uint32_t const cps[1] = { 0x4e4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20e6), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_050)
{
    // 04E5  ; [.20E6.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER I WITH DIAERESIS

    uint32_t const cps[1] = { 0x4e5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20e6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_051)
{
    // 04E6  ; [.214D.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER O WITH DIAERESIS

    uint32_t const cps[1] = { 0x4e6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x214d), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_052)
{
    // 04E7  ; [.214D.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER O WITH DIAERESIS

    uint32_t const cps[1] = { 0x4e7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x214d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_053)
{
    // 04E8  ; [.2151.0020.0008] 
    // CYRILLIC CAPITAL LETTER BARRED O

    uint32_t const cps[1] = { 0x4e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2151), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_054)
{
    // 04E9  ; [.2151.0020.0002] 
    // CYRILLIC SMALL LETTER BARRED O

    uint32_t const cps[1] = { 0x4e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2151), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_055)
{
    // 04EA  ; [.2151.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER BARRED O WITH DIAERESIS

    uint32_t const cps[1] = { 0x4ea };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2151), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_056)
{
    // 04EB  ; [.2151.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER BARRED O WITH DIAERESIS

    uint32_t const cps[1] = { 0x4eb };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2151), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_057)
{
    // 04EC  ; [.220B.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER E WITH DIAERESIS

    uint32_t const cps[1] = { 0x4ec };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x220b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_058)
{
    // 04ED  ; [.220B.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER E WITH DIAERESIS

    uint32_t const cps[1] = { 0x4ed };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x220b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_059)
{
    // 04EE  ; [.2183.0020.0008][.0000.0032.0002] 
    // CYRILLIC CAPITAL LETTER U WITH MACRON

    uint32_t const cps[1] = { 0x4ee };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2183), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_060)
{
    // 04EF  ; [.2183.0020.0002][.0000.0032.0002] 
    // CYRILLIC SMALL LETTER U WITH MACRON

    uint32_t const cps[1] = { 0x4ef };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2183), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_061)
{
    // 04F0  ; [.2183.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER U WITH DIAERESIS

    uint32_t const cps[1] = { 0x4f0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2183), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_062)
{
    // 04F1  ; [.2183.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER U WITH DIAERESIS

    uint32_t const cps[1] = { 0x4f1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2183), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_063)
{
    // 04F2  ; [.2183.0020.0008][.0000.002C.0002] 
    // CYRILLIC CAPITAL LETTER U WITH DOUBLE ACUTE

    uint32_t const cps[1] = { 0x4f2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2183), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_064)
{
    // 04F3  ; [.2183.0020.0002][.0000.002C.0002] 
    // CYRILLIC SMALL LETTER U WITH DOUBLE ACUTE

    uint32_t const cps[1] = { 0x4f3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2183), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_065)
{
    // 04F4  ; [.21CA.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER CHE WITH DIAERESIS

    uint32_t const cps[1] = { 0x4f4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x21ca), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_066)
{
    // 04F5  ; [.21CA.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER CHE WITH DIAERESIS

    uint32_t const cps[1] = { 0x4f5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x21ca), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_067)
{
    // 04F6  ; [.20AC.0020.0008] 
    // CYRILLIC CAPITAL LETTER GHE WITH DESCENDER

    uint32_t const cps[1] = { 0x4f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20ac), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_068)
{
    // 04F7  ; [.20AC.0020.0002] 
    // CYRILLIC SMALL LETTER GHE WITH DESCENDER

    uint32_t const cps[1] = { 0x4f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_069)
{
    // 04F8  ; [.21FA.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS

    uint32_t const cps[1] = { 0x4f8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x21fa), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_070)
{
    // 04F9  ; [.21FA.0020.0002][.0000.002B.0002] 
    // CYRILLIC SMALL LETTER YERU WITH DIAERESIS

    uint32_t const cps[1] = { 0x4f9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x21fa), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_008_071)
{
    // 04FA  ; [.20A4.0020.0008] 
    // CYRILLIC CAPITAL LETTER GHE WITH STROKE AND HOOK

    uint32_t const cps[1] = { 0x4fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20a4), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_072)
{
    // 04FB  ; [.20A4.0020.0002] 
    // CYRILLIC SMALL LETTER GHE WITH STROKE AND HOOK

    uint32_t const cps[1] = { 0x4fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_073)
{
    // 04FC  ; [.219C.0020.0008] 
    // CYRILLIC CAPITAL LETTER HA WITH HOOK

    uint32_t const cps[1] = { 0x4fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x219c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_074)
{
    // 04FD  ; [.219C.0020.0002] 
    // CYRILLIC SMALL LETTER HA WITH HOOK

    uint32_t const cps[1] = { 0x4fd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x219c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_075)
{
    // 04FE  ; [.21A0.0020.0008] 
    // CYRILLIC CAPITAL LETTER HA WITH STROKE

    uint32_t const cps[1] = { 0x4fe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21a0), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_076)
{
    // 04FF  ; [.21A0.0020.0002] 
    // CYRILLIC SMALL LETTER HA WITH STROKE

    uint32_t const cps[1] = { 0x4ff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_077)
{
    // 0500  ; [.20B4.0020.0008] 
    // CYRILLIC CAPITAL LETTER KOMI DE

    uint32_t const cps[1] = { 0x500 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20b4), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_078)
{
    // 0501  ; [.20B4.0020.0002] 
    // CYRILLIC SMALL LETTER KOMI DE

    uint32_t const cps[1] = { 0x501 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_079)
{
    // 0502  ; [.20BB.0020.0008] 
    // CYRILLIC CAPITAL LETTER KOMI DJE

    uint32_t const cps[1] = { 0x502 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20bb), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_080)
{
    // 0503  ; [.20BB.0020.0002] 
    // CYRILLIC SMALL LETTER KOMI DJE

    uint32_t const cps[1] = { 0x503 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_081)
{
    // 0504  ; [.20D7.0020.0008] 
    // CYRILLIC CAPITAL LETTER KOMI ZJE

    uint32_t const cps[1] = { 0x504 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20d7), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_082)
{
    // 0505  ; [.20D7.0020.0002] 
    // CYRILLIC SMALL LETTER KOMI ZJE

    uint32_t const cps[1] = { 0x505 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_083)
{
    // 0506  ; [.20E4.0020.0008] 
    // CYRILLIC CAPITAL LETTER KOMI DZJE

    uint32_t const cps[1] = { 0x506 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20e4), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_084)
{
    // 0507  ; [.20E4.0020.0002] 
    // CYRILLIC SMALL LETTER KOMI DZJE

    uint32_t const cps[1] = { 0x507 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_085)
{
    // 0508  ; [.2127.0020.0008] 
    // CYRILLIC CAPITAL LETTER KOMI LJE

    uint32_t const cps[1] = { 0x508 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2127), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_086)
{
    // 0509  ; [.2127.0020.0002] 
    // CYRILLIC SMALL LETTER KOMI LJE

    uint32_t const cps[1] = { 0x509 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2127), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_087)
{
    // 050A  ; [.214C.0020.0008] 
    // CYRILLIC CAPITAL LETTER KOMI NJE

    uint32_t const cps[1] = { 0x50a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x214c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_088)
{
    // 050B  ; [.214C.0020.0002] 
    // CYRILLIC SMALL LETTER KOMI NJE

    uint32_t const cps[1] = { 0x50b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x214c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_089)
{
    // 050C  ; [.216F.0020.0008] 
    // CYRILLIC CAPITAL LETTER KOMI SJE

    uint32_t const cps[1] = { 0x50c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x216f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_090)
{
    // 050D  ; [.216F.0020.0002] 
    // CYRILLIC SMALL LETTER KOMI SJE

    uint32_t const cps[1] = { 0x50d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x216f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_091)
{
    // 050E  ; [.2179.0020.0008] 
    // CYRILLIC CAPITAL LETTER KOMI TJE

    uint32_t const cps[1] = { 0x50e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2179), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_092)
{
    // 050F  ; [.2179.0020.0002] 
    // CYRILLIC SMALL LETTER KOMI TJE

    uint32_t const cps[1] = { 0x50f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2179), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_093)
{
    // 0510  ; [.20D8.0020.0008] 
    // CYRILLIC CAPITAL LETTER REVERSED ZE

    uint32_t const cps[1] = { 0x510 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20d8), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_094)
{
    // 0511  ; [.20D8.0020.0002] 
    // CYRILLIC SMALL LETTER REVERSED ZE

    uint32_t const cps[1] = { 0x511 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_095)
{
    // 0512  ; [.2120.0020.0008] 
    // CYRILLIC CAPITAL LETTER EL WITH HOOK

    uint32_t const cps[1] = { 0x512 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2120), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_096)
{
    // 0513  ; [.2120.0020.0002] 
    // CYRILLIC SMALL LETTER EL WITH HOOK

    uint32_t const cps[1] = { 0x513 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2120), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_097)
{
    // 0514  ; [.2128.0020.0008] 
    // CYRILLIC CAPITAL LETTER LHA

    uint32_t const cps[1] = { 0x514 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2128), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_098)
{
    // 0515  ; [.2128.0020.0002] 
    // CYRILLIC SMALL LETTER LHA

    uint32_t const cps[1] = { 0x515 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2128), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_099)
{
    // 0516  ; [.216A.0020.0008] 
    // CYRILLIC CAPITAL LETTER RHA

    uint32_t const cps[1] = { 0x516 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x216a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_100)
{
    // 0517  ; [.216A.0020.0002] 
    // CYRILLIC SMALL LETTER RHA

    uint32_t const cps[1] = { 0x517 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x216a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_101)
{
    // 0518  ; [.2219.0020.0008] 
    // CYRILLIC CAPITAL LETTER YAE

    uint32_t const cps[1] = { 0x518 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2219), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_102)
{
    // 0519  ; [.2219.0020.0002] 
    // CYRILLIC SMALL LETTER YAE

    uint32_t const cps[1] = { 0x519 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2219), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_103)
{
    // 051A  ; [.2115.0020.0008] 
    // CYRILLIC CAPITAL LETTER QA

    uint32_t const cps[1] = { 0x51a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2115), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_104)
{
    // 051B  ; [.2115.0020.0002] 
    // CYRILLIC SMALL LETTER QA

    uint32_t const cps[1] = { 0x51b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2115), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_105)
{
    // 051C  ; [.2246.0020.0008] 
    // CYRILLIC CAPITAL LETTER WE

    uint32_t const cps[1] = { 0x51c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2246), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_106)
{
    // 051D  ; [.2246.0020.0002] 
    // CYRILLIC SMALL LETTER WE

    uint32_t const cps[1] = { 0x51d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2246), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_107)
{
    // 051E  ; [.2114.0020.0008] 
    // CYRILLIC CAPITAL LETTER ALEUT KA

    uint32_t const cps[1] = { 0x51e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2114), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_108)
{
    // 051F  ; [.2114.0020.0002] 
    // CYRILLIC SMALL LETTER ALEUT KA

    uint32_t const cps[1] = { 0x51f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2114), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_109)
{
    // 0520  ; [.2121.0020.0008] 
    // CYRILLIC CAPITAL LETTER EL WITH MIDDLE HOOK

    uint32_t const cps[1] = { 0x520 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2121), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_110)
{
    // 0521  ; [.2121.0020.0002] 
    // CYRILLIC SMALL LETTER EL WITH MIDDLE HOOK

    uint32_t const cps[1] = { 0x521 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2121), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_111)
{
    // 0522  ; [.2143.0020.0008] 
    // CYRILLIC CAPITAL LETTER EN WITH MIDDLE HOOK

    uint32_t const cps[1] = { 0x522 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2143), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_112)
{
    // 0523  ; [.2143.0020.0002] 
    // CYRILLIC SMALL LETTER EN WITH MIDDLE HOOK

    uint32_t const cps[1] = { 0x523 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2143), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_113)
{
    // 0524  ; [.2159.0020.0008] 
    // CYRILLIC CAPITAL LETTER PE WITH DESCENDER

    uint32_t const cps[1] = { 0x524 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2159), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_114)
{
    // 0525  ; [.2159.0020.0002] 
    // CYRILLIC SMALL LETTER PE WITH DESCENDER

    uint32_t const cps[1] = { 0x525 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2159), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_115)
{
    // 0526  ; [.21AC.0020.0008] 
    // CYRILLIC CAPITAL LETTER SHHA WITH DESCENDER

    uint32_t const cps[1] = { 0x526 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21ac), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_116)
{
    // 0527  ; [.21AC.0020.0002] 
    // CYRILLIC SMALL LETTER SHHA WITH DESCENDER

    uint32_t const cps[1] = { 0x527 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_117)
{
    // 0528  ; [.2136.0020.0008] 
    // CYRILLIC CAPITAL LETTER EN WITH LEFT HOOK

    uint32_t const cps[1] = { 0x528 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2136), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_118)
{
    // 0529  ; [.2136.0020.0002] 
    // CYRILLIC SMALL LETTER EN WITH LEFT HOOK

    uint32_t const cps[1] = { 0x529 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2136), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_119)
{
    // 052A  ; [.20CC.0020.0008] 
    // CYRILLIC CAPITAL LETTER DZZHE

    uint32_t const cps[1] = { 0x52a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20cc), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_120)
{
    // 052B  ; [.20CC.0020.0002] 
    // CYRILLIC SMALL LETTER DZZHE

    uint32_t const cps[1] = { 0x52b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_121)
{
    // 052C  ; [.21CE.0020.0008] 
    // CYRILLIC CAPITAL LETTER DCHE

    uint32_t const cps[1] = { 0x52c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21ce), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_122)
{
    // 052D  ; [.21CE.0020.0002] 
    // CYRILLIC SMALL LETTER DCHE

    uint32_t const cps[1] = { 0x52d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_123)
{
    // 052E  ; [.211F.0020.0008] 
    // CYRILLIC CAPITAL LETTER EL WITH DESCENDER

    uint32_t const cps[1] = { 0x52e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x211f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_124)
{
    // 052F  ; [.211F.0020.0002] 
    // CYRILLIC SMALL LETTER EL WITH DESCENDER

    uint32_t const cps[1] = { 0x52f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x211f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_125)
{
    // 0531  ; [.22F6.0020.0008] 
    // ARMENIAN CAPITAL LETTER AYB

    uint32_t const cps[1] = { 0x531 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22f6), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_126)
{
    // 0532  ; [.22F7.0020.0008] 
    // ARMENIAN CAPITAL LETTER BEN

    uint32_t const cps[1] = { 0x532 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22f7), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_127)
{
    // 0533  ; [.22F8.0020.0008] 
    // ARMENIAN CAPITAL LETTER GIM

    uint32_t const cps[1] = { 0x533 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22f8), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_128)
{
    // 0534  ; [.22F9.0020.0008] 
    // ARMENIAN CAPITAL LETTER DA

    uint32_t const cps[1] = { 0x534 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22f9), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_129)
{
    // 0535  ; [.22FA.0020.0008] 
    // ARMENIAN CAPITAL LETTER ECH

    uint32_t const cps[1] = { 0x535 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22fa), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_130)
{
    // 0536  ; [.22FB.0020.0008] 
    // ARMENIAN CAPITAL LETTER ZA

    uint32_t const cps[1] = { 0x536 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22fb), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_131)
{
    // 0537  ; [.22FC.0020.0008] 
    // ARMENIAN CAPITAL LETTER EH

    uint32_t const cps[1] = { 0x537 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22fc), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_132)
{
    // 0538  ; [.22FD.0020.0008] 
    // ARMENIAN CAPITAL LETTER ET

    uint32_t const cps[1] = { 0x538 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22fd), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_133)
{
    // 0539  ; [.22FE.0020.0008] 
    // ARMENIAN CAPITAL LETTER TO

    uint32_t const cps[1] = { 0x539 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22fe), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_134)
{
    // 053A  ; [.22FF.0020.0008] 
    // ARMENIAN CAPITAL LETTER ZHE

    uint32_t const cps[1] = { 0x53a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22ff), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_135)
{
    // 053B  ; [.2300.0020.0008] 
    // ARMENIAN CAPITAL LETTER INI

    uint32_t const cps[1] = { 0x53b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2300), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_136)
{
    // 053C  ; [.2301.0020.0008] 
    // ARMENIAN CAPITAL LETTER LIWN

    uint32_t const cps[1] = { 0x53c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2301), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_137)
{
    // 053D  ; [.2302.0020.0008] 
    // ARMENIAN CAPITAL LETTER XEH

    uint32_t const cps[1] = { 0x53d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2302), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_138)
{
    // 053E  ; [.2303.0020.0008] 
    // ARMENIAN CAPITAL LETTER CA

    uint32_t const cps[1] = { 0x53e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2303), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_139)
{
    // 053F  ; [.2304.0020.0008] 
    // ARMENIAN CAPITAL LETTER KEN

    uint32_t const cps[1] = { 0x53f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2304), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_140)
{
    // 0540  ; [.2305.0020.0008] 
    // ARMENIAN CAPITAL LETTER HO

    uint32_t const cps[1] = { 0x540 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2305), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_141)
{
    // 0541  ; [.2306.0020.0008] 
    // ARMENIAN CAPITAL LETTER JA

    uint32_t const cps[1] = { 0x541 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2306), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_142)
{
    // 0542  ; [.2307.0020.0008] 
    // ARMENIAN CAPITAL LETTER GHAD

    uint32_t const cps[1] = { 0x542 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2307), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_143)
{
    // 0543  ; [.2308.0020.0008] 
    // ARMENIAN CAPITAL LETTER CHEH

    uint32_t const cps[1] = { 0x543 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2308), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_144)
{
    // 0544  ; [.2309.0020.0008] 
    // ARMENIAN CAPITAL LETTER MEN

    uint32_t const cps[1] = { 0x544 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2309), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_145)
{
    // 0545  ; [.230A.0020.0008] 
    // ARMENIAN CAPITAL LETTER YI

    uint32_t const cps[1] = { 0x545 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_146)
{
    // 0546  ; [.230B.0020.0008] 
    // ARMENIAN CAPITAL LETTER NOW

    uint32_t const cps[1] = { 0x546 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_147)
{
    // 0547  ; [.230C.0020.0008] 
    // ARMENIAN CAPITAL LETTER SHA

    uint32_t const cps[1] = { 0x547 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_148)
{
    // 0548  ; [.230D.0020.0008] 
    // ARMENIAN CAPITAL LETTER VO

    uint32_t const cps[1] = { 0x548 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_008_149)
{
    // 0549  ; [.230E.0020.0008] 
    // ARMENIAN CAPITAL LETTER CHA

    uint32_t const cps[1] = { 0x549 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

