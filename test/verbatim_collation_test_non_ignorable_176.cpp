// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_176_000)
{
    // 111A7 0061;	
    // (𑆧) SHARADA LETTER BA	[2AB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111A7, 0x0061 };
    uint32_t const ces[9] = { 0x2AB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_001)
{
    // 111A7 0041;	
    // (𑆧) SHARADA LETTER BA	[2AB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111A7, 0x0041 };
    uint32_t const ces[9] = { 0x2AB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_002)
{
    // 111A7 0062;	
    // (𑆧) SHARADA LETTER BA	[2AB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111A7, 0x0062 };
    uint32_t const ces[9] = { 0x2AB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_003)
{
    // 111A8 0021;	
    // (𑆨) SHARADA LETTER BHA	[2AB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111A8, 0x0021 };
    uint32_t const ces[9] = { 0x2AB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_004)
{
    // 111A8 003F;	
    // (𑆨) SHARADA LETTER BHA	[2AB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111A8, 0x003F };
    uint32_t const ces[9] = { 0x2AB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_005)
{
    // 111A8 0061;	
    // (𑆨) SHARADA LETTER BHA	[2AB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111A8, 0x0061 };
    uint32_t const ces[9] = { 0x2AB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_006)
{
    // 111A8 0041;	
    // (𑆨) SHARADA LETTER BHA	[2AB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111A8, 0x0041 };
    uint32_t const ces[9] = { 0x2AB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_007)
{
    // 111A8 0062;	
    // (𑆨) SHARADA LETTER BHA	[2AB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111A8, 0x0062 };
    uint32_t const ces[9] = { 0x2AB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_008)
{
    // 111A9 0021;	
    // (𑆩) SHARADA LETTER MA	[2AB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111A9, 0x0021 };
    uint32_t const ces[9] = { 0x2AB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_009)
{
    // 111A9 003F;	
    // (𑆩) SHARADA LETTER MA	[2AB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111A9, 0x003F };
    uint32_t const ces[9] = { 0x2AB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_010)
{
    // 111A9 0061;	
    // (𑆩) SHARADA LETTER MA	[2AB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111A9, 0x0061 };
    uint32_t const ces[9] = { 0x2AB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_011)
{
    // 111A9 0041;	
    // (𑆩) SHARADA LETTER MA	[2AB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111A9, 0x0041 };
    uint32_t const ces[9] = { 0x2AB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_012)
{
    // 111A9 0062;	
    // (𑆩) SHARADA LETTER MA	[2AB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111A9, 0x0062 };
    uint32_t const ces[9] = { 0x2AB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_013)
{
    // 111AA 0021;	
    // (𑆪) SHARADA LETTER YA	[2AB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AA, 0x0021 };
    uint32_t const ces[9] = { 0x2AB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_014)
{
    // 111AA 003F;	
    // (𑆪) SHARADA LETTER YA	[2AB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AA, 0x003F };
    uint32_t const ces[9] = { 0x2AB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_015)
{
    // 111AA 0061;	
    // (𑆪) SHARADA LETTER YA	[2AB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AA, 0x0061 };
    uint32_t const ces[9] = { 0x2AB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_016)
{
    // 111AA 0041;	
    // (𑆪) SHARADA LETTER YA	[2AB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111AA, 0x0041 };
    uint32_t const ces[9] = { 0x2AB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_017)
{
    // 111AA 0062;	
    // (𑆪) SHARADA LETTER YA	[2AB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AA, 0x0062 };
    uint32_t const ces[9] = { 0x2AB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_018)
{
    // 111AB 0021;	
    // (𑆫) SHARADA LETTER RA	[2ABA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AB, 0x0021 };
    uint32_t const ces[9] = { 0x2ABA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_019)
{
    // 111AB 003F;	
    // (𑆫) SHARADA LETTER RA	[2ABA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AB, 0x003F };
    uint32_t const ces[9] = { 0x2ABA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_020)
{
    // 111AB 0061;	
    // (𑆫) SHARADA LETTER RA	[2ABA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AB, 0x0061 };
    uint32_t const ces[9] = { 0x2ABA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_021)
{
    // 111AB 0041;	
    // (𑆫) SHARADA LETTER RA	[2ABA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111AB, 0x0041 };
    uint32_t const ces[9] = { 0x2ABA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_022)
{
    // 111AB 0062;	
    // (𑆫) SHARADA LETTER RA	[2ABA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AB, 0x0062 };
    uint32_t const ces[9] = { 0x2ABA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_023)
{
    // 111AC 0021;	
    // (𑆬) SHARADA LETTER LA	[2ABB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AC, 0x0021 };
    uint32_t const ces[9] = { 0x2ABB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_024)
{
    // 111AC 003F;	
    // (𑆬) SHARADA LETTER LA	[2ABB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AC, 0x003F };
    uint32_t const ces[9] = { 0x2ABB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_025)
{
    // 111AC 0061;	
    // (𑆬) SHARADA LETTER LA	[2ABB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AC, 0x0061 };
    uint32_t const ces[9] = { 0x2ABB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_026)
{
    // 111AC 0041;	
    // (𑆬) SHARADA LETTER LA	[2ABB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111AC, 0x0041 };
    uint32_t const ces[9] = { 0x2ABB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_027)
{
    // 111AC 0062;	
    // (𑆬) SHARADA LETTER LA	[2ABB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AC, 0x0062 };
    uint32_t const ces[9] = { 0x2ABB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_028)
{
    // 111AD 0021;	
    // (𑆭) SHARADA LETTER LLA	[2ABC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AD, 0x0021 };
    uint32_t const ces[9] = { 0x2ABC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_029)
{
    // 111AD 003F;	
    // (𑆭) SHARADA LETTER LLA	[2ABC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AD, 0x003F };
    uint32_t const ces[9] = { 0x2ABC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_030)
{
    // 111AD 0061;	
    // (𑆭) SHARADA LETTER LLA	[2ABC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AD, 0x0061 };
    uint32_t const ces[9] = { 0x2ABC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_031)
{
    // 111AD 0041;	
    // (𑆭) SHARADA LETTER LLA	[2ABC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111AD, 0x0041 };
    uint32_t const ces[9] = { 0x2ABC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_032)
{
    // 111AD 0062;	
    // (𑆭) SHARADA LETTER LLA	[2ABC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AD, 0x0062 };
    uint32_t const ces[9] = { 0x2ABC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_033)
{
    // 111AE 0021;	
    // (𑆮) SHARADA LETTER VA	[2ABD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AE, 0x0021 };
    uint32_t const ces[9] = { 0x2ABD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_034)
{
    // 111AE 003F;	
    // (𑆮) SHARADA LETTER VA	[2ABD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AE, 0x003F };
    uint32_t const ces[9] = { 0x2ABD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_035)
{
    // 111AE 0061;	
    // (𑆮) SHARADA LETTER VA	[2ABD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AE, 0x0061 };
    uint32_t const ces[9] = { 0x2ABD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_036)
{
    // 111AE 0041;	
    // (𑆮) SHARADA LETTER VA	[2ABD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111AE, 0x0041 };
    uint32_t const ces[9] = { 0x2ABD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_037)
{
    // 111AE 0062;	
    // (𑆮) SHARADA LETTER VA	[2ABD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AE, 0x0062 };
    uint32_t const ces[9] = { 0x2ABD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_038)
{
    // 111AF 0021;	
    // (𑆯) SHARADA LETTER SHA	[2ABE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AF, 0x0021 };
    uint32_t const ces[9] = { 0x2ABE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_039)
{
    // 111AF 003F;	
    // (𑆯) SHARADA LETTER SHA	[2ABE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AF, 0x003F };
    uint32_t const ces[9] = { 0x2ABE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_040)
{
    // 111AF 0061;	
    // (𑆯) SHARADA LETTER SHA	[2ABE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AF, 0x0061 };
    uint32_t const ces[9] = { 0x2ABE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_041)
{
    // 111AF 0041;	
    // (𑆯) SHARADA LETTER SHA	[2ABE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111AF, 0x0041 };
    uint32_t const ces[9] = { 0x2ABE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_042)
{
    // 111AF 0062;	
    // (𑆯) SHARADA LETTER SHA	[2ABE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111AF, 0x0062 };
    uint32_t const ces[9] = { 0x2ABE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_043)
{
    // 111B0 0021;	
    // (𑆰) SHARADA LETTER SSA	[2ABF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B0, 0x0021 };
    uint32_t const ces[9] = { 0x2ABF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_044)
{
    // 111B0 003F;	
    // (𑆰) SHARADA LETTER SSA	[2ABF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B0, 0x003F };
    uint32_t const ces[9] = { 0x2ABF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_045)
{
    // 111B0 0061;	
    // (𑆰) SHARADA LETTER SSA	[2ABF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B0, 0x0061 };
    uint32_t const ces[9] = { 0x2ABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_046)
{
    // 111B0 0041;	
    // (𑆰) SHARADA LETTER SSA	[2ABF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111B0, 0x0041 };
    uint32_t const ces[9] = { 0x2ABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_047)
{
    // 111B0 0062;	
    // (𑆰) SHARADA LETTER SSA	[2ABF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B0, 0x0062 };
    uint32_t const ces[9] = { 0x2ABF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_048)
{
    // 111B1 0021;	
    // (𑆱) SHARADA LETTER SA	[2AC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B1, 0x0021 };
    uint32_t const ces[9] = { 0x2AC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_049)
{
    // 111B1 003F;	
    // (𑆱) SHARADA LETTER SA	[2AC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B1, 0x003F };
    uint32_t const ces[9] = { 0x2AC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_050)
{
    // 111B1 0061;	
    // (𑆱) SHARADA LETTER SA	[2AC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B1, 0x0061 };
    uint32_t const ces[9] = { 0x2AC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_051)
{
    // 111B1 0041;	
    // (𑆱) SHARADA LETTER SA	[2AC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111B1, 0x0041 };
    uint32_t const ces[9] = { 0x2AC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_052)
{
    // 111B1 0062;	
    // (𑆱) SHARADA LETTER SA	[2AC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B1, 0x0062 };
    uint32_t const ces[9] = { 0x2AC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_053)
{
    // 111B2 0021;	
    // (𑆲) SHARADA LETTER HA	[2AC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B2, 0x0021 };
    uint32_t const ces[9] = { 0x2AC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_054)
{
    // 111B2 003F;	
    // (𑆲) SHARADA LETTER HA	[2AC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B2, 0x003F };
    uint32_t const ces[9] = { 0x2AC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_055)
{
    // 111B2 0061;	
    // (𑆲) SHARADA LETTER HA	[2AC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B2, 0x0061 };
    uint32_t const ces[9] = { 0x2AC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_056)
{
    // 111B2 0041;	
    // (𑆲) SHARADA LETTER HA	[2AC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111B2, 0x0041 };
    uint32_t const ces[9] = { 0x2AC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_057)
{
    // 111B2 0062;	
    // (𑆲) SHARADA LETTER HA	[2AC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B2, 0x0062 };
    uint32_t const ces[9] = { 0x2AC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_058)
{
    // 111C1 0021;	
    // (𑇁) SHARADA SIGN AVAGRAHA	[2AC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C1, 0x0021 };
    uint32_t const ces[9] = { 0x2AC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_059)
{
    // 111C1 003F;	
    // (𑇁) SHARADA SIGN AVAGRAHA	[2AC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C1, 0x003F };
    uint32_t const ces[9] = { 0x2AC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_060)
{
    // 111C1 0061;	
    // (𑇁) SHARADA SIGN AVAGRAHA	[2AC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C1, 0x0061 };
    uint32_t const ces[9] = { 0x2AC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_061)
{
    // 111C1 0041;	
    // (𑇁) SHARADA SIGN AVAGRAHA	[2AC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111C1, 0x0041 };
    uint32_t const ces[9] = { 0x2AC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_062)
{
    // 111C1 0062;	
    // (𑇁) SHARADA SIGN AVAGRAHA	[2AC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C1, 0x0062 };
    uint32_t const ces[9] = { 0x2AC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_063)
{
    // 111C2 0021;	
    // (𑇂) SHARADA SIGN JIHVAMULIYA	[2AC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C2, 0x0021 };
    uint32_t const ces[9] = { 0x2AC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_064)
{
    // 111C2 003F;	
    // (𑇂) SHARADA SIGN JIHVAMULIYA	[2AC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C2, 0x003F };
    uint32_t const ces[9] = { 0x2AC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_065)
{
    // 111C2 0061;	
    // (𑇂) SHARADA SIGN JIHVAMULIYA	[2AC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C2, 0x0061 };
    uint32_t const ces[9] = { 0x2AC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_066)
{
    // 111C2 0041;	
    // (𑇂) SHARADA SIGN JIHVAMULIYA	[2AC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111C2, 0x0041 };
    uint32_t const ces[9] = { 0x2AC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_067)
{
    // 111C2 0062;	
    // (𑇂) SHARADA SIGN JIHVAMULIYA	[2AC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C2, 0x0062 };
    uint32_t const ces[9] = { 0x2AC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_068)
{
    // 111C3 0021;	
    // (𑇃) SHARADA SIGN UPADHMANIYA	[2AC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C3, 0x0021 };
    uint32_t const ces[9] = { 0x2AC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_069)
{
    // 111C3 003F;	
    // (𑇃) SHARADA SIGN UPADHMANIYA	[2AC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C3, 0x003F };
    uint32_t const ces[9] = { 0x2AC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_070)
{
    // 111C3 0061;	
    // (𑇃) SHARADA SIGN UPADHMANIYA	[2AC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C3, 0x0061 };
    uint32_t const ces[9] = { 0x2AC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_071)
{
    // 111C3 0041;	
    // (𑇃) SHARADA SIGN UPADHMANIYA	[2AC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111C3, 0x0041 };
    uint32_t const ces[9] = { 0x2AC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_072)
{
    // 111C3 0062;	
    // (𑇃) SHARADA SIGN UPADHMANIYA	[2AC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C3, 0x0062 };
    uint32_t const ces[9] = { 0x2AC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_073)
{
    // 111DC 0021;	
    // (𑇜) SHARADA HEADSTROKE	[2AC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111DC, 0x0021 };
    uint32_t const ces[9] = { 0x2AC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_074)
{
    // 111DC 003F;	
    // (𑇜) SHARADA HEADSTROKE	[2AC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111DC, 0x003F };
    uint32_t const ces[9] = { 0x2AC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_075)
{
    // 111DC 0061;	
    // (𑇜) SHARADA HEADSTROKE	[2AC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111DC, 0x0061 };
    uint32_t const ces[9] = { 0x2AC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_076)
{
    // 111DC 0041;	
    // (𑇜) SHARADA HEADSTROKE	[2AC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111DC, 0x0041 };
    uint32_t const ces[9] = { 0x2AC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_077)
{
    // 111DC 0062;	
    // (𑇜) SHARADA HEADSTROKE	[2AC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111DC, 0x0062 };
    uint32_t const ces[9] = { 0x2AC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_078)
{
    // 111B3 0021;	
    // (𑆳) SHARADA VOWEL SIGN AA	[2AC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B3, 0x0021 };
    uint32_t const ces[9] = { 0x2AC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_079)
{
    // 111B3 003F;	
    // (𑆳) SHARADA VOWEL SIGN AA	[2AC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B3, 0x003F };
    uint32_t const ces[9] = { 0x2AC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_080)
{
    // 111B3 0061;	
    // (𑆳) SHARADA VOWEL SIGN AA	[2AC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B3, 0x0061 };
    uint32_t const ces[9] = { 0x2AC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_081)
{
    // 111B3 0041;	
    // (𑆳) SHARADA VOWEL SIGN AA	[2AC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111B3, 0x0041 };
    uint32_t const ces[9] = { 0x2AC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_082)
{
    // 111B3 0062;	
    // (𑆳) SHARADA VOWEL SIGN AA	[2AC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B3, 0x0062 };
    uint32_t const ces[9] = { 0x2AC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_083)
{
    // 111B4 0021;	
    // (𑆴) SHARADA VOWEL SIGN I	[2AC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B4, 0x0021 };
    uint32_t const ces[9] = { 0x2AC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_084)
{
    // 111B4 003F;	
    // (𑆴) SHARADA VOWEL SIGN I	[2AC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B4, 0x003F };
    uint32_t const ces[9] = { 0x2AC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_085)
{
    // 111B4 0061;	
    // (𑆴) SHARADA VOWEL SIGN I	[2AC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B4, 0x0061 };
    uint32_t const ces[9] = { 0x2AC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_086)
{
    // 111B4 0041;	
    // (𑆴) SHARADA VOWEL SIGN I	[2AC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111B4, 0x0041 };
    uint32_t const ces[9] = { 0x2AC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_087)
{
    // 111B4 0062;	
    // (𑆴) SHARADA VOWEL SIGN I	[2AC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B4, 0x0062 };
    uint32_t const ces[9] = { 0x2AC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_088)
{
    // 111B5 0021;	
    // (𑆵) SHARADA VOWEL SIGN II	[2AC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B5, 0x0021 };
    uint32_t const ces[9] = { 0x2AC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_089)
{
    // 111B5 003F;	
    // (𑆵) SHARADA VOWEL SIGN II	[2AC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B5, 0x003F };
    uint32_t const ces[9] = { 0x2AC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_090)
{
    // 111B5 0061;	
    // (𑆵) SHARADA VOWEL SIGN II	[2AC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B5, 0x0061 };
    uint32_t const ces[9] = { 0x2AC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_091)
{
    // 111B5 0041;	
    // (𑆵) SHARADA VOWEL SIGN II	[2AC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111B5, 0x0041 };
    uint32_t const ces[9] = { 0x2AC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_092)
{
    // 111B5 0062;	
    // (𑆵) SHARADA VOWEL SIGN II	[2AC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B5, 0x0062 };
    uint32_t const ces[9] = { 0x2AC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_093)
{
    // 111B6 0021;	
    // (𑆶) SHARADA VOWEL SIGN U	[2AC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B6, 0x0021 };
    uint32_t const ces[9] = { 0x2AC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_094)
{
    // 111B6 003F;	
    // (𑆶) SHARADA VOWEL SIGN U	[2AC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B6, 0x003F };
    uint32_t const ces[9] = { 0x2AC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_095)
{
    // 111B6 0061;	
    // (𑆶) SHARADA VOWEL SIGN U	[2AC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B6, 0x0061 };
    uint32_t const ces[9] = { 0x2AC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_096)
{
    // 111B6 0041;	
    // (𑆶) SHARADA VOWEL SIGN U	[2AC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111B6, 0x0041 };
    uint32_t const ces[9] = { 0x2AC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_097)
{
    // 111B6 0062;	
    // (𑆶) SHARADA VOWEL SIGN U	[2AC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B6, 0x0062 };
    uint32_t const ces[9] = { 0x2AC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_098)
{
    // 111B7 0021;	
    // (𑆷) SHARADA VOWEL SIGN UU	[2ACA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B7, 0x0021 };
    uint32_t const ces[9] = { 0x2ACA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_099)
{
    // 111B7 003F;	
    // (𑆷) SHARADA VOWEL SIGN UU	[2ACA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B7, 0x003F };
    uint32_t const ces[9] = { 0x2ACA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_100)
{
    // 111B7 0061;	
    // (𑆷) SHARADA VOWEL SIGN UU	[2ACA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B7, 0x0061 };
    uint32_t const ces[9] = { 0x2ACA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_101)
{
    // 111B7 0041;	
    // (𑆷) SHARADA VOWEL SIGN UU	[2ACA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111B7, 0x0041 };
    uint32_t const ces[9] = { 0x2ACA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_102)
{
    // 111B7 0062;	
    // (𑆷) SHARADA VOWEL SIGN UU	[2ACA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B7, 0x0062 };
    uint32_t const ces[9] = { 0x2ACA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_103)
{
    // 111B8 0021;	
    // (𑆸) SHARADA VOWEL SIGN VOCALIC R	[2ACB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B8, 0x0021 };
    uint32_t const ces[9] = { 0x2ACB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_104)
{
    // 111B8 003F;	
    // (𑆸) SHARADA VOWEL SIGN VOCALIC R	[2ACB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B8, 0x003F };
    uint32_t const ces[9] = { 0x2ACB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_105)
{
    // 111B8 0061;	
    // (𑆸) SHARADA VOWEL SIGN VOCALIC R	[2ACB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B8, 0x0061 };
    uint32_t const ces[9] = { 0x2ACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_106)
{
    // 111B8 0041;	
    // (𑆸) SHARADA VOWEL SIGN VOCALIC R	[2ACB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111B8, 0x0041 };
    uint32_t const ces[9] = { 0x2ACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_107)
{
    // 111B8 0062;	
    // (𑆸) SHARADA VOWEL SIGN VOCALIC R	[2ACB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B8, 0x0062 };
    uint32_t const ces[9] = { 0x2ACB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_108)
{
    // 111B9 0021;	
    // (𑆹) SHARADA VOWEL SIGN VOCALIC RR	[2ACC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B9, 0x0021 };
    uint32_t const ces[9] = { 0x2ACC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_109)
{
    // 111B9 003F;	
    // (𑆹) SHARADA VOWEL SIGN VOCALIC RR	[2ACC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B9, 0x003F };
    uint32_t const ces[9] = { 0x2ACC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_110)
{
    // 111B9 0061;	
    // (𑆹) SHARADA VOWEL SIGN VOCALIC RR	[2ACC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B9, 0x0061 };
    uint32_t const ces[9] = { 0x2ACC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_111)
{
    // 111B9 0041;	
    // (𑆹) SHARADA VOWEL SIGN VOCALIC RR	[2ACC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111B9, 0x0041 };
    uint32_t const ces[9] = { 0x2ACC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_112)
{
    // 111B9 0062;	
    // (𑆹) SHARADA VOWEL SIGN VOCALIC RR	[2ACC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111B9, 0x0062 };
    uint32_t const ces[9] = { 0x2ACC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_113)
{
    // 111BA 0021;	
    // (𑆺) SHARADA VOWEL SIGN VOCALIC L	[2ACD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BA, 0x0021 };
    uint32_t const ces[9] = { 0x2ACD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_114)
{
    // 111BA 003F;	
    // (𑆺) SHARADA VOWEL SIGN VOCALIC L	[2ACD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BA, 0x003F };
    uint32_t const ces[9] = { 0x2ACD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_115)
{
    // 111BA 0061;	
    // (𑆺) SHARADA VOWEL SIGN VOCALIC L	[2ACD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BA, 0x0061 };
    uint32_t const ces[9] = { 0x2ACD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_116)
{
    // 111BA 0041;	
    // (𑆺) SHARADA VOWEL SIGN VOCALIC L	[2ACD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111BA, 0x0041 };
    uint32_t const ces[9] = { 0x2ACD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_117)
{
    // 111BA 0062;	
    // (𑆺) SHARADA VOWEL SIGN VOCALIC L	[2ACD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BA, 0x0062 };
    uint32_t const ces[9] = { 0x2ACD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_118)
{
    // 111BB 0021;	
    // (𑆻) SHARADA VOWEL SIGN VOCALIC LL	[2ACE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BB, 0x0021 };
    uint32_t const ces[9] = { 0x2ACE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_119)
{
    // 111BB 003F;	
    // (𑆻) SHARADA VOWEL SIGN VOCALIC LL	[2ACE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BB, 0x003F };
    uint32_t const ces[9] = { 0x2ACE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_120)
{
    // 111BB 0061;	
    // (𑆻) SHARADA VOWEL SIGN VOCALIC LL	[2ACE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BB, 0x0061 };
    uint32_t const ces[9] = { 0x2ACE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_121)
{
    // 111BB 0041;	
    // (𑆻) SHARADA VOWEL SIGN VOCALIC LL	[2ACE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111BB, 0x0041 };
    uint32_t const ces[9] = { 0x2ACE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_122)
{
    // 111BB 0062;	
    // (𑆻) SHARADA VOWEL SIGN VOCALIC LL	[2ACE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BB, 0x0062 };
    uint32_t const ces[9] = { 0x2ACE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_123)
{
    // 111BC 0021;	
    // (𑆼) SHARADA VOWEL SIGN E	[2ACF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BC, 0x0021 };
    uint32_t const ces[9] = { 0x2ACF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_124)
{
    // 111BC 003F;	
    // (𑆼) SHARADA VOWEL SIGN E	[2ACF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BC, 0x003F };
    uint32_t const ces[9] = { 0x2ACF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_125)
{
    // 111BC 0061;	
    // (𑆼) SHARADA VOWEL SIGN E	[2ACF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BC, 0x0061 };
    uint32_t const ces[9] = { 0x2ACF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_126)
{
    // 111BC 0041;	
    // (𑆼) SHARADA VOWEL SIGN E	[2ACF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111BC, 0x0041 };
    uint32_t const ces[9] = { 0x2ACF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_127)
{
    // 111BC 0062;	
    // (𑆼) SHARADA VOWEL SIGN E	[2ACF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BC, 0x0062 };
    uint32_t const ces[9] = { 0x2ACF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_128)
{
    // 111BD 0021;	
    // (𑆽) SHARADA VOWEL SIGN AI	[2AD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BD, 0x0021 };
    uint32_t const ces[9] = { 0x2AD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_129)
{
    // 111BD 003F;	
    // (𑆽) SHARADA VOWEL SIGN AI	[2AD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BD, 0x003F };
    uint32_t const ces[9] = { 0x2AD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_130)
{
    // 111BD 0061;	
    // (𑆽) SHARADA VOWEL SIGN AI	[2AD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BD, 0x0061 };
    uint32_t const ces[9] = { 0x2AD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_131)
{
    // 111BD 0041;	
    // (𑆽) SHARADA VOWEL SIGN AI	[2AD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111BD, 0x0041 };
    uint32_t const ces[9] = { 0x2AD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_132)
{
    // 111BD 0062;	
    // (𑆽) SHARADA VOWEL SIGN AI	[2AD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BD, 0x0062 };
    uint32_t const ces[9] = { 0x2AD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_133)
{
    // 111BE 0021;	
    // (𑆾) SHARADA VOWEL SIGN O	[2AD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BE, 0x0021 };
    uint32_t const ces[9] = { 0x2AD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_134)
{
    // 111BE 003F;	
    // (𑆾) SHARADA VOWEL SIGN O	[2AD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BE, 0x003F };
    uint32_t const ces[9] = { 0x2AD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_135)
{
    // 111BE 0061;	
    // (𑆾) SHARADA VOWEL SIGN O	[2AD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BE, 0x0061 };
    uint32_t const ces[9] = { 0x2AD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_136)
{
    // 111BE 0041;	
    // (𑆾) SHARADA VOWEL SIGN O	[2AD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111BE, 0x0041 };
    uint32_t const ces[9] = { 0x2AD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_137)
{
    // 111BE 0062;	
    // (𑆾) SHARADA VOWEL SIGN O	[2AD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BE, 0x0062 };
    uint32_t const ces[9] = { 0x2AD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_138)
{
    // 111BF 0021;	
    // (𑆿) SHARADA VOWEL SIGN AU	[2AD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BF, 0x0021 };
    uint32_t const ces[9] = { 0x2AD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_139)
{
    // 111BF 003F;	
    // (𑆿) SHARADA VOWEL SIGN AU	[2AD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BF, 0x003F };
    uint32_t const ces[9] = { 0x2AD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_140)
{
    // 111BF 0061;	
    // (𑆿) SHARADA VOWEL SIGN AU	[2AD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BF, 0x0061 };
    uint32_t const ces[9] = { 0x2AD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_141)
{
    // 111BF 0041;	
    // (𑆿) SHARADA VOWEL SIGN AU	[2AD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111BF, 0x0041 };
    uint32_t const ces[9] = { 0x2AD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_142)
{
    // 111BF 0062;	
    // (𑆿) SHARADA VOWEL SIGN AU	[2AD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111BF, 0x0062 };
    uint32_t const ces[9] = { 0x2AD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_143)
{
    // 0334 111C0;	
    // (𑇀) SHARADA SIGN VIRAMA	[2AD3 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x111C0 };
    uint32_t const ces[8] = { 0x2AD3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_144)
{
    // 111C0 0334;	
    // (𑇀) SHARADA SIGN VIRAMA	[2AD3 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C0, 0x0334 };
    uint32_t const ces[8] = { 0x2AD3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_145)
{
    // 111C0 0021;	
    // (𑇀) SHARADA SIGN VIRAMA	[2AD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C0, 0x0021 };
    uint32_t const ces[9] = { 0x2AD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_146)
{
    // 111C0 003F;	
    // (𑇀) SHARADA SIGN VIRAMA	[2AD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C0, 0x003F };
    uint32_t const ces[9] = { 0x2AD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_147)
{
    // 111C0 0061;	
    // (𑇀) SHARADA SIGN VIRAMA	[2AD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C0, 0x0061 };
    uint32_t const ces[9] = { 0x2AD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_148)
{
    // 111C0 0041;	
    // (𑇀) SHARADA SIGN VIRAMA	[2AD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111C0, 0x0041 };
    uint32_t const ces[9] = { 0x2AD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_149)
{
    // 111C0 0062;	
    // (𑇀) SHARADA SIGN VIRAMA	[2AD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111C0, 0x0062 };
    uint32_t const ces[9] = { 0x2AD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_150)
{
    // 11200 0021;	
    // (𑈀) KHOJKI LETTER A	[2AD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11200, 0x0021 };
    uint32_t const ces[9] = { 0x2AD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_151)
{
    // 11200 003F;	
    // (𑈀) KHOJKI LETTER A	[2AD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11200, 0x003F };
    uint32_t const ces[9] = { 0x2AD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_152)
{
    // 11200 0061;	
    // (𑈀) KHOJKI LETTER A	[2AD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11200, 0x0061 };
    uint32_t const ces[9] = { 0x2AD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_153)
{
    // 11200 0041;	
    // (𑈀) KHOJKI LETTER A	[2AD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11200, 0x0041 };
    uint32_t const ces[9] = { 0x2AD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_154)
{
    // 11200 0062;	
    // (𑈀) KHOJKI LETTER A	[2AD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11200, 0x0062 };
    uint32_t const ces[9] = { 0x2AD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_155)
{
    // 11201 0021;	
    // (𑈁) KHOJKI LETTER AA	[2AD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11201, 0x0021 };
    uint32_t const ces[9] = { 0x2AD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_156)
{
    // 11201 003F;	
    // (𑈁) KHOJKI LETTER AA	[2AD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11201, 0x003F };
    uint32_t const ces[9] = { 0x2AD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_157)
{
    // 11201 0061;	
    // (𑈁) KHOJKI LETTER AA	[2AD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11201, 0x0061 };
    uint32_t const ces[9] = { 0x2AD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_158)
{
    // 11201 0041;	
    // (𑈁) KHOJKI LETTER AA	[2AD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11201, 0x0041 };
    uint32_t const ces[9] = { 0x2AD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_159)
{
    // 11201 0062;	
    // (𑈁) KHOJKI LETTER AA	[2AD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11201, 0x0062 };
    uint32_t const ces[9] = { 0x2AD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_160)
{
    // 11202 0021;	
    // (𑈂) KHOJKI LETTER I	[2AD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11202, 0x0021 };
    uint32_t const ces[9] = { 0x2AD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_161)
{
    // 11202 003F;	
    // (𑈂) KHOJKI LETTER I	[2AD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11202, 0x003F };
    uint32_t const ces[9] = { 0x2AD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_162)
{
    // 11202 0061;	
    // (𑈂) KHOJKI LETTER I	[2AD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11202, 0x0061 };
    uint32_t const ces[9] = { 0x2AD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_163)
{
    // 11202 0041;	
    // (𑈂) KHOJKI LETTER I	[2AD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11202, 0x0041 };
    uint32_t const ces[9] = { 0x2AD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_164)
{
    // 11202 0062;	
    // (𑈂) KHOJKI LETTER I	[2AD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11202, 0x0062 };
    uint32_t const ces[9] = { 0x2AD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_165)
{
    // 11203 0021;	
    // (𑈃) KHOJKI LETTER U	[2AD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11203, 0x0021 };
    uint32_t const ces[9] = { 0x2AD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_166)
{
    // 11203 003F;	
    // (𑈃) KHOJKI LETTER U	[2AD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11203, 0x003F };
    uint32_t const ces[9] = { 0x2AD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_167)
{
    // 11203 0061;	
    // (𑈃) KHOJKI LETTER U	[2AD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11203, 0x0061 };
    uint32_t const ces[9] = { 0x2AD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_168)
{
    // 11203 0041;	
    // (𑈃) KHOJKI LETTER U	[2AD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11203, 0x0041 };
    uint32_t const ces[9] = { 0x2AD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_169)
{
    // 11203 0062;	
    // (𑈃) KHOJKI LETTER U	[2AD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11203, 0x0062 };
    uint32_t const ces[9] = { 0x2AD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_170)
{
    // 11204 0021;	
    // (𑈄) KHOJKI LETTER E	[2AD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11204, 0x0021 };
    uint32_t const ces[9] = { 0x2AD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_171)
{
    // 11204 003F;	
    // (𑈄) KHOJKI LETTER E	[2AD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11204, 0x003F };
    uint32_t const ces[9] = { 0x2AD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_172)
{
    // 11204 0061;	
    // (𑈄) KHOJKI LETTER E	[2AD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11204, 0x0061 };
    uint32_t const ces[9] = { 0x2AD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_173)
{
    // 11204 0041;	
    // (𑈄) KHOJKI LETTER E	[2AD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11204, 0x0041 };
    uint32_t const ces[9] = { 0x2AD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_174)
{
    // 11204 0062;	
    // (𑈄) KHOJKI LETTER E	[2AD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11204, 0x0062 };
    uint32_t const ces[9] = { 0x2AD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_175)
{
    // 11205 0021;	
    // (𑈅) KHOJKI LETTER AI	[2AD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11205, 0x0021 };
    uint32_t const ces[9] = { 0x2AD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_176)
{
    // 11205 003F;	
    // (𑈅) KHOJKI LETTER AI	[2AD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11205, 0x003F };
    uint32_t const ces[9] = { 0x2AD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_177)
{
    // 11205 0061;	
    // (𑈅) KHOJKI LETTER AI	[2AD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11205, 0x0061 };
    uint32_t const ces[9] = { 0x2AD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_178)
{
    // 11205 0041;	
    // (𑈅) KHOJKI LETTER AI	[2AD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11205, 0x0041 };
    uint32_t const ces[9] = { 0x2AD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_179)
{
    // 11205 0062;	
    // (𑈅) KHOJKI LETTER AI	[2AD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11205, 0x0062 };
    uint32_t const ces[9] = { 0x2AD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_180)
{
    // 11206 0021;	
    // (𑈆) KHOJKI LETTER O	[2ADA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11206, 0x0021 };
    uint32_t const ces[9] = { 0x2ADA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_181)
{
    // 11206 003F;	
    // (𑈆) KHOJKI LETTER O	[2ADA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11206, 0x003F };
    uint32_t const ces[9] = { 0x2ADA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_182)
{
    // 11206 0061;	
    // (𑈆) KHOJKI LETTER O	[2ADA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11206, 0x0061 };
    uint32_t const ces[9] = { 0x2ADA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_183)
{
    // 11206 0041;	
    // (𑈆) KHOJKI LETTER O	[2ADA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11206, 0x0041 };
    uint32_t const ces[9] = { 0x2ADA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_184)
{
    // 11206 0062;	
    // (𑈆) KHOJKI LETTER O	[2ADA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11206, 0x0062 };
    uint32_t const ces[9] = { 0x2ADA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_185)
{
    // 11207 0021;	
    // (𑈇) KHOJKI LETTER AU	[2ADB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11207, 0x0021 };
    uint32_t const ces[9] = { 0x2ADB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_186)
{
    // 11207 003F;	
    // (𑈇) KHOJKI LETTER AU	[2ADB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11207, 0x003F };
    uint32_t const ces[9] = { 0x2ADB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_187)
{
    // 11207 0061;	
    // (𑈇) KHOJKI LETTER AU	[2ADB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11207, 0x0061 };
    uint32_t const ces[9] = { 0x2ADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_188)
{
    // 11207 0041;	
    // (𑈇) KHOJKI LETTER AU	[2ADB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11207, 0x0041 };
    uint32_t const ces[9] = { 0x2ADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_189)
{
    // 11207 0062;	
    // (𑈇) KHOJKI LETTER AU	[2ADB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11207, 0x0062 };
    uint32_t const ces[9] = { 0x2ADB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_190)
{
    // 11208 0021;	
    // (𑈈) KHOJKI LETTER KA	[2ADC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11208, 0x0021 };
    uint32_t const ces[9] = { 0x2ADC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_191)
{
    // 11208 003F;	
    // (𑈈) KHOJKI LETTER KA	[2ADC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11208, 0x003F };
    uint32_t const ces[9] = { 0x2ADC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_192)
{
    // 11208 0061;	
    // (𑈈) KHOJKI LETTER KA	[2ADC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11208, 0x0061 };
    uint32_t const ces[9] = { 0x2ADC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_193)
{
    // 11208 0041;	
    // (𑈈) KHOJKI LETTER KA	[2ADC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11208, 0x0041 };
    uint32_t const ces[9] = { 0x2ADC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_194)
{
    // 11208 0062;	
    // (𑈈) KHOJKI LETTER KA	[2ADC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11208, 0x0062 };
    uint32_t const ces[9] = { 0x2ADC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_195)
{
    // 11209 0021;	
    // (𑈉) KHOJKI LETTER KHA	[2ADD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11209, 0x0021 };
    uint32_t const ces[9] = { 0x2ADD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_196)
{
    // 11209 003F;	
    // (𑈉) KHOJKI LETTER KHA	[2ADD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11209, 0x003F };
    uint32_t const ces[9] = { 0x2ADD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_197)
{
    // 11209 0061;	
    // (𑈉) KHOJKI LETTER KHA	[2ADD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11209, 0x0061 };
    uint32_t const ces[9] = { 0x2ADD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_198)
{
    // 11209 0041;	
    // (𑈉) KHOJKI LETTER KHA	[2ADD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11209, 0x0041 };
    uint32_t const ces[9] = { 0x2ADD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_199)
{
    // 11209 0062;	
    // (𑈉) KHOJKI LETTER KHA	[2ADD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11209, 0x0062 };
    uint32_t const ces[9] = { 0x2ADD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_200)
{
    // 1120A 0021;	
    // (𑈊) KHOJKI LETTER GA	[2ADE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120A, 0x0021 };
    uint32_t const ces[9] = { 0x2ADE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_201)
{
    // 1120A 003F;	
    // (𑈊) KHOJKI LETTER GA	[2ADE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120A, 0x003F };
    uint32_t const ces[9] = { 0x2ADE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_202)
{
    // 1120A 0061;	
    // (𑈊) KHOJKI LETTER GA	[2ADE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120A, 0x0061 };
    uint32_t const ces[9] = { 0x2ADE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_203)
{
    // 1120A 0041;	
    // (𑈊) KHOJKI LETTER GA	[2ADE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1120A, 0x0041 };
    uint32_t const ces[9] = { 0x2ADE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_204)
{
    // 1120A 0062;	
    // (𑈊) KHOJKI LETTER GA	[2ADE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120A, 0x0062 };
    uint32_t const ces[9] = { 0x2ADE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_205)
{
    // 1120B 0021;	
    // (𑈋) KHOJKI LETTER GGA	[2ADF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120B, 0x0021 };
    uint32_t const ces[9] = { 0x2ADF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_206)
{
    // 1120B 003F;	
    // (𑈋) KHOJKI LETTER GGA	[2ADF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120B, 0x003F };
    uint32_t const ces[9] = { 0x2ADF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_207)
{
    // 1120B 0061;	
    // (𑈋) KHOJKI LETTER GGA	[2ADF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120B, 0x0061 };
    uint32_t const ces[9] = { 0x2ADF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_208)
{
    // 1120B 0041;	
    // (𑈋) KHOJKI LETTER GGA	[2ADF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1120B, 0x0041 };
    uint32_t const ces[9] = { 0x2ADF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_209)
{
    // 1120B 0062;	
    // (𑈋) KHOJKI LETTER GGA	[2ADF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120B, 0x0062 };
    uint32_t const ces[9] = { 0x2ADF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_210)
{
    // 1120C 0021;	
    // (𑈌) KHOJKI LETTER GHA	[2AE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120C, 0x0021 };
    uint32_t const ces[9] = { 0x2AE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_211)
{
    // 1120C 003F;	
    // (𑈌) KHOJKI LETTER GHA	[2AE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120C, 0x003F };
    uint32_t const ces[9] = { 0x2AE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_212)
{
    // 1120C 0061;	
    // (𑈌) KHOJKI LETTER GHA	[2AE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120C, 0x0061 };
    uint32_t const ces[9] = { 0x2AE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_213)
{
    // 1120C 0041;	
    // (𑈌) KHOJKI LETTER GHA	[2AE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1120C, 0x0041 };
    uint32_t const ces[9] = { 0x2AE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_214)
{
    // 1120C 0062;	
    // (𑈌) KHOJKI LETTER GHA	[2AE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120C, 0x0062 };
    uint32_t const ces[9] = { 0x2AE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_215)
{
    // 1120D 0021;	
    // (𑈍) KHOJKI LETTER NGA	[2AE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120D, 0x0021 };
    uint32_t const ces[9] = { 0x2AE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_216)
{
    // 1120D 003F;	
    // (𑈍) KHOJKI LETTER NGA	[2AE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120D, 0x003F };
    uint32_t const ces[9] = { 0x2AE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_217)
{
    // 1120D 0061;	
    // (𑈍) KHOJKI LETTER NGA	[2AE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120D, 0x0061 };
    uint32_t const ces[9] = { 0x2AE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_218)
{
    // 1120D 0041;	
    // (𑈍) KHOJKI LETTER NGA	[2AE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1120D, 0x0041 };
    uint32_t const ces[9] = { 0x2AE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_219)
{
    // 1120D 0062;	
    // (𑈍) KHOJKI LETTER NGA	[2AE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120D, 0x0062 };
    uint32_t const ces[9] = { 0x2AE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_220)
{
    // 1120E 0021;	
    // (𑈎) KHOJKI LETTER CA	[2AE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120E, 0x0021 };
    uint32_t const ces[9] = { 0x2AE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_221)
{
    // 1120E 003F;	
    // (𑈎) KHOJKI LETTER CA	[2AE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120E, 0x003F };
    uint32_t const ces[9] = { 0x2AE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_222)
{
    // 1120E 0061;	
    // (𑈎) KHOJKI LETTER CA	[2AE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120E, 0x0061 };
    uint32_t const ces[9] = { 0x2AE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_223)
{
    // 1120E 0041;	
    // (𑈎) KHOJKI LETTER CA	[2AE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1120E, 0x0041 };
    uint32_t const ces[9] = { 0x2AE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_224)
{
    // 1120E 0062;	
    // (𑈎) KHOJKI LETTER CA	[2AE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120E, 0x0062 };
    uint32_t const ces[9] = { 0x2AE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_225)
{
    // 1120F 0021;	
    // (𑈏) KHOJKI LETTER CHA	[2AE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120F, 0x0021 };
    uint32_t const ces[9] = { 0x2AE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_226)
{
    // 1120F 003F;	
    // (𑈏) KHOJKI LETTER CHA	[2AE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120F, 0x003F };
    uint32_t const ces[9] = { 0x2AE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_227)
{
    // 1120F 0061;	
    // (𑈏) KHOJKI LETTER CHA	[2AE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120F, 0x0061 };
    uint32_t const ces[9] = { 0x2AE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_228)
{
    // 1120F 0041;	
    // (𑈏) KHOJKI LETTER CHA	[2AE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1120F, 0x0041 };
    uint32_t const ces[9] = { 0x2AE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_229)
{
    // 1120F 0062;	
    // (𑈏) KHOJKI LETTER CHA	[2AE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1120F, 0x0062 };
    uint32_t const ces[9] = { 0x2AE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_230)
{
    // 11210 0021;	
    // (𑈐) KHOJKI LETTER JA	[2AE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11210, 0x0021 };
    uint32_t const ces[9] = { 0x2AE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_231)
{
    // 11210 003F;	
    // (𑈐) KHOJKI LETTER JA	[2AE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11210, 0x003F };
    uint32_t const ces[9] = { 0x2AE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_232)
{
    // 11210 0061;	
    // (𑈐) KHOJKI LETTER JA	[2AE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11210, 0x0061 };
    uint32_t const ces[9] = { 0x2AE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_233)
{
    // 11210 0041;	
    // (𑈐) KHOJKI LETTER JA	[2AE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11210, 0x0041 };
    uint32_t const ces[9] = { 0x2AE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_234)
{
    // 11210 0062;	
    // (𑈐) KHOJKI LETTER JA	[2AE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11210, 0x0062 };
    uint32_t const ces[9] = { 0x2AE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_235)
{
    // 11211 0021;	
    // (𑈑) KHOJKI LETTER JJA	[2AE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11211, 0x0021 };
    uint32_t const ces[9] = { 0x2AE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_236)
{
    // 11211 003F;	
    // (𑈑) KHOJKI LETTER JJA	[2AE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11211, 0x003F };
    uint32_t const ces[9] = { 0x2AE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_237)
{
    // 11211 0061;	
    // (𑈑) KHOJKI LETTER JJA	[2AE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11211, 0x0061 };
    uint32_t const ces[9] = { 0x2AE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_238)
{
    // 11211 0041;	
    // (𑈑) KHOJKI LETTER JJA	[2AE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11211, 0x0041 };
    uint32_t const ces[9] = { 0x2AE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_239)
{
    // 11211 0062;	
    // (𑈑) KHOJKI LETTER JJA	[2AE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11211, 0x0062 };
    uint32_t const ces[9] = { 0x2AE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_240)
{
    // 11213 0021;	
    // (𑈓) KHOJKI LETTER NYA	[2AE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11213, 0x0021 };
    uint32_t const ces[9] = { 0x2AE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_241)
{
    // 11213 003F;	
    // (𑈓) KHOJKI LETTER NYA	[2AE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11213, 0x003F };
    uint32_t const ces[9] = { 0x2AE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_242)
{
    // 11213 0061;	
    // (𑈓) KHOJKI LETTER NYA	[2AE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11213, 0x0061 };
    uint32_t const ces[9] = { 0x2AE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_243)
{
    // 11213 0041;	
    // (𑈓) KHOJKI LETTER NYA	[2AE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11213, 0x0041 };
    uint32_t const ces[9] = { 0x2AE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_244)
{
    // 11213 0062;	
    // (𑈓) KHOJKI LETTER NYA	[2AE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11213, 0x0062 };
    uint32_t const ces[9] = { 0x2AE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_245)
{
    // 11214 0021;	
    // (𑈔) KHOJKI LETTER TTA	[2AE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11214, 0x0021 };
    uint32_t const ces[9] = { 0x2AE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_246)
{
    // 11214 003F;	
    // (𑈔) KHOJKI LETTER TTA	[2AE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11214, 0x003F };
    uint32_t const ces[9] = { 0x2AE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_247)
{
    // 11214 0061;	
    // (𑈔) KHOJKI LETTER TTA	[2AE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11214, 0x0061 };
    uint32_t const ces[9] = { 0x2AE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_248)
{
    // 11214 0041;	
    // (𑈔) KHOJKI LETTER TTA	[2AE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11214, 0x0041 };
    uint32_t const ces[9] = { 0x2AE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_249)
{
    // 11214 0062;	
    // (𑈔) KHOJKI LETTER TTA	[2AE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11214, 0x0062 };
    uint32_t const ces[9] = { 0x2AE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_250)
{
    // 11215 0021;	
    // (𑈕) KHOJKI LETTER TTHA	[2AE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11215, 0x0021 };
    uint32_t const ces[9] = { 0x2AE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_251)
{
    // 11215 003F;	
    // (𑈕) KHOJKI LETTER TTHA	[2AE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11215, 0x003F };
    uint32_t const ces[9] = { 0x2AE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_252)
{
    // 11215 0061;	
    // (𑈕) KHOJKI LETTER TTHA	[2AE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11215, 0x0061 };
    uint32_t const ces[9] = { 0x2AE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_253)
{
    // 11215 0041;	
    // (𑈕) KHOJKI LETTER TTHA	[2AE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11215, 0x0041 };
    uint32_t const ces[9] = { 0x2AE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_254)
{
    // 11215 0062;	
    // (𑈕) KHOJKI LETTER TTHA	[2AE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11215, 0x0062 };
    uint32_t const ces[9] = { 0x2AE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_255)
{
    // 11216 0021;	
    // (𑈖) KHOJKI LETTER DDA	[2AE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11216, 0x0021 };
    uint32_t const ces[9] = { 0x2AE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_256)
{
    // 11216 003F;	
    // (𑈖) KHOJKI LETTER DDA	[2AE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11216, 0x003F };
    uint32_t const ces[9] = { 0x2AE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_257)
{
    // 11216 0061;	
    // (𑈖) KHOJKI LETTER DDA	[2AE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11216, 0x0061 };
    uint32_t const ces[9] = { 0x2AE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_258)
{
    // 11216 0041;	
    // (𑈖) KHOJKI LETTER DDA	[2AE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11216, 0x0041 };
    uint32_t const ces[9] = { 0x2AE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_259)
{
    // 11216 0062;	
    // (𑈖) KHOJKI LETTER DDA	[2AE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11216, 0x0062 };
    uint32_t const ces[9] = { 0x2AE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_260)
{
    // 11217 0021;	
    // (𑈗) KHOJKI LETTER DDHA	[2AEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11217, 0x0021 };
    uint32_t const ces[9] = { 0x2AEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_261)
{
    // 11217 003F;	
    // (𑈗) KHOJKI LETTER DDHA	[2AEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11217, 0x003F };
    uint32_t const ces[9] = { 0x2AEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_262)
{
    // 11217 0061;	
    // (𑈗) KHOJKI LETTER DDHA	[2AEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11217, 0x0061 };
    uint32_t const ces[9] = { 0x2AEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_263)
{
    // 11217 0041;	
    // (𑈗) KHOJKI LETTER DDHA	[2AEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11217, 0x0041 };
    uint32_t const ces[9] = { 0x2AEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_264)
{
    // 11217 0062;	
    // (𑈗) KHOJKI LETTER DDHA	[2AEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11217, 0x0062 };
    uint32_t const ces[9] = { 0x2AEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_265)
{
    // 11218 0021;	
    // (𑈘) KHOJKI LETTER NNA	[2AEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11218, 0x0021 };
    uint32_t const ces[9] = { 0x2AEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_266)
{
    // 11218 003F;	
    // (𑈘) KHOJKI LETTER NNA	[2AEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11218, 0x003F };
    uint32_t const ces[9] = { 0x2AEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_267)
{
    // 11218 0061;	
    // (𑈘) KHOJKI LETTER NNA	[2AEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11218, 0x0061 };
    uint32_t const ces[9] = { 0x2AEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_268)
{
    // 11218 0041;	
    // (𑈘) KHOJKI LETTER NNA	[2AEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11218, 0x0041 };
    uint32_t const ces[9] = { 0x2AEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_269)
{
    // 11218 0062;	
    // (𑈘) KHOJKI LETTER NNA	[2AEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11218, 0x0062 };
    uint32_t const ces[9] = { 0x2AEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_270)
{
    // 11219 0021;	
    // (𑈙) KHOJKI LETTER TA	[2AEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11219, 0x0021 };
    uint32_t const ces[9] = { 0x2AEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_271)
{
    // 11219 003F;	
    // (𑈙) KHOJKI LETTER TA	[2AEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11219, 0x003F };
    uint32_t const ces[9] = { 0x2AEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_272)
{
    // 11219 0061;	
    // (𑈙) KHOJKI LETTER TA	[2AEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11219, 0x0061 };
    uint32_t const ces[9] = { 0x2AEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_273)
{
    // 11219 0041;	
    // (𑈙) KHOJKI LETTER TA	[2AEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11219, 0x0041 };
    uint32_t const ces[9] = { 0x2AEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_274)
{
    // 11219 0062;	
    // (𑈙) KHOJKI LETTER TA	[2AEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11219, 0x0062 };
    uint32_t const ces[9] = { 0x2AEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_275)
{
    // 1121A 0021;	
    // (𑈚) KHOJKI LETTER THA	[2AED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121A, 0x0021 };
    uint32_t const ces[9] = { 0x2AED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_276)
{
    // 1121A 003F;	
    // (𑈚) KHOJKI LETTER THA	[2AED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121A, 0x003F };
    uint32_t const ces[9] = { 0x2AED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_277)
{
    // 1121A 0061;	
    // (𑈚) KHOJKI LETTER THA	[2AED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121A, 0x0061 };
    uint32_t const ces[9] = { 0x2AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_278)
{
    // 1121A 0041;	
    // (𑈚) KHOJKI LETTER THA	[2AED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1121A, 0x0041 };
    uint32_t const ces[9] = { 0x2AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_279)
{
    // 1121A 0062;	
    // (𑈚) KHOJKI LETTER THA	[2AED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121A, 0x0062 };
    uint32_t const ces[9] = { 0x2AED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_280)
{
    // 1121B 0021;	
    // (𑈛) KHOJKI LETTER DA	[2AEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121B, 0x0021 };
    uint32_t const ces[9] = { 0x2AEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_281)
{
    // 1121B 003F;	
    // (𑈛) KHOJKI LETTER DA	[2AEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121B, 0x003F };
    uint32_t const ces[9] = { 0x2AEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_282)
{
    // 1121B 0061;	
    // (𑈛) KHOJKI LETTER DA	[2AEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121B, 0x0061 };
    uint32_t const ces[9] = { 0x2AEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_283)
{
    // 1121B 0041;	
    // (𑈛) KHOJKI LETTER DA	[2AEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1121B, 0x0041 };
    uint32_t const ces[9] = { 0x2AEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_284)
{
    // 1121B 0062;	
    // (𑈛) KHOJKI LETTER DA	[2AEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121B, 0x0062 };
    uint32_t const ces[9] = { 0x2AEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_285)
{
    // 1121C 0021;	
    // (𑈜) KHOJKI LETTER DDDA	[2AEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121C, 0x0021 };
    uint32_t const ces[9] = { 0x2AEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_286)
{
    // 1121C 003F;	
    // (𑈜) KHOJKI LETTER DDDA	[2AEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121C, 0x003F };
    uint32_t const ces[9] = { 0x2AEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_287)
{
    // 1121C 0061;	
    // (𑈜) KHOJKI LETTER DDDA	[2AEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121C, 0x0061 };
    uint32_t const ces[9] = { 0x2AEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_288)
{
    // 1121C 0041;	
    // (𑈜) KHOJKI LETTER DDDA	[2AEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1121C, 0x0041 };
    uint32_t const ces[9] = { 0x2AEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_289)
{
    // 1121C 0062;	
    // (𑈜) KHOJKI LETTER DDDA	[2AEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121C, 0x0062 };
    uint32_t const ces[9] = { 0x2AEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_290)
{
    // 1121D 0021;	
    // (𑈝) KHOJKI LETTER DHA	[2AF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121D, 0x0021 };
    uint32_t const ces[9] = { 0x2AF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_291)
{
    // 1121D 003F;	
    // (𑈝) KHOJKI LETTER DHA	[2AF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121D, 0x003F };
    uint32_t const ces[9] = { 0x2AF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_292)
{
    // 1121D 0061;	
    // (𑈝) KHOJKI LETTER DHA	[2AF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121D, 0x0061 };
    uint32_t const ces[9] = { 0x2AF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_293)
{
    // 1121D 0041;	
    // (𑈝) KHOJKI LETTER DHA	[2AF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1121D, 0x0041 };
    uint32_t const ces[9] = { 0x2AF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_294)
{
    // 1121D 0062;	
    // (𑈝) KHOJKI LETTER DHA	[2AF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121D, 0x0062 };
    uint32_t const ces[9] = { 0x2AF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_295)
{
    // 1121E 0021;	
    // (𑈞) KHOJKI LETTER NA	[2AF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121E, 0x0021 };
    uint32_t const ces[9] = { 0x2AF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_296)
{
    // 1121E 003F;	
    // (𑈞) KHOJKI LETTER NA	[2AF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121E, 0x003F };
    uint32_t const ces[9] = { 0x2AF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_297)
{
    // 1121E 0061;	
    // (𑈞) KHOJKI LETTER NA	[2AF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121E, 0x0061 };
    uint32_t const ces[9] = { 0x2AF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_298)
{
    // 1121E 0041;	
    // (𑈞) KHOJKI LETTER NA	[2AF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1121E, 0x0041 };
    uint32_t const ces[9] = { 0x2AF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_299)
{
    // 1121E 0062;	
    // (𑈞) KHOJKI LETTER NA	[2AF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121E, 0x0062 };
    uint32_t const ces[9] = { 0x2AF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_300)
{
    // 1121F 0021;	
    // (𑈟) KHOJKI LETTER PA	[2AF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121F, 0x0021 };
    uint32_t const ces[9] = { 0x2AF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_301)
{
    // 1121F 003F;	
    // (𑈟) KHOJKI LETTER PA	[2AF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121F, 0x003F };
    uint32_t const ces[9] = { 0x2AF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_302)
{
    // 1121F 0061;	
    // (𑈟) KHOJKI LETTER PA	[2AF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121F, 0x0061 };
    uint32_t const ces[9] = { 0x2AF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_303)
{
    // 1121F 0041;	
    // (𑈟) KHOJKI LETTER PA	[2AF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1121F, 0x0041 };
    uint32_t const ces[9] = { 0x2AF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_304)
{
    // 1121F 0062;	
    // (𑈟) KHOJKI LETTER PA	[2AF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1121F, 0x0062 };
    uint32_t const ces[9] = { 0x2AF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_305)
{
    // 11220 0021;	
    // (𑈠) KHOJKI LETTER PHA	[2AF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11220, 0x0021 };
    uint32_t const ces[9] = { 0x2AF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_306)
{
    // 11220 003F;	
    // (𑈠) KHOJKI LETTER PHA	[2AF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11220, 0x003F };
    uint32_t const ces[9] = { 0x2AF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_307)
{
    // 11220 0061;	
    // (𑈠) KHOJKI LETTER PHA	[2AF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11220, 0x0061 };
    uint32_t const ces[9] = { 0x2AF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_308)
{
    // 11220 0041;	
    // (𑈠) KHOJKI LETTER PHA	[2AF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11220, 0x0041 };
    uint32_t const ces[9] = { 0x2AF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_309)
{
    // 11220 0062;	
    // (𑈠) KHOJKI LETTER PHA	[2AF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11220, 0x0062 };
    uint32_t const ces[9] = { 0x2AF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_310)
{
    // 11221 0021;	
    // (𑈡) KHOJKI LETTER BA	[2AF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11221, 0x0021 };
    uint32_t const ces[9] = { 0x2AF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_311)
{
    // 11221 003F;	
    // (𑈡) KHOJKI LETTER BA	[2AF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11221, 0x003F };
    uint32_t const ces[9] = { 0x2AF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_312)
{
    // 11221 0061;	
    // (𑈡) KHOJKI LETTER BA	[2AF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11221, 0x0061 };
    uint32_t const ces[9] = { 0x2AF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_313)
{
    // 11221 0041;	
    // (𑈡) KHOJKI LETTER BA	[2AF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11221, 0x0041 };
    uint32_t const ces[9] = { 0x2AF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_314)
{
    // 11221 0062;	
    // (𑈡) KHOJKI LETTER BA	[2AF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11221, 0x0062 };
    uint32_t const ces[9] = { 0x2AF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_315)
{
    // 11222 0021;	
    // (𑈢) KHOJKI LETTER BBA	[2AF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11222, 0x0021 };
    uint32_t const ces[9] = { 0x2AF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_316)
{
    // 11222 003F;	
    // (𑈢) KHOJKI LETTER BBA	[2AF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11222, 0x003F };
    uint32_t const ces[9] = { 0x2AF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_317)
{
    // 11222 0061;	
    // (𑈢) KHOJKI LETTER BBA	[2AF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11222, 0x0061 };
    uint32_t const ces[9] = { 0x2AF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_318)
{
    // 11222 0041;	
    // (𑈢) KHOJKI LETTER BBA	[2AF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11222, 0x0041 };
    uint32_t const ces[9] = { 0x2AF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_319)
{
    // 11222 0062;	
    // (𑈢) KHOJKI LETTER BBA	[2AF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11222, 0x0062 };
    uint32_t const ces[9] = { 0x2AF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_320)
{
    // 11223 0021;	
    // (𑈣) KHOJKI LETTER BHA	[2AF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11223, 0x0021 };
    uint32_t const ces[9] = { 0x2AF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_321)
{
    // 11223 003F;	
    // (𑈣) KHOJKI LETTER BHA	[2AF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11223, 0x003F };
    uint32_t const ces[9] = { 0x2AF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_322)
{
    // 11223 0061;	
    // (𑈣) KHOJKI LETTER BHA	[2AF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11223, 0x0061 };
    uint32_t const ces[9] = { 0x2AF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_323)
{
    // 11223 0041;	
    // (𑈣) KHOJKI LETTER BHA	[2AF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11223, 0x0041 };
    uint32_t const ces[9] = { 0x2AF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_324)
{
    // 11223 0062;	
    // (𑈣) KHOJKI LETTER BHA	[2AF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11223, 0x0062 };
    uint32_t const ces[9] = { 0x2AF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_325)
{
    // 11224 0021;	
    // (𑈤) KHOJKI LETTER MA	[2AF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11224, 0x0021 };
    uint32_t const ces[9] = { 0x2AF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_326)
{
    // 11224 003F;	
    // (𑈤) KHOJKI LETTER MA	[2AF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11224, 0x003F };
    uint32_t const ces[9] = { 0x2AF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_327)
{
    // 11224 0061;	
    // (𑈤) KHOJKI LETTER MA	[2AF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11224, 0x0061 };
    uint32_t const ces[9] = { 0x2AF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_328)
{
    // 11224 0041;	
    // (𑈤) KHOJKI LETTER MA	[2AF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11224, 0x0041 };
    uint32_t const ces[9] = { 0x2AF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_329)
{
    // 11224 0062;	
    // (𑈤) KHOJKI LETTER MA	[2AF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11224, 0x0062 };
    uint32_t const ces[9] = { 0x2AF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_330)
{
    // 11225 0021;	
    // (𑈥) KHOJKI LETTER YA	[2AF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11225, 0x0021 };
    uint32_t const ces[9] = { 0x2AF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_331)
{
    // 11225 003F;	
    // (𑈥) KHOJKI LETTER YA	[2AF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11225, 0x003F };
    uint32_t const ces[9] = { 0x2AF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_332)
{
    // 11225 0061;	
    // (𑈥) KHOJKI LETTER YA	[2AF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11225, 0x0061 };
    uint32_t const ces[9] = { 0x2AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_333)
{
    // 11225 0041;	
    // (𑈥) KHOJKI LETTER YA	[2AF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11225, 0x0041 };
    uint32_t const ces[9] = { 0x2AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_334)
{
    // 11225 0062;	
    // (𑈥) KHOJKI LETTER YA	[2AF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11225, 0x0062 };
    uint32_t const ces[9] = { 0x2AF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_335)
{
    // 11226 0021;	
    // (𑈦) KHOJKI LETTER RA	[2AF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11226, 0x0021 };
    uint32_t const ces[9] = { 0x2AF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_336)
{
    // 11226 003F;	
    // (𑈦) KHOJKI LETTER RA	[2AF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11226, 0x003F };
    uint32_t const ces[9] = { 0x2AF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_337)
{
    // 11226 0061;	
    // (𑈦) KHOJKI LETTER RA	[2AF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11226, 0x0061 };
    uint32_t const ces[9] = { 0x2AF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_338)
{
    // 11226 0041;	
    // (𑈦) KHOJKI LETTER RA	[2AF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11226, 0x0041 };
    uint32_t const ces[9] = { 0x2AF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_339)
{
    // 11226 0062;	
    // (𑈦) KHOJKI LETTER RA	[2AF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11226, 0x0062 };
    uint32_t const ces[9] = { 0x2AF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_340)
{
    // 11227 0021;	
    // (𑈧) KHOJKI LETTER LA	[2AFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11227, 0x0021 };
    uint32_t const ces[9] = { 0x2AFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_341)
{
    // 11227 003F;	
    // (𑈧) KHOJKI LETTER LA	[2AFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11227, 0x003F };
    uint32_t const ces[9] = { 0x2AFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_342)
{
    // 11227 0061;	
    // (𑈧) KHOJKI LETTER LA	[2AFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11227, 0x0061 };
    uint32_t const ces[9] = { 0x2AFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_343)
{
    // 11227 0041;	
    // (𑈧) KHOJKI LETTER LA	[2AFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11227, 0x0041 };
    uint32_t const ces[9] = { 0x2AFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_344)
{
    // 11227 0062;	
    // (𑈧) KHOJKI LETTER LA	[2AFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11227, 0x0062 };
    uint32_t const ces[9] = { 0x2AFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_345)
{
    // 11228 0021;	
    // (𑈨) KHOJKI LETTER VA	[2AFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11228, 0x0021 };
    uint32_t const ces[9] = { 0x2AFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_346)
{
    // 11228 003F;	
    // (𑈨) KHOJKI LETTER VA	[2AFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11228, 0x003F };
    uint32_t const ces[9] = { 0x2AFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_347)
{
    // 11228 0061;	
    // (𑈨) KHOJKI LETTER VA	[2AFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11228, 0x0061 };
    uint32_t const ces[9] = { 0x2AFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_348)
{
    // 11228 0041;	
    // (𑈨) KHOJKI LETTER VA	[2AFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11228, 0x0041 };
    uint32_t const ces[9] = { 0x2AFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_349)
{
    // 11228 0062;	
    // (𑈨) KHOJKI LETTER VA	[2AFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11228, 0x0062 };
    uint32_t const ces[9] = { 0x2AFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_350)
{
    // 11229 0021;	
    // (𑈩) KHOJKI LETTER SA	[2AFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11229, 0x0021 };
    uint32_t const ces[9] = { 0x2AFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_351)
{
    // 11229 003F;	
    // (𑈩) KHOJKI LETTER SA	[2AFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11229, 0x003F };
    uint32_t const ces[9] = { 0x2AFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_352)
{
    // 11229 0061;	
    // (𑈩) KHOJKI LETTER SA	[2AFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11229, 0x0061 };
    uint32_t const ces[9] = { 0x2AFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_353)
{
    // 11229 0041;	
    // (𑈩) KHOJKI LETTER SA	[2AFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11229, 0x0041 };
    uint32_t const ces[9] = { 0x2AFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_354)
{
    // 11229 0062;	
    // (𑈩) KHOJKI LETTER SA	[2AFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11229, 0x0062 };
    uint32_t const ces[9] = { 0x2AFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_355)
{
    // 1122A 0021;	
    // (𑈪) KHOJKI LETTER HA	[2AFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122A, 0x0021 };
    uint32_t const ces[9] = { 0x2AFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_356)
{
    // 1122A 003F;	
    // (𑈪) KHOJKI LETTER HA	[2AFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122A, 0x003F };
    uint32_t const ces[9] = { 0x2AFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_357)
{
    // 1122A 0061;	
    // (𑈪) KHOJKI LETTER HA	[2AFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122A, 0x0061 };
    uint32_t const ces[9] = { 0x2AFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_358)
{
    // 1122A 0041;	
    // (𑈪) KHOJKI LETTER HA	[2AFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1122A, 0x0041 };
    uint32_t const ces[9] = { 0x2AFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_359)
{
    // 1122A 0062;	
    // (𑈪) KHOJKI LETTER HA	[2AFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122A, 0x0062 };
    uint32_t const ces[9] = { 0x2AFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_360)
{
    // 1122B 0021;	
    // (𑈫) KHOJKI LETTER LLA	[2AFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122B, 0x0021 };
    uint32_t const ces[9] = { 0x2AFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_361)
{
    // 1122B 003F;	
    // (𑈫) KHOJKI LETTER LLA	[2AFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122B, 0x003F };
    uint32_t const ces[9] = { 0x2AFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_362)
{
    // 1122B 0061;	
    // (𑈫) KHOJKI LETTER LLA	[2AFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122B, 0x0061 };
    uint32_t const ces[9] = { 0x2AFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_363)
{
    // 1122B 0041;	
    // (𑈫) KHOJKI LETTER LLA	[2AFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1122B, 0x0041 };
    uint32_t const ces[9] = { 0x2AFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_364)
{
    // 1122B 0062;	
    // (𑈫) KHOJKI LETTER LLA	[2AFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122B, 0x0062 };
    uint32_t const ces[9] = { 0x2AFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_365)
{
    // 1122C 0021;	
    // (𑈬) KHOJKI VOWEL SIGN AA	[2AFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122C, 0x0021 };
    uint32_t const ces[9] = { 0x2AFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_366)
{
    // 1122C 003F;	
    // (𑈬) KHOJKI VOWEL SIGN AA	[2AFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122C, 0x003F };
    uint32_t const ces[9] = { 0x2AFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_367)
{
    // 1122C 0061;	
    // (𑈬) KHOJKI VOWEL SIGN AA	[2AFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122C, 0x0061 };
    uint32_t const ces[9] = { 0x2AFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_368)
{
    // 1122C 0041;	
    // (𑈬) KHOJKI VOWEL SIGN AA	[2AFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1122C, 0x0041 };
    uint32_t const ces[9] = { 0x2AFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_369)
{
    // 1122C 0062;	
    // (𑈬) KHOJKI VOWEL SIGN AA	[2AFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122C, 0x0062 };
    uint32_t const ces[9] = { 0x2AFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_370)
{
    // 1122D 0021;	
    // (𑈭) KHOJKI VOWEL SIGN I	[2B00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122D, 0x0021 };
    uint32_t const ces[9] = { 0x2B00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_371)
{
    // 1122D 003F;	
    // (𑈭) KHOJKI VOWEL SIGN I	[2B00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122D, 0x003F };
    uint32_t const ces[9] = { 0x2B00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_372)
{
    // 1122D 0061;	
    // (𑈭) KHOJKI VOWEL SIGN I	[2B00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122D, 0x0061 };
    uint32_t const ces[9] = { 0x2B00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_373)
{
    // 1122D 0041;	
    // (𑈭) KHOJKI VOWEL SIGN I	[2B00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1122D, 0x0041 };
    uint32_t const ces[9] = { 0x2B00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_374)
{
    // 1122D 0062;	
    // (𑈭) KHOJKI VOWEL SIGN I	[2B00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122D, 0x0062 };
    uint32_t const ces[9] = { 0x2B00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_375)
{
    // 1122E 0021;	
    // (𑈮) KHOJKI VOWEL SIGN II	[2B01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122E, 0x0021 };
    uint32_t const ces[9] = { 0x2B01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_376)
{
    // 1122E 003F;	
    // (𑈮) KHOJKI VOWEL SIGN II	[2B01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122E, 0x003F };
    uint32_t const ces[9] = { 0x2B01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_377)
{
    // 1122E 0061;	
    // (𑈮) KHOJKI VOWEL SIGN II	[2B01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122E, 0x0061 };
    uint32_t const ces[9] = { 0x2B01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_378)
{
    // 1122E 0041;	
    // (𑈮) KHOJKI VOWEL SIGN II	[2B01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1122E, 0x0041 };
    uint32_t const ces[9] = { 0x2B01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_379)
{
    // 1122E 0062;	
    // (𑈮) KHOJKI VOWEL SIGN II	[2B01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122E, 0x0062 };
    uint32_t const ces[9] = { 0x2B01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_380)
{
    // 1122F 0021;	
    // (𑈯) KHOJKI VOWEL SIGN U	[2B02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122F, 0x0021 };
    uint32_t const ces[9] = { 0x2B02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_381)
{
    // 1122F 003F;	
    // (𑈯) KHOJKI VOWEL SIGN U	[2B02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122F, 0x003F };
    uint32_t const ces[9] = { 0x2B02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_382)
{
    // 1122F 0061;	
    // (𑈯) KHOJKI VOWEL SIGN U	[2B02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122F, 0x0061 };
    uint32_t const ces[9] = { 0x2B02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_383)
{
    // 1122F 0041;	
    // (𑈯) KHOJKI VOWEL SIGN U	[2B02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1122F, 0x0041 };
    uint32_t const ces[9] = { 0x2B02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_384)
{
    // 1122F 0062;	
    // (𑈯) KHOJKI VOWEL SIGN U	[2B02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1122F, 0x0062 };
    uint32_t const ces[9] = { 0x2B02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_385)
{
    // 11230 0021;	
    // (𑈰) KHOJKI VOWEL SIGN E	[2B03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11230, 0x0021 };
    uint32_t const ces[9] = { 0x2B03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_386)
{
    // 11230 003F;	
    // (𑈰) KHOJKI VOWEL SIGN E	[2B03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11230, 0x003F };
    uint32_t const ces[9] = { 0x2B03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_387)
{
    // 11230 0061;	
    // (𑈰) KHOJKI VOWEL SIGN E	[2B03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11230, 0x0061 };
    uint32_t const ces[9] = { 0x2B03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_388)
{
    // 11230 0041;	
    // (𑈰) KHOJKI VOWEL SIGN E	[2B03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11230, 0x0041 };
    uint32_t const ces[9] = { 0x2B03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_389)
{
    // 11230 0062;	
    // (𑈰) KHOJKI VOWEL SIGN E	[2B03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11230, 0x0062 };
    uint32_t const ces[9] = { 0x2B03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_390)
{
    // 11231 0021;	
    // (𑈱) KHOJKI VOWEL SIGN AI	[2B04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11231, 0x0021 };
    uint32_t const ces[9] = { 0x2B04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_391)
{
    // 11231 003F;	
    // (𑈱) KHOJKI VOWEL SIGN AI	[2B04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11231, 0x003F };
    uint32_t const ces[9] = { 0x2B04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_392)
{
    // 11231 0061;	
    // (𑈱) KHOJKI VOWEL SIGN AI	[2B04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11231, 0x0061 };
    uint32_t const ces[9] = { 0x2B04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_393)
{
    // 11231 0041;	
    // (𑈱) KHOJKI VOWEL SIGN AI	[2B04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11231, 0x0041 };
    uint32_t const ces[9] = { 0x2B04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_394)
{
    // 11231 0062;	
    // (𑈱) KHOJKI VOWEL SIGN AI	[2B04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11231, 0x0062 };
    uint32_t const ces[9] = { 0x2B04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_395)
{
    // 11232 0021;	
    // (𑈲) KHOJKI VOWEL SIGN O	[2B05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11232, 0x0021 };
    uint32_t const ces[9] = { 0x2B05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_396)
{
    // 11232 003F;	
    // (𑈲) KHOJKI VOWEL SIGN O	[2B05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11232, 0x003F };
    uint32_t const ces[9] = { 0x2B05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_397)
{
    // 11232 0061;	
    // (𑈲) KHOJKI VOWEL SIGN O	[2B05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11232, 0x0061 };
    uint32_t const ces[9] = { 0x2B05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_398)
{
    // 11232 0041;	
    // (𑈲) KHOJKI VOWEL SIGN O	[2B05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11232, 0x0041 };
    uint32_t const ces[9] = { 0x2B05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_399)
{
    // 11232 0062;	
    // (𑈲) KHOJKI VOWEL SIGN O	[2B05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11232, 0x0062 };
    uint32_t const ces[9] = { 0x2B05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_400)
{
    // 11233 0021;	
    // (𑈳) KHOJKI VOWEL SIGN AU	[2B06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11233, 0x0021 };
    uint32_t const ces[9] = { 0x2B06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_401)
{
    // 11233 003F;	
    // (𑈳) KHOJKI VOWEL SIGN AU	[2B06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11233, 0x003F };
    uint32_t const ces[9] = { 0x2B06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_402)
{
    // 11233 0061;	
    // (𑈳) KHOJKI VOWEL SIGN AU	[2B06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11233, 0x0061 };
    uint32_t const ces[9] = { 0x2B06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_403)
{
    // 11233 0041;	
    // (𑈳) KHOJKI VOWEL SIGN AU	[2B06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11233, 0x0041 };
    uint32_t const ces[9] = { 0x2B06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_404)
{
    // 11233 0062;	
    // (𑈳) KHOJKI VOWEL SIGN AU	[2B06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11233, 0x0062 };
    uint32_t const ces[9] = { 0x2B06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_405)
{
    // 0334 11235;	
    // (𑈵) KHOJKI SIGN VIRAMA	[2B07 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11235 };
    uint32_t const ces[8] = { 0x2B07, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_406)
{
    // 11235 0334;	
    // (𑈵) KHOJKI SIGN VIRAMA	[2B07 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11235, 0x0334 };
    uint32_t const ces[8] = { 0x2B07, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_407)
{
    // 11235 0021;	
    // (𑈵) KHOJKI SIGN VIRAMA	[2B07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11235, 0x0021 };
    uint32_t const ces[9] = { 0x2B07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_408)
{
    // 11235 003F;	
    // (𑈵) KHOJKI SIGN VIRAMA	[2B07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11235, 0x003F };
    uint32_t const ces[9] = { 0x2B07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_409)
{
    // 11235 0061;	
    // (𑈵) KHOJKI SIGN VIRAMA	[2B07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11235, 0x0061 };
    uint32_t const ces[9] = { 0x2B07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_410)
{
    // 11235 0041;	
    // (𑈵) KHOJKI SIGN VIRAMA	[2B07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11235, 0x0041 };
    uint32_t const ces[9] = { 0x2B07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_411)
{
    // 11235 0062;	
    // (𑈵) KHOJKI SIGN VIRAMA	[2B07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11235, 0x0062 };
    uint32_t const ces[9] = { 0x2B07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_412)
{
    // 112B0 0021;	
    // (𑊰) KHUDAWADI LETTER A	[2B08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B0, 0x0021 };
    uint32_t const ces[9] = { 0x2B08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_413)
{
    // 112B0 003F;	
    // (𑊰) KHUDAWADI LETTER A	[2B08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B0, 0x003F };
    uint32_t const ces[9] = { 0x2B08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_414)
{
    // 112B0 0061;	
    // (𑊰) KHUDAWADI LETTER A	[2B08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B0, 0x0061 };
    uint32_t const ces[9] = { 0x2B08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_415)
{
    // 112B0 0041;	
    // (𑊰) KHUDAWADI LETTER A	[2B08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112B0, 0x0041 };
    uint32_t const ces[9] = { 0x2B08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_416)
{
    // 112B0 0062;	
    // (𑊰) KHUDAWADI LETTER A	[2B08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B0, 0x0062 };
    uint32_t const ces[9] = { 0x2B08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_417)
{
    // 112B1 0021;	
    // (𑊱) KHUDAWADI LETTER AA	[2B09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B1, 0x0021 };
    uint32_t const ces[9] = { 0x2B09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_418)
{
    // 112B1 003F;	
    // (𑊱) KHUDAWADI LETTER AA	[2B09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B1, 0x003F };
    uint32_t const ces[9] = { 0x2B09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_419)
{
    // 112B1 0061;	
    // (𑊱) KHUDAWADI LETTER AA	[2B09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B1, 0x0061 };
    uint32_t const ces[9] = { 0x2B09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_420)
{
    // 112B1 0041;	
    // (𑊱) KHUDAWADI LETTER AA	[2B09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112B1, 0x0041 };
    uint32_t const ces[9] = { 0x2B09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_421)
{
    // 112B1 0062;	
    // (𑊱) KHUDAWADI LETTER AA	[2B09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B1, 0x0062 };
    uint32_t const ces[9] = { 0x2B09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_422)
{
    // 112B2 0021;	
    // (𑊲) KHUDAWADI LETTER I	[2B0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B2, 0x0021 };
    uint32_t const ces[9] = { 0x2B0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_423)
{
    // 112B2 003F;	
    // (𑊲) KHUDAWADI LETTER I	[2B0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B2, 0x003F };
    uint32_t const ces[9] = { 0x2B0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_424)
{
    // 112B2 0061;	
    // (𑊲) KHUDAWADI LETTER I	[2B0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B2, 0x0061 };
    uint32_t const ces[9] = { 0x2B0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_425)
{
    // 112B2 0041;	
    // (𑊲) KHUDAWADI LETTER I	[2B0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112B2, 0x0041 };
    uint32_t const ces[9] = { 0x2B0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_426)
{
    // 112B2 0062;	
    // (𑊲) KHUDAWADI LETTER I	[2B0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B2, 0x0062 };
    uint32_t const ces[9] = { 0x2B0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_427)
{
    // 112B3 0021;	
    // (𑊳) KHUDAWADI LETTER II	[2B0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B3, 0x0021 };
    uint32_t const ces[9] = { 0x2B0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_428)
{
    // 112B3 003F;	
    // (𑊳) KHUDAWADI LETTER II	[2B0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B3, 0x003F };
    uint32_t const ces[9] = { 0x2B0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_429)
{
    // 112B3 0061;	
    // (𑊳) KHUDAWADI LETTER II	[2B0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B3, 0x0061 };
    uint32_t const ces[9] = { 0x2B0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_430)
{
    // 112B3 0041;	
    // (𑊳) KHUDAWADI LETTER II	[2B0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112B3, 0x0041 };
    uint32_t const ces[9] = { 0x2B0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_431)
{
    // 112B3 0062;	
    // (𑊳) KHUDAWADI LETTER II	[2B0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B3, 0x0062 };
    uint32_t const ces[9] = { 0x2B0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_432)
{
    // 112B4 0021;	
    // (𑊴) KHUDAWADI LETTER U	[2B0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B4, 0x0021 };
    uint32_t const ces[9] = { 0x2B0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_433)
{
    // 112B4 003F;	
    // (𑊴) KHUDAWADI LETTER U	[2B0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B4, 0x003F };
    uint32_t const ces[9] = { 0x2B0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_434)
{
    // 112B4 0061;	
    // (𑊴) KHUDAWADI LETTER U	[2B0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B4, 0x0061 };
    uint32_t const ces[9] = { 0x2B0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_435)
{
    // 112B4 0041;	
    // (𑊴) KHUDAWADI LETTER U	[2B0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112B4, 0x0041 };
    uint32_t const ces[9] = { 0x2B0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_436)
{
    // 112B4 0062;	
    // (𑊴) KHUDAWADI LETTER U	[2B0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B4, 0x0062 };
    uint32_t const ces[9] = { 0x2B0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_437)
{
    // 112B5 0021;	
    // (𑊵) KHUDAWADI LETTER UU	[2B0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B5, 0x0021 };
    uint32_t const ces[9] = { 0x2B0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_438)
{
    // 112B5 003F;	
    // (𑊵) KHUDAWADI LETTER UU	[2B0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B5, 0x003F };
    uint32_t const ces[9] = { 0x2B0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_439)
{
    // 112B5 0061;	
    // (𑊵) KHUDAWADI LETTER UU	[2B0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B5, 0x0061 };
    uint32_t const ces[9] = { 0x2B0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_440)
{
    // 112B5 0041;	
    // (𑊵) KHUDAWADI LETTER UU	[2B0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112B5, 0x0041 };
    uint32_t const ces[9] = { 0x2B0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_441)
{
    // 112B5 0062;	
    // (𑊵) KHUDAWADI LETTER UU	[2B0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B5, 0x0062 };
    uint32_t const ces[9] = { 0x2B0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_442)
{
    // 112B6 0021;	
    // (𑊶) KHUDAWADI LETTER E	[2B0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B6, 0x0021 };
    uint32_t const ces[9] = { 0x2B0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_443)
{
    // 112B6 003F;	
    // (𑊶) KHUDAWADI LETTER E	[2B0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B6, 0x003F };
    uint32_t const ces[9] = { 0x2B0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_444)
{
    // 112B6 0061;	
    // (𑊶) KHUDAWADI LETTER E	[2B0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B6, 0x0061 };
    uint32_t const ces[9] = { 0x2B0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_445)
{
    // 112B6 0041;	
    // (𑊶) KHUDAWADI LETTER E	[2B0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112B6, 0x0041 };
    uint32_t const ces[9] = { 0x2B0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_446)
{
    // 112B6 0062;	
    // (𑊶) KHUDAWADI LETTER E	[2B0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B6, 0x0062 };
    uint32_t const ces[9] = { 0x2B0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_447)
{
    // 112B7 0021;	
    // (𑊷) KHUDAWADI LETTER AI	[2B0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B7, 0x0021 };
    uint32_t const ces[9] = { 0x2B0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_448)
{
    // 112B7 003F;	
    // (𑊷) KHUDAWADI LETTER AI	[2B0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B7, 0x003F };
    uint32_t const ces[9] = { 0x2B0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_449)
{
    // 112B7 0061;	
    // (𑊷) KHUDAWADI LETTER AI	[2B0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B7, 0x0061 };
    uint32_t const ces[9] = { 0x2B0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_450)
{
    // 112B7 0041;	
    // (𑊷) KHUDAWADI LETTER AI	[2B0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112B7, 0x0041 };
    uint32_t const ces[9] = { 0x2B0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_451)
{
    // 112B7 0062;	
    // (𑊷) KHUDAWADI LETTER AI	[2B0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B7, 0x0062 };
    uint32_t const ces[9] = { 0x2B0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_452)
{
    // 112B8 0021;	
    // (𑊸) KHUDAWADI LETTER O	[2B10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B8, 0x0021 };
    uint32_t const ces[9] = { 0x2B10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_453)
{
    // 112B8 003F;	
    // (𑊸) KHUDAWADI LETTER O	[2B10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B8, 0x003F };
    uint32_t const ces[9] = { 0x2B10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_454)
{
    // 112B8 0061;	
    // (𑊸) KHUDAWADI LETTER O	[2B10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B8, 0x0061 };
    uint32_t const ces[9] = { 0x2B10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_455)
{
    // 112B8 0041;	
    // (𑊸) KHUDAWADI LETTER O	[2B10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112B8, 0x0041 };
    uint32_t const ces[9] = { 0x2B10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_456)
{
    // 112B8 0062;	
    // (𑊸) KHUDAWADI LETTER O	[2B10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B8, 0x0062 };
    uint32_t const ces[9] = { 0x2B10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_457)
{
    // 112B9 0021;	
    // (𑊹) KHUDAWADI LETTER AU	[2B11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B9, 0x0021 };
    uint32_t const ces[9] = { 0x2B11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_458)
{
    // 112B9 003F;	
    // (𑊹) KHUDAWADI LETTER AU	[2B11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B9, 0x003F };
    uint32_t const ces[9] = { 0x2B11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_459)
{
    // 112B9 0061;	
    // (𑊹) KHUDAWADI LETTER AU	[2B11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B9, 0x0061 };
    uint32_t const ces[9] = { 0x2B11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_460)
{
    // 112B9 0041;	
    // (𑊹) KHUDAWADI LETTER AU	[2B11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112B9, 0x0041 };
    uint32_t const ces[9] = { 0x2B11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_461)
{
    // 112B9 0062;	
    // (𑊹) KHUDAWADI LETTER AU	[2B11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112B9, 0x0062 };
    uint32_t const ces[9] = { 0x2B11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_462)
{
    // 112BA 0021;	
    // (𑊺) KHUDAWADI LETTER KA	[2B12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BA, 0x0021 };
    uint32_t const ces[9] = { 0x2B12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_463)
{
    // 112BA 003F;	
    // (𑊺) KHUDAWADI LETTER KA	[2B12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BA, 0x003F };
    uint32_t const ces[9] = { 0x2B12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_464)
{
    // 112BA 0061;	
    // (𑊺) KHUDAWADI LETTER KA	[2B12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BA, 0x0061 };
    uint32_t const ces[9] = { 0x2B12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_465)
{
    // 112BA 0041;	
    // (𑊺) KHUDAWADI LETTER KA	[2B12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112BA, 0x0041 };
    uint32_t const ces[9] = { 0x2B12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_466)
{
    // 112BA 0062;	
    // (𑊺) KHUDAWADI LETTER KA	[2B12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BA, 0x0062 };
    uint32_t const ces[9] = { 0x2B12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_467)
{
    // 112BB 0021;	
    // (𑊻) KHUDAWADI LETTER KHA	[2B13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BB, 0x0021 };
    uint32_t const ces[9] = { 0x2B13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_468)
{
    // 112BB 003F;	
    // (𑊻) KHUDAWADI LETTER KHA	[2B13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BB, 0x003F };
    uint32_t const ces[9] = { 0x2B13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_469)
{
    // 112BB 0061;	
    // (𑊻) KHUDAWADI LETTER KHA	[2B13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BB, 0x0061 };
    uint32_t const ces[9] = { 0x2B13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_470)
{
    // 112BB 0041;	
    // (𑊻) KHUDAWADI LETTER KHA	[2B13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112BB, 0x0041 };
    uint32_t const ces[9] = { 0x2B13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_471)
{
    // 112BB 0062;	
    // (𑊻) KHUDAWADI LETTER KHA	[2B13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BB, 0x0062 };
    uint32_t const ces[9] = { 0x2B13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_472)
{
    // 112BC 0021;	
    // (𑊼) KHUDAWADI LETTER GA	[2B14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BC, 0x0021 };
    uint32_t const ces[9] = { 0x2B14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_473)
{
    // 112BC 003F;	
    // (𑊼) KHUDAWADI LETTER GA	[2B14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BC, 0x003F };
    uint32_t const ces[9] = { 0x2B14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_474)
{
    // 112BC 0061;	
    // (𑊼) KHUDAWADI LETTER GA	[2B14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BC, 0x0061 };
    uint32_t const ces[9] = { 0x2B14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_475)
{
    // 112BC 0041;	
    // (𑊼) KHUDAWADI LETTER GA	[2B14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112BC, 0x0041 };
    uint32_t const ces[9] = { 0x2B14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_476)
{
    // 112BC 0062;	
    // (𑊼) KHUDAWADI LETTER GA	[2B14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BC, 0x0062 };
    uint32_t const ces[9] = { 0x2B14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_477)
{
    // 112BD 0021;	
    // (𑊽) KHUDAWADI LETTER GGA	[2B15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BD, 0x0021 };
    uint32_t const ces[9] = { 0x2B15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_478)
{
    // 112BD 003F;	
    // (𑊽) KHUDAWADI LETTER GGA	[2B15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BD, 0x003F };
    uint32_t const ces[9] = { 0x2B15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_479)
{
    // 112BD 0061;	
    // (𑊽) KHUDAWADI LETTER GGA	[2B15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BD, 0x0061 };
    uint32_t const ces[9] = { 0x2B15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_480)
{
    // 112BD 0041;	
    // (𑊽) KHUDAWADI LETTER GGA	[2B15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112BD, 0x0041 };
    uint32_t const ces[9] = { 0x2B15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_481)
{
    // 112BD 0062;	
    // (𑊽) KHUDAWADI LETTER GGA	[2B15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BD, 0x0062 };
    uint32_t const ces[9] = { 0x2B15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_482)
{
    // 112BE 0021;	
    // (𑊾) KHUDAWADI LETTER GHA	[2B16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BE, 0x0021 };
    uint32_t const ces[9] = { 0x2B16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_483)
{
    // 112BE 003F;	
    // (𑊾) KHUDAWADI LETTER GHA	[2B16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BE, 0x003F };
    uint32_t const ces[9] = { 0x2B16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_484)
{
    // 112BE 0061;	
    // (𑊾) KHUDAWADI LETTER GHA	[2B16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BE, 0x0061 };
    uint32_t const ces[9] = { 0x2B16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_485)
{
    // 112BE 0041;	
    // (𑊾) KHUDAWADI LETTER GHA	[2B16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112BE, 0x0041 };
    uint32_t const ces[9] = { 0x2B16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_486)
{
    // 112BE 0062;	
    // (𑊾) KHUDAWADI LETTER GHA	[2B16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BE, 0x0062 };
    uint32_t const ces[9] = { 0x2B16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_487)
{
    // 112BF 0021;	
    // (𑊿) KHUDAWADI LETTER NGA	[2B17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BF, 0x0021 };
    uint32_t const ces[9] = { 0x2B17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_488)
{
    // 112BF 003F;	
    // (𑊿) KHUDAWADI LETTER NGA	[2B17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BF, 0x003F };
    uint32_t const ces[9] = { 0x2B17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_489)
{
    // 112BF 0061;	
    // (𑊿) KHUDAWADI LETTER NGA	[2B17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BF, 0x0061 };
    uint32_t const ces[9] = { 0x2B17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_490)
{
    // 112BF 0041;	
    // (𑊿) KHUDAWADI LETTER NGA	[2B17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112BF, 0x0041 };
    uint32_t const ces[9] = { 0x2B17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_491)
{
    // 112BF 0062;	
    // (𑊿) KHUDAWADI LETTER NGA	[2B17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112BF, 0x0062 };
    uint32_t const ces[9] = { 0x2B17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_492)
{
    // 112C0 0021;	
    // (𑋀) KHUDAWADI LETTER CA	[2B18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C0, 0x0021 };
    uint32_t const ces[9] = { 0x2B18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_493)
{
    // 112C0 003F;	
    // (𑋀) KHUDAWADI LETTER CA	[2B18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C0, 0x003F };
    uint32_t const ces[9] = { 0x2B18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_494)
{
    // 112C0 0061;	
    // (𑋀) KHUDAWADI LETTER CA	[2B18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C0, 0x0061 };
    uint32_t const ces[9] = { 0x2B18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_495)
{
    // 112C0 0041;	
    // (𑋀) KHUDAWADI LETTER CA	[2B18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112C0, 0x0041 };
    uint32_t const ces[9] = { 0x2B18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_496)
{
    // 112C0 0062;	
    // (𑋀) KHUDAWADI LETTER CA	[2B18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C0, 0x0062 };
    uint32_t const ces[9] = { 0x2B18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_497)
{
    // 112C1 0021;	
    // (𑋁) KHUDAWADI LETTER CHA	[2B19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C1, 0x0021 };
    uint32_t const ces[9] = { 0x2B19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_498)
{
    // 112C1 003F;	
    // (𑋁) KHUDAWADI LETTER CHA	[2B19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C1, 0x003F };
    uint32_t const ces[9] = { 0x2B19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_176_499)
{
    // 112C1 0061;	
    // (𑋁) KHUDAWADI LETTER CHA	[2B19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C1, 0x0061 };
    uint32_t const ces[9] = { 0x2B19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

