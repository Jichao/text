
// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/save_load_table.hpp>
#include <boost/text/data/all.hpp>

#include <boost/filesystem.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

collation_table make_save_load_table()
{
    if (!exists(boost::filesystem::path("bn_traditional.table"))) {
        collation_table table = tailored_collation_table(
            data::bn::traditional_collation_tailoring(),
            "bn::traditional_collation_tailoring()", error, warning);
        save_table(table, "bn_traditional.table.1");
        boost::filesystem::rename("bn_traditional.table.1", "bn_traditional.table");
    }
    return load_table("bn_traditional.table");
}
collation_table const & table()
{
    static collation_table retval = make_save_load_table();
    return retval;
}
TEST(tailoring, bn_traditional_000_000)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x0990},
        std::vector<uint32_t>{0x09b9, 0x09c8},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x0993},
        std::vector<uint32_t>{0x09b9, 0x09cb},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09b9, 0x09cd, 0x0994},
        std::vector<uint32_t>{0x09b9, 0x09cc},
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0995),
        std::vector<uint32_t>{0x0995, 0x09bc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0995),
        std::vector<uint32_t>{0x0995, 0x09bc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09be},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09be},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09be},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09be},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09bf},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09bf},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09bf},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09bf},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c0},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c0},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c0},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c0},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c1},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c1},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c1},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c1},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c2},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c2},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c3},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c3},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c4},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c4},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c4},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c4},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09e2},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09e2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09e2},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09e2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09e3},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09e3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09e3},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09e3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c7},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c7},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c7},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c7},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c8},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c8},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09c8},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09c8},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cb},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09cb},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cb},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09cb},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cc},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09cc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cc},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09cc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09cd},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0995, 0x09cd},
        std::vector<uint32_t>{0x0995, 0x09bc, 0x09cd},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0996),
        std::vector<uint32_t>{0x0996, 0x09bc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0996),
        std::vector<uint32_t>{0x0996, 0x09bc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09be},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09be},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09be},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09be},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09bf},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09bf},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09bf},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09bf},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c0},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c0},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c0},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c0},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c1},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c1},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c1},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c1},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c2},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c2},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c3},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c3},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c4},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c4},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c4},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c4},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, bn_traditional_001_001)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09e2},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09e2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09e2},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09e2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09e3},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09e3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09e3},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09e3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c7},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c7},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c7},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c7},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c8},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c8},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09c8},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09c8},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cb},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09cb},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cb},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09cb},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cc},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09cc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cc},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09cc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09cd},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0996, 0x09cd},
        std::vector<uint32_t>{0x0996, 0x09bc, 0x09cd},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0997),
        std::vector<uint32_t>{0x0997, 0x09bc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0997),
        std::vector<uint32_t>{0x0997, 0x09bc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09be},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09be},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09be},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09be},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09bf},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09bf},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09bf},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09bf},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c0},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c0},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c0},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c0},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c1},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c1},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c1},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c1},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c2},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c2},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c3},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c3},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c4},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c4},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c4},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c4},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09e2},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09e2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09e2},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09e2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09e3},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09e3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09e3},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09e3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c7},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c7},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c7},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c7},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c8},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c8},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09c8},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09c8},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cb},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09cb},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cb},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09cb},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cc},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09cc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cc},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09cc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09cd},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0997, 0x09cd},
        std::vector<uint32_t>{0x0997, 0x09bc, 0x09cd},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x099c),
        std::vector<uint32_t>{0x099c, 0x09bc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x099c),
        std::vector<uint32_t>{0x099c, 0x09bc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09be},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09be},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09be},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09be},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09bf},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09bf},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09bf},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09bf},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c0},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c0},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c0},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c0},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, bn_traditional_001_002)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c1},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c1},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c1},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c1},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c2},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c2},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c3},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c3},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c4},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c4},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c4},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c4},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09e2},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09e2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09e2},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09e2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09e3},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09e3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09e3},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09e3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c7},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c7},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c7},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c7},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c8},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c8},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09c8},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09c8},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cb},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09cb},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cb},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09cb},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cc},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09cc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cc},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09cc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09cd},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x099c, 0x09cd},
        std::vector<uint32_t>{0x099c, 0x09bc, 0x09cd},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x09a1),
        std::vector<uint32_t>{0x09a1, 0x09bc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x09a1),
        std::vector<uint32_t>{0x09a1, 0x09bc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09be},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09be},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09be},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09be},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09bf},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09bf},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09bf},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09bf},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c0},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c0},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c0},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c0},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c1},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c1},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c1},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c1},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c2},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c2},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c3},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c3},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c4},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c4},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c4},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c4},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09e2},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09e2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09e2},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09e2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09e3},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09e3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09e3},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09e3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c7},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c7},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c7},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c7},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c8},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c8},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09c8},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09c8},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cb},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09cb},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cb},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09cb},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cc},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09cc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cc},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09cc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09cd},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a1, 0x09cd},
        std::vector<uint32_t>{0x09a1, 0x09bc, 0x09cd},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, bn_traditional_001_003)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x09a2),
        std::vector<uint32_t>{0x09a2, 0x09bc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x09a2),
        std::vector<uint32_t>{0x09a2, 0x09bc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09be},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09be},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09be},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09be},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09bf},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09bf},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09bf},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09bf},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c0},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c0},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c0},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c0},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c1},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c1},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c1},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c1},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c2},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c2},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c3},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c3},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c4},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c4},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c4},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c4},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09e2},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09e2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09e2},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09e2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09e3},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09e3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09e3},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09e3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c7},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c7},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c7},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c7},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c8},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c8},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09c8},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09c8},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cb},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09cb},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cb},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09cb},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cc},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09cc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cc},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09cc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09cd},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09a2, 0x09cd},
        std::vector<uint32_t>{0x09a2, 0x09bc, 0x09cd},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x09ab),
        std::vector<uint32_t>{0x09ab, 0x09bc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x09ab),
        std::vector<uint32_t>{0x09ab, 0x09bc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09be},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09be},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09be},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09be},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09bf},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09bf},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09bf},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09bf},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c0},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c0},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c0},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c0},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c1},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c1},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c1},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c1},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c2},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c2},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c3},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c3},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c4},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c4},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c4},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c4},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09e2},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09e2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09e2},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09e2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09e3},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09e3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09e3},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09e3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c7},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c7},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c7},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c7},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, bn_traditional_001_004)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c8},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c8},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09c8},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09c8},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cb},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09cb},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cb},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09cb},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cc},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09cc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cc},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09cc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09cd},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ab, 0x09cd},
        std::vector<uint32_t>{0x09ab, 0x09bc, 0x09cd},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x09ac),
        std::vector<uint32_t>{0x09ac, 0x09bc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x09ac),
        std::vector<uint32_t>{0x09ac, 0x09bc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09be},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09be},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09be},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09be},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09bf},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09bf},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09bf},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09bf},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c0},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c0},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c0},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c0},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c1},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c1},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c1},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c1},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c2},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c2},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c3},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c3},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c4},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c4},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c4},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c4},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09e2},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09e2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09e2},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09e2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09e3},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09e3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09e3},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09e3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c7},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c7},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c7},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c7},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c8},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c8},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09c8},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09c8},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cb},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09cb},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cb},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09cb},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cc},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09cc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cc},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09cc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09cd},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09ac, 0x09cd},
        std::vector<uint32_t>{0x09ac, 0x09bc, 0x09cd},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x09af),
        std::vector<uint32_t>{0x09af, 0x09bc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x09af),
        std::vector<uint32_t>{0x09af, 0x09bc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09be},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09be},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09be},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09be},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09bf},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09bf},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09bf},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09bf},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c0},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c0},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c0},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c0},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c1},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c1},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c1},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c1},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c2},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c2},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c3},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c3},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c3},
        table(), collation_strength::secondary),
        0);
}

TEST(tailoring, bn_traditional_001_005)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c4},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c4},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c4},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c4},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09e2},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09e2},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09e2},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09e2},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09e3},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09e3},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09e3},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09e3},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c7},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c7},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c7},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c7},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c8},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c8},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09c8},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09c8},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cb},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09cb},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cb},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09cb},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cc},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09cc},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cc},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09cc},
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09cd},
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x09af, 0x09cd},
        std::vector<uint32_t>{0x09af, 0x09bc, 0x09cd},
        table(), collation_strength::secondary),
        0);
}
