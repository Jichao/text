// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_090_000)
{
    // 16B57 0062;	
    // (𖭗) PAHAWH HMONG DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B57, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_001)
{
    // 1D366 0062;	
    // (𝍦) COUNTING ROD UNIT DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D366, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_002)
{
    // 1E8CD 0062;	
    // (‎‎𞣍‎‎) MENDE KIKAKUI DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CD, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_003)
{
    // 1E957 0062;	
    // (‎‎𞥗‎‎) ADLAM DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E957, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_004)
{
    // FF17 0062;	
    // (７) FULLWIDTH DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF17, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_005)
{
    // 0F30 0062;	
    // (༰) TIBETAN DIGIT HALF SEVEN	[1CAA 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F30, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_006)
{
    // 1D7D5 0062;	
    // (𝟕) MATHEMATICAL BOLD DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D5, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_007)
{
    // 1D7DF 0062;	
    // (𝟟) MATHEMATICAL DOUBLE-STRUCK DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DF, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_008)
{
    // 1D7E9 0062;	
    // (𝟩) MATHEMATICAL SANS-SERIF DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_009)
{
    // 1D7F3 0062;	
    // (𝟳) MATHEMATICAL SANS-SERIF BOLD DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F3, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_010)
{
    // 1D7FD 0062;	
    // (𝟽) MATHEMATICAL MONOSPACE DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FD, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_011)
{
    // 2466 0062;	
    // (⑦) CIRCLED DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2466, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_012)
{
    // 24FB 0062;	
    // (⓻) DOUBLE CIRCLED DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FB, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_013)
{
    // 277C 0062;	
    // (❼) DINGBAT NEGATIVE CIRCLED DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277C, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_014)
{
    // 2786 0062;	
    // (➆) DINGBAT CIRCLED SANS-SERIF DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2786, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_015)
{
    // 2790 0062;	
    // (➐) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2790, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_016)
{
    // 2077 0062;	
    // (⁷) SUPERSCRIPT SEVEN	[1CAA 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2077, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_017)
{
    // 2087 0062;	
    // (₇) SUBSCRIPT SEVEN	[1CAA 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2087, 0x0062 };
    uint32_t const ces[9] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_018)
{
    // 33E6 0021;	
    // (㏦) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SEVEN	[1CAA FB40 E5E5 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E6, 0x0021 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_019)
{
    // 33E6 003F;	
    // (㏦) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SEVEN	[1CAA FB40 E5E5 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E6, 0x003F };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_020)
{
    // 33E6 0061;	
    // (㏦) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SEVEN	[1CAA FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E6, 0x0061 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_021)
{
    // 33E6 0041;	
    // (㏦) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SEVEN	[1CAA FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x33E6, 0x0041 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_022)
{
    // 33E6 0062;	
    // (㏦) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SEVEN	[1CAA FB40 E5E5 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E6, 0x0062 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_023)
{
    // 32C6 0021;	
    // (㋆) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JULY	[1CAA FB40 E708 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C6, 0x0021 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_024)
{
    // 32C6 003F;	
    // (㋆) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JULY	[1CAA FB40 E708 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C6, 0x003F };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_025)
{
    // 32C6 0061;	
    // (㋆) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JULY	[1CAA FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C6, 0x0061 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_026)
{
    // 32C6 0041;	
    // (㋆) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JULY	[1CAA FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x32C6, 0x0041 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_027)
{
    // 32C6 0062;	
    // (㋆) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JULY	[1CAA FB40 E708 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C6, 0x0062 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_028)
{
    // 335F 0021;	
    // (㍟) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SEVEN	[1CAA FB40 F0B9 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335F, 0x0021 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xF0B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_029)
{
    // 335F 003F;	
    // (㍟) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SEVEN	[1CAA FB40 F0B9 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335F, 0x003F };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xF0B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_030)
{
    // 335F 0061;	
    // (㍟) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SEVEN	[1CAA FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335F, 0x0061 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_031)
{
    // 335F 0041;	
    // (㍟) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SEVEN	[1CAA FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x335F, 0x0041 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_032)
{
    // 335F 0062;	
    // (㍟) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SEVEN	[1CAA FB40 F0B9 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335F, 0x0062 };
    uint32_t const ces[13] = { 0x1CAA, 0xFB40, 0xF0B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_033)
{
    // 1F109 0021;	
    // (🄉) DIGIT EIGHT COMMA	[1CAB 0222 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F109, 0x0021 };
    uint32_t const ces[12] = { 0x1CAB, 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_034)
{
    // 1F109 003F;	
    // (🄉) DIGIT EIGHT COMMA	[1CAB 0222 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F109, 0x003F };
    uint32_t const ces[12] = { 0x1CAB, 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_035)
{
    // 1F109 0061;	
    // (🄉) DIGIT EIGHT COMMA	[1CAB 0222 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F109, 0x0061 };
    uint32_t const ces[12] = { 0x1CAB, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_036)
{
    // 1F109 0041;	
    // (🄉) DIGIT EIGHT COMMA	[1CAB 0222 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F109, 0x0041 };
    uint32_t const ces[12] = { 0x1CAB, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_037)
{
    // 1F109 0062;	
    // (🄉) DIGIT EIGHT COMMA	[1CAB 0222 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F109, 0x0062 };
    uint32_t const ces[12] = { 0x1CAB, 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_038)
{
    // 0038 0021;	
    // (8) DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0038, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_039)
{
    // 0668 0021;	
    // (‎٨‎) ARABIC-INDIC DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0668, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_040)
{
    // 06F8 0021;	
    // (۸) EXTENDED ARABIC-INDIC DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_041)
{
    // 07C8 0021;	
    // (‎‎߈‎‎) NKO DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_042)
{
    // 096E 0021;	
    // (८) DEVANAGARI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_043)
{
    // 09EE 0021;	
    // (৮) BENGALI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EE, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_044)
{
    // 0A6E 0021;	
    // (੮) GURMUKHI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_045)
{
    // 0AEE 0021;	
    // (૮) GUJARATI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEE, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_046)
{
    // 0B6E 0021;	
    // (୮) ORIYA DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_047)
{
    // 0BEE 0021;	
    // (௮) TAMIL DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEE, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_048)
{
    // 0C6E 0021;	
    // (౮) TELUGU DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_049)
{
    // 0CEE 0021;	
    // (೮) KANNADA DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEE, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_050)
{
    // 0D6E 0021;	
    // (൮) MALAYALAM DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_051)
{
    // 0DEE 0021;	
    // (෮) SINHALA LITH DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEE, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_052)
{
    // 0E58 0021;	
    // (๘) THAI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E58, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_053)
{
    // 0ED8 0021;	
    // (໘) LAO DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_054)
{
    // 0F28 0021;	
    // (༨) TIBETAN DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F28, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_055)
{
    // 1048 0021;	
    // (၈) MYANMAR DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_056)
{
    // 1098 0021;	
    // (႘) MYANMAR SHAN DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1098, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_057)
{
    // 1370 0021;	
    // (፰) ETHIOPIC DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1370, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_058)
{
    // 17E8 0021;	
    // (៨) KHMER DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_059)
{
    // 17F8 0021;	
    // (៸) KHMER SYMBOL LEK ATTAK PRAM-BEI	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_060)
{
    // 1818 0021;	
    // (᠘) MONGOLIAN DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1818, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_061)
{
    // 194E 0021;	
    // (᥎) LIMBU DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_062)
{
    // 19D8 0021;	
    // (᧘) NEW TAI LUE DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_063)
{
    // 1A88 0021;	
    // (᪈) TAI THAM HORA DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A88, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_064)
{
    // 1A98 0021;	
    // (᪘) TAI THAM THAM DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A98, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_065)
{
    // 1B58 0021;	
    // (᭘) BALINESE DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B58, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_066)
{
    // 1BB8 0021;	
    // (᮸) SUNDANESE DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_067)
{
    // 1C48 0021;	
    // (᱈) LEPCHA DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C48, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_068)
{
    // 1C58 0021;	
    // (᱘) OL CHIKI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C58, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_069)
{
    // 3028 0021;	
    // (〨) HANGZHOU NUMERAL EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3028, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_070)
{
    // A628 0021;	
    // (꘨) VAI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA628, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_071)
{
    // A8D8 0021;	
    // (꣘) SAURASHTRA DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_072)
{
    // A908 0021;	
    // (꤈) KAYAH LI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA908, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_073)
{
    // A9D8 0021;	
    // (꧘) JAVANESE DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_074)
{
    // A9F8 0021;	
    // (꧸) MYANMAR TAI LAING DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_075)
{
    // AA58 0021;	
    // (꩘) CHAM DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA58, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_076)
{
    // ABF8 0021;	
    // (꯸) MEETEI MAYEK DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_077)
{
    // 1010E 0021;	
    // (𐄎) AEGEAN NUMBER EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_078)
{
    // 102E8 0021;	
    // (𐋨) COPTIC EPACT DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_079)
{
    // 104A8 0021;	
    // (𐒨) OSMANYA DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_080)
{
    // 109C7 0021;	
    // (‎‎𐧇‎‎) MEROITIC CURSIVE NUMBER EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_081)
{
    // 10E67 0021;	
    // (‎𐹧‎) RUMI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E67, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_082)
{
    // 11059 0021;	
    // (𑁙) BRAHMI NUMBER EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11059, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_083)
{
    // 1106E 0021;	
    // (𑁮) BRAHMI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_084)
{
    // 110F8 0021;	
    // (𑃸) SORA SOMPENG DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_085)
{
    // 1113E 0021;	
    // (𑄾) CHAKMA DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_086)
{
    // 111D8 0021;	
    // (𑇘) SHARADA DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_087)
{
    // 111E8 0021;	
    // (𑇨) SINHALA ARCHAIC DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_088)
{
    // 112F8 0021;	
    // (𑋸) KHUDAWADI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_089)
{
    // 11458 0021;	
    // (𑑘) NEWA DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11458, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_090)
{
    // 114D8 0021;	
    // (𑓘) TIRHUTA DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_091)
{
    // 11658 0021;	
    // (𑙘) MODI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11658, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_092)
{
    // 116C8 0021;	
    // (𑛈) TAKRI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_093)
{
    // 11738 0021;	
    // (𑜸) AHOM DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11738, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_094)
{
    // 118E8 0021;	
    // (𑣨) WARANG CITI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_095)
{
    // 11C58 0021;	
    // (𑱘) BHAIKSUKI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C58, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_096)
{
    // 11C61 0021;	
    // (𑱡) BHAIKSUKI NUMBER EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C61, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_097)
{
    // 11D58 0021;	
    // (𑵘) MASARAM GONDI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D58, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_098)
{
    // 12406 0021;	
    // (𒐆) CUNEIFORM NUMERIC SIGN EIGHT ASH	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12406, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_099)
{
    // 1240D 0021;	
    // (𒐍) CUNEIFORM NUMERIC SIGN EIGHT DISH	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_100)
{
    // 12413 0021;	
    // (𒐓) CUNEIFORM NUMERIC SIGN EIGHT U	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12413, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_101)
{
    // 1241C 0021;	
    // (𒐜) CUNEIFORM NUMERIC SIGN EIGHT GESH2	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241C, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_102)
{
    // 1242A 0021;	
    // (𒐪) CUNEIFORM NUMERIC SIGN EIGHT SHAR2	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242A, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_103)
{
    // 12444 0021;	
    // (𒑄) CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12444, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_104)
{
    // 12445 0021;	
    // (𒑅) CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU3	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12445, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_105)
{
    // 1246D 0021;	
    // (𒑭) CUNEIFORM NUMERIC SIGN EIGHT U VARIANT FORM	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_106)
{
    // 16A68 0021;	
    // (𖩨) MRO DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A68, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_107)
{
    // 16B58 0021;	
    // (𖭘) PAHAWH HMONG DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B58, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_108)
{
    // 1D367 0021;	
    // (𝍧) COUNTING ROD UNIT DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D367, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_109)
{
    // 1E8CE 0021;	
    // (‎‎𞣎‎‎) MENDE KIKAKUI DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CE, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_110)
{
    // 1E958 0021;	
    // (‎‎𞥘‎‎) ADLAM DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E958, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_111)
{
    // FF18 0021;	
    // (８) FULLWIDTH DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF18, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_112)
{
    // 0F31 0021;	
    // (༱) TIBETAN DIGIT HALF EIGHT	[1CAB 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F31, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_113)
{
    // 1D7D6 0021;	
    // (𝟖) MATHEMATICAL BOLD DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D6, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_114)
{
    // 1D7E0 0021;	
    // (𝟠) MATHEMATICAL DOUBLE-STRUCK DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E0, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_115)
{
    // 1D7EA 0021;	
    // (𝟪) MATHEMATICAL SANS-SERIF DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EA, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_116)
{
    // 1D7F4 0021;	
    // (𝟴) MATHEMATICAL SANS-SERIF BOLD DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F4, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_117)
{
    // 1D7FE 0021;	
    // (𝟾) MATHEMATICAL MONOSPACE DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FE, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_118)
{
    // 2467 0021;	
    // (⑧) CIRCLED DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2467, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_119)
{
    // 24FC 0021;	
    // (⓼) DOUBLE CIRCLED DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FC, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_120)
{
    // 277D 0021;	
    // (❽) DINGBAT NEGATIVE CIRCLED DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_121)
{
    // 2787 0021;	
    // (➇) DINGBAT CIRCLED SANS-SERIF DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2787, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_122)
{
    // 2791 0021;	
    // (➑) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT EIGHT	[1CAB 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2791, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_123)
{
    // 2078 0021;	
    // (⁸) SUPERSCRIPT EIGHT	[1CAB 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2078, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_124)
{
    // 2088 0021;	
    // (₈) SUBSCRIPT EIGHT	[1CAB 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2088, 0x0021 };
    uint32_t const ces[9] = { 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_125)
{
    // 0038 003F;	
    // (8) DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0038, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_126)
{
    // 0668 003F;	
    // (‎٨‎) ARABIC-INDIC DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0668, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_127)
{
    // 06F8 003F;	
    // (۸) EXTENDED ARABIC-INDIC DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_128)
{
    // 07C8 003F;	
    // (‎‎߈‎‎) NKO DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_129)
{
    // 096E 003F;	
    // (८) DEVANAGARI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096E, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_130)
{
    // 09EE 003F;	
    // (৮) BENGALI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EE, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_131)
{
    // 0A6E 003F;	
    // (੮) GURMUKHI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6E, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_132)
{
    // 0AEE 003F;	
    // (૮) GUJARATI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEE, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_133)
{
    // 0B6E 003F;	
    // (୮) ORIYA DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6E, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_134)
{
    // 0BEE 003F;	
    // (௮) TAMIL DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEE, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_135)
{
    // 0C6E 003F;	
    // (౮) TELUGU DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6E, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_136)
{
    // 0CEE 003F;	
    // (೮) KANNADA DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEE, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_137)
{
    // 0D6E 003F;	
    // (൮) MALAYALAM DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6E, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_138)
{
    // 0DEE 003F;	
    // (෮) SINHALA LITH DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEE, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_139)
{
    // 0E58 003F;	
    // (๘) THAI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E58, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_140)
{
    // 0ED8 003F;	
    // (໘) LAO DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_141)
{
    // 0F28 003F;	
    // (༨) TIBETAN DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F28, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_142)
{
    // 1048 003F;	
    // (၈) MYANMAR DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_143)
{
    // 1098 003F;	
    // (႘) MYANMAR SHAN DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1098, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_144)
{
    // 1370 003F;	
    // (፰) ETHIOPIC DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1370, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_145)
{
    // 17E8 003F;	
    // (៨) KHMER DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_146)
{
    // 17F8 003F;	
    // (៸) KHMER SYMBOL LEK ATTAK PRAM-BEI	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_147)
{
    // 1818 003F;	
    // (᠘) MONGOLIAN DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1818, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_148)
{
    // 194E 003F;	
    // (᥎) LIMBU DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194E, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_149)
{
    // 19D8 003F;	
    // (᧘) NEW TAI LUE DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_150)
{
    // 1A88 003F;	
    // (᪈) TAI THAM HORA DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A88, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_151)
{
    // 1A98 003F;	
    // (᪘) TAI THAM THAM DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A98, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_152)
{
    // 1B58 003F;	
    // (᭘) BALINESE DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B58, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_153)
{
    // 1BB8 003F;	
    // (᮸) SUNDANESE DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_154)
{
    // 1C48 003F;	
    // (᱈) LEPCHA DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C48, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_155)
{
    // 1C58 003F;	
    // (᱘) OL CHIKI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C58, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_156)
{
    // 3028 003F;	
    // (〨) HANGZHOU NUMERAL EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3028, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_157)
{
    // A628 003F;	
    // (꘨) VAI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA628, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_158)
{
    // A8D8 003F;	
    // (꣘) SAURASHTRA DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_159)
{
    // A908 003F;	
    // (꤈) KAYAH LI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA908, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_160)
{
    // A9D8 003F;	
    // (꧘) JAVANESE DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_161)
{
    // A9F8 003F;	
    // (꧸) MYANMAR TAI LAING DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_162)
{
    // AA58 003F;	
    // (꩘) CHAM DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA58, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_163)
{
    // ABF8 003F;	
    // (꯸) MEETEI MAYEK DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_164)
{
    // 1010E 003F;	
    // (𐄎) AEGEAN NUMBER EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010E, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_165)
{
    // 102E8 003F;	
    // (𐋨) COPTIC EPACT DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_166)
{
    // 104A8 003F;	
    // (𐒨) OSMANYA DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_167)
{
    // 109C7 003F;	
    // (‎‎𐧇‎‎) MEROITIC CURSIVE NUMBER EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C7, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_168)
{
    // 10E67 003F;	
    // (‎𐹧‎) RUMI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E67, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_169)
{
    // 11059 003F;	
    // (𑁙) BRAHMI NUMBER EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11059, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_170)
{
    // 1106E 003F;	
    // (𑁮) BRAHMI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106E, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_171)
{
    // 110F8 003F;	
    // (𑃸) SORA SOMPENG DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_172)
{
    // 1113E 003F;	
    // (𑄾) CHAKMA DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113E, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_173)
{
    // 111D8 003F;	
    // (𑇘) SHARADA DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_174)
{
    // 111E8 003F;	
    // (𑇨) SINHALA ARCHAIC DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_175)
{
    // 112F8 003F;	
    // (𑋸) KHUDAWADI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_176)
{
    // 11458 003F;	
    // (𑑘) NEWA DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11458, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_177)
{
    // 114D8 003F;	
    // (𑓘) TIRHUTA DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_178)
{
    // 11658 003F;	
    // (𑙘) MODI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11658, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_179)
{
    // 116C8 003F;	
    // (𑛈) TAKRI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_180)
{
    // 11738 003F;	
    // (𑜸) AHOM DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11738, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_181)
{
    // 118E8 003F;	
    // (𑣨) WARANG CITI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E8, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_182)
{
    // 11C58 003F;	
    // (𑱘) BHAIKSUKI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C58, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_183)
{
    // 11C61 003F;	
    // (𑱡) BHAIKSUKI NUMBER EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C61, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_184)
{
    // 11D58 003F;	
    // (𑵘) MASARAM GONDI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D58, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_185)
{
    // 12406 003F;	
    // (𒐆) CUNEIFORM NUMERIC SIGN EIGHT ASH	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12406, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_186)
{
    // 1240D 003F;	
    // (𒐍) CUNEIFORM NUMERIC SIGN EIGHT DISH	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240D, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_187)
{
    // 12413 003F;	
    // (𒐓) CUNEIFORM NUMERIC SIGN EIGHT U	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12413, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_188)
{
    // 1241C 003F;	
    // (𒐜) CUNEIFORM NUMERIC SIGN EIGHT GESH2	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241C, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_189)
{
    // 1242A 003F;	
    // (𒐪) CUNEIFORM NUMERIC SIGN EIGHT SHAR2	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242A, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_190)
{
    // 12444 003F;	
    // (𒑄) CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12444, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_191)
{
    // 12445 003F;	
    // (𒑅) CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU3	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12445, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_192)
{
    // 1246D 003F;	
    // (𒑭) CUNEIFORM NUMERIC SIGN EIGHT U VARIANT FORM	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246D, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_193)
{
    // 16A68 003F;	
    // (𖩨) MRO DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A68, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_194)
{
    // 16B58 003F;	
    // (𖭘) PAHAWH HMONG DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B58, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_195)
{
    // 1D367 003F;	
    // (𝍧) COUNTING ROD UNIT DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D367, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_196)
{
    // 1E8CE 003F;	
    // (‎‎𞣎‎‎) MENDE KIKAKUI DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CE, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_197)
{
    // 1E958 003F;	
    // (‎‎𞥘‎‎) ADLAM DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E958, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_198)
{
    // FF18 003F;	
    // (８) FULLWIDTH DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF18, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_199)
{
    // 0F31 003F;	
    // (༱) TIBETAN DIGIT HALF EIGHT	[1CAB 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F31, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_200)
{
    // 1D7D6 003F;	
    // (𝟖) MATHEMATICAL BOLD DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D6, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_201)
{
    // 1D7E0 003F;	
    // (𝟠) MATHEMATICAL DOUBLE-STRUCK DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E0, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_202)
{
    // 1D7EA 003F;	
    // (𝟪) MATHEMATICAL SANS-SERIF DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EA, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_203)
{
    // 1D7F4 003F;	
    // (𝟴) MATHEMATICAL SANS-SERIF BOLD DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F4, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_204)
{
    // 1D7FE 003F;	
    // (𝟾) MATHEMATICAL MONOSPACE DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FE, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_205)
{
    // 2467 003F;	
    // (⑧) CIRCLED DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2467, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_206)
{
    // 24FC 003F;	
    // (⓼) DOUBLE CIRCLED DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FC, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_207)
{
    // 277D 003F;	
    // (❽) DINGBAT NEGATIVE CIRCLED DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277D, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_208)
{
    // 2787 003F;	
    // (➇) DINGBAT CIRCLED SANS-SERIF DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2787, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_209)
{
    // 2791 003F;	
    // (➑) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT EIGHT	[1CAB 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2791, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_210)
{
    // 2078 003F;	
    // (⁸) SUPERSCRIPT EIGHT	[1CAB 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2078, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_211)
{
    // 2088 003F;	
    // (₈) SUBSCRIPT EIGHT	[1CAB 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2088, 0x003F };
    uint32_t const ces[9] = { 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_212)
{
    // 248F 0021;	
    // (⒏) DIGIT EIGHT FULL STOP	[1CAB 0278 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248F, 0x0021 };
    uint32_t const ces[12] = { 0x1CAB, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_213)
{
    // 248F 003F;	
    // (⒏) DIGIT EIGHT FULL STOP	[1CAB 0278 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248F, 0x003F };
    uint32_t const ces[12] = { 0x1CAB, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_214)
{
    // 248F 0061;	
    // (⒏) DIGIT EIGHT FULL STOP	[1CAB 0278 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248F, 0x0061 };
    uint32_t const ces[12] = { 0x1CAB, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_215)
{
    // 248F 0041;	
    // (⒏) DIGIT EIGHT FULL STOP	[1CAB 0278 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x248F, 0x0041 };
    uint32_t const ces[12] = { 0x1CAB, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_216)
{
    // 248F 0062;	
    // (⒏) DIGIT EIGHT FULL STOP	[1CAB 0278 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248F, 0x0062 };
    uint32_t const ces[12] = { 0x1CAB, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_217)
{
    // 324F 0021;	
    // (㉏) CIRCLED NUMBER EIGHTY ON BLACK SQUARE	[1CAB 1CA3 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324F, 0x0021 };
    uint32_t const ces[12] = { 0x1CAB, 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_218)
{
    // 324F 003F;	
    // (㉏) CIRCLED NUMBER EIGHTY ON BLACK SQUARE	[1CAB 1CA3 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324F, 0x003F };
    uint32_t const ces[12] = { 0x1CAB, 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_219)
{
    // 324F 0061;	
    // (㉏) CIRCLED NUMBER EIGHTY ON BLACK SQUARE	[1CAB 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324F, 0x0061 };
    uint32_t const ces[12] = { 0x1CAB, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_220)
{
    // 324F 0041;	
    // (㉏) CIRCLED NUMBER EIGHTY ON BLACK SQUARE	[1CAB 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x324F, 0x0041 };
    uint32_t const ces[12] = { 0x1CAB, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_221)
{
    // 324F 0062;	
    // (㉏) CIRCLED NUMBER EIGHTY ON BLACK SQUARE	[1CAB 1CA3 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324F, 0x0062 };
    uint32_t const ces[12] = { 0x1CAB, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_222)
{
    // 0038 0061;	
    // (8) DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0038, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_223)
{
    // 0668 0061;	
    // (‎٨‎) ARABIC-INDIC DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0668, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_224)
{
    // 06F8 0061;	
    // (۸) EXTENDED ARABIC-INDIC DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_225)
{
    // 07C8 0061;	
    // (‎‎߈‎‎) NKO DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_226)
{
    // 096E 0061;	
    // (८) DEVANAGARI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_227)
{
    // 09EE 0061;	
    // (৮) BENGALI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EE, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_228)
{
    // 0A6E 0061;	
    // (੮) GURMUKHI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_229)
{
    // 0AEE 0061;	
    // (૮) GUJARATI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEE, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_230)
{
    // 0B6E 0061;	
    // (୮) ORIYA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_231)
{
    // 0BEE 0061;	
    // (௮) TAMIL DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEE, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_232)
{
    // 0C6E 0061;	
    // (౮) TELUGU DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_233)
{
    // 0CEE 0061;	
    // (೮) KANNADA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEE, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_234)
{
    // 0D6E 0061;	
    // (൮) MALAYALAM DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_235)
{
    // 0DEE 0061;	
    // (෮) SINHALA LITH DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEE, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_236)
{
    // 0E58 0061;	
    // (๘) THAI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E58, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_237)
{
    // 0ED8 0061;	
    // (໘) LAO DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_238)
{
    // 0F28 0061;	
    // (༨) TIBETAN DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F28, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_239)
{
    // 1048 0061;	
    // (၈) MYANMAR DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_240)
{
    // 1098 0061;	
    // (႘) MYANMAR SHAN DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1098, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_241)
{
    // 1370 0061;	
    // (፰) ETHIOPIC DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1370, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_242)
{
    // 17E8 0061;	
    // (៨) KHMER DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_243)
{
    // 17F8 0061;	
    // (៸) KHMER SYMBOL LEK ATTAK PRAM-BEI	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_244)
{
    // 1818 0061;	
    // (᠘) MONGOLIAN DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1818, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_245)
{
    // 194E 0061;	
    // (᥎) LIMBU DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_246)
{
    // 19D8 0061;	
    // (᧘) NEW TAI LUE DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_247)
{
    // 1A88 0061;	
    // (᪈) TAI THAM HORA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A88, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_248)
{
    // 1A98 0061;	
    // (᪘) TAI THAM THAM DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A98, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_249)
{
    // 1B58 0061;	
    // (᭘) BALINESE DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B58, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_250)
{
    // 1BB8 0061;	
    // (᮸) SUNDANESE DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_251)
{
    // 1C48 0061;	
    // (᱈) LEPCHA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C48, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_252)
{
    // 1C58 0061;	
    // (᱘) OL CHIKI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C58, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_253)
{
    // 3028 0061;	
    // (〨) HANGZHOU NUMERAL EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3028, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_254)
{
    // A628 0061;	
    // (꘨) VAI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA628, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_255)
{
    // A8D8 0061;	
    // (꣘) SAURASHTRA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_256)
{
    // A908 0061;	
    // (꤈) KAYAH LI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA908, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_257)
{
    // A9D8 0061;	
    // (꧘) JAVANESE DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_258)
{
    // A9F8 0061;	
    // (꧸) MYANMAR TAI LAING DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_259)
{
    // AA58 0061;	
    // (꩘) CHAM DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA58, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_260)
{
    // ABF8 0061;	
    // (꯸) MEETEI MAYEK DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_261)
{
    // 1010E 0061;	
    // (𐄎) AEGEAN NUMBER EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_262)
{
    // 102E8 0061;	
    // (𐋨) COPTIC EPACT DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_263)
{
    // 104A8 0061;	
    // (𐒨) OSMANYA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_264)
{
    // 109C7 0061;	
    // (‎‎𐧇‎‎) MEROITIC CURSIVE NUMBER EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_265)
{
    // 10E67 0061;	
    // (‎𐹧‎) RUMI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E67, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_266)
{
    // 11059 0061;	
    // (𑁙) BRAHMI NUMBER EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11059, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_267)
{
    // 1106E 0061;	
    // (𑁮) BRAHMI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_268)
{
    // 110F8 0061;	
    // (𑃸) SORA SOMPENG DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_269)
{
    // 1113E 0061;	
    // (𑄾) CHAKMA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_270)
{
    // 111D8 0061;	
    // (𑇘) SHARADA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_271)
{
    // 111E8 0061;	
    // (𑇨) SINHALA ARCHAIC DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_272)
{
    // 112F8 0061;	
    // (𑋸) KHUDAWADI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_273)
{
    // 11458 0061;	
    // (𑑘) NEWA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11458, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_274)
{
    // 114D8 0061;	
    // (𑓘) TIRHUTA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_275)
{
    // 11658 0061;	
    // (𑙘) MODI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11658, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_276)
{
    // 116C8 0061;	
    // (𑛈) TAKRI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_277)
{
    // 11738 0061;	
    // (𑜸) AHOM DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11738, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_278)
{
    // 118E8 0061;	
    // (𑣨) WARANG CITI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_279)
{
    // 11C58 0061;	
    // (𑱘) BHAIKSUKI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C58, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_280)
{
    // 11C61 0061;	
    // (𑱡) BHAIKSUKI NUMBER EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C61, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_281)
{
    // 11D58 0061;	
    // (𑵘) MASARAM GONDI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D58, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_282)
{
    // 12406 0061;	
    // (𒐆) CUNEIFORM NUMERIC SIGN EIGHT ASH	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12406, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_283)
{
    // 1240D 0061;	
    // (𒐍) CUNEIFORM NUMERIC SIGN EIGHT DISH	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_284)
{
    // 12413 0061;	
    // (𒐓) CUNEIFORM NUMERIC SIGN EIGHT U	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12413, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_285)
{
    // 1241C 0061;	
    // (𒐜) CUNEIFORM NUMERIC SIGN EIGHT GESH2	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241C, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_286)
{
    // 1242A 0061;	
    // (𒐪) CUNEIFORM NUMERIC SIGN EIGHT SHAR2	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242A, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_287)
{
    // 12444 0061;	
    // (𒑄) CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12444, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_288)
{
    // 12445 0061;	
    // (𒑅) CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU3	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12445, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_289)
{
    // 1246D 0061;	
    // (𒑭) CUNEIFORM NUMERIC SIGN EIGHT U VARIANT FORM	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_290)
{
    // 16A68 0061;	
    // (𖩨) MRO DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A68, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_291)
{
    // 16B58 0061;	
    // (𖭘) PAHAWH HMONG DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B58, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_292)
{
    // 1D367 0061;	
    // (𝍧) COUNTING ROD UNIT DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D367, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_293)
{
    // 1E8CE 0061;	
    // (‎‎𞣎‎‎) MENDE KIKAKUI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CE, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_294)
{
    // 1E958 0061;	
    // (‎‎𞥘‎‎) ADLAM DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E958, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_295)
{
    // 0038 0041;	
    // (8) DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0038, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_296)
{
    // 0668 0041;	
    // (‎٨‎) ARABIC-INDIC DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0668, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_297)
{
    // 06F8 0041;	
    // (۸) EXTENDED ARABIC-INDIC DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06F8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_298)
{
    // 07C8 0041;	
    // (‎‎߈‎‎) NKO DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x07C8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_299)
{
    // 096E 0041;	
    // (८) DEVANAGARI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x096E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_300)
{
    // 09EE 0041;	
    // (৮) BENGALI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09EE, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_301)
{
    // 0A6E 0041;	
    // (੮) GURMUKHI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A6E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_302)
{
    // 0AEE 0041;	
    // (૮) GUJARATI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AEE, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_303)
{
    // 0B6E 0041;	
    // (୮) ORIYA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B6E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_304)
{
    // 0BEE 0041;	
    // (௮) TAMIL DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BEE, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_305)
{
    // 0C6E 0041;	
    // (౮) TELUGU DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C6E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_306)
{
    // 0CEE 0041;	
    // (೮) KANNADA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CEE, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_307)
{
    // 0D6E 0041;	
    // (൮) MALAYALAM DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D6E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_308)
{
    // 0DEE 0041;	
    // (෮) SINHALA LITH DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DEE, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_309)
{
    // 0E58 0041;	
    // (๘) THAI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E58, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_310)
{
    // 0ED8 0041;	
    // (໘) LAO DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ED8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_311)
{
    // 0F28 0041;	
    // (༨) TIBETAN DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F28, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_312)
{
    // 1048 0041;	
    // (၈) MYANMAR DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1048, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_313)
{
    // 1098 0041;	
    // (႘) MYANMAR SHAN DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1098, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_314)
{
    // 1370 0041;	
    // (፰) ETHIOPIC DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1370, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_315)
{
    // 17E8 0041;	
    // (៨) KHMER DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17E8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_316)
{
    // 17F8 0041;	
    // (៸) KHMER SYMBOL LEK ATTAK PRAM-BEI	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17F8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_317)
{
    // 1818 0041;	
    // (᠘) MONGOLIAN DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1818, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_318)
{
    // 194E 0041;	
    // (᥎) LIMBU DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x194E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_319)
{
    // 19D8 0041;	
    // (᧘) NEW TAI LUE DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19D8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_320)
{
    // 1A88 0041;	
    // (᪈) TAI THAM HORA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A88, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_321)
{
    // 1A98 0041;	
    // (᪘) TAI THAM THAM DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A98, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_322)
{
    // 1B58 0041;	
    // (᭘) BALINESE DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B58, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_323)
{
    // 1BB8 0041;	
    // (᮸) SUNDANESE DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BB8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_324)
{
    // 1C48 0041;	
    // (᱈) LEPCHA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C48, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_325)
{
    // 1C58 0041;	
    // (᱘) OL CHIKI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C58, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_326)
{
    // 3028 0041;	
    // (〨) HANGZHOU NUMERAL EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3028, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_327)
{
    // A628 0041;	
    // (꘨) VAI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA628, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_328)
{
    // A8D8 0041;	
    // (꣘) SAURASHTRA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8D8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_329)
{
    // A908 0041;	
    // (꤈) KAYAH LI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA908, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_330)
{
    // A9D8 0041;	
    // (꧘) JAVANESE DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9D8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_331)
{
    // A9F8 0041;	
    // (꧸) MYANMAR TAI LAING DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9F8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_332)
{
    // AA58 0041;	
    // (꩘) CHAM DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA58, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_333)
{
    // ABF8 0041;	
    // (꯸) MEETEI MAYEK DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABF8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_334)
{
    // 1010E 0041;	
    // (𐄎) AEGEAN NUMBER EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1010E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_335)
{
    // 102E8 0041;	
    // (𐋨) COPTIC EPACT DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102E8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_336)
{
    // 104A8 0041;	
    // (𐒨) OSMANYA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104A8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_337)
{
    // 109C7 0041;	
    // (‎‎𐧇‎‎) MEROITIC CURSIVE NUMBER EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109C7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_338)
{
    // 10E67 0041;	
    // (‎𐹧‎) RUMI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E67, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_339)
{
    // 11059 0041;	
    // (𑁙) BRAHMI NUMBER EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11059, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_340)
{
    // 1106E 0041;	
    // (𑁮) BRAHMI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1106E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_341)
{
    // 110F8 0041;	
    // (𑃸) SORA SOMPENG DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110F8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_342)
{
    // 1113E 0041;	
    // (𑄾) CHAKMA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1113E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_343)
{
    // 111D8 0041;	
    // (𑇘) SHARADA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111D8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_344)
{
    // 111E8 0041;	
    // (𑇨) SINHALA ARCHAIC DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111E8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_345)
{
    // 112F8 0041;	
    // (𑋸) KHUDAWADI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112F8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_346)
{
    // 11458 0041;	
    // (𑑘) NEWA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11458, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_347)
{
    // 114D8 0041;	
    // (𑓘) TIRHUTA DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114D8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_348)
{
    // 11658 0041;	
    // (𑙘) MODI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11658, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_349)
{
    // 116C8 0041;	
    // (𑛈) TAKRI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116C8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_350)
{
    // 11738 0041;	
    // (𑜸) AHOM DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11738, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_351)
{
    // 118E8 0041;	
    // (𑣨) WARANG CITI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x118E8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_352)
{
    // 11C58 0041;	
    // (𑱘) BHAIKSUKI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C58, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_353)
{
    // 11C61 0041;	
    // (𑱡) BHAIKSUKI NUMBER EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C61, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_354)
{
    // 11D58 0041;	
    // (𑵘) MASARAM GONDI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D58, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_355)
{
    // 12406 0041;	
    // (𒐆) CUNEIFORM NUMERIC SIGN EIGHT ASH	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12406, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_356)
{
    // 1240D 0041;	
    // (𒐍) CUNEIFORM NUMERIC SIGN EIGHT DISH	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1240D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_357)
{
    // 12413 0041;	
    // (𒐓) CUNEIFORM NUMERIC SIGN EIGHT U	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12413, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_358)
{
    // 1241C 0041;	
    // (𒐜) CUNEIFORM NUMERIC SIGN EIGHT GESH2	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1241C, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_359)
{
    // 1242A 0041;	
    // (𒐪) CUNEIFORM NUMERIC SIGN EIGHT SHAR2	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1242A, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_360)
{
    // 12444 0041;	
    // (𒑄) CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12444, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_361)
{
    // 12445 0041;	
    // (𒑅) CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU3	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12445, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_362)
{
    // 1246D 0041;	
    // (𒑭) CUNEIFORM NUMERIC SIGN EIGHT U VARIANT FORM	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1246D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_363)
{
    // 16A68 0041;	
    // (𖩨) MRO DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A68, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_364)
{
    // 16B58 0041;	
    // (𖭘) PAHAWH HMONG DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B58, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_365)
{
    // 1D367 0041;	
    // (𝍧) COUNTING ROD UNIT DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D367, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_366)
{
    // 1E8CE 0041;	
    // (‎‎𞣎‎‎) MENDE KIKAKUI DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E8CE, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_367)
{
    // 1E958 0041;	
    // (‎‎𞥘‎‎) ADLAM DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E958, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_368)
{
    // FF18 0061;	
    // (８) FULLWIDTH DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF18, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_369)
{
    // FF18 0041;	
    // (８) FULLWIDTH DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF18, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_370)
{
    // 0F31 0061;	
    // (༱) TIBETAN DIGIT HALF EIGHT	[1CAB 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F31, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_371)
{
    // 0F31 0041;	
    // (༱) TIBETAN DIGIT HALF EIGHT	[1CAB 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0F31, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_372)
{
    // 1D7D6 0061;	
    // (𝟖) MATHEMATICAL BOLD DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D6, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_373)
{
    // 1D7E0 0061;	
    // (𝟠) MATHEMATICAL DOUBLE-STRUCK DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E0, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_374)
{
    // 1D7EA 0061;	
    // (𝟪) MATHEMATICAL SANS-SERIF DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EA, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_375)
{
    // 1D7F4 0061;	
    // (𝟴) MATHEMATICAL SANS-SERIF BOLD DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F4, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_376)
{
    // 1D7FE 0061;	
    // (𝟾) MATHEMATICAL MONOSPACE DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FE, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_377)
{
    // 1D7D6 0041;	
    // (𝟖) MATHEMATICAL BOLD DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7D6, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_378)
{
    // 1D7E0 0041;	
    // (𝟠) MATHEMATICAL DOUBLE-STRUCK DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7E0, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_379)
{
    // 1D7EA 0041;	
    // (𝟪) MATHEMATICAL SANS-SERIF DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7EA, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_380)
{
    // 1D7F4 0041;	
    // (𝟴) MATHEMATICAL SANS-SERIF BOLD DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7F4, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_381)
{
    // 1D7FE 0041;	
    // (𝟾) MATHEMATICAL MONOSPACE DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7FE, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_382)
{
    // 2467 0061;	
    // (⑧) CIRCLED DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2467, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_383)
{
    // 24FC 0061;	
    // (⓼) DOUBLE CIRCLED DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FC, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_384)
{
    // 277D 0061;	
    // (❽) DINGBAT NEGATIVE CIRCLED DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_385)
{
    // 2787 0061;	
    // (➇) DINGBAT CIRCLED SANS-SERIF DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2787, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_386)
{
    // 2791 0061;	
    // (➑) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2791, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_387)
{
    // 2467 0041;	
    // (⑧) CIRCLED DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2467, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_388)
{
    // 24FC 0041;	
    // (⓼) DOUBLE CIRCLED DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24FC, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_389)
{
    // 277D 0041;	
    // (❽) DINGBAT NEGATIVE CIRCLED DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x277D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_390)
{
    // 2787 0041;	
    // (➇) DINGBAT CIRCLED SANS-SERIF DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2787, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_391)
{
    // 2791 0041;	
    // (➑) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2791, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_392)
{
    // 2078 0061;	
    // (⁸) SUPERSCRIPT EIGHT	[1CAB 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2078, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_393)
{
    // 2078 0041;	
    // (⁸) SUPERSCRIPT EIGHT	[1CAB 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x2078, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_394)
{
    // 2088 0061;	
    // (₈) SUBSCRIPT EIGHT	[1CAB 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2088, 0x0061 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_395)
{
    // 2088 0041;	
    // (₈) SUBSCRIPT EIGHT	[1CAB 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2088, 0x0041 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_396)
{
    // 0038 0062;	
    // (8) DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0038, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_397)
{
    // 0668 0062;	
    // (‎٨‎) ARABIC-INDIC DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0668, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_398)
{
    // 06F8 0062;	
    // (۸) EXTENDED ARABIC-INDIC DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_399)
{
    // 07C8 0062;	
    // (‎‎߈‎‎) NKO DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_400)
{
    // 096E 0062;	
    // (८) DEVANAGARI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_401)
{
    // 09EE 0062;	
    // (৮) BENGALI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EE, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_402)
{
    // 0A6E 0062;	
    // (੮) GURMUKHI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_403)
{
    // 0AEE 0062;	
    // (૮) GUJARATI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEE, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_404)
{
    // 0B6E 0062;	
    // (୮) ORIYA DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_405)
{
    // 0BEE 0062;	
    // (௮) TAMIL DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEE, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_406)
{
    // 0C6E 0062;	
    // (౮) TELUGU DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_407)
{
    // 0CEE 0062;	
    // (೮) KANNADA DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEE, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_408)
{
    // 0D6E 0062;	
    // (൮) MALAYALAM DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_409)
{
    // 0DEE 0062;	
    // (෮) SINHALA LITH DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEE, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_410)
{
    // 0E58 0062;	
    // (๘) THAI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E58, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_411)
{
    // 0ED8 0062;	
    // (໘) LAO DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_412)
{
    // 0F28 0062;	
    // (༨) TIBETAN DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F28, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_413)
{
    // 1048 0062;	
    // (၈) MYANMAR DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1048, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_414)
{
    // 1098 0062;	
    // (႘) MYANMAR SHAN DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1098, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_415)
{
    // 1370 0062;	
    // (፰) ETHIOPIC DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1370, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_416)
{
    // 17E8 0062;	
    // (៨) KHMER DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_417)
{
    // 17F8 0062;	
    // (៸) KHMER SYMBOL LEK ATTAK PRAM-BEI	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_418)
{
    // 1818 0062;	
    // (᠘) MONGOLIAN DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1818, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_419)
{
    // 194E 0062;	
    // (᥎) LIMBU DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_420)
{
    // 19D8 0062;	
    // (᧘) NEW TAI LUE DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_421)
{
    // 1A88 0062;	
    // (᪈) TAI THAM HORA DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A88, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_422)
{
    // 1A98 0062;	
    // (᪘) TAI THAM THAM DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A98, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_423)
{
    // 1B58 0062;	
    // (᭘) BALINESE DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B58, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_424)
{
    // 1BB8 0062;	
    // (᮸) SUNDANESE DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_425)
{
    // 1C48 0062;	
    // (᱈) LEPCHA DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C48, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_426)
{
    // 1C58 0062;	
    // (᱘) OL CHIKI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C58, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_427)
{
    // 3028 0062;	
    // (〨) HANGZHOU NUMERAL EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3028, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_428)
{
    // A628 0062;	
    // (꘨) VAI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA628, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_429)
{
    // A8D8 0062;	
    // (꣘) SAURASHTRA DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_430)
{
    // A908 0062;	
    // (꤈) KAYAH LI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA908, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_431)
{
    // A9D8 0062;	
    // (꧘) JAVANESE DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_432)
{
    // A9F8 0062;	
    // (꧸) MYANMAR TAI LAING DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_433)
{
    // AA58 0062;	
    // (꩘) CHAM DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA58, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_434)
{
    // ABF8 0062;	
    // (꯸) MEETEI MAYEK DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_435)
{
    // 1010E 0062;	
    // (𐄎) AEGEAN NUMBER EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_436)
{
    // 102E8 0062;	
    // (𐋨) COPTIC EPACT DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_437)
{
    // 104A8 0062;	
    // (𐒨) OSMANYA DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_438)
{
    // 109C7 0062;	
    // (‎‎𐧇‎‎) MEROITIC CURSIVE NUMBER EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_439)
{
    // 10E67 0062;	
    // (‎𐹧‎) RUMI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E67, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_440)
{
    // 11059 0062;	
    // (𑁙) BRAHMI NUMBER EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11059, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_441)
{
    // 1106E 0062;	
    // (𑁮) BRAHMI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_442)
{
    // 110F8 0062;	
    // (𑃸) SORA SOMPENG DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_443)
{
    // 1113E 0062;	
    // (𑄾) CHAKMA DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_444)
{
    // 111D8 0062;	
    // (𑇘) SHARADA DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_445)
{
    // 111E8 0062;	
    // (𑇨) SINHALA ARCHAIC DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_446)
{
    // 112F8 0062;	
    // (𑋸) KHUDAWADI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_447)
{
    // 11458 0062;	
    // (𑑘) NEWA DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11458, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_448)
{
    // 114D8 0062;	
    // (𑓘) TIRHUTA DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_449)
{
    // 11658 0062;	
    // (𑙘) MODI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11658, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_450)
{
    // 116C8 0062;	
    // (𑛈) TAKRI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_451)
{
    // 11738 0062;	
    // (𑜸) AHOM DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11738, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_452)
{
    // 118E8 0062;	
    // (𑣨) WARANG CITI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_453)
{
    // 11C58 0062;	
    // (𑱘) BHAIKSUKI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C58, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_454)
{
    // 11C61 0062;	
    // (𑱡) BHAIKSUKI NUMBER EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C61, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_455)
{
    // 11D58 0062;	
    // (𑵘) MASARAM GONDI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D58, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_456)
{
    // 12406 0062;	
    // (𒐆) CUNEIFORM NUMERIC SIGN EIGHT ASH	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12406, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_457)
{
    // 1240D 0062;	
    // (𒐍) CUNEIFORM NUMERIC SIGN EIGHT DISH	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_458)
{
    // 12413 0062;	
    // (𒐓) CUNEIFORM NUMERIC SIGN EIGHT U	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12413, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_459)
{
    // 1241C 0062;	
    // (𒐜) CUNEIFORM NUMERIC SIGN EIGHT GESH2	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241C, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_460)
{
    // 1242A 0062;	
    // (𒐪) CUNEIFORM NUMERIC SIGN EIGHT SHAR2	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242A, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_461)
{
    // 12444 0062;	
    // (𒑄) CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12444, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_462)
{
    // 12445 0062;	
    // (𒑅) CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU3	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12445, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_463)
{
    // 1246D 0062;	
    // (𒑭) CUNEIFORM NUMERIC SIGN EIGHT U VARIANT FORM	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_464)
{
    // 16A68 0062;	
    // (𖩨) MRO DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A68, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_465)
{
    // 16B58 0062;	
    // (𖭘) PAHAWH HMONG DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B58, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_466)
{
    // 1D367 0062;	
    // (𝍧) COUNTING ROD UNIT DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D367, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_467)
{
    // 1E8CE 0062;	
    // (‎‎𞣎‎‎) MENDE KIKAKUI DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CE, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_468)
{
    // 1E958 0062;	
    // (‎‎𞥘‎‎) ADLAM DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E958, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_469)
{
    // FF18 0062;	
    // (８) FULLWIDTH DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF18, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_470)
{
    // 0F31 0062;	
    // (༱) TIBETAN DIGIT HALF EIGHT	[1CAB 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F31, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_471)
{
    // 1D7D6 0062;	
    // (𝟖) MATHEMATICAL BOLD DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D6, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_472)
{
    // 1D7E0 0062;	
    // (𝟠) MATHEMATICAL DOUBLE-STRUCK DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E0, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_473)
{
    // 1D7EA 0062;	
    // (𝟪) MATHEMATICAL SANS-SERIF DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EA, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_474)
{
    // 1D7F4 0062;	
    // (𝟴) MATHEMATICAL SANS-SERIF BOLD DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F4, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_475)
{
    // 1D7FE 0062;	
    // (𝟾) MATHEMATICAL MONOSPACE DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FE, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_476)
{
    // 2467 0062;	
    // (⑧) CIRCLED DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2467, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_477)
{
    // 24FC 0062;	
    // (⓼) DOUBLE CIRCLED DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FC, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_478)
{
    // 277D 0062;	
    // (❽) DINGBAT NEGATIVE CIRCLED DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_479)
{
    // 2787 0062;	
    // (➇) DINGBAT CIRCLED SANS-SERIF DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2787, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_480)
{
    // 2791 0062;	
    // (➑) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2791, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_481)
{
    // 2078 0062;	
    // (⁸) SUPERSCRIPT EIGHT	[1CAB 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2078, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_482)
{
    // 2088 0062;	
    // (₈) SUBSCRIPT EIGHT	[1CAB 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2088, 0x0062 };
    uint32_t const ces[9] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_483)
{
    // 1F19F 0021;	
    // (🆟) SQUARED EIGHT K	[1CAB 1DCB 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19F, 0x0021 };
    uint32_t const ces[12] = { 0x1CAB, 0x1DCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_484)
{
    // 1F19F 003F;	
    // (🆟) SQUARED EIGHT K	[1CAB 1DCB 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19F, 0x003F };
    uint32_t const ces[12] = { 0x1CAB, 0x1DCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_485)
{
    // 1F19F 0061;	
    // (🆟) SQUARED EIGHT K	[1CAB 1DCB 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19F, 0x0061 };
    uint32_t const ces[12] = { 0x1CAB, 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_486)
{
    // 1F19F 0041;	
    // (🆟) SQUARED EIGHT K	[1CAB 1DCB 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x1F19F, 0x0041 };
    uint32_t const ces[12] = { 0x1CAB, 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_487)
{
    // 1F19F 0062;	
    // (🆟) SQUARED EIGHT K	[1CAB 1DCB 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19F, 0x0062 };
    uint32_t const ces[12] = { 0x1CAB, 0x1DCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_488)
{
    // 33E7 0021;	
    // (㏧) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY EIGHT	[1CAB FB40 E5E5 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E7, 0x0021 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_489)
{
    // 33E7 003F;	
    // (㏧) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY EIGHT	[1CAB FB40 E5E5 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E7, 0x003F };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_490)
{
    // 33E7 0061;	
    // (㏧) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY EIGHT	[1CAB FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E7, 0x0061 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_491)
{
    // 33E7 0041;	
    // (㏧) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY EIGHT	[1CAB FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x33E7, 0x0041 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_492)
{
    // 33E7 0062;	
    // (㏧) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY EIGHT	[1CAB FB40 E5E5 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E7, 0x0062 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_493)
{
    // 32C7 0021;	
    // (㋇) IDEOGRAPHIC TELEGRAPH SYMBOL FOR AUGUST	[1CAB FB40 E708 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C7, 0x0021 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_494)
{
    // 32C7 003F;	
    // (㋇) IDEOGRAPHIC TELEGRAPH SYMBOL FOR AUGUST	[1CAB FB40 E708 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C7, 0x003F };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_495)
{
    // 32C7 0061;	
    // (㋇) IDEOGRAPHIC TELEGRAPH SYMBOL FOR AUGUST	[1CAB FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C7, 0x0061 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_496)
{
    // 32C7 0041;	
    // (㋇) IDEOGRAPHIC TELEGRAPH SYMBOL FOR AUGUST	[1CAB FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x32C7, 0x0041 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_497)
{
    // 32C7 0062;	
    // (㋇) IDEOGRAPHIC TELEGRAPH SYMBOL FOR AUGUST	[1CAB FB40 E708 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C7, 0x0062 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_498)
{
    // 3360 0021;	
    // (㍠) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR EIGHT	[1CAB FB40 F0B9 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3360, 0x0021 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xF0B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_090_499)
{
    // 3360 003F;	
    // (㍠) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR EIGHT	[1CAB FB40 F0B9 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3360, 0x003F };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xF0B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

