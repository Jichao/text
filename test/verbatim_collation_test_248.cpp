// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_248_000)
{
    uint32_t const cps[2] = { 0x31F3, 0x003F };

    // 31F3 003F;	
    // (ㇳ) KATAKANA LETTER SMALL TO	[3E85 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F3 003F;	
    // (ㇳ) KATAKANA LETTER SMALL TO	[3E85 | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E85, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_001)
{
    uint32_t const cps[2] = { 0x30C8, 0x003F };

    // 30C8 003F;	
    // (ト) KATAKANA LETTER TO	[3E85 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30C8 003F;	
    // (ト) KATAKANA LETTER TO	[3E85 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E85, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_002)
{
    uint32_t const cps[2] = { 0xFF84, 0x003F };

    // FF84 003F;	
    // (ﾄ) HALFWIDTH KATAKANA LETTER TO	[3E85 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF84 003F;	
    // (ﾄ) HALFWIDTH KATAKANA LETTER TO	[3E85 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E85, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_003)
{
    uint32_t const cps[2] = { 0x32E3, 0x003F };

    // 32E3 003F;	
    // (㋣) CIRCLED KATAKANA TO	[3E85 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E3 003F;	
    // (㋣) CIRCLED KATAKANA TO	[3E85 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E85, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_004)
{
    uint32_t const cps[2] = { 0x3069, 0x003F };

    // 3069 003F;	
    // (ど) HIRAGANA LETTER DO	[3E85 0267 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E85, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3069 003F;	
    // (ど) HIRAGANA LETTER DO	[3E85 | 0020 0037 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_005)
{
    uint32_t const cps[2] = { 0x30C9, 0x003F };

    // 30C9 003F;	
    // (ド) KATAKANA LETTER DO	[3E85 0267 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E85, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30C9 003F;	
    // (ド) KATAKANA LETTER DO	[3E85 | 0020 0037 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_006)
{
    uint32_t const cps[2] = { 0x3068, 0x0061 };

    // 3068 0061;	
    // (と) HIRAGANA LETTER TO	[3E85 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3068 0061;	
    // (と) HIRAGANA LETTER TO	[3E85 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_007)
{
    uint32_t const cps[2] = { 0x3068, 0x0041 };

    // 3068 0041;	
    // (と) HIRAGANA LETTER TO	[3E85 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3068 0041;	
    // (と) HIRAGANA LETTER TO	[3E85 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_008)
{
    uint32_t const cps[2] = { 0x31F3, 0x0061 };

    // 31F3 0061;	
    // (ㇳ) KATAKANA LETTER SMALL TO	[3E85 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F3 0061;	
    // (ㇳ) KATAKANA LETTER SMALL TO	[3E85 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_009)
{
    uint32_t const cps[2] = { 0x31F3, 0x0041 };

    // 31F3 0041;	
    // (ㇳ) KATAKANA LETTER SMALL TO	[3E85 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F3 0041;	
    // (ㇳ) KATAKANA LETTER SMALL TO	[3E85 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_010)
{
    uint32_t const cps[2] = { 0x30C8, 0x0061 };

    // 30C8 0061;	
    // (ト) KATAKANA LETTER TO	[3E85 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30C8 0061;	
    // (ト) KATAKANA LETTER TO	[3E85 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_011)
{
    uint32_t const cps[2] = { 0x30C8, 0x0041 };

    // 30C8 0041;	
    // (ト) KATAKANA LETTER TO	[3E85 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30C8 0041;	
    // (ト) KATAKANA LETTER TO	[3E85 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_012)
{
    uint32_t const cps[2] = { 0xFF84, 0x0061 };

    // FF84 0061;	
    // (ﾄ) HALFWIDTH KATAKANA LETTER TO	[3E85 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF84 0061;	
    // (ﾄ) HALFWIDTH KATAKANA LETTER TO	[3E85 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_013)
{
    uint32_t const cps[2] = { 0xFF84, 0x0041 };

    // FF84 0041;	
    // (ﾄ) HALFWIDTH KATAKANA LETTER TO	[3E85 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF84 0041;	
    // (ﾄ) HALFWIDTH KATAKANA LETTER TO	[3E85 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_014)
{
    uint32_t const cps[2] = { 0x32E3, 0x0061 };

    // 32E3 0061;	
    // (㋣) CIRCLED KATAKANA TO	[3E85 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E3 0061;	
    // (㋣) CIRCLED KATAKANA TO	[3E85 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_015)
{
    uint32_t const cps[2] = { 0x32E3, 0x0041 };

    // 32E3 0041;	
    // (㋣) CIRCLED KATAKANA TO	[3E85 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E3 0041;	
    // (㋣) CIRCLED KATAKANA TO	[3E85 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_016)
{
    uint32_t const cps[2] = { 0x3069, 0x0061 };

    // 3069 0061;	
    // (ど) HIRAGANA LETTER DO	[3E85 1CAD | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3069 0061;	
    // (ど) HIRAGANA LETTER DO	[3E85 1CAD | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_017)
{
    uint32_t const cps[2] = { 0x3069, 0x0041 };

    // 3069 0041;	
    // (ど) HIRAGANA LETTER DO	[3E85 1CAD | 0020 0037 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3069 0041;	
    // (ど) HIRAGANA LETTER DO	[3E85 1CAD | 0020 0037 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_018)
{
    uint32_t const cps[2] = { 0x30C9, 0x0061 };

    // 30C9 0061;	
    // (ド) KATAKANA LETTER DO	[3E85 1CAD | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30C9 0061;	
    // (ド) KATAKANA LETTER DO	[3E85 1CAD | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_019)
{
    uint32_t const cps[2] = { 0x30C9, 0x0041 };

    // 30C9 0041;	
    // (ド) KATAKANA LETTER DO	[3E85 1CAD | 0020 0037 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30C9 0041;	
    // (ド) KATAKANA LETTER DO	[3E85 1CAD | 0020 0037 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_020)
{
    uint32_t const cps[2] = { 0x3068, 0x0062 };

    // 3068 0062;	
    // (と) HIRAGANA LETTER TO	[3E85 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3068 0062;	
    // (と) HIRAGANA LETTER TO	[3E85 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_021)
{
    uint32_t const cps[2] = { 0x31F3, 0x0062 };

    // 31F3 0062;	
    // (ㇳ) KATAKANA LETTER SMALL TO	[3E85 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F3 0062;	
    // (ㇳ) KATAKANA LETTER SMALL TO	[3E85 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_022)
{
    uint32_t const cps[2] = { 0x30C8, 0x0062 };

    // 30C8 0062;	
    // (ト) KATAKANA LETTER TO	[3E85 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30C8 0062;	
    // (ト) KATAKANA LETTER TO	[3E85 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_023)
{
    uint32_t const cps[2] = { 0xFF84, 0x0062 };

    // FF84 0062;	
    // (ﾄ) HALFWIDTH KATAKANA LETTER TO	[3E85 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF84 0062;	
    // (ﾄ) HALFWIDTH KATAKANA LETTER TO	[3E85 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_024)
{
    uint32_t const cps[2] = { 0x32E3, 0x0062 };

    // 32E3 0062;	
    // (㋣) CIRCLED KATAKANA TO	[3E85 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E3 0062;	
    // (㋣) CIRCLED KATAKANA TO	[3E85 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_025)
{
    uint32_t const cps[2] = { 0x3069, 0x0062 };

    // 3069 0062;	
    // (ど) HIRAGANA LETTER DO	[3E85 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3069 0062;	
    // (ど) HIRAGANA LETTER DO	[3E85 1CC6 | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_026)
{
    uint32_t const cps[2] = { 0x30C9, 0x0062 };

    // 30C9 0062;	
    // (ド) KATAKANA LETTER DO	[3E85 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30C9 0062;	
    // (ド) KATAKANA LETTER DO	[3E85 1CC6 | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_027)
{
    uint32_t const cps[2] = { 0x3326, 0x0021 };

    // 3326 0021;	
    // (㌦) SQUARE DORU	[3E85 3E9A 0261 | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E85, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3326 0021;	
    // (㌦) SQUARE DORU	[3E85 3E9A | 0020 0037 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[15] = { 0x3E85, 0x3E9A, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_028)
{
    uint32_t const cps[2] = { 0x3326, 0x003F };

    // 3326 003F;	
    // (㌦) SQUARE DORU	[3E85 3E9A 0267 | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E85, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3326 003F;	
    // (㌦) SQUARE DORU	[3E85 3E9A | 0020 0037 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[15] = { 0x3E85, 0x3E9A, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_029)
{
    uint32_t const cps[2] = { 0x3326, 0x0061 };

    // 3326 0061;	
    // (㌦) SQUARE DORU	[3E85 3E9A 1CAD | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3326 0061;	
    // (㌦) SQUARE DORU	[3E85 3E9A 1CAD | 0020 0037 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_030)
{
    uint32_t const cps[2] = { 0x3326, 0x0041 };

    // 3326 0041;	
    // (㌦) SQUARE DORU	[3E85 3E9A 1CAD | 0020 0037 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3326 0041;	
    // (㌦) SQUARE DORU	[3E85 3E9A 1CAD | 0020 0037 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_031)
{
    uint32_t const cps[2] = { 0x3326, 0x0062 };

    // 3326 0062;	
    // (㌦) SQUARE DORU	[3E85 3E9A 1CC6 | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E85, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3326 0062;	
    // (㌦) SQUARE DORU	[3E85 3E9A 1CC6 | 0020 0037 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E85, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_032)
{
    uint32_t const cps[2] = { 0x3327, 0x0021 };

    // 3327 0021;	
    // (㌧) SQUARE TON	[3E85 3EA1 0261 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E85, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3327 0021;	
    // (㌧) SQUARE TON	[3E85 3EA1 | 0020 0020 | 001C 001C | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E85, 0x3EA1, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_033)
{
    uint32_t const cps[2] = { 0x3327, 0x003F };

    // 3327 003F;	
    // (㌧) SQUARE TON	[3E85 3EA1 0267 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E85, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3327 003F;	
    // (㌧) SQUARE TON	[3E85 3EA1 | 0020 0020 | 001C 001C | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x3E85, 0x3EA1, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_034)
{
    uint32_t const cps[2] = { 0x3327, 0x0061 };

    // 3327 0061;	
    // (㌧) SQUARE TON	[3E85 3EA1 1CAD | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E85, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3327 0061;	
    // (㌧) SQUARE TON	[3E85 3EA1 1CAD | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E85, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_035)
{
    uint32_t const cps[2] = { 0x3327, 0x0041 };

    // 3327 0041;	
    // (㌧) SQUARE TON	[3E85 3EA1 1CAD | 0020 0020 0020 | 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E85, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3327 0041;	
    // (㌧) SQUARE TON	[3E85 3EA1 1CAD | 0020 0020 0020 | 001C 001C 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E85, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_036)
{
    uint32_t const cps[2] = { 0x3327, 0x0062 };

    // 3327 0062;	
    // (㌧) SQUARE TON	[3E85 3EA1 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E85, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3327 0062;	
    // (㌧) SQUARE TON	[3E85 3EA1 1CC6 | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E85, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_037)
{
    uint32_t const cps[2] = { 0x306A, 0x0021 };

    // 306A 0021;	
    // (な) HIRAGANA LETTER NA	[3E86 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306A 0021;	
    // (な) HIRAGANA LETTER NA	[3E86 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E86, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_038)
{
    uint32_t const cps[2] = { 0x30CA, 0x0021 };

    // 30CA 0021;	
    // (ナ) KATAKANA LETTER NA	[3E86 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CA 0021;	
    // (ナ) KATAKANA LETTER NA	[3E86 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E86, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_039)
{
    uint32_t const cps[2] = { 0xFF85, 0x0021 };

    // FF85 0021;	
    // (ﾅ) HALFWIDTH KATAKANA LETTER NA	[3E86 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF85 0021;	
    // (ﾅ) HALFWIDTH KATAKANA LETTER NA	[3E86 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E86, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_040)
{
    uint32_t const cps[2] = { 0x32E4, 0x0021 };

    // 32E4 0021;	
    // (㋤) CIRCLED KATAKANA NA	[3E86 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E4 0021;	
    // (㋤) CIRCLED KATAKANA NA	[3E86 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E86, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_041)
{
    uint32_t const cps[2] = { 0x306A, 0x003F };

    // 306A 003F;	
    // (な) HIRAGANA LETTER NA	[3E86 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306A 003F;	
    // (な) HIRAGANA LETTER NA	[3E86 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E86, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_042)
{
    uint32_t const cps[2] = { 0x30CA, 0x003F };

    // 30CA 003F;	
    // (ナ) KATAKANA LETTER NA	[3E86 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CA 003F;	
    // (ナ) KATAKANA LETTER NA	[3E86 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E86, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_043)
{
    uint32_t const cps[2] = { 0xFF85, 0x003F };

    // FF85 003F;	
    // (ﾅ) HALFWIDTH KATAKANA LETTER NA	[3E86 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF85 003F;	
    // (ﾅ) HALFWIDTH KATAKANA LETTER NA	[3E86 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E86, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_044)
{
    uint32_t const cps[2] = { 0x32E4, 0x003F };

    // 32E4 003F;	
    // (㋤) CIRCLED KATAKANA NA	[3E86 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E4 003F;	
    // (㋤) CIRCLED KATAKANA NA	[3E86 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E86, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_045)
{
    uint32_t const cps[2] = { 0x306A, 0x0061 };

    // 306A 0061;	
    // (な) HIRAGANA LETTER NA	[3E86 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306A 0061;	
    // (な) HIRAGANA LETTER NA	[3E86 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_046)
{
    uint32_t const cps[2] = { 0x306A, 0x0041 };

    // 306A 0041;	
    // (な) HIRAGANA LETTER NA	[3E86 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306A 0041;	
    // (な) HIRAGANA LETTER NA	[3E86 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_047)
{
    uint32_t const cps[2] = { 0x30CA, 0x0061 };

    // 30CA 0061;	
    // (ナ) KATAKANA LETTER NA	[3E86 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CA 0061;	
    // (ナ) KATAKANA LETTER NA	[3E86 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_048)
{
    uint32_t const cps[2] = { 0x30CA, 0x0041 };

    // 30CA 0041;	
    // (ナ) KATAKANA LETTER NA	[3E86 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CA 0041;	
    // (ナ) KATAKANA LETTER NA	[3E86 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_049)
{
    uint32_t const cps[2] = { 0xFF85, 0x0061 };

    // FF85 0061;	
    // (ﾅ) HALFWIDTH KATAKANA LETTER NA	[3E86 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF85 0061;	
    // (ﾅ) HALFWIDTH KATAKANA LETTER NA	[3E86 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_050)
{
    uint32_t const cps[2] = { 0xFF85, 0x0041 };

    // FF85 0041;	
    // (ﾅ) HALFWIDTH KATAKANA LETTER NA	[3E86 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF85 0041;	
    // (ﾅ) HALFWIDTH KATAKANA LETTER NA	[3E86 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_051)
{
    uint32_t const cps[2] = { 0x32E4, 0x0061 };

    // 32E4 0061;	
    // (㋤) CIRCLED KATAKANA NA	[3E86 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E4 0061;	
    // (㋤) CIRCLED KATAKANA NA	[3E86 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_052)
{
    uint32_t const cps[2] = { 0x32E4, 0x0041 };

    // 32E4 0041;	
    // (㋤) CIRCLED KATAKANA NA	[3E86 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E4 0041;	
    // (㋤) CIRCLED KATAKANA NA	[3E86 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_053)
{
    uint32_t const cps[2] = { 0x306A, 0x0062 };

    // 306A 0062;	
    // (な) HIRAGANA LETTER NA	[3E86 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306A 0062;	
    // (な) HIRAGANA LETTER NA	[3E86 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_054)
{
    uint32_t const cps[2] = { 0x30CA, 0x0062 };

    // 30CA 0062;	
    // (ナ) KATAKANA LETTER NA	[3E86 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CA 0062;	
    // (ナ) KATAKANA LETTER NA	[3E86 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_055)
{
    uint32_t const cps[2] = { 0xFF85, 0x0062 };

    // FF85 0062;	
    // (ﾅ) HALFWIDTH KATAKANA LETTER NA	[3E86 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF85 0062;	
    // (ﾅ) HALFWIDTH KATAKANA LETTER NA	[3E86 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_056)
{
    uint32_t const cps[2] = { 0x32E4, 0x0062 };

    // 32E4 0062;	
    // (㋤) CIRCLED KATAKANA NA	[3E86 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E4 0062;	
    // (㋤) CIRCLED KATAKANA NA	[3E86 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_057)
{
    uint32_t const cps[2] = { 0x3328, 0x0021 };

    // 3328 0021;	
    // (㌨) SQUARE NANO	[3E86 3E8A 0261 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E86, 0x3E8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3328 0021;	
    // (㌨) SQUARE NANO	[3E86 3E8A | 0020 0020 | 001C 001C | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E86, 0x3E8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_058)
{
    uint32_t const cps[2] = { 0x3328, 0x003F };

    // 3328 003F;	
    // (㌨) SQUARE NANO	[3E86 3E8A 0267 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E86, 0x3E8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3328 003F;	
    // (㌨) SQUARE NANO	[3E86 3E8A | 0020 0020 | 001C 001C | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x3E86, 0x3E8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_059)
{
    uint32_t const cps[2] = { 0x3328, 0x0061 };

    // 3328 0061;	
    // (㌨) SQUARE NANO	[3E86 3E8A 1CAD | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E86, 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3328 0061;	
    // (㌨) SQUARE NANO	[3E86 3E8A 1CAD | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E86, 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_060)
{
    uint32_t const cps[2] = { 0x3328, 0x0041 };

    // 3328 0041;	
    // (㌨) SQUARE NANO	[3E86 3E8A 1CAD | 0020 0020 0020 | 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E86, 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3328 0041;	
    // (㌨) SQUARE NANO	[3E86 3E8A 1CAD | 0020 0020 0020 | 001C 001C 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E86, 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_061)
{
    uint32_t const cps[2] = { 0x3328, 0x0062 };

    // 3328 0062;	
    // (㌨) SQUARE NANO	[3E86 3E8A 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E86, 0x3E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3328 0062;	
    // (㌨) SQUARE NANO	[3E86 3E8A 1CC6 | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E86, 0x3E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_062)
{
    uint32_t const cps[2] = { 0x306B, 0x0021 };

    // 306B 0021;	
    // (に) HIRAGANA LETTER NI	[3E87 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306B 0021;	
    // (に) HIRAGANA LETTER NI	[3E87 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E87, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_063)
{
    uint32_t const cps[2] = { 0x30CB, 0x0021 };

    // 30CB 0021;	
    // (ニ) KATAKANA LETTER NI	[3E87 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CB 0021;	
    // (ニ) KATAKANA LETTER NI	[3E87 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E87, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_064)
{
    uint32_t const cps[2] = { 0xFF86, 0x0021 };

    // FF86 0021;	
    // (ﾆ) HALFWIDTH KATAKANA LETTER NI	[3E87 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF86 0021;	
    // (ﾆ) HALFWIDTH KATAKANA LETTER NI	[3E87 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E87, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_065)
{
    uint32_t const cps[2] = { 0x32E5, 0x0021 };

    // 32E5 0021;	
    // (㋥) CIRCLED KATAKANA NI	[3E87 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E5 0021;	
    // (㋥) CIRCLED KATAKANA NI	[3E87 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E87, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_066)
{
    uint32_t const cps[2] = { 0x306B, 0x003F };

    // 306B 003F;	
    // (に) HIRAGANA LETTER NI	[3E87 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306B 003F;	
    // (に) HIRAGANA LETTER NI	[3E87 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E87, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_067)
{
    uint32_t const cps[2] = { 0x30CB, 0x003F };

    // 30CB 003F;	
    // (ニ) KATAKANA LETTER NI	[3E87 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CB 003F;	
    // (ニ) KATAKANA LETTER NI	[3E87 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E87, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_068)
{
    uint32_t const cps[2] = { 0xFF86, 0x003F };

    // FF86 003F;	
    // (ﾆ) HALFWIDTH KATAKANA LETTER NI	[3E87 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF86 003F;	
    // (ﾆ) HALFWIDTH KATAKANA LETTER NI	[3E87 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E87, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_069)
{
    uint32_t const cps[2] = { 0x32E5, 0x003F };

    // 32E5 003F;	
    // (㋥) CIRCLED KATAKANA NI	[3E87 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E5 003F;	
    // (㋥) CIRCLED KATAKANA NI	[3E87 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E87, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_070)
{
    uint32_t const cps[2] = { 0x306B, 0x0061 };

    // 306B 0061;	
    // (に) HIRAGANA LETTER NI	[3E87 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306B 0061;	
    // (に) HIRAGANA LETTER NI	[3E87 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_071)
{
    uint32_t const cps[2] = { 0x306B, 0x0041 };

    // 306B 0041;	
    // (に) HIRAGANA LETTER NI	[3E87 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306B 0041;	
    // (に) HIRAGANA LETTER NI	[3E87 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_072)
{
    uint32_t const cps[2] = { 0x30CB, 0x0061 };

    // 30CB 0061;	
    // (ニ) KATAKANA LETTER NI	[3E87 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CB 0061;	
    // (ニ) KATAKANA LETTER NI	[3E87 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_073)
{
    uint32_t const cps[2] = { 0x30CB, 0x0041 };

    // 30CB 0041;	
    // (ニ) KATAKANA LETTER NI	[3E87 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CB 0041;	
    // (ニ) KATAKANA LETTER NI	[3E87 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_074)
{
    uint32_t const cps[2] = { 0xFF86, 0x0061 };

    // FF86 0061;	
    // (ﾆ) HALFWIDTH KATAKANA LETTER NI	[3E87 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF86 0061;	
    // (ﾆ) HALFWIDTH KATAKANA LETTER NI	[3E87 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_075)
{
    uint32_t const cps[2] = { 0xFF86, 0x0041 };

    // FF86 0041;	
    // (ﾆ) HALFWIDTH KATAKANA LETTER NI	[3E87 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF86 0041;	
    // (ﾆ) HALFWIDTH KATAKANA LETTER NI	[3E87 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_076)
{
    uint32_t const cps[2] = { 0x32E5, 0x0061 };

    // 32E5 0061;	
    // (㋥) CIRCLED KATAKANA NI	[3E87 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E5 0061;	
    // (㋥) CIRCLED KATAKANA NI	[3E87 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_077)
{
    uint32_t const cps[2] = { 0x32E5, 0x0041 };

    // 32E5 0041;	
    // (㋥) CIRCLED KATAKANA NI	[3E87 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E5 0041;	
    // (㋥) CIRCLED KATAKANA NI	[3E87 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_078)
{
    uint32_t const cps[2] = { 0x306B, 0x0062 };

    // 306B 0062;	
    // (に) HIRAGANA LETTER NI	[3E87 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306B 0062;	
    // (に) HIRAGANA LETTER NI	[3E87 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_079)
{
    uint32_t const cps[2] = { 0x30CB, 0x0062 };

    // 30CB 0062;	
    // (ニ) KATAKANA LETTER NI	[3E87 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CB 0062;	
    // (ニ) KATAKANA LETTER NI	[3E87 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_080)
{
    uint32_t const cps[2] = { 0xFF86, 0x0062 };

    // FF86 0062;	
    // (ﾆ) HALFWIDTH KATAKANA LETTER NI	[3E87 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF86 0062;	
    // (ﾆ) HALFWIDTH KATAKANA LETTER NI	[3E87 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_081)
{
    uint32_t const cps[2] = { 0x32E5, 0x0062 };

    // 32E5 0062;	
    // (㋥) CIRCLED KATAKANA NI	[3E87 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E5 0062;	
    // (㋥) CIRCLED KATAKANA NI	[3E87 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_082)
{
    uint32_t const cps[2] = { 0x306C, 0x0021 };

    // 306C 0021;	
    // (ぬ) HIRAGANA LETTER NU	[3E88 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306C 0021;	
    // (ぬ) HIRAGANA LETTER NU	[3E88 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E88, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_083)
{
    uint32_t const cps[2] = { 0x31F4, 0x0021 };

    // 31F4 0021;	
    // (ㇴ) KATAKANA LETTER SMALL NU	[3E88 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F4 0021;	
    // (ㇴ) KATAKANA LETTER SMALL NU	[3E88 | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E88, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_084)
{
    uint32_t const cps[2] = { 0x30CC, 0x0021 };

    // 30CC 0021;	
    // (ヌ) KATAKANA LETTER NU	[3E88 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CC 0021;	
    // (ヌ) KATAKANA LETTER NU	[3E88 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E88, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_085)
{
    uint32_t const cps[2] = { 0xFF87, 0x0021 };

    // FF87 0021;	
    // (ﾇ) HALFWIDTH KATAKANA LETTER NU	[3E88 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF87 0021;	
    // (ﾇ) HALFWIDTH KATAKANA LETTER NU	[3E88 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E88, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_086)
{
    uint32_t const cps[2] = { 0x32E6, 0x0021 };

    // 32E6 0021;	
    // (㋦) CIRCLED KATAKANA NU	[3E88 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E6 0021;	
    // (㋦) CIRCLED KATAKANA NU	[3E88 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E88, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_087)
{
    uint32_t const cps[2] = { 0x306C, 0x003F };

    // 306C 003F;	
    // (ぬ) HIRAGANA LETTER NU	[3E88 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306C 003F;	
    // (ぬ) HIRAGANA LETTER NU	[3E88 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E88, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_088)
{
    uint32_t const cps[2] = { 0x31F4, 0x003F };

    // 31F4 003F;	
    // (ㇴ) KATAKANA LETTER SMALL NU	[3E88 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F4 003F;	
    // (ㇴ) KATAKANA LETTER SMALL NU	[3E88 | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E88, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_089)
{
    uint32_t const cps[2] = { 0x30CC, 0x003F };

    // 30CC 003F;	
    // (ヌ) KATAKANA LETTER NU	[3E88 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CC 003F;	
    // (ヌ) KATAKANA LETTER NU	[3E88 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E88, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_090)
{
    uint32_t const cps[2] = { 0xFF87, 0x003F };

    // FF87 003F;	
    // (ﾇ) HALFWIDTH KATAKANA LETTER NU	[3E88 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF87 003F;	
    // (ﾇ) HALFWIDTH KATAKANA LETTER NU	[3E88 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E88, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_091)
{
    uint32_t const cps[2] = { 0x32E6, 0x003F };

    // 32E6 003F;	
    // (㋦) CIRCLED KATAKANA NU	[3E88 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E6 003F;	
    // (㋦) CIRCLED KATAKANA NU	[3E88 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E88, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_092)
{
    uint32_t const cps[2] = { 0x306C, 0x0061 };

    // 306C 0061;	
    // (ぬ) HIRAGANA LETTER NU	[3E88 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306C 0061;	
    // (ぬ) HIRAGANA LETTER NU	[3E88 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_093)
{
    uint32_t const cps[2] = { 0x306C, 0x0041 };

    // 306C 0041;	
    // (ぬ) HIRAGANA LETTER NU	[3E88 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306C 0041;	
    // (ぬ) HIRAGANA LETTER NU	[3E88 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_094)
{
    uint32_t const cps[2] = { 0x31F4, 0x0061 };

    // 31F4 0061;	
    // (ㇴ) KATAKANA LETTER SMALL NU	[3E88 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F4 0061;	
    // (ㇴ) KATAKANA LETTER SMALL NU	[3E88 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_095)
{
    uint32_t const cps[2] = { 0x31F4, 0x0041 };

    // 31F4 0041;	
    // (ㇴ) KATAKANA LETTER SMALL NU	[3E88 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F4 0041;	
    // (ㇴ) KATAKANA LETTER SMALL NU	[3E88 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_096)
{
    uint32_t const cps[2] = { 0x30CC, 0x0061 };

    // 30CC 0061;	
    // (ヌ) KATAKANA LETTER NU	[3E88 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CC 0061;	
    // (ヌ) KATAKANA LETTER NU	[3E88 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_097)
{
    uint32_t const cps[2] = { 0x30CC, 0x0041 };

    // 30CC 0041;	
    // (ヌ) KATAKANA LETTER NU	[3E88 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CC 0041;	
    // (ヌ) KATAKANA LETTER NU	[3E88 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_098)
{
    uint32_t const cps[2] = { 0xFF87, 0x0061 };

    // FF87 0061;	
    // (ﾇ) HALFWIDTH KATAKANA LETTER NU	[3E88 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF87 0061;	
    // (ﾇ) HALFWIDTH KATAKANA LETTER NU	[3E88 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_099)
{
    uint32_t const cps[2] = { 0xFF87, 0x0041 };

    // FF87 0041;	
    // (ﾇ) HALFWIDTH KATAKANA LETTER NU	[3E88 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF87 0041;	
    // (ﾇ) HALFWIDTH KATAKANA LETTER NU	[3E88 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_100)
{
    uint32_t const cps[2] = { 0x32E6, 0x0061 };

    // 32E6 0061;	
    // (㋦) CIRCLED KATAKANA NU	[3E88 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E6 0061;	
    // (㋦) CIRCLED KATAKANA NU	[3E88 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_101)
{
    uint32_t const cps[2] = { 0x32E6, 0x0041 };

    // 32E6 0041;	
    // (㋦) CIRCLED KATAKANA NU	[3E88 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E6 0041;	
    // (㋦) CIRCLED KATAKANA NU	[3E88 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_102)
{
    uint32_t const cps[2] = { 0x306C, 0x0062 };

    // 306C 0062;	
    // (ぬ) HIRAGANA LETTER NU	[3E88 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306C 0062;	
    // (ぬ) HIRAGANA LETTER NU	[3E88 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_103)
{
    uint32_t const cps[2] = { 0x31F4, 0x0062 };

    // 31F4 0062;	
    // (ㇴ) KATAKANA LETTER SMALL NU	[3E88 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F4 0062;	
    // (ㇴ) KATAKANA LETTER SMALL NU	[3E88 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_104)
{
    uint32_t const cps[2] = { 0x30CC, 0x0062 };

    // 30CC 0062;	
    // (ヌ) KATAKANA LETTER NU	[3E88 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CC 0062;	
    // (ヌ) KATAKANA LETTER NU	[3E88 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_105)
{
    uint32_t const cps[2] = { 0xFF87, 0x0062 };

    // FF87 0062;	
    // (ﾇ) HALFWIDTH KATAKANA LETTER NU	[3E88 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF87 0062;	
    // (ﾇ) HALFWIDTH KATAKANA LETTER NU	[3E88 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_106)
{
    uint32_t const cps[2] = { 0x32E6, 0x0062 };

    // 32E6 0062;	
    // (㋦) CIRCLED KATAKANA NU	[3E88 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E6 0062;	
    // (㋦) CIRCLED KATAKANA NU	[3E88 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_107)
{
    uint32_t const cps[2] = { 0x306D, 0x0021 };

    // 306D 0021;	
    // (ね) HIRAGANA LETTER NE	[3E89 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306D 0021;	
    // (ね) HIRAGANA LETTER NE	[3E89 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E89, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_108)
{
    uint32_t const cps[2] = { 0x30CD, 0x0021 };

    // 30CD 0021;	
    // (ネ) KATAKANA LETTER NE	[3E89 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CD 0021;	
    // (ネ) KATAKANA LETTER NE	[3E89 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E89, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_109)
{
    uint32_t const cps[2] = { 0xFF88, 0x0021 };

    // FF88 0021;	
    // (ﾈ) HALFWIDTH KATAKANA LETTER NE	[3E89 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF88 0021;	
    // (ﾈ) HALFWIDTH KATAKANA LETTER NE	[3E89 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E89, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_110)
{
    uint32_t const cps[2] = { 0x32E7, 0x0021 };

    // 32E7 0021;	
    // (㋧) CIRCLED KATAKANA NE	[3E89 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E7 0021;	
    // (㋧) CIRCLED KATAKANA NE	[3E89 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E89, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_111)
{
    uint32_t const cps[2] = { 0x306D, 0x003F };

    // 306D 003F;	
    // (ね) HIRAGANA LETTER NE	[3E89 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306D 003F;	
    // (ね) HIRAGANA LETTER NE	[3E89 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E89, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_112)
{
    uint32_t const cps[2] = { 0x30CD, 0x003F };

    // 30CD 003F;	
    // (ネ) KATAKANA LETTER NE	[3E89 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CD 003F;	
    // (ネ) KATAKANA LETTER NE	[3E89 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E89, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_113)
{
    uint32_t const cps[2] = { 0xFF88, 0x003F };

    // FF88 003F;	
    // (ﾈ) HALFWIDTH KATAKANA LETTER NE	[3E89 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF88 003F;	
    // (ﾈ) HALFWIDTH KATAKANA LETTER NE	[3E89 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E89, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_114)
{
    uint32_t const cps[2] = { 0x32E7, 0x003F };

    // 32E7 003F;	
    // (㋧) CIRCLED KATAKANA NE	[3E89 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E7 003F;	
    // (㋧) CIRCLED KATAKANA NE	[3E89 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E89, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_115)
{
    uint32_t const cps[2] = { 0x306D, 0x0061 };

    // 306D 0061;	
    // (ね) HIRAGANA LETTER NE	[3E89 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306D 0061;	
    // (ね) HIRAGANA LETTER NE	[3E89 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_116)
{
    uint32_t const cps[2] = { 0x306D, 0x0041 };

    // 306D 0041;	
    // (ね) HIRAGANA LETTER NE	[3E89 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306D 0041;	
    // (ね) HIRAGANA LETTER NE	[3E89 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_117)
{
    uint32_t const cps[2] = { 0x30CD, 0x0061 };

    // 30CD 0061;	
    // (ネ) KATAKANA LETTER NE	[3E89 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CD 0061;	
    // (ネ) KATAKANA LETTER NE	[3E89 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_118)
{
    uint32_t const cps[2] = { 0x30CD, 0x0041 };

    // 30CD 0041;	
    // (ネ) KATAKANA LETTER NE	[3E89 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CD 0041;	
    // (ネ) KATAKANA LETTER NE	[3E89 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_119)
{
    uint32_t const cps[2] = { 0xFF88, 0x0061 };

    // FF88 0061;	
    // (ﾈ) HALFWIDTH KATAKANA LETTER NE	[3E89 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF88 0061;	
    // (ﾈ) HALFWIDTH KATAKANA LETTER NE	[3E89 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_120)
{
    uint32_t const cps[2] = { 0xFF88, 0x0041 };

    // FF88 0041;	
    // (ﾈ) HALFWIDTH KATAKANA LETTER NE	[3E89 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF88 0041;	
    // (ﾈ) HALFWIDTH KATAKANA LETTER NE	[3E89 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_121)
{
    uint32_t const cps[2] = { 0x32E7, 0x0061 };

    // 32E7 0061;	
    // (㋧) CIRCLED KATAKANA NE	[3E89 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E7 0061;	
    // (㋧) CIRCLED KATAKANA NE	[3E89 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_122)
{
    uint32_t const cps[2] = { 0x32E7, 0x0041 };

    // 32E7 0041;	
    // (㋧) CIRCLED KATAKANA NE	[3E89 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E7 0041;	
    // (㋧) CIRCLED KATAKANA NE	[3E89 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_123)
{
    uint32_t const cps[2] = { 0x306D, 0x0062 };

    // 306D 0062;	
    // (ね) HIRAGANA LETTER NE	[3E89 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306D 0062;	
    // (ね) HIRAGANA LETTER NE	[3E89 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_124)
{
    uint32_t const cps[2] = { 0x30CD, 0x0062 };

    // 30CD 0062;	
    // (ネ) KATAKANA LETTER NE	[3E89 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CD 0062;	
    // (ネ) KATAKANA LETTER NE	[3E89 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_125)
{
    uint32_t const cps[2] = { 0xFF88, 0x0062 };

    // FF88 0062;	
    // (ﾈ) HALFWIDTH KATAKANA LETTER NE	[3E89 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF88 0062;	
    // (ﾈ) HALFWIDTH KATAKANA LETTER NE	[3E89 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_126)
{
    uint32_t const cps[2] = { 0x32E7, 0x0062 };

    // 32E7 0062;	
    // (㋧) CIRCLED KATAKANA NE	[3E89 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E7 0062;	
    // (㋧) CIRCLED KATAKANA NE	[3E89 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_127)
{
    uint32_t const cps[2] = { 0x306E, 0x0021 };

    // 306E 0021;	
    // (の) HIRAGANA LETTER NO	[3E8A 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306E 0021;	
    // (の) HIRAGANA LETTER NO	[3E8A | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8A, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_128)
{
    uint32_t const cps[2] = { 0x30CE, 0x0021 };

    // 30CE 0021;	
    // (ノ) KATAKANA LETTER NO	[3E8A 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CE 0021;	
    // (ノ) KATAKANA LETTER NO	[3E8A | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8A, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_129)
{
    uint32_t const cps[2] = { 0xFF89, 0x0021 };

    // FF89 0021;	
    // (ﾉ) HALFWIDTH KATAKANA LETTER NO	[3E8A 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF89 0021;	
    // (ﾉ) HALFWIDTH KATAKANA LETTER NO	[3E8A | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8A, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_130)
{
    uint32_t const cps[2] = { 0x32E8, 0x0021 };

    // 32E8 0021;	
    // (㋨) CIRCLED KATAKANA NO	[3E8A 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E8 0021;	
    // (㋨) CIRCLED KATAKANA NO	[3E8A | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8A, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_131)
{
    uint32_t const cps[2] = { 0x306E, 0x003F };

    // 306E 003F;	
    // (の) HIRAGANA LETTER NO	[3E8A 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306E 003F;	
    // (の) HIRAGANA LETTER NO	[3E8A | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8A, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_132)
{
    uint32_t const cps[2] = { 0x30CE, 0x003F };

    // 30CE 003F;	
    // (ノ) KATAKANA LETTER NO	[3E8A 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CE 003F;	
    // (ノ) KATAKANA LETTER NO	[3E8A | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8A, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_133)
{
    uint32_t const cps[2] = { 0xFF89, 0x003F };

    // FF89 003F;	
    // (ﾉ) HALFWIDTH KATAKANA LETTER NO	[3E8A 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF89 003F;	
    // (ﾉ) HALFWIDTH KATAKANA LETTER NO	[3E8A | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8A, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_134)
{
    uint32_t const cps[2] = { 0x32E8, 0x003F };

    // 32E8 003F;	
    // (㋨) CIRCLED KATAKANA NO	[3E8A 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E8 003F;	
    // (㋨) CIRCLED KATAKANA NO	[3E8A | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8A, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_135)
{
    uint32_t const cps[2] = { 0x306E, 0x0061 };

    // 306E 0061;	
    // (の) HIRAGANA LETTER NO	[3E8A 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306E 0061;	
    // (の) HIRAGANA LETTER NO	[3E8A 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_136)
{
    uint32_t const cps[2] = { 0x306E, 0x0041 };

    // 306E 0041;	
    // (の) HIRAGANA LETTER NO	[3E8A 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306E 0041;	
    // (の) HIRAGANA LETTER NO	[3E8A 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_137)
{
    uint32_t const cps[2] = { 0x30CE, 0x0061 };

    // 30CE 0061;	
    // (ノ) KATAKANA LETTER NO	[3E8A 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CE 0061;	
    // (ノ) KATAKANA LETTER NO	[3E8A 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_138)
{
    uint32_t const cps[2] = { 0x30CE, 0x0041 };

    // 30CE 0041;	
    // (ノ) KATAKANA LETTER NO	[3E8A 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CE 0041;	
    // (ノ) KATAKANA LETTER NO	[3E8A 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_139)
{
    uint32_t const cps[2] = { 0xFF89, 0x0061 };

    // FF89 0061;	
    // (ﾉ) HALFWIDTH KATAKANA LETTER NO	[3E8A 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF89 0061;	
    // (ﾉ) HALFWIDTH KATAKANA LETTER NO	[3E8A 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_140)
{
    uint32_t const cps[2] = { 0xFF89, 0x0041 };

    // FF89 0041;	
    // (ﾉ) HALFWIDTH KATAKANA LETTER NO	[3E8A 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF89 0041;	
    // (ﾉ) HALFWIDTH KATAKANA LETTER NO	[3E8A 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_141)
{
    uint32_t const cps[2] = { 0x32E8, 0x0061 };

    // 32E8 0061;	
    // (㋨) CIRCLED KATAKANA NO	[3E8A 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E8 0061;	
    // (㋨) CIRCLED KATAKANA NO	[3E8A 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_142)
{
    uint32_t const cps[2] = { 0x32E8, 0x0041 };

    // 32E8 0041;	
    // (㋨) CIRCLED KATAKANA NO	[3E8A 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E8 0041;	
    // (㋨) CIRCLED KATAKANA NO	[3E8A 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_143)
{
    uint32_t const cps[2] = { 0x306E, 0x0062 };

    // 306E 0062;	
    // (の) HIRAGANA LETTER NO	[3E8A 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306E 0062;	
    // (の) HIRAGANA LETTER NO	[3E8A 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_144)
{
    uint32_t const cps[2] = { 0x30CE, 0x0062 };

    // 30CE 0062;	
    // (ノ) KATAKANA LETTER NO	[3E8A 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CE 0062;	
    // (ノ) KATAKANA LETTER NO	[3E8A 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_145)
{
    uint32_t const cps[2] = { 0xFF89, 0x0062 };

    // FF89 0062;	
    // (ﾉ) HALFWIDTH KATAKANA LETTER NO	[3E8A 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF89 0062;	
    // (ﾉ) HALFWIDTH KATAKANA LETTER NO	[3E8A 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_146)
{
    uint32_t const cps[2] = { 0x32E8, 0x0062 };

    // 32E8 0062;	
    // (㋨) CIRCLED KATAKANA NO	[3E8A 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E8 0062;	
    // (㋨) CIRCLED KATAKANA NO	[3E8A 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_147)
{
    uint32_t const cps[2] = { 0x3329, 0x0021 };

    // 3329 0021;	
    // (㌩) SQUARE NOTTO	[3E8A 3E83 3E85 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8A, 0x3E83, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3329 0021;	
    // (㌩) SQUARE NOTTO	[3E8A 3E83 3E85 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x3E8A, 0x3E83, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_148)
{
    uint32_t const cps[2] = { 0x3329, 0x003F };

    // 3329 003F;	
    // (㌩) SQUARE NOTTO	[3E8A 3E83 3E85 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8A, 0x3E83, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3329 003F;	
    // (㌩) SQUARE NOTTO	[3E8A 3E83 3E85 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[16] = { 0x3E8A, 0x3E83, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_149)
{
    uint32_t const cps[2] = { 0x3329, 0x0061 };

    // 3329 0061;	
    // (㌩) SQUARE NOTTO	[3E8A 3E83 3E85 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8A, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3329 0061;	
    // (㌩) SQUARE NOTTO	[3E8A 3E83 3E85 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8A, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_150)
{
    uint32_t const cps[2] = { 0x3329, 0x0041 };

    // 3329 0041;	
    // (㌩) SQUARE NOTTO	[3E8A 3E83 3E85 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8A, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3329 0041;	
    // (㌩) SQUARE NOTTO	[3E8A 3E83 3E85 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8A, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_151)
{
    uint32_t const cps[2] = { 0x3329, 0x0062 };

    // 3329 0062;	
    // (㌩) SQUARE NOTTO	[3E8A 3E83 3E85 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8A, 0x3E83, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3329 0062;	
    // (㌩) SQUARE NOTTO	[3E8A 3E83 3E85 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8A, 0x3E83, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_152)
{
    uint32_t const cps[3] = { 0x306F, 0x0334, 0x3099 };

    // 306F 0334 3099;	
    // (は̴) HIRAGANA LETTER HA, COMBINING TILDE OVERLAY	[3E8B | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306F 0334 3099;	
    // (は̴) HIRAGANA LETTER HA, COMBINING TILDE OVERLAY	[3E8B | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_153)
{
    uint32_t const cps[3] = { 0x306F, 0x3099, 0x0334 };

    // 306F 3099 0334;	
    // (ば) HIRAGANA LETTER HA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8B | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306F 3099 0334;	
    // (ば) HIRAGANA LETTER HA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8B | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_154)
{
    uint32_t const cps[2] = { 0x3070, 0x0334 };

    // 3070 0334;	
    // (ば) HIRAGANA LETTER BA	[3E8B | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3070 0334;	
    // (ば) HIRAGANA LETTER BA	[3E8B | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_155)
{
    uint32_t const cps[3] = { 0x30CF, 0x0334, 0x3099 };

    // 30CF 0334 3099;	
    // (ハ̴) KATAKANA LETTER HA, COMBINING TILDE OVERLAY	[3E8B | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CF 0334 3099;	
    // (ハ̴) KATAKANA LETTER HA, COMBINING TILDE OVERLAY	[3E8B | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_156)
{
    uint32_t const cps[3] = { 0x30CF, 0x3099, 0x0334 };

    // 30CF 3099 0334;	
    // (バ) KATAKANA LETTER HA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8B | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CF 3099 0334;	
    // (バ) KATAKANA LETTER HA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8B | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_157)
{
    uint32_t const cps[2] = { 0x30D0, 0x0334 };

    // 30D0 0334;	
    // (バ) KATAKANA LETTER BA	[3E8B | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D0 0334;	
    // (バ) KATAKANA LETTER BA	[3E8B | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_158)
{
    uint32_t const cps[3] = { 0x306F, 0x0334, 0x309A };

    // 306F 0334 309A;	
    // (は̴) HIRAGANA LETTER HA, COMBINING TILDE OVERLAY	[3E8B | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306F 0334 309A;	
    // (は̴) HIRAGANA LETTER HA, COMBINING TILDE OVERLAY	[3E8B | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_159)
{
    uint32_t const cps[3] = { 0x306F, 0x309A, 0x0334 };

    // 306F 309A 0334;	
    // (ぱ) HIRAGANA LETTER HA, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8B | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306F 309A 0334;	
    // (ぱ) HIRAGANA LETTER HA, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8B | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_160)
{
    uint32_t const cps[2] = { 0x3071, 0x0334 };

    // 3071 0334;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3071 0334;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_161)
{
    uint32_t const cps[3] = { 0x30CF, 0x0334, 0x309A };

    // 30CF 0334 309A;	
    // (ハ̴) KATAKANA LETTER HA, COMBINING TILDE OVERLAY	[3E8B | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CF 0334 309A;	
    // (ハ̴) KATAKANA LETTER HA, COMBINING TILDE OVERLAY	[3E8B | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_162)
{
    uint32_t const cps[3] = { 0x30CF, 0x309A, 0x0334 };

    // 30CF 309A 0334;	
    // (パ) KATAKANA LETTER HA, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8B | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CF 309A 0334;	
    // (パ) KATAKANA LETTER HA, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8B | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_163)
{
    uint32_t const cps[2] = { 0x30D1, 0x0334 };

    // 30D1 0334;	
    // (パ) KATAKANA LETTER PA	[3E8B | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D1 0334;	
    // (パ) KATAKANA LETTER PA	[3E8B | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8B, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_164)
{
    uint32_t const cps[2] = { 0x306F, 0x0021 };

    // 306F 0021;	
    // (は) HIRAGANA LETTER HA	[3E8B 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306F 0021;	
    // (は) HIRAGANA LETTER HA	[3E8B | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8B, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_165)
{
    uint32_t const cps[2] = { 0x31F5, 0x0021 };

    // 31F5 0021;	
    // (ㇵ) KATAKANA LETTER SMALL HA	[3E8B 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F5 0021;	
    // (ㇵ) KATAKANA LETTER SMALL HA	[3E8B | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8B, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_166)
{
    uint32_t const cps[2] = { 0x30CF, 0x0021 };

    // 30CF 0021;	
    // (ハ) KATAKANA LETTER HA	[3E8B 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CF 0021;	
    // (ハ) KATAKANA LETTER HA	[3E8B | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8B, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_167)
{
    uint32_t const cps[2] = { 0xFF8A, 0x0021 };

    // FF8A 0021;	
    // (ﾊ) HALFWIDTH KATAKANA LETTER HA	[3E8B 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8A 0021;	
    // (ﾊ) HALFWIDTH KATAKANA LETTER HA	[3E8B | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8B, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_168)
{
    uint32_t const cps[2] = { 0x32E9, 0x0021 };

    // 32E9 0021;	
    // (㋩) CIRCLED KATAKANA HA	[3E8B 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E9 0021;	
    // (㋩) CIRCLED KATAKANA HA	[3E8B | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8B, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_169)
{
    uint32_t const cps[2] = { 0x3070, 0x0021 };

    // 3070 0021;	
    // (ば) HIRAGANA LETTER BA	[3E8B 0261 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3070 0021;	
    // (ば) HIRAGANA LETTER BA	[3E8B | 0020 0037 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_170)
{
    uint32_t const cps[2] = { 0x30D0, 0x0021 };

    // 30D0 0021;	
    // (バ) KATAKANA LETTER BA	[3E8B 0261 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D0 0021;	
    // (バ) KATAKANA LETTER BA	[3E8B | 0020 0037 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_171)
{
    uint32_t const cps[2] = { 0x3071, 0x0021 };

    // 3071 0021;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B 0261 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3071 0021;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B | 0020 0038 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x0000, 0x0020, 0x0038, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_172)
{
    uint32_t const cps[2] = { 0x30D1, 0x0021 };

    // 30D1 0021;	
    // (パ) KATAKANA LETTER PA	[3E8B 0261 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D1 0021;	
    // (パ) KATAKANA LETTER PA	[3E8B | 0020 0038 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x0000, 0x0020, 0x0038, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_173)
{
    uint32_t const cps[2] = { 0x306F, 0x003F };

    // 306F 003F;	
    // (は) HIRAGANA LETTER HA	[3E8B 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306F 003F;	
    // (は) HIRAGANA LETTER HA	[3E8B | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8B, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_174)
{
    uint32_t const cps[2] = { 0x31F5, 0x003F };

    // 31F5 003F;	
    // (ㇵ) KATAKANA LETTER SMALL HA	[3E8B 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F5 003F;	
    // (ㇵ) KATAKANA LETTER SMALL HA	[3E8B | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8B, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_175)
{
    uint32_t const cps[2] = { 0x30CF, 0x003F };

    // 30CF 003F;	
    // (ハ) KATAKANA LETTER HA	[3E8B 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CF 003F;	
    // (ハ) KATAKANA LETTER HA	[3E8B | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8B, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_176)
{
    uint32_t const cps[2] = { 0xFF8A, 0x003F };

    // FF8A 003F;	
    // (ﾊ) HALFWIDTH KATAKANA LETTER HA	[3E8B 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8A 003F;	
    // (ﾊ) HALFWIDTH KATAKANA LETTER HA	[3E8B | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8B, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_177)
{
    uint32_t const cps[2] = { 0x32E9, 0x003F };

    // 32E9 003F;	
    // (㋩) CIRCLED KATAKANA HA	[3E8B 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E9 003F;	
    // (㋩) CIRCLED KATAKANA HA	[3E8B | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8B, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_178)
{
    uint32_t const cps[2] = { 0x3070, 0x003F };

    // 3070 003F;	
    // (ば) HIRAGANA LETTER BA	[3E8B 0267 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3070 003F;	
    // (ば) HIRAGANA LETTER BA	[3E8B | 0020 0037 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_179)
{
    uint32_t const cps[2] = { 0x30D0, 0x003F };

    // 30D0 003F;	
    // (バ) KATAKANA LETTER BA	[3E8B 0267 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D0 003F;	
    // (バ) KATAKANA LETTER BA	[3E8B | 0020 0037 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_180)
{
    uint32_t const cps[2] = { 0x3071, 0x003F };

    // 3071 003F;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B 0267 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3071 003F;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B | 0020 0038 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x0000, 0x0020, 0x0038, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_181)
{
    uint32_t const cps[2] = { 0x30D1, 0x003F };

    // 30D1 003F;	
    // (パ) KATAKANA LETTER PA	[3E8B 0267 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D1 003F;	
    // (パ) KATAKANA LETTER PA	[3E8B | 0020 0038 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x0000, 0x0020, 0x0038, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_182)
{
    uint32_t const cps[2] = { 0x332B, 0x0021 };

    // 332B 0021;	
    // (㌫) SQUARE PAASENTO	[3E8B 1C73 3E7F 3EA1 3E85 0261 | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8B, 0x1C73, 0x3E7F, 0x3EA1, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332B 0021;	
    // (㌫) SQUARE PAASENTO	[3E8B 1C73 3E7F 3EA1 3E85 | 0020 0038 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[27] = { 0x3E8B, 0x1C73, 0x3E7F, 0x3EA1, 0x3E85, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_183)
{
    uint32_t const cps[2] = { 0x332B, 0x003F };

    // 332B 003F;	
    // (㌫) SQUARE PAASENTO	[3E8B 1C73 3E7F 3EA1 3E85 0267 | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8B, 0x1C73, 0x3E7F, 0x3EA1, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332B 003F;	
    // (㌫) SQUARE PAASENTO	[3E8B 1C73 3E7F 3EA1 3E85 | 0020 0038 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[27] = { 0x3E8B, 0x1C73, 0x3E7F, 0x3EA1, 0x3E85, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_184)
{
    uint32_t const cps[2] = { 0x332B, 0x0061 };

    // 332B 0061;	
    // (㌫) SQUARE PAASENTO	[3E8B 1C73 3E7F 3EA1 3E85 1CAD | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8B, 0x1C73, 0x3E7F, 0x3EA1, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332B 0061;	
    // (㌫) SQUARE PAASENTO	[3E8B 1C73 3E7F 3EA1 3E85 1CAD | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8B, 0x1C73, 0x3E7F, 0x3EA1, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_185)
{
    uint32_t const cps[2] = { 0x332B, 0x0041 };

    // 332B 0041;	
    // (㌫) SQUARE PAASENTO	[3E8B 1C73 3E7F 3EA1 3E85 1CAD | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8B, 0x1C73, 0x3E7F, 0x3EA1, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332B 0041;	
    // (㌫) SQUARE PAASENTO	[3E8B 1C73 3E7F 3EA1 3E85 1CAD | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8B, 0x1C73, 0x3E7F, 0x3EA1, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_186)
{
    uint32_t const cps[2] = { 0x332B, 0x0062 };

    // 332B 0062;	
    // (㌫) SQUARE PAASENTO	[3E8B 1C73 3E7F 3EA1 3E85 1CC6 | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8B, 0x1C73, 0x3E7F, 0x3EA1, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332B 0062;	
    // (㌫) SQUARE PAASENTO	[3E8B 1C73 3E7F 3EA1 3E85 1CC6 | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8B, 0x1C73, 0x3E7F, 0x3EA1, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_187)
{
    uint32_t const cps[2] = { 0x332C, 0x0021 };

    // 332C 0021;	
    // (㌬) SQUARE PAATU	[3E8B 1C73 3E83 0261 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8B, 0x1C73, 0x3E83, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332C 0021;	
    // (㌬) SQUARE PAATU	[3E8B 1C73 3E83 | 0020 0038 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[19] = { 0x3E8B, 0x1C73, 0x3E83, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_188)
{
    uint32_t const cps[2] = { 0x332C, 0x003F };

    // 332C 003F;	
    // (㌬) SQUARE PAATU	[3E8B 1C73 3E83 0267 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8B, 0x1C73, 0x3E83, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332C 003F;	
    // (㌬) SQUARE PAATU	[3E8B 1C73 3E83 | 0020 0038 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[19] = { 0x3E8B, 0x1C73, 0x3E83, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_189)
{
    uint32_t const cps[2] = { 0x332C, 0x0061 };

    // 332C 0061;	
    // (㌬) SQUARE PAATU	[3E8B 1C73 3E83 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8B, 0x1C73, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332C 0061;	
    // (㌬) SQUARE PAATU	[3E8B 1C73 3E83 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8B, 0x1C73, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_190)
{
    uint32_t const cps[2] = { 0x332C, 0x0041 };

    // 332C 0041;	
    // (㌬) SQUARE PAATU	[3E8B 1C73 3E83 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8B, 0x1C73, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332C 0041;	
    // (㌬) SQUARE PAATU	[3E8B 1C73 3E83 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8B, 0x1C73, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_191)
{
    uint32_t const cps[2] = { 0x332C, 0x0062 };

    // 332C 0062;	
    // (㌬) SQUARE PAATU	[3E8B 1C73 3E83 1CC6 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8B, 0x1C73, 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332C 0062;	
    // (㌬) SQUARE PAATU	[3E8B 1C73 3E83 1CC6 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8B, 0x1C73, 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_192)
{
    uint32_t const cps[2] = { 0x332D, 0x0021 };

    // 332D 0021;	
    // (㌭) SQUARE BAARERU	[3E8B 1C73 3E9B 3E9A 0261 | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[19] = { 0x3E8B, 0x1C73, 0x3E9B, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332D 0021;	
    // (㌭) SQUARE BAARERU	[3E8B 1C73 3E9B 3E9A | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[23] = { 0x3E8B, 0x1C73, 0x3E9B, 0x3E9A, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_193)
{
    uint32_t const cps[2] = { 0x332D, 0x003F };

    // 332D 003F;	
    // (㌭) SQUARE BAARERU	[3E8B 1C73 3E9B 3E9A 0267 | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[19] = { 0x3E8B, 0x1C73, 0x3E9B, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332D 003F;	
    // (㌭) SQUARE BAARERU	[3E8B 1C73 3E9B 3E9A | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[23] = { 0x3E8B, 0x1C73, 0x3E9B, 0x3E9A, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_194)
{
    uint32_t const cps[2] = { 0x332D, 0x0061 };

    // 332D 0061;	
    // (㌭) SQUARE BAARERU	[3E8B 1C73 3E9B 3E9A 1CAD | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[19] = { 0x3E8B, 0x1C73, 0x3E9B, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332D 0061;	
    // (㌭) SQUARE BAARERU	[3E8B 1C73 3E9B 3E9A 1CAD | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[26] = { 0x3E8B, 0x1C73, 0x3E9B, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 26);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 26))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_195)
{
    uint32_t const cps[2] = { 0x332D, 0x0041 };

    // 332D 0041;	
    // (㌭) SQUARE BAARERU	[3E8B 1C73 3E9B 3E9A 1CAD | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[19] = { 0x3E8B, 0x1C73, 0x3E9B, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332D 0041;	
    // (㌭) SQUARE BAARERU	[3E8B 1C73 3E9B 3E9A 1CAD | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[26] = { 0x3E8B, 0x1C73, 0x3E9B, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 26);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 26))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_196)
{
    uint32_t const cps[2] = { 0x332D, 0x0062 };

    // 332D 0062;	
    // (㌭) SQUARE BAARERU	[3E8B 1C73 3E9B 3E9A 1CC6 | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[19] = { 0x3E8B, 0x1C73, 0x3E9B, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332D 0062;	
    // (㌭) SQUARE BAARERU	[3E8B 1C73 3E9B 3E9A 1CC6 | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[26] = { 0x3E8B, 0x1C73, 0x3E9B, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 26);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 26))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_197)
{
    uint32_t const cps[2] = { 0x306F, 0x0061 };

    // 306F 0061;	
    // (は) HIRAGANA LETTER HA	[3E8B 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306F 0061;	
    // (は) HIRAGANA LETTER HA	[3E8B 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_198)
{
    uint32_t const cps[2] = { 0x306F, 0x0041 };

    // 306F 0041;	
    // (は) HIRAGANA LETTER HA	[3E8B 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306F 0041;	
    // (は) HIRAGANA LETTER HA	[3E8B 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_199)
{
    uint32_t const cps[2] = { 0x31F5, 0x0061 };

    // 31F5 0061;	
    // (ㇵ) KATAKANA LETTER SMALL HA	[3E8B 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F5 0061;	
    // (ㇵ) KATAKANA LETTER SMALL HA	[3E8B 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_200)
{
    uint32_t const cps[2] = { 0x31F5, 0x0041 };

    // 31F5 0041;	
    // (ㇵ) KATAKANA LETTER SMALL HA	[3E8B 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F5 0041;	
    // (ㇵ) KATAKANA LETTER SMALL HA	[3E8B 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_201)
{
    uint32_t const cps[2] = { 0x30CF, 0x0061 };

    // 30CF 0061;	
    // (ハ) KATAKANA LETTER HA	[3E8B 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CF 0061;	
    // (ハ) KATAKANA LETTER HA	[3E8B 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_202)
{
    uint32_t const cps[2] = { 0x30CF, 0x0041 };

    // 30CF 0041;	
    // (ハ) KATAKANA LETTER HA	[3E8B 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CF 0041;	
    // (ハ) KATAKANA LETTER HA	[3E8B 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_203)
{
    uint32_t const cps[2] = { 0xFF8A, 0x0061 };

    // FF8A 0061;	
    // (ﾊ) HALFWIDTH KATAKANA LETTER HA	[3E8B 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8A 0061;	
    // (ﾊ) HALFWIDTH KATAKANA LETTER HA	[3E8B 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_204)
{
    uint32_t const cps[2] = { 0xFF8A, 0x0041 };

    // FF8A 0041;	
    // (ﾊ) HALFWIDTH KATAKANA LETTER HA	[3E8B 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8A 0041;	
    // (ﾊ) HALFWIDTH KATAKANA LETTER HA	[3E8B 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_205)
{
    uint32_t const cps[2] = { 0x32E9, 0x0061 };

    // 32E9 0061;	
    // (㋩) CIRCLED KATAKANA HA	[3E8B 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E9 0061;	
    // (㋩) CIRCLED KATAKANA HA	[3E8B 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_206)
{
    uint32_t const cps[2] = { 0x32E9, 0x0041 };

    // 32E9 0041;	
    // (㋩) CIRCLED KATAKANA HA	[3E8B 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E9 0041;	
    // (㋩) CIRCLED KATAKANA HA	[3E8B 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_207)
{
    uint32_t const cps[2] = { 0x3070, 0x0061 };

    // 3070 0061;	
    // (ば) HIRAGANA LETTER BA	[3E8B 1CAD | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3070 0061;	
    // (ば) HIRAGANA LETTER BA	[3E8B 1CAD | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_208)
{
    uint32_t const cps[2] = { 0x3070, 0x0041 };

    // 3070 0041;	
    // (ば) HIRAGANA LETTER BA	[3E8B 1CAD | 0020 0037 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3070 0041;	
    // (ば) HIRAGANA LETTER BA	[3E8B 1CAD | 0020 0037 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_209)
{
    uint32_t const cps[2] = { 0x30D0, 0x0061 };

    // 30D0 0061;	
    // (バ) KATAKANA LETTER BA	[3E8B 1CAD | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D0 0061;	
    // (バ) KATAKANA LETTER BA	[3E8B 1CAD | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_210)
{
    uint32_t const cps[2] = { 0x30D0, 0x0041 };

    // 30D0 0041;	
    // (バ) KATAKANA LETTER BA	[3E8B 1CAD | 0020 0037 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D0 0041;	
    // (バ) KATAKANA LETTER BA	[3E8B 1CAD | 0020 0037 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_211)
{
    uint32_t const cps[2] = { 0x3071, 0x0061 };

    // 3071 0061;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B 1CAD | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3071 0061;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B 1CAD | 0020 0038 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_212)
{
    uint32_t const cps[2] = { 0x3071, 0x0041 };

    // 3071 0041;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B 1CAD | 0020 0038 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3071 0041;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B 1CAD | 0020 0038 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_213)
{
    uint32_t const cps[2] = { 0x30D1, 0x0061 };

    // 30D1 0061;	
    // (パ) KATAKANA LETTER PA	[3E8B 1CAD | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D1 0061;	
    // (パ) KATAKANA LETTER PA	[3E8B 1CAD | 0020 0038 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_214)
{
    uint32_t const cps[2] = { 0x30D1, 0x0041 };

    // 30D1 0041;	
    // (パ) KATAKANA LETTER PA	[3E8B 1CAD | 0020 0038 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D1 0041;	
    // (パ) KATAKANA LETTER PA	[3E8B 1CAD | 0020 0038 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_215)
{
    uint32_t const cps[2] = { 0x306F, 0x0062 };

    // 306F 0062;	
    // (は) HIRAGANA LETTER HA	[3E8B 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 306F 0062;	
    // (は) HIRAGANA LETTER HA	[3E8B 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_216)
{
    uint32_t const cps[2] = { 0x31F5, 0x0062 };

    // 31F5 0062;	
    // (ㇵ) KATAKANA LETTER SMALL HA	[3E8B 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F5 0062;	
    // (ㇵ) KATAKANA LETTER SMALL HA	[3E8B 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_217)
{
    uint32_t const cps[2] = { 0x30CF, 0x0062 };

    // 30CF 0062;	
    // (ハ) KATAKANA LETTER HA	[3E8B 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30CF 0062;	
    // (ハ) KATAKANA LETTER HA	[3E8B 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_218)
{
    uint32_t const cps[2] = { 0xFF8A, 0x0062 };

    // FF8A 0062;	
    // (ﾊ) HALFWIDTH KATAKANA LETTER HA	[3E8B 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8A 0062;	
    // (ﾊ) HALFWIDTH KATAKANA LETTER HA	[3E8B 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_219)
{
    uint32_t const cps[2] = { 0x32E9, 0x0062 };

    // 32E9 0062;	
    // (㋩) CIRCLED KATAKANA HA	[3E8B 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32E9 0062;	
    // (㋩) CIRCLED KATAKANA HA	[3E8B 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_220)
{
    uint32_t const cps[2] = { 0x3070, 0x0062 };

    // 3070 0062;	
    // (ば) HIRAGANA LETTER BA	[3E8B 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3070 0062;	
    // (ば) HIRAGANA LETTER BA	[3E8B 1CC6 | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_221)
{
    uint32_t const cps[2] = { 0x30D0, 0x0062 };

    // 30D0 0062;	
    // (バ) KATAKANA LETTER BA	[3E8B 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D0 0062;	
    // (バ) KATAKANA LETTER BA	[3E8B 1CC6 | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_222)
{
    uint32_t const cps[2] = { 0x3071, 0x0062 };

    // 3071 0062;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B 1CC6 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3071 0062;	
    // (ぱ) HIRAGANA LETTER PA	[3E8B 1CC6 | 0020 0038 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_223)
{
    uint32_t const cps[2] = { 0x30D1, 0x0062 };

    // 30D1 0062;	
    // (パ) KATAKANA LETTER PA	[3E8B 1CC6 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D1 0062;	
    // (パ) KATAKANA LETTER PA	[3E8B 1CC6 | 0020 0038 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_224)
{
    uint32_t const cps[2] = { 0x332A, 0x0021 };

    // 332A 0021;	
    // (㌪) SQUARE HAITU	[3E8B 3E72 3E83 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8B, 0x3E72, 0x3E83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332A 0021;	
    // (㌪) SQUARE HAITU	[3E8B 3E72 3E83 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x3E8B, 0x3E72, 0x3E83, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_225)
{
    uint32_t const cps[2] = { 0x332A, 0x003F };

    // 332A 003F;	
    // (㌪) SQUARE HAITU	[3E8B 3E72 3E83 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8B, 0x3E72, 0x3E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332A 003F;	
    // (㌪) SQUARE HAITU	[3E8B 3E72 3E83 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[16] = { 0x3E8B, 0x3E72, 0x3E83, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_226)
{
    uint32_t const cps[2] = { 0x332A, 0x0061 };

    // 332A 0061;	
    // (㌪) SQUARE HAITU	[3E8B 3E72 3E83 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8B, 0x3E72, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332A 0061;	
    // (㌪) SQUARE HAITU	[3E8B 3E72 3E83 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8B, 0x3E72, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_227)
{
    uint32_t const cps[2] = { 0x332A, 0x0041 };

    // 332A 0041;	
    // (㌪) SQUARE HAITU	[3E8B 3E72 3E83 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8B, 0x3E72, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332A 0041;	
    // (㌪) SQUARE HAITU	[3E8B 3E72 3E83 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8B, 0x3E72, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_228)
{
    uint32_t const cps[2] = { 0x332A, 0x0062 };

    // 332A 0062;	
    // (㌪) SQUARE HAITU	[3E8B 3E72 3E83 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8B, 0x3E72, 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332A 0062;	
    // (㌪) SQUARE HAITU	[3E8B 3E72 3E83 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8B, 0x3E72, 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_229)
{
    uint32_t const cps[3] = { 0x3072, 0x0334, 0x3099 };

    // 3072 0334 3099;	
    // (ひ̴) HIRAGANA LETTER HI, COMBINING TILDE OVERLAY	[3E8C | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3072 0334 3099;	
    // (ひ̴) HIRAGANA LETTER HI, COMBINING TILDE OVERLAY	[3E8C | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_230)
{
    uint32_t const cps[3] = { 0x3072, 0x3099, 0x0334 };

    // 3072 3099 0334;	
    // (び) HIRAGANA LETTER HI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8C | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3072 3099 0334;	
    // (び) HIRAGANA LETTER HI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8C | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_231)
{
    uint32_t const cps[2] = { 0x3073, 0x0334 };

    // 3073 0334;	
    // (び) HIRAGANA LETTER BI	[3E8C | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3073 0334;	
    // (び) HIRAGANA LETTER BI	[3E8C | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_232)
{
    uint32_t const cps[3] = { 0x30D2, 0x0334, 0x3099 };

    // 30D2 0334 3099;	
    // (ヒ̴) KATAKANA LETTER HI, COMBINING TILDE OVERLAY	[3E8C | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D2 0334 3099;	
    // (ヒ̴) KATAKANA LETTER HI, COMBINING TILDE OVERLAY	[3E8C | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_233)
{
    uint32_t const cps[3] = { 0x30D2, 0x3099, 0x0334 };

    // 30D2 3099 0334;	
    // (ビ) KATAKANA LETTER HI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8C | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D2 3099 0334;	
    // (ビ) KATAKANA LETTER HI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8C | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_234)
{
    uint32_t const cps[2] = { 0x30D3, 0x0334 };

    // 30D3 0334;	
    // (ビ) KATAKANA LETTER BI	[3E8C | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D3 0334;	
    // (ビ) KATAKANA LETTER BI	[3E8C | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_235)
{
    uint32_t const cps[3] = { 0x3072, 0x0334, 0x309A };

    // 3072 0334 309A;	
    // (ひ̴) HIRAGANA LETTER HI, COMBINING TILDE OVERLAY	[3E8C | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3072 0334 309A;	
    // (ひ̴) HIRAGANA LETTER HI, COMBINING TILDE OVERLAY	[3E8C | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_236)
{
    uint32_t const cps[3] = { 0x3072, 0x309A, 0x0334 };

    // 3072 309A 0334;	
    // (ぴ) HIRAGANA LETTER HI, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8C | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3072 309A 0334;	
    // (ぴ) HIRAGANA LETTER HI, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8C | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_237)
{
    uint32_t const cps[2] = { 0x3074, 0x0334 };

    // 3074 0334;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3074 0334;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_238)
{
    uint32_t const cps[3] = { 0x30D2, 0x0334, 0x309A };

    // 30D2 0334 309A;	
    // (ヒ̴) KATAKANA LETTER HI, COMBINING TILDE OVERLAY	[3E8C | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D2 0334 309A;	
    // (ヒ̴) KATAKANA LETTER HI, COMBINING TILDE OVERLAY	[3E8C | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_239)
{
    uint32_t const cps[3] = { 0x30D2, 0x309A, 0x0334 };

    // 30D2 309A 0334;	
    // (ピ) KATAKANA LETTER HI, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8C | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D2 309A 0334;	
    // (ピ) KATAKANA LETTER HI, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8C | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_240)
{
    uint32_t const cps[2] = { 0x30D4, 0x0334 };

    // 30D4 0334;	
    // (ピ) KATAKANA LETTER PI	[3E8C | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D4 0334;	
    // (ピ) KATAKANA LETTER PI	[3E8C | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8C, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_241)
{
    uint32_t const cps[2] = { 0x3072, 0x0021 };

    // 3072 0021;	
    // (ひ) HIRAGANA LETTER HI	[3E8C 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3072 0021;	
    // (ひ) HIRAGANA LETTER HI	[3E8C | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8C, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_242)
{
    uint32_t const cps[2] = { 0x31F6, 0x0021 };

    // 31F6 0021;	
    // (ㇶ) KATAKANA LETTER SMALL HI	[3E8C 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F6 0021;	
    // (ㇶ) KATAKANA LETTER SMALL HI	[3E8C | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8C, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_243)
{
    uint32_t const cps[2] = { 0x30D2, 0x0021 };

    // 30D2 0021;	
    // (ヒ) KATAKANA LETTER HI	[3E8C 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D2 0021;	
    // (ヒ) KATAKANA LETTER HI	[3E8C | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8C, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_244)
{
    uint32_t const cps[2] = { 0xFF8B, 0x0021 };

    // FF8B 0021;	
    // (ﾋ) HALFWIDTH KATAKANA LETTER HI	[3E8C 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8B 0021;	
    // (ﾋ) HALFWIDTH KATAKANA LETTER HI	[3E8C | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8C, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_245)
{
    uint32_t const cps[2] = { 0x32EA, 0x0021 };

    // 32EA 0021;	
    // (㋪) CIRCLED KATAKANA HI	[3E8C 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EA 0021;	
    // (㋪) CIRCLED KATAKANA HI	[3E8C | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8C, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_246)
{
    uint32_t const cps[2] = { 0x3073, 0x0021 };

    // 3073 0021;	
    // (び) HIRAGANA LETTER BI	[3E8C 0261 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3073 0021;	
    // (び) HIRAGANA LETTER BI	[3E8C | 0020 0037 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_247)
{
    uint32_t const cps[2] = { 0x30D3, 0x0021 };

    // 30D3 0021;	
    // (ビ) KATAKANA LETTER BI	[3E8C 0261 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D3 0021;	
    // (ビ) KATAKANA LETTER BI	[3E8C | 0020 0037 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_248)
{
    uint32_t const cps[2] = { 0x3074, 0x0021 };

    // 3074 0021;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C 0261 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3074 0021;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C | 0020 0038 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x0000, 0x0020, 0x0038, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_249)
{
    uint32_t const cps[2] = { 0x30D4, 0x0021 };

    // 30D4 0021;	
    // (ピ) KATAKANA LETTER PI	[3E8C 0261 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D4 0021;	
    // (ピ) KATAKANA LETTER PI	[3E8C | 0020 0038 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x0000, 0x0020, 0x0038, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_250)
{
    uint32_t const cps[2] = { 0x3072, 0x003F };

    // 3072 003F;	
    // (ひ) HIRAGANA LETTER HI	[3E8C 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3072 003F;	
    // (ひ) HIRAGANA LETTER HI	[3E8C | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8C, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_251)
{
    uint32_t const cps[2] = { 0x31F6, 0x003F };

    // 31F6 003F;	
    // (ㇶ) KATAKANA LETTER SMALL HI	[3E8C 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F6 003F;	
    // (ㇶ) KATAKANA LETTER SMALL HI	[3E8C | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8C, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_252)
{
    uint32_t const cps[2] = { 0x30D2, 0x003F };

    // 30D2 003F;	
    // (ヒ) KATAKANA LETTER HI	[3E8C 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D2 003F;	
    // (ヒ) KATAKANA LETTER HI	[3E8C | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8C, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_253)
{
    uint32_t const cps[2] = { 0xFF8B, 0x003F };

    // FF8B 003F;	
    // (ﾋ) HALFWIDTH KATAKANA LETTER HI	[3E8C 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8B 003F;	
    // (ﾋ) HALFWIDTH KATAKANA LETTER HI	[3E8C | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8C, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_254)
{
    uint32_t const cps[2] = { 0x32EA, 0x003F };

    // 32EA 003F;	
    // (㋪) CIRCLED KATAKANA HI	[3E8C 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EA 003F;	
    // (㋪) CIRCLED KATAKANA HI	[3E8C | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8C, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_255)
{
    uint32_t const cps[2] = { 0x3073, 0x003F };

    // 3073 003F;	
    // (び) HIRAGANA LETTER BI	[3E8C 0267 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3073 003F;	
    // (び) HIRAGANA LETTER BI	[3E8C | 0020 0037 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_256)
{
    uint32_t const cps[2] = { 0x30D3, 0x003F };

    // 30D3 003F;	
    // (ビ) KATAKANA LETTER BI	[3E8C 0267 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D3 003F;	
    // (ビ) KATAKANA LETTER BI	[3E8C | 0020 0037 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_257)
{
    uint32_t const cps[2] = { 0x3074, 0x003F };

    // 3074 003F;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C 0267 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3074 003F;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C | 0020 0038 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x0000, 0x0020, 0x0038, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_258)
{
    uint32_t const cps[2] = { 0x30D4, 0x003F };

    // 30D4 003F;	
    // (ピ) KATAKANA LETTER PI	[3E8C 0267 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D4 003F;	
    // (ピ) KATAKANA LETTER PI	[3E8C | 0020 0038 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x0000, 0x0020, 0x0038, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_259)
{
    uint32_t const cps[2] = { 0x3072, 0x0061 };

    // 3072 0061;	
    // (ひ) HIRAGANA LETTER HI	[3E8C 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3072 0061;	
    // (ひ) HIRAGANA LETTER HI	[3E8C 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_260)
{
    uint32_t const cps[2] = { 0x3072, 0x0041 };

    // 3072 0041;	
    // (ひ) HIRAGANA LETTER HI	[3E8C 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3072 0041;	
    // (ひ) HIRAGANA LETTER HI	[3E8C 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_261)
{
    uint32_t const cps[2] = { 0x31F6, 0x0061 };

    // 31F6 0061;	
    // (ㇶ) KATAKANA LETTER SMALL HI	[3E8C 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F6 0061;	
    // (ㇶ) KATAKANA LETTER SMALL HI	[3E8C 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_262)
{
    uint32_t const cps[2] = { 0x31F6, 0x0041 };

    // 31F6 0041;	
    // (ㇶ) KATAKANA LETTER SMALL HI	[3E8C 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F6 0041;	
    // (ㇶ) KATAKANA LETTER SMALL HI	[3E8C 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_263)
{
    uint32_t const cps[2] = { 0x30D2, 0x0061 };

    // 30D2 0061;	
    // (ヒ) KATAKANA LETTER HI	[3E8C 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D2 0061;	
    // (ヒ) KATAKANA LETTER HI	[3E8C 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_264)
{
    uint32_t const cps[2] = { 0x30D2, 0x0041 };

    // 30D2 0041;	
    // (ヒ) KATAKANA LETTER HI	[3E8C 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D2 0041;	
    // (ヒ) KATAKANA LETTER HI	[3E8C 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_265)
{
    uint32_t const cps[2] = { 0xFF8B, 0x0061 };

    // FF8B 0061;	
    // (ﾋ) HALFWIDTH KATAKANA LETTER HI	[3E8C 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8B 0061;	
    // (ﾋ) HALFWIDTH KATAKANA LETTER HI	[3E8C 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_266)
{
    uint32_t const cps[2] = { 0xFF8B, 0x0041 };

    // FF8B 0041;	
    // (ﾋ) HALFWIDTH KATAKANA LETTER HI	[3E8C 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8B 0041;	
    // (ﾋ) HALFWIDTH KATAKANA LETTER HI	[3E8C 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_267)
{
    uint32_t const cps[2] = { 0x32EA, 0x0061 };

    // 32EA 0061;	
    // (㋪) CIRCLED KATAKANA HI	[3E8C 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EA 0061;	
    // (㋪) CIRCLED KATAKANA HI	[3E8C 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_268)
{
    uint32_t const cps[2] = { 0x32EA, 0x0041 };

    // 32EA 0041;	
    // (㋪) CIRCLED KATAKANA HI	[3E8C 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EA 0041;	
    // (㋪) CIRCLED KATAKANA HI	[3E8C 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_269)
{
    uint32_t const cps[2] = { 0x3073, 0x0061 };

    // 3073 0061;	
    // (び) HIRAGANA LETTER BI	[3E8C 1CAD | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3073 0061;	
    // (び) HIRAGANA LETTER BI	[3E8C 1CAD | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_270)
{
    uint32_t const cps[2] = { 0x3073, 0x0041 };

    // 3073 0041;	
    // (び) HIRAGANA LETTER BI	[3E8C 1CAD | 0020 0037 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3073 0041;	
    // (び) HIRAGANA LETTER BI	[3E8C 1CAD | 0020 0037 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_271)
{
    uint32_t const cps[2] = { 0x30D3, 0x0061 };

    // 30D3 0061;	
    // (ビ) KATAKANA LETTER BI	[3E8C 1CAD | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D3 0061;	
    // (ビ) KATAKANA LETTER BI	[3E8C 1CAD | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_272)
{
    uint32_t const cps[2] = { 0x30D3, 0x0041 };

    // 30D3 0041;	
    // (ビ) KATAKANA LETTER BI	[3E8C 1CAD | 0020 0037 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D3 0041;	
    // (ビ) KATAKANA LETTER BI	[3E8C 1CAD | 0020 0037 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_273)
{
    uint32_t const cps[2] = { 0x3074, 0x0061 };

    // 3074 0061;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C 1CAD | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3074 0061;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C 1CAD | 0020 0038 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_274)
{
    uint32_t const cps[2] = { 0x3074, 0x0041 };

    // 3074 0041;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C 1CAD | 0020 0038 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3074 0041;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C 1CAD | 0020 0038 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_275)
{
    uint32_t const cps[2] = { 0x30D4, 0x0061 };

    // 30D4 0061;	
    // (ピ) KATAKANA LETTER PI	[3E8C 1CAD | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D4 0061;	
    // (ピ) KATAKANA LETTER PI	[3E8C 1CAD | 0020 0038 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_276)
{
    uint32_t const cps[2] = { 0x30D4, 0x0041 };

    // 30D4 0041;	
    // (ピ) KATAKANA LETTER PI	[3E8C 1CAD | 0020 0038 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D4 0041;	
    // (ピ) KATAKANA LETTER PI	[3E8C 1CAD | 0020 0038 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_277)
{
    uint32_t const cps[2] = { 0x3072, 0x0062 };

    // 3072 0062;	
    // (ひ) HIRAGANA LETTER HI	[3E8C 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3072 0062;	
    // (ひ) HIRAGANA LETTER HI	[3E8C 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_278)
{
    uint32_t const cps[2] = { 0x31F6, 0x0062 };

    // 31F6 0062;	
    // (ㇶ) KATAKANA LETTER SMALL HI	[3E8C 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F6 0062;	
    // (ㇶ) KATAKANA LETTER SMALL HI	[3E8C 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_279)
{
    uint32_t const cps[2] = { 0x30D2, 0x0062 };

    // 30D2 0062;	
    // (ヒ) KATAKANA LETTER HI	[3E8C 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D2 0062;	
    // (ヒ) KATAKANA LETTER HI	[3E8C 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_280)
{
    uint32_t const cps[2] = { 0xFF8B, 0x0062 };

    // FF8B 0062;	
    // (ﾋ) HALFWIDTH KATAKANA LETTER HI	[3E8C 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8B 0062;	
    // (ﾋ) HALFWIDTH KATAKANA LETTER HI	[3E8C 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_281)
{
    uint32_t const cps[2] = { 0x32EA, 0x0062 };

    // 32EA 0062;	
    // (㋪) CIRCLED KATAKANA HI	[3E8C 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EA 0062;	
    // (㋪) CIRCLED KATAKANA HI	[3E8C 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_282)
{
    uint32_t const cps[2] = { 0x3073, 0x0062 };

    // 3073 0062;	
    // (び) HIRAGANA LETTER BI	[3E8C 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3073 0062;	
    // (び) HIRAGANA LETTER BI	[3E8C 1CC6 | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_283)
{
    uint32_t const cps[2] = { 0x30D3, 0x0062 };

    // 30D3 0062;	
    // (ビ) KATAKANA LETTER BI	[3E8C 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D3 0062;	
    // (ビ) KATAKANA LETTER BI	[3E8C 1CC6 | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_284)
{
    uint32_t const cps[2] = { 0x3074, 0x0062 };

    // 3074 0062;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C 1CC6 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3074 0062;	
    // (ぴ) HIRAGANA LETTER PI	[3E8C 1CC6 | 0020 0038 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_285)
{
    uint32_t const cps[2] = { 0x30D4, 0x0062 };

    // 30D4 0062;	
    // (ピ) KATAKANA LETTER PI	[3E8C 1CC6 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D4 0062;	
    // (ピ) KATAKANA LETTER PI	[3E8C 1CC6 | 0020 0038 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_286)
{
    uint32_t const cps[2] = { 0x332E, 0x0021 };

    // 332E 0021;	
    // (㌮) SQUARE PIASUTORU	[3E8C 3E71 3E7E 3E85 3E9A 0261 | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8C, 0x3E71, 0x3E7E, 0x3E85, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332E 0021;	
    // (㌮) SQUARE PIASUTORU	[3E8C 3E71 3E7E 3E85 3E9A | 0020 0038 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[27] = { 0x3E8C, 0x3E71, 0x3E7E, 0x3E85, 0x3E9A, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_287)
{
    uint32_t const cps[2] = { 0x332E, 0x003F };

    // 332E 003F;	
    // (㌮) SQUARE PIASUTORU	[3E8C 3E71 3E7E 3E85 3E9A 0267 | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8C, 0x3E71, 0x3E7E, 0x3E85, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332E 003F;	
    // (㌮) SQUARE PIASUTORU	[3E8C 3E71 3E7E 3E85 3E9A | 0020 0038 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[27] = { 0x3E8C, 0x3E71, 0x3E7E, 0x3E85, 0x3E9A, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_288)
{
    uint32_t const cps[2] = { 0x332E, 0x0061 };

    // 332E 0061;	
    // (㌮) SQUARE PIASUTORU	[3E8C 3E71 3E7E 3E85 3E9A 1CAD | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8C, 0x3E71, 0x3E7E, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332E 0061;	
    // (㌮) SQUARE PIASUTORU	[3E8C 3E71 3E7E 3E85 3E9A 1CAD | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8C, 0x3E71, 0x3E7E, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_289)
{
    uint32_t const cps[2] = { 0x332E, 0x0041 };

    // 332E 0041;	
    // (㌮) SQUARE PIASUTORU	[3E8C 3E71 3E7E 3E85 3E9A 1CAD | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8C, 0x3E71, 0x3E7E, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332E 0041;	
    // (㌮) SQUARE PIASUTORU	[3E8C 3E71 3E7E 3E85 3E9A 1CAD | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8C, 0x3E71, 0x3E7E, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_290)
{
    uint32_t const cps[2] = { 0x332E, 0x0062 };

    // 332E 0062;	
    // (㌮) SQUARE PIASUTORU	[3E8C 3E71 3E7E 3E85 3E9A 1CC6 | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8C, 0x3E71, 0x3E7E, 0x3E85, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332E 0062;	
    // (㌮) SQUARE PIASUTORU	[3E8C 3E71 3E7E 3E85 3E9A 1CC6 | 0020 0038 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8C, 0x3E71, 0x3E7E, 0x3E85, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_291)
{
    uint32_t const cps[2] = { 0x332F, 0x0021 };

    // 332F 0021;	
    // (㌯) SQUARE PIKURU	[3E8C 3E79 3E9A 0261 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8C, 0x3E79, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332F 0021;	
    // (㌯) SQUARE PIKURU	[3E8C 3E79 3E9A | 0020 0038 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[19] = { 0x3E8C, 0x3E79, 0x3E9A, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_292)
{
    uint32_t const cps[2] = { 0x332F, 0x003F };

    // 332F 003F;	
    // (㌯) SQUARE PIKURU	[3E8C 3E79 3E9A 0267 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8C, 0x3E79, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332F 003F;	
    // (㌯) SQUARE PIKURU	[3E8C 3E79 3E9A | 0020 0038 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[19] = { 0x3E8C, 0x3E79, 0x3E9A, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_293)
{
    uint32_t const cps[2] = { 0x332F, 0x0061 };

    // 332F 0061;	
    // (㌯) SQUARE PIKURU	[3E8C 3E79 3E9A 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8C, 0x3E79, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332F 0061;	
    // (㌯) SQUARE PIKURU	[3E8C 3E79 3E9A 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8C, 0x3E79, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_294)
{
    uint32_t const cps[2] = { 0x332F, 0x0041 };

    // 332F 0041;	
    // (㌯) SQUARE PIKURU	[3E8C 3E79 3E9A 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8C, 0x3E79, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332F 0041;	
    // (㌯) SQUARE PIKURU	[3E8C 3E79 3E9A 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8C, 0x3E79, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_295)
{
    uint32_t const cps[2] = { 0x332F, 0x0062 };

    // 332F 0062;	
    // (㌯) SQUARE PIKURU	[3E8C 3E79 3E9A 1CC6 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8C, 0x3E79, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 332F 0062;	
    // (㌯) SQUARE PIKURU	[3E8C 3E79 3E9A 1CC6 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8C, 0x3E79, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_296)
{
    uint32_t const cps[2] = { 0x3330, 0x0021 };

    // 3330 0021;	
    // (㌰) SQUARE PIKO	[3E8C 3E7B 0261 | 0020 0038 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8C, 0x3E7B, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3330 0021;	
    // (㌰) SQUARE PIKO	[3E8C 3E7B | 0020 0038 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[15] = { 0x3E8C, 0x3E7B, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_297)
{
    uint32_t const cps[2] = { 0x3330, 0x003F };

    // 3330 003F;	
    // (㌰) SQUARE PIKO	[3E8C 3E7B 0267 | 0020 0038 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8C, 0x3E7B, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3330 003F;	
    // (㌰) SQUARE PIKO	[3E8C 3E7B | 0020 0038 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[15] = { 0x3E8C, 0x3E7B, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_298)
{
    uint32_t const cps[2] = { 0x3330, 0x0061 };

    // 3330 0061;	
    // (㌰) SQUARE PIKO	[3E8C 3E7B 1CAD | 0020 0038 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8C, 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3330 0061;	
    // (㌰) SQUARE PIKO	[3E8C 3E7B 1CAD | 0020 0038 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E8C, 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_299)
{
    uint32_t const cps[2] = { 0x3330, 0x0041 };

    // 3330 0041;	
    // (㌰) SQUARE PIKO	[3E8C 3E7B 1CAD | 0020 0038 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8C, 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3330 0041;	
    // (㌰) SQUARE PIKO	[3E8C 3E7B 1CAD | 0020 0038 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E8C, 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_300)
{
    uint32_t const cps[2] = { 0x3330, 0x0062 };

    // 3330 0062;	
    // (㌰) SQUARE PIKO	[3E8C 3E7B 1CC6 | 0020 0038 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8C, 0x3E7B, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3330 0062;	
    // (㌰) SQUARE PIKO	[3E8C 3E7B 1CC6 | 0020 0038 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E8C, 0x3E7B, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_301)
{
    uint32_t const cps[2] = { 0x3331, 0x0021 };

    // 3331 0021;	
    // (㌱) SQUARE BIRU	[3E8C 3E9A 0261 | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8C, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3331 0021;	
    // (㌱) SQUARE BIRU	[3E8C 3E9A | 0020 0037 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[15] = { 0x3E8C, 0x3E9A, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_302)
{
    uint32_t const cps[2] = { 0x3331, 0x003F };

    // 3331 003F;	
    // (㌱) SQUARE BIRU	[3E8C 3E9A 0267 | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8C, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3331 003F;	
    // (㌱) SQUARE BIRU	[3E8C 3E9A | 0020 0037 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[15] = { 0x3E8C, 0x3E9A, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_303)
{
    uint32_t const cps[2] = { 0x3331, 0x0061 };

    // 3331 0061;	
    // (㌱) SQUARE BIRU	[3E8C 3E9A 1CAD | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8C, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3331 0061;	
    // (㌱) SQUARE BIRU	[3E8C 3E9A 1CAD | 0020 0037 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E8C, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_304)
{
    uint32_t const cps[2] = { 0x3331, 0x0041 };

    // 3331 0041;	
    // (㌱) SQUARE BIRU	[3E8C 3E9A 1CAD | 0020 0037 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8C, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3331 0041;	
    // (㌱) SQUARE BIRU	[3E8C 3E9A 1CAD | 0020 0037 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E8C, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_305)
{
    uint32_t const cps[2] = { 0x3331, 0x0062 };

    // 3331 0062;	
    // (㌱) SQUARE BIRU	[3E8C 3E9A 1CC6 | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8C, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3331 0062;	
    // (㌱) SQUARE BIRU	[3E8C 3E9A 1CC6 | 0020 0037 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E8C, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_306)
{
    uint32_t const cps[3] = { 0x3075, 0x0334, 0x3099 };

    // 3075 0334 3099;	
    // (ふ̴) HIRAGANA LETTER HU, COMBINING TILDE OVERLAY	[3E8D | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3075 0334 3099;	
    // (ふ̴) HIRAGANA LETTER HU, COMBINING TILDE OVERLAY	[3E8D | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_307)
{
    uint32_t const cps[3] = { 0x3075, 0x3099, 0x0334 };

    // 3075 3099 0334;	
    // (ぶ) HIRAGANA LETTER HU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8D | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3075 3099 0334;	
    // (ぶ) HIRAGANA LETTER HU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8D | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_308)
{
    uint32_t const cps[2] = { 0x3076, 0x0334 };

    // 3076 0334;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3076 0334;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_309)
{
    uint32_t const cps[3] = { 0x30D5, 0x0334, 0x3099 };

    // 30D5 0334 3099;	
    // (フ̴) KATAKANA LETTER HU, COMBINING TILDE OVERLAY	[3E8D | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D5 0334 3099;	
    // (フ̴) KATAKANA LETTER HU, COMBINING TILDE OVERLAY	[3E8D | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_310)
{
    uint32_t const cps[3] = { 0x30D5, 0x3099, 0x0334 };

    // 30D5 3099 0334;	
    // (ブ) KATAKANA LETTER HU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8D | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D5 3099 0334;	
    // (ブ) KATAKANA LETTER HU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8D | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_311)
{
    uint32_t const cps[2] = { 0x30D6, 0x0334 };

    // 30D6 0334;	
    // (ブ) KATAKANA LETTER BU	[3E8D | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D6 0334;	
    // (ブ) KATAKANA LETTER BU	[3E8D | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_312)
{
    uint32_t const cps[3] = { 0x3075, 0x0334, 0x309A };

    // 3075 0334 309A;	
    // (ふ̴) HIRAGANA LETTER HU, COMBINING TILDE OVERLAY	[3E8D | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3075 0334 309A;	
    // (ふ̴) HIRAGANA LETTER HU, COMBINING TILDE OVERLAY	[3E8D | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_313)
{
    uint32_t const cps[3] = { 0x3075, 0x309A, 0x0334 };

    // 3075 309A 0334;	
    // (ぷ) HIRAGANA LETTER HU, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8D | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3075 309A 0334;	
    // (ぷ) HIRAGANA LETTER HU, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8D | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_314)
{
    uint32_t const cps[2] = { 0x3077, 0x0334 };

    // 3077 0334;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3077 0334;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_315)
{
    uint32_t const cps[3] = { 0x30D5, 0x0334, 0x309A };

    // 30D5 0334 309A;	
    // (フ̴) KATAKANA LETTER HU, COMBINING TILDE OVERLAY	[3E8D | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D5 0334 309A;	
    // (フ̴) KATAKANA LETTER HU, COMBINING TILDE OVERLAY	[3E8D | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_316)
{
    uint32_t const cps[3] = { 0x30D5, 0x309A, 0x0334 };

    // 30D5 309A 0334;	
    // (プ) KATAKANA LETTER HU, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8D | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D5 309A 0334;	
    // (プ) KATAKANA LETTER HU, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8D | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_317)
{
    uint32_t const cps[2] = { 0x30D7, 0x0334 };

    // 30D7 0334;	
    // (プ) KATAKANA LETTER PU	[3E8D | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D7 0334;	
    // (プ) KATAKANA LETTER PU	[3E8D | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8D, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_318)
{
    uint32_t const cps[2] = { 0x3075, 0x0021 };

    // 3075 0021;	
    // (ふ) HIRAGANA LETTER HU	[3E8D 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3075 0021;	
    // (ふ) HIRAGANA LETTER HU	[3E8D | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8D, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_319)
{
    uint32_t const cps[2] = { 0x31F7, 0x0021 };

    // 31F7 0021;	
    // (ㇷ) KATAKANA LETTER SMALL HU	[3E8D 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F7 0021;	
    // (ㇷ) KATAKANA LETTER SMALL HU	[3E8D | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8D, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_320)
{
    uint32_t const cps[2] = { 0x30D5, 0x0021 };

    // 30D5 0021;	
    // (フ) KATAKANA LETTER HU	[3E8D 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D5 0021;	
    // (フ) KATAKANA LETTER HU	[3E8D | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8D, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_321)
{
    uint32_t const cps[2] = { 0xFF8C, 0x0021 };

    // FF8C 0021;	
    // (ﾌ) HALFWIDTH KATAKANA LETTER HU	[3E8D 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8C 0021;	
    // (ﾌ) HALFWIDTH KATAKANA LETTER HU	[3E8D | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8D, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_322)
{
    uint32_t const cps[2] = { 0x32EB, 0x0021 };

    // 32EB 0021;	
    // (㋫) CIRCLED KATAKANA HU	[3E8D 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EB 0021;	
    // (㋫) CIRCLED KATAKANA HU	[3E8D | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8D, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_323)
{
    uint32_t const cps[2] = { 0x3076, 0x0021 };

    // 3076 0021;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D 0261 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3076 0021;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D | 0020 0037 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_324)
{
    uint32_t const cps[2] = { 0x30D6, 0x0021 };

    // 30D6 0021;	
    // (ブ) KATAKANA LETTER BU	[3E8D 0261 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D6 0021;	
    // (ブ) KATAKANA LETTER BU	[3E8D | 0020 0037 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_325)
{
    uint32_t const cps[2] = { 0x3077, 0x0021 };

    // 3077 0021;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D 0261 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3077 0021;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D | 0020 0038 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x0000, 0x0020, 0x0038, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_326)
{
    uint32_t const cps[2] = { 0x30D7, 0x0021 };

    // 30D7 0021;	
    // (プ) KATAKANA LETTER PU	[3E8D 0261 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D7 0021;	
    // (プ) KATAKANA LETTER PU	[3E8D | 0020 0038 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x0000, 0x0020, 0x0038, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_327)
{
    uint32_t const cps[2] = { 0x3075, 0x003F };

    // 3075 003F;	
    // (ふ) HIRAGANA LETTER HU	[3E8D 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3075 003F;	
    // (ふ) HIRAGANA LETTER HU	[3E8D | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8D, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_328)
{
    uint32_t const cps[2] = { 0x31F7, 0x003F };

    // 31F7 003F;	
    // (ㇷ) KATAKANA LETTER SMALL HU	[3E8D 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F7 003F;	
    // (ㇷ) KATAKANA LETTER SMALL HU	[3E8D | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8D, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_329)
{
    uint32_t const cps[2] = { 0x30D5, 0x003F };

    // 30D5 003F;	
    // (フ) KATAKANA LETTER HU	[3E8D 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D5 003F;	
    // (フ) KATAKANA LETTER HU	[3E8D | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8D, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_330)
{
    uint32_t const cps[2] = { 0xFF8C, 0x003F };

    // FF8C 003F;	
    // (ﾌ) HALFWIDTH KATAKANA LETTER HU	[3E8D 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8C 003F;	
    // (ﾌ) HALFWIDTH KATAKANA LETTER HU	[3E8D | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8D, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_331)
{
    uint32_t const cps[2] = { 0x32EB, 0x003F };

    // 32EB 003F;	
    // (㋫) CIRCLED KATAKANA HU	[3E8D 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EB 003F;	
    // (㋫) CIRCLED KATAKANA HU	[3E8D | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8D, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_332)
{
    uint32_t const cps[2] = { 0x3076, 0x003F };

    // 3076 003F;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D 0267 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3076 003F;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D | 0020 0037 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_333)
{
    uint32_t const cps[2] = { 0x30D6, 0x003F };

    // 30D6 003F;	
    // (ブ) KATAKANA LETTER BU	[3E8D 0267 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D6 003F;	
    // (ブ) KATAKANA LETTER BU	[3E8D | 0020 0037 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_334)
{
    uint32_t const cps[2] = { 0x3077, 0x003F };

    // 3077 003F;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D 0267 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3077 003F;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D | 0020 0038 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x0000, 0x0020, 0x0038, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_335)
{
    uint32_t const cps[2] = { 0x30D7, 0x003F };

    // 30D7 003F;	
    // (プ) KATAKANA LETTER PU	[3E8D 0267 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D7 003F;	
    // (プ) KATAKANA LETTER PU	[3E8D | 0020 0038 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x0000, 0x0020, 0x0038, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_336)
{
    uint32_t const cps[2] = { 0x3075, 0x0061 };

    // 3075 0061;	
    // (ふ) HIRAGANA LETTER HU	[3E8D 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3075 0061;	
    // (ふ) HIRAGANA LETTER HU	[3E8D 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_337)
{
    uint32_t const cps[2] = { 0x3075, 0x0041 };

    // 3075 0041;	
    // (ふ) HIRAGANA LETTER HU	[3E8D 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3075 0041;	
    // (ふ) HIRAGANA LETTER HU	[3E8D 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_338)
{
    uint32_t const cps[2] = { 0x31F7, 0x0061 };

    // 31F7 0061;	
    // (ㇷ) KATAKANA LETTER SMALL HU	[3E8D 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F7 0061;	
    // (ㇷ) KATAKANA LETTER SMALL HU	[3E8D 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_339)
{
    uint32_t const cps[2] = { 0x31F7, 0x0041 };

    // 31F7 0041;	
    // (ㇷ) KATAKANA LETTER SMALL HU	[3E8D 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F7 0041;	
    // (ㇷ) KATAKANA LETTER SMALL HU	[3E8D 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_340)
{
    uint32_t const cps[2] = { 0x30D5, 0x0061 };

    // 30D5 0061;	
    // (フ) KATAKANA LETTER HU	[3E8D 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D5 0061;	
    // (フ) KATAKANA LETTER HU	[3E8D 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_341)
{
    uint32_t const cps[2] = { 0x30D5, 0x0041 };

    // 30D5 0041;	
    // (フ) KATAKANA LETTER HU	[3E8D 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D5 0041;	
    // (フ) KATAKANA LETTER HU	[3E8D 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_342)
{
    uint32_t const cps[2] = { 0xFF8C, 0x0061 };

    // FF8C 0061;	
    // (ﾌ) HALFWIDTH KATAKANA LETTER HU	[3E8D 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8C 0061;	
    // (ﾌ) HALFWIDTH KATAKANA LETTER HU	[3E8D 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_343)
{
    uint32_t const cps[2] = { 0xFF8C, 0x0041 };

    // FF8C 0041;	
    // (ﾌ) HALFWIDTH KATAKANA LETTER HU	[3E8D 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8C 0041;	
    // (ﾌ) HALFWIDTH KATAKANA LETTER HU	[3E8D 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_344)
{
    uint32_t const cps[2] = { 0x32EB, 0x0061 };

    // 32EB 0061;	
    // (㋫) CIRCLED KATAKANA HU	[3E8D 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EB 0061;	
    // (㋫) CIRCLED KATAKANA HU	[3E8D 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_345)
{
    uint32_t const cps[2] = { 0x32EB, 0x0041 };

    // 32EB 0041;	
    // (㋫) CIRCLED KATAKANA HU	[3E8D 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EB 0041;	
    // (㋫) CIRCLED KATAKANA HU	[3E8D 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_346)
{
    uint32_t const cps[2] = { 0x3076, 0x0061 };

    // 3076 0061;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D 1CAD | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3076 0061;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D 1CAD | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_347)
{
    uint32_t const cps[2] = { 0x3076, 0x0041 };

    // 3076 0041;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D 1CAD | 0020 0037 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3076 0041;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D 1CAD | 0020 0037 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_348)
{
    uint32_t const cps[2] = { 0x30D6, 0x0061 };

    // 30D6 0061;	
    // (ブ) KATAKANA LETTER BU	[3E8D 1CAD | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D6 0061;	
    // (ブ) KATAKANA LETTER BU	[3E8D 1CAD | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_349)
{
    uint32_t const cps[2] = { 0x30D6, 0x0041 };

    // 30D6 0041;	
    // (ブ) KATAKANA LETTER BU	[3E8D 1CAD | 0020 0037 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D6 0041;	
    // (ブ) KATAKANA LETTER BU	[3E8D 1CAD | 0020 0037 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_350)
{
    uint32_t const cps[2] = { 0x3077, 0x0061 };

    // 3077 0061;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D 1CAD | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3077 0061;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D 1CAD | 0020 0038 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_351)
{
    uint32_t const cps[2] = { 0x3077, 0x0041 };

    // 3077 0041;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D 1CAD | 0020 0038 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3077 0041;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D 1CAD | 0020 0038 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_352)
{
    uint32_t const cps[2] = { 0x30D7, 0x0061 };

    // 30D7 0061;	
    // (プ) KATAKANA LETTER PU	[3E8D 1CAD | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D7 0061;	
    // (プ) KATAKANA LETTER PU	[3E8D 1CAD | 0020 0038 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_353)
{
    uint32_t const cps[2] = { 0x30D7, 0x0041 };

    // 30D7 0041;	
    // (プ) KATAKANA LETTER PU	[3E8D 1CAD | 0020 0038 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D7 0041;	
    // (プ) KATAKANA LETTER PU	[3E8D 1CAD | 0020 0038 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_354)
{
    uint32_t const cps[2] = { 0x3075, 0x0062 };

    // 3075 0062;	
    // (ふ) HIRAGANA LETTER HU	[3E8D 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3075 0062;	
    // (ふ) HIRAGANA LETTER HU	[3E8D 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_355)
{
    uint32_t const cps[2] = { 0x31F7, 0x0062 };

    // 31F7 0062;	
    // (ㇷ) KATAKANA LETTER SMALL HU	[3E8D 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F7 0062;	
    // (ㇷ) KATAKANA LETTER SMALL HU	[3E8D 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_356)
{
    uint32_t const cps[2] = { 0x30D5, 0x0062 };

    // 30D5 0062;	
    // (フ) KATAKANA LETTER HU	[3E8D 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D5 0062;	
    // (フ) KATAKANA LETTER HU	[3E8D 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_357)
{
    uint32_t const cps[2] = { 0xFF8C, 0x0062 };

    // FF8C 0062;	
    // (ﾌ) HALFWIDTH KATAKANA LETTER HU	[3E8D 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8C 0062;	
    // (ﾌ) HALFWIDTH KATAKANA LETTER HU	[3E8D 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_358)
{
    uint32_t const cps[2] = { 0x32EB, 0x0062 };

    // 32EB 0062;	
    // (㋫) CIRCLED KATAKANA HU	[3E8D 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EB 0062;	
    // (㋫) CIRCLED KATAKANA HU	[3E8D 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_359)
{
    uint32_t const cps[2] = { 0x3076, 0x0062 };

    // 3076 0062;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3076 0062;	
    // (ぶ) HIRAGANA LETTER BU	[3E8D 1CC6 | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_360)
{
    uint32_t const cps[2] = { 0x30D6, 0x0062 };

    // 30D6 0062;	
    // (ブ) KATAKANA LETTER BU	[3E8D 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D6 0062;	
    // (ブ) KATAKANA LETTER BU	[3E8D 1CC6 | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_361)
{
    uint32_t const cps[2] = { 0x3077, 0x0062 };

    // 3077 0062;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D 1CC6 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3077 0062;	
    // (ぷ) HIRAGANA LETTER PU	[3E8D 1CC6 | 0020 0038 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_362)
{
    uint32_t const cps[2] = { 0x30D7, 0x0062 };

    // 30D7 0062;	
    // (プ) KATAKANA LETTER PU	[3E8D 1CC6 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D7 0062;	
    // (プ) KATAKANA LETTER PU	[3E8D 1CC6 | 0020 0038 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8D, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_363)
{
    uint32_t const cps[2] = { 0x3332, 0x0021 };

    // 3332 0021;	
    // (㌲) SQUARE HUARADDO	[3E8D 3E71 3E98 3E83 3E85 0261 | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8D, 0x3E71, 0x3E98, 0x3E83, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3332 0021;	
    // (㌲) SQUARE HUARADDO	[3E8D 3E71 3E98 3E83 3E85 | 0020 0020 0020 0020 0020 0037 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[27] = { 0x3E8D, 0x3E71, 0x3E98, 0x3E83, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_364)
{
    uint32_t const cps[2] = { 0x3332, 0x003F };

    // 3332 003F;	
    // (㌲) SQUARE HUARADDO	[3E8D 3E71 3E98 3E83 3E85 0267 | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8D, 0x3E71, 0x3E98, 0x3E83, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3332 003F;	
    // (㌲) SQUARE HUARADDO	[3E8D 3E71 3E98 3E83 3E85 | 0020 0020 0020 0020 0020 0037 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[27] = { 0x3E8D, 0x3E71, 0x3E98, 0x3E83, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_365)
{
    uint32_t const cps[2] = { 0x3332, 0x0061 };

    // 3332 0061;	
    // (㌲) SQUARE HUARADDO	[3E8D 3E71 3E98 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8D, 0x3E71, 0x3E98, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3332 0061;	
    // (㌲) SQUARE HUARADDO	[3E8D 3E71 3E98 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8D, 0x3E71, 0x3E98, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_366)
{
    uint32_t const cps[2] = { 0x3332, 0x0041 };

    // 3332 0041;	
    // (㌲) SQUARE HUARADDO	[3E8D 3E71 3E98 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8D, 0x3E71, 0x3E98, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3332 0041;	
    // (㌲) SQUARE HUARADDO	[3E8D 3E71 3E98 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8D, 0x3E71, 0x3E98, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_367)
{
    uint32_t const cps[2] = { 0x3332, 0x0062 };

    // 3332 0062;	
    // (㌲) SQUARE HUARADDO	[3E8D 3E71 3E98 3E83 3E85 1CC6 | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8D, 0x3E71, 0x3E98, 0x3E83, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3332 0062;	
    // (㌲) SQUARE HUARADDO	[3E8D 3E71 3E98 3E83 3E85 1CC6 | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8D, 0x3E71, 0x3E98, 0x3E83, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_368)
{
    uint32_t const cps[2] = { 0x3333, 0x0021 };

    // 3333 0021;	
    // (㌳) SQUARE HUIITO	[3E8D 3E72 1C73 3E85 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E8D, 0x3E72, 0x1C73, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3333 0021;	
    // (㌳) SQUARE HUIITO	[3E8D 3E72 1C73 3E85 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[20] = { 0x3E8D, 0x3E72, 0x1C73, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_369)
{
    uint32_t const cps[2] = { 0x3333, 0x003F };

    // 3333 003F;	
    // (㌳) SQUARE HUIITO	[3E8D 3E72 1C73 3E85 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E8D, 0x3E72, 0x1C73, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3333 003F;	
    // (㌳) SQUARE HUIITO	[3E8D 3E72 1C73 3E85 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[20] = { 0x3E8D, 0x3E72, 0x1C73, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_370)
{
    uint32_t const cps[2] = { 0x3333, 0x0061 };

    // 3333 0061;	
    // (㌳) SQUARE HUIITO	[3E8D 3E72 1C73 3E85 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E8D, 0x3E72, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3333 0061;	
    // (㌳) SQUARE HUIITO	[3E8D 3E72 1C73 3E85 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E8D, 0x3E72, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_371)
{
    uint32_t const cps[2] = { 0x3333, 0x0041 };

    // 3333 0041;	
    // (㌳) SQUARE HUIITO	[3E8D 3E72 1C73 3E85 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E8D, 0x3E72, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3333 0041;	
    // (㌳) SQUARE HUIITO	[3E8D 3E72 1C73 3E85 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E8D, 0x3E72, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_372)
{
    uint32_t const cps[2] = { 0x3333, 0x0062 };

    // 3333 0062;	
    // (㌳) SQUARE HUIITO	[3E8D 3E72 1C73 3E85 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E8D, 0x3E72, 0x1C73, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3333 0062;	
    // (㌳) SQUARE HUIITO	[3E8D 3E72 1C73 3E85 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E8D, 0x3E72, 0x1C73, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_373)
{
    uint32_t const cps[2] = { 0x3334, 0x0021 };

    // 3334 0021;	
    // (㌴) SQUARE BUSSYERU	[3E8D 3E83 3E7D 3E75 3E9A 0261 | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8D, 0x3E83, 0x3E7D, 0x3E75, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3334 0021;	
    // (㌴) SQUARE BUSSYERU	[3E8D 3E83 3E7D 3E75 3E9A | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[27] = { 0x3E8D, 0x3E83, 0x3E7D, 0x3E75, 0x3E9A, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_374)
{
    uint32_t const cps[2] = { 0x3334, 0x003F };

    // 3334 003F;	
    // (㌴) SQUARE BUSSYERU	[3E8D 3E83 3E7D 3E75 3E9A 0267 | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8D, 0x3E83, 0x3E7D, 0x3E75, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3334 003F;	
    // (㌴) SQUARE BUSSYERU	[3E8D 3E83 3E7D 3E75 3E9A | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[27] = { 0x3E8D, 0x3E83, 0x3E7D, 0x3E75, 0x3E9A, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_375)
{
    uint32_t const cps[2] = { 0x3334, 0x0061 };

    // 3334 0061;	
    // (㌴) SQUARE BUSSYERU	[3E8D 3E83 3E7D 3E75 3E9A 1CAD | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8D, 0x3E83, 0x3E7D, 0x3E75, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3334 0061;	
    // (㌴) SQUARE BUSSYERU	[3E8D 3E83 3E7D 3E75 3E9A 1CAD | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8D, 0x3E83, 0x3E7D, 0x3E75, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_376)
{
    uint32_t const cps[2] = { 0x3334, 0x0041 };

    // 3334 0041;	
    // (㌴) SQUARE BUSSYERU	[3E8D 3E83 3E7D 3E75 3E9A 1CAD | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8D, 0x3E83, 0x3E7D, 0x3E75, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3334 0041;	
    // (㌴) SQUARE BUSSYERU	[3E8D 3E83 3E7D 3E75 3E9A 1CAD | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8D, 0x3E83, 0x3E7D, 0x3E75, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_377)
{
    uint32_t const cps[2] = { 0x3334, 0x0062 };

    // 3334 0062;	
    // (㌴) SQUARE BUSSYERU	[3E8D 3E83 3E7D 3E75 3E9A 1CC6 | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E8D, 0x3E83, 0x3E7D, 0x3E75, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3334 0062;	
    // (㌴) SQUARE BUSSYERU	[3E8D 3E83 3E7D 3E75 3E9A 1CC6 | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E8D, 0x3E83, 0x3E7D, 0x3E75, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_378)
{
    uint32_t const cps[2] = { 0x3335, 0x0021 };

    // 3335 0021;	
    // (㌵) SQUARE HURAN	[3E8D 3E98 3EA1 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8D, 0x3E98, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3335 0021;	
    // (㌵) SQUARE HURAN	[3E8D 3E98 3EA1 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x3E8D, 0x3E98, 0x3EA1, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_379)
{
    uint32_t const cps[2] = { 0x3335, 0x003F };

    // 3335 003F;	
    // (㌵) SQUARE HURAN	[3E8D 3E98 3EA1 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8D, 0x3E98, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3335 003F;	
    // (㌵) SQUARE HURAN	[3E8D 3E98 3EA1 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[16] = { 0x3E8D, 0x3E98, 0x3EA1, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_380)
{
    uint32_t const cps[2] = { 0x3335, 0x0061 };

    // 3335 0061;	
    // (㌵) SQUARE HURAN	[3E8D 3E98 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8D, 0x3E98, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3335 0061;	
    // (㌵) SQUARE HURAN	[3E8D 3E98 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8D, 0x3E98, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_381)
{
    uint32_t const cps[2] = { 0x3335, 0x0041 };

    // 3335 0041;	
    // (㌵) SQUARE HURAN	[3E8D 3E98 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8D, 0x3E98, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3335 0041;	
    // (㌵) SQUARE HURAN	[3E8D 3E98 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8D, 0x3E98, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_382)
{
    uint32_t const cps[2] = { 0x3335, 0x0062 };

    // 3335 0062;	
    // (㌵) SQUARE HURAN	[3E8D 3E98 3EA1 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8D, 0x3E98, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3335 0062;	
    // (㌵) SQUARE HURAN	[3E8D 3E98 3EA1 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8D, 0x3E98, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_383)
{
    uint32_t const cps[3] = { 0x3078, 0x0334, 0x3099 };

    // 3078 0334 3099;	
    // (へ̴) HIRAGANA LETTER HE, COMBINING TILDE OVERLAY	[3E8E | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3078 0334 3099;	
    // (へ̴) HIRAGANA LETTER HE, COMBINING TILDE OVERLAY	[3E8E | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_384)
{
    uint32_t const cps[3] = { 0x3078, 0x3099, 0x0334 };

    // 3078 3099 0334;	
    // (べ) HIRAGANA LETTER HE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8E | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3078 3099 0334;	
    // (べ) HIRAGANA LETTER HE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8E | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_385)
{
    uint32_t const cps[2] = { 0x3079, 0x0334 };

    // 3079 0334;	
    // (べ) HIRAGANA LETTER BE	[3E8E | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3079 0334;	
    // (べ) HIRAGANA LETTER BE	[3E8E | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_386)
{
    uint32_t const cps[3] = { 0x30D8, 0x0334, 0x3099 };

    // 30D8 0334 3099;	
    // (ヘ̴) KATAKANA LETTER HE, COMBINING TILDE OVERLAY	[3E8E | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D8 0334 3099;	
    // (ヘ̴) KATAKANA LETTER HE, COMBINING TILDE OVERLAY	[3E8E | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_387)
{
    uint32_t const cps[3] = { 0x30D8, 0x3099, 0x0334 };

    // 30D8 3099 0334;	
    // (ベ) KATAKANA LETTER HE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8E | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D8 3099 0334;	
    // (ベ) KATAKANA LETTER HE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8E | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_388)
{
    uint32_t const cps[2] = { 0x30D9, 0x0334 };

    // 30D9 0334;	
    // (ベ) KATAKANA LETTER BE	[3E8E | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D9 0334;	
    // (ベ) KATAKANA LETTER BE	[3E8E | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_389)
{
    uint32_t const cps[3] = { 0x3078, 0x0334, 0x309A };

    // 3078 0334 309A;	
    // (へ̴) HIRAGANA LETTER HE, COMBINING TILDE OVERLAY	[3E8E | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3078 0334 309A;	
    // (へ̴) HIRAGANA LETTER HE, COMBINING TILDE OVERLAY	[3E8E | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_390)
{
    uint32_t const cps[3] = { 0x3078, 0x309A, 0x0334 };

    // 3078 309A 0334;	
    // (ぺ) HIRAGANA LETTER HE, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8E | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3078 309A 0334;	
    // (ぺ) HIRAGANA LETTER HE, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8E | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_391)
{
    uint32_t const cps[2] = { 0x307A, 0x0334 };

    // 307A 0334;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307A 0334;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_392)
{
    uint32_t const cps[3] = { 0x30D8, 0x0334, 0x309A };

    // 30D8 0334 309A;	
    // (ヘ̴) KATAKANA LETTER HE, COMBINING TILDE OVERLAY	[3E8E | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D8 0334 309A;	
    // (ヘ̴) KATAKANA LETTER HE, COMBINING TILDE OVERLAY	[3E8E | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_393)
{
    uint32_t const cps[3] = { 0x30D8, 0x309A, 0x0334 };

    // 30D8 309A 0334;	
    // (ペ) KATAKANA LETTER HE, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8E | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D8 309A 0334;	
    // (ペ) KATAKANA LETTER HE, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8E | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_394)
{
    uint32_t const cps[2] = { 0x30DA, 0x0334 };

    // 30DA 0334;	
    // (ペ) KATAKANA LETTER PE	[3E8E | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DA 0334;	
    // (ペ) KATAKANA LETTER PE	[3E8E | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8E, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_395)
{
    uint32_t const cps[2] = { 0x3078, 0x0021 };

    // 3078 0021;	
    // (へ) HIRAGANA LETTER HE	[3E8E 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3078 0021;	
    // (へ) HIRAGANA LETTER HE	[3E8E | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8E, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_396)
{
    uint32_t const cps[2] = { 0x31F8, 0x0021 };

    // 31F8 0021;	
    // (ㇸ) KATAKANA LETTER SMALL HE	[3E8E 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F8 0021;	
    // (ㇸ) KATAKANA LETTER SMALL HE	[3E8E | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8E, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_397)
{
    uint32_t const cps[2] = { 0x30D8, 0x0021 };

    // 30D8 0021;	
    // (ヘ) KATAKANA LETTER HE	[3E8E 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D8 0021;	
    // (ヘ) KATAKANA LETTER HE	[3E8E | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8E, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_398)
{
    uint32_t const cps[2] = { 0xFF8D, 0x0021 };

    // FF8D 0021;	
    // (ﾍ) HALFWIDTH KATAKANA LETTER HE	[3E8E 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8D 0021;	
    // (ﾍ) HALFWIDTH KATAKANA LETTER HE	[3E8E | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8E, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_399)
{
    uint32_t const cps[2] = { 0x32EC, 0x0021 };

    // 32EC 0021;	
    // (㋬) CIRCLED KATAKANA HE	[3E8E 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EC 0021;	
    // (㋬) CIRCLED KATAKANA HE	[3E8E | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8E, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_400)
{
    uint32_t const cps[2] = { 0x3079, 0x0021 };

    // 3079 0021;	
    // (べ) HIRAGANA LETTER BE	[3E8E 0261 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3079 0021;	
    // (べ) HIRAGANA LETTER BE	[3E8E | 0020 0037 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_401)
{
    uint32_t const cps[2] = { 0x30D9, 0x0021 };

    // 30D9 0021;	
    // (ベ) KATAKANA LETTER BE	[3E8E 0261 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D9 0021;	
    // (ベ) KATAKANA LETTER BE	[3E8E | 0020 0037 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_402)
{
    uint32_t const cps[2] = { 0x307A, 0x0021 };

    // 307A 0021;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E 0261 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307A 0021;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E | 0020 0038 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x0000, 0x0020, 0x0038, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_403)
{
    uint32_t const cps[2] = { 0x30DA, 0x0021 };

    // 30DA 0021;	
    // (ペ) KATAKANA LETTER PE	[3E8E 0261 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DA 0021;	
    // (ペ) KATAKANA LETTER PE	[3E8E | 0020 0038 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x0000, 0x0020, 0x0038, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_404)
{
    uint32_t const cps[2] = { 0x3078, 0x003F };

    // 3078 003F;	
    // (へ) HIRAGANA LETTER HE	[3E8E 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3078 003F;	
    // (へ) HIRAGANA LETTER HE	[3E8E | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8E, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_405)
{
    uint32_t const cps[2] = { 0x31F8, 0x003F };

    // 31F8 003F;	
    // (ㇸ) KATAKANA LETTER SMALL HE	[3E8E 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F8 003F;	
    // (ㇸ) KATAKANA LETTER SMALL HE	[3E8E | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8E, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_406)
{
    uint32_t const cps[2] = { 0x30D8, 0x003F };

    // 30D8 003F;	
    // (ヘ) KATAKANA LETTER HE	[3E8E 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D8 003F;	
    // (ヘ) KATAKANA LETTER HE	[3E8E | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8E, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_407)
{
    uint32_t const cps[2] = { 0xFF8D, 0x003F };

    // FF8D 003F;	
    // (ﾍ) HALFWIDTH KATAKANA LETTER HE	[3E8E 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8D 003F;	
    // (ﾍ) HALFWIDTH KATAKANA LETTER HE	[3E8E | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8E, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_408)
{
    uint32_t const cps[2] = { 0x32EC, 0x003F };

    // 32EC 003F;	
    // (㋬) CIRCLED KATAKANA HE	[3E8E 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EC 003F;	
    // (㋬) CIRCLED KATAKANA HE	[3E8E | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8E, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_409)
{
    uint32_t const cps[2] = { 0x3079, 0x003F };

    // 3079 003F;	
    // (べ) HIRAGANA LETTER BE	[3E8E 0267 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3079 003F;	
    // (べ) HIRAGANA LETTER BE	[3E8E | 0020 0037 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_410)
{
    uint32_t const cps[2] = { 0x30D9, 0x003F };

    // 30D9 003F;	
    // (ベ) KATAKANA LETTER BE	[3E8E 0267 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D9 003F;	
    // (ベ) KATAKANA LETTER BE	[3E8E | 0020 0037 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_411)
{
    uint32_t const cps[2] = { 0x307A, 0x003F };

    // 307A 003F;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E 0267 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307A 003F;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E | 0020 0038 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x0000, 0x0020, 0x0038, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_412)
{
    uint32_t const cps[2] = { 0x30DA, 0x003F };

    // 30DA 003F;	
    // (ペ) KATAKANA LETTER PE	[3E8E 0267 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DA 003F;	
    // (ペ) KATAKANA LETTER PE	[3E8E | 0020 0038 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x0000, 0x0020, 0x0038, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_413)
{
    uint32_t const cps[2] = { 0x333B, 0x0021 };

    // 333B 0021;	
    // (㌻) SQUARE PEEZI	[3E8E 1C73 3E7D 0261 | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E8E, 0x1C73, 0x3E7D, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333B 0021;	
    // (㌻) SQUARE PEEZI	[3E8E 1C73 3E7D | 0020 0038 0020 0020 0037 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[22] = { 0x3E8E, 0x1C73, 0x3E7D, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_414)
{
    uint32_t const cps[2] = { 0x333B, 0x003F };

    // 333B 003F;	
    // (㌻) SQUARE PEEZI	[3E8E 1C73 3E7D 0267 | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E8E, 0x1C73, 0x3E7D, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333B 003F;	
    // (㌻) SQUARE PEEZI	[3E8E 1C73 3E7D | 0020 0038 0020 0020 0037 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[22] = { 0x3E8E, 0x1C73, 0x3E7D, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_415)
{
    uint32_t const cps[2] = { 0x333B, 0x0061 };

    // 333B 0061;	
    // (㌻) SQUARE PEEZI	[3E8E 1C73 3E7D 1CAD | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E8E, 0x1C73, 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333B 0061;	
    // (㌻) SQUARE PEEZI	[3E8E 1C73 3E7D 1CAD | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[25] = { 0x3E8E, 0x1C73, 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 25);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 25))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_416)
{
    uint32_t const cps[2] = { 0x333B, 0x0041 };

    // 333B 0041;	
    // (㌻) SQUARE PEEZI	[3E8E 1C73 3E7D 1CAD | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E8E, 0x1C73, 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333B 0041;	
    // (㌻) SQUARE PEEZI	[3E8E 1C73 3E7D 1CAD | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[25] = { 0x3E8E, 0x1C73, 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 25);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 25))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_417)
{
    uint32_t const cps[2] = { 0x333B, 0x0062 };

    // 333B 0062;	
    // (㌻) SQUARE PEEZI	[3E8E 1C73 3E7D 1CC6 | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E8E, 0x1C73, 0x3E7D, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333B 0062;	
    // (㌻) SQUARE PEEZI	[3E8E 1C73 3E7D 1CC6 | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[25] = { 0x3E8E, 0x1C73, 0x3E7D, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 25);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 25))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_418)
{
    uint32_t const cps[2] = { 0x333C, 0x0021 };

    // 333C 0021;	
    // (㌼) SQUARE BEETA	[3E8E 1C73 3E81 0261 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x1C73, 0x3E81, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333C 0021;	
    // (㌼) SQUARE BEETA	[3E8E 1C73 3E81 | 0020 0037 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[19] = { 0x3E8E, 0x1C73, 0x3E81, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_419)
{
    uint32_t const cps[2] = { 0x333C, 0x003F };

    // 333C 003F;	
    // (㌼) SQUARE BEETA	[3E8E 1C73 3E81 0267 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x1C73, 0x3E81, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333C 003F;	
    // (㌼) SQUARE BEETA	[3E8E 1C73 3E81 | 0020 0037 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[19] = { 0x3E8E, 0x1C73, 0x3E81, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_420)
{
    uint32_t const cps[2] = { 0x333C, 0x0061 };

    // 333C 0061;	
    // (㌼) SQUARE BEETA	[3E8E 1C73 3E81 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x1C73, 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333C 0061;	
    // (㌼) SQUARE BEETA	[3E8E 1C73 3E81 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8E, 0x1C73, 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_421)
{
    uint32_t const cps[2] = { 0x333C, 0x0041 };

    // 333C 0041;	
    // (㌼) SQUARE BEETA	[3E8E 1C73 3E81 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x1C73, 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333C 0041;	
    // (㌼) SQUARE BEETA	[3E8E 1C73 3E81 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8E, 0x1C73, 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_422)
{
    uint32_t const cps[2] = { 0x333C, 0x0062 };

    // 333C 0062;	
    // (㌼) SQUARE BEETA	[3E8E 1C73 3E81 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x1C73, 0x3E81, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333C 0062;	
    // (㌼) SQUARE BEETA	[3E8E 1C73 3E81 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8E, 0x1C73, 0x3E81, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_423)
{
    uint32_t const cps[2] = { 0x3078, 0x0061 };

    // 3078 0061;	
    // (へ) HIRAGANA LETTER HE	[3E8E 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3078 0061;	
    // (へ) HIRAGANA LETTER HE	[3E8E 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_424)
{
    uint32_t const cps[2] = { 0x3078, 0x0041 };

    // 3078 0041;	
    // (へ) HIRAGANA LETTER HE	[3E8E 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3078 0041;	
    // (へ) HIRAGANA LETTER HE	[3E8E 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_425)
{
    uint32_t const cps[2] = { 0x31F8, 0x0061 };

    // 31F8 0061;	
    // (ㇸ) KATAKANA LETTER SMALL HE	[3E8E 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F8 0061;	
    // (ㇸ) KATAKANA LETTER SMALL HE	[3E8E 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_426)
{
    uint32_t const cps[2] = { 0x31F8, 0x0041 };

    // 31F8 0041;	
    // (ㇸ) KATAKANA LETTER SMALL HE	[3E8E 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F8 0041;	
    // (ㇸ) KATAKANA LETTER SMALL HE	[3E8E 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_427)
{
    uint32_t const cps[2] = { 0x30D8, 0x0061 };

    // 30D8 0061;	
    // (ヘ) KATAKANA LETTER HE	[3E8E 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D8 0061;	
    // (ヘ) KATAKANA LETTER HE	[3E8E 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_428)
{
    uint32_t const cps[2] = { 0x30D8, 0x0041 };

    // 30D8 0041;	
    // (ヘ) KATAKANA LETTER HE	[3E8E 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D8 0041;	
    // (ヘ) KATAKANA LETTER HE	[3E8E 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_429)
{
    uint32_t const cps[2] = { 0xFF8D, 0x0061 };

    // FF8D 0061;	
    // (ﾍ) HALFWIDTH KATAKANA LETTER HE	[3E8E 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8D 0061;	
    // (ﾍ) HALFWIDTH KATAKANA LETTER HE	[3E8E 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_430)
{
    uint32_t const cps[2] = { 0xFF8D, 0x0041 };

    // FF8D 0041;	
    // (ﾍ) HALFWIDTH KATAKANA LETTER HE	[3E8E 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8D 0041;	
    // (ﾍ) HALFWIDTH KATAKANA LETTER HE	[3E8E 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_431)
{
    uint32_t const cps[2] = { 0x32EC, 0x0061 };

    // 32EC 0061;	
    // (㋬) CIRCLED KATAKANA HE	[3E8E 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EC 0061;	
    // (㋬) CIRCLED KATAKANA HE	[3E8E 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_432)
{
    uint32_t const cps[2] = { 0x32EC, 0x0041 };

    // 32EC 0041;	
    // (㋬) CIRCLED KATAKANA HE	[3E8E 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EC 0041;	
    // (㋬) CIRCLED KATAKANA HE	[3E8E 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_433)
{
    uint32_t const cps[2] = { 0x3079, 0x0061 };

    // 3079 0061;	
    // (べ) HIRAGANA LETTER BE	[3E8E 1CAD | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3079 0061;	
    // (べ) HIRAGANA LETTER BE	[3E8E 1CAD | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_434)
{
    uint32_t const cps[2] = { 0x3079, 0x0041 };

    // 3079 0041;	
    // (べ) HIRAGANA LETTER BE	[3E8E 1CAD | 0020 0037 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3079 0041;	
    // (べ) HIRAGANA LETTER BE	[3E8E 1CAD | 0020 0037 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_435)
{
    uint32_t const cps[2] = { 0x30D9, 0x0061 };

    // 30D9 0061;	
    // (ベ) KATAKANA LETTER BE	[3E8E 1CAD | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D9 0061;	
    // (ベ) KATAKANA LETTER BE	[3E8E 1CAD | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_436)
{
    uint32_t const cps[2] = { 0x30D9, 0x0041 };

    // 30D9 0041;	
    // (ベ) KATAKANA LETTER BE	[3E8E 1CAD | 0020 0037 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D9 0041;	
    // (ベ) KATAKANA LETTER BE	[3E8E 1CAD | 0020 0037 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_437)
{
    uint32_t const cps[2] = { 0x307A, 0x0061 };

    // 307A 0061;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E 1CAD | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307A 0061;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E 1CAD | 0020 0038 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_438)
{
    uint32_t const cps[2] = { 0x307A, 0x0041 };

    // 307A 0041;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E 1CAD | 0020 0038 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307A 0041;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E 1CAD | 0020 0038 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_439)
{
    uint32_t const cps[2] = { 0x30DA, 0x0061 };

    // 30DA 0061;	
    // (ペ) KATAKANA LETTER PE	[3E8E 1CAD | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DA 0061;	
    // (ペ) KATAKANA LETTER PE	[3E8E 1CAD | 0020 0038 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_440)
{
    uint32_t const cps[2] = { 0x30DA, 0x0041 };

    // 30DA 0041;	
    // (ペ) KATAKANA LETTER PE	[3E8E 1CAD | 0020 0038 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DA 0041;	
    // (ペ) KATAKANA LETTER PE	[3E8E 1CAD | 0020 0038 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_441)
{
    uint32_t const cps[2] = { 0x3078, 0x0062 };

    // 3078 0062;	
    // (へ) HIRAGANA LETTER HE	[3E8E 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3078 0062;	
    // (へ) HIRAGANA LETTER HE	[3E8E 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_442)
{
    uint32_t const cps[2] = { 0x31F8, 0x0062 };

    // 31F8 0062;	
    // (ㇸ) KATAKANA LETTER SMALL HE	[3E8E 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F8 0062;	
    // (ㇸ) KATAKANA LETTER SMALL HE	[3E8E 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_443)
{
    uint32_t const cps[2] = { 0x30D8, 0x0062 };

    // 30D8 0062;	
    // (ヘ) KATAKANA LETTER HE	[3E8E 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D8 0062;	
    // (ヘ) KATAKANA LETTER HE	[3E8E 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_444)
{
    uint32_t const cps[2] = { 0xFF8D, 0x0062 };

    // FF8D 0062;	
    // (ﾍ) HALFWIDTH KATAKANA LETTER HE	[3E8E 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8D 0062;	
    // (ﾍ) HALFWIDTH KATAKANA LETTER HE	[3E8E 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_445)
{
    uint32_t const cps[2] = { 0x32EC, 0x0062 };

    // 32EC 0062;	
    // (㋬) CIRCLED KATAKANA HE	[3E8E 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32EC 0062;	
    // (㋬) CIRCLED KATAKANA HE	[3E8E 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_446)
{
    uint32_t const cps[2] = { 0x3079, 0x0062 };

    // 3079 0062;	
    // (べ) HIRAGANA LETTER BE	[3E8E 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3079 0062;	
    // (べ) HIRAGANA LETTER BE	[3E8E 1CC6 | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_447)
{
    uint32_t const cps[2] = { 0x30D9, 0x0062 };

    // 30D9 0062;	
    // (ベ) KATAKANA LETTER BE	[3E8E 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30D9 0062;	
    // (ベ) KATAKANA LETTER BE	[3E8E 1CC6 | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_448)
{
    uint32_t const cps[2] = { 0x307A, 0x0062 };

    // 307A 0062;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E 1CC6 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307A 0062;	
    // (ぺ) HIRAGANA LETTER PE	[3E8E 1CC6 | 0020 0038 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_449)
{
    uint32_t const cps[2] = { 0x30DA, 0x0062 };

    // 30DA 0062;	
    // (ペ) KATAKANA LETTER PE	[3E8E 1CC6 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DA 0062;	
    // (ペ) KATAKANA LETTER PE	[3E8E 1CC6 | 0020 0038 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E8E, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_450)
{
    uint32_t const cps[2] = { 0x3336, 0x0021 };

    // 3336 0021;	
    // (㌶) SQUARE HEKUTAARU	[3E8E 3E79 3E81 1C73 3E9A 0261 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E8E, 0x3E79, 0x3E81, 0x1C73, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3336 0021;	
    // (㌶) SQUARE HEKUTAARU	[3E8E 3E79 3E81 1C73 3E9A | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[24] = { 0x3E8E, 0x3E79, 0x3E81, 0x1C73, 0x3E9A, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_451)
{
    uint32_t const cps[2] = { 0x3336, 0x003F };

    // 3336 003F;	
    // (㌶) SQUARE HEKUTAARU	[3E8E 3E79 3E81 1C73 3E9A 0267 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E8E, 0x3E79, 0x3E81, 0x1C73, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3336 003F;	
    // (㌶) SQUARE HEKUTAARU	[3E8E 3E79 3E81 1C73 3E9A | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[24] = { 0x3E8E, 0x3E79, 0x3E81, 0x1C73, 0x3E9A, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_452)
{
    uint32_t const cps[2] = { 0x3336, 0x0061 };

    // 3336 0061;	
    // (㌶) SQUARE HEKUTAARU	[3E8E 3E79 3E81 1C73 3E9A 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E8E, 0x3E79, 0x3E81, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3336 0061;	
    // (㌶) SQUARE HEKUTAARU	[3E8E 3E79 3E81 1C73 3E9A 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E8E, 0x3E79, 0x3E81, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_453)
{
    uint32_t const cps[2] = { 0x3336, 0x0041 };

    // 3336 0041;	
    // (㌶) SQUARE HEKUTAARU	[3E8E 3E79 3E81 1C73 3E9A 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E8E, 0x3E79, 0x3E81, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3336 0041;	
    // (㌶) SQUARE HEKUTAARU	[3E8E 3E79 3E81 1C73 3E9A 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E8E, 0x3E79, 0x3E81, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_454)
{
    uint32_t const cps[2] = { 0x3336, 0x0062 };

    // 3336 0062;	
    // (㌶) SQUARE HEKUTAARU	[3E8E 3E79 3E81 1C73 3E9A 1CC6 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E8E, 0x3E79, 0x3E81, 0x1C73, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3336 0062;	
    // (㌶) SQUARE HEKUTAARU	[3E8E 3E79 3E81 1C73 3E9A 1CC6 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E8E, 0x3E79, 0x3E81, 0x1C73, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_455)
{
    uint32_t const cps[2] = { 0x3337, 0x0021 };

    // 3337 0021;	
    // (㌷) SQUARE PESO	[3E8E 3E80 0261 | 0020 0038 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8E, 0x3E80, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3337 0021;	
    // (㌷) SQUARE PESO	[3E8E 3E80 | 0020 0038 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[15] = { 0x3E8E, 0x3E80, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_456)
{
    uint32_t const cps[2] = { 0x3337, 0x003F };

    // 3337 003F;	
    // (㌷) SQUARE PESO	[3E8E 3E80 0267 | 0020 0038 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8E, 0x3E80, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3337 003F;	
    // (㌷) SQUARE PESO	[3E8E 3E80 | 0020 0038 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[15] = { 0x3E8E, 0x3E80, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_457)
{
    uint32_t const cps[2] = { 0x3337, 0x0061 };

    // 3337 0061;	
    // (㌷) SQUARE PESO	[3E8E 3E80 1CAD | 0020 0038 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8E, 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3337 0061;	
    // (㌷) SQUARE PESO	[3E8E 3E80 1CAD | 0020 0038 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E8E, 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_458)
{
    uint32_t const cps[2] = { 0x3337, 0x0041 };

    // 3337 0041;	
    // (㌷) SQUARE PESO	[3E8E 3E80 1CAD | 0020 0038 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8E, 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3337 0041;	
    // (㌷) SQUARE PESO	[3E8E 3E80 1CAD | 0020 0038 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E8E, 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_459)
{
    uint32_t const cps[2] = { 0x3337, 0x0062 };

    // 3337 0062;	
    // (㌷) SQUARE PESO	[3E8E 3E80 1CC6 | 0020 0038 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x3E8E, 0x3E80, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3337 0062;	
    // (㌷) SQUARE PESO	[3E8E 3E80 1CC6 | 0020 0038 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x3E8E, 0x3E80, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_460)
{
    uint32_t const cps[2] = { 0x3338, 0x0021 };

    // 3338 0021;	
    // (㌸) SQUARE PENIHI	[3E8E 3E87 3E8C 0261 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x3E87, 0x3E8C, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3338 0021;	
    // (㌸) SQUARE PENIHI	[3E8E 3E87 3E8C | 0020 0038 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[19] = { 0x3E8E, 0x3E87, 0x3E8C, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_461)
{
    uint32_t const cps[2] = { 0x3338, 0x003F };

    // 3338 003F;	
    // (㌸) SQUARE PENIHI	[3E8E 3E87 3E8C 0267 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x3E87, 0x3E8C, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3338 003F;	
    // (㌸) SQUARE PENIHI	[3E8E 3E87 3E8C | 0020 0038 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[19] = { 0x3E8E, 0x3E87, 0x3E8C, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_462)
{
    uint32_t const cps[2] = { 0x3338, 0x0061 };

    // 3338 0061;	
    // (㌸) SQUARE PENIHI	[3E8E 3E87 3E8C 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x3E87, 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3338 0061;	
    // (㌸) SQUARE PENIHI	[3E8E 3E87 3E8C 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8E, 0x3E87, 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_463)
{
    uint32_t const cps[2] = { 0x3338, 0x0041 };

    // 3338 0041;	
    // (㌸) SQUARE PENIHI	[3E8E 3E87 3E8C 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x3E87, 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3338 0041;	
    // (㌸) SQUARE PENIHI	[3E8E 3E87 3E8C 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8E, 0x3E87, 0x3E8C, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_464)
{
    uint32_t const cps[2] = { 0x3338, 0x0062 };

    // 3338 0062;	
    // (㌸) SQUARE PENIHI	[3E8E 3E87 3E8C 1CC6 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x3E87, 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3338 0062;	
    // (㌸) SQUARE PENIHI	[3E8E 3E87 3E8C 1CC6 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8E, 0x3E87, 0x3E8C, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_465)
{
    uint32_t const cps[2] = { 0x3339, 0x0021 };

    // 3339 0021;	
    // (㌹) SQUARE HERUTU	[3E8E 3E9A 3E83 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8E, 0x3E9A, 0x3E83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3339 0021;	
    // (㌹) SQUARE HERUTU	[3E8E 3E9A 3E83 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x3E8E, 0x3E9A, 0x3E83, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_466)
{
    uint32_t const cps[2] = { 0x3339, 0x003F };

    // 3339 003F;	
    // (㌹) SQUARE HERUTU	[3E8E 3E9A 3E83 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8E, 0x3E9A, 0x3E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3339 003F;	
    // (㌹) SQUARE HERUTU	[3E8E 3E9A 3E83 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[16] = { 0x3E8E, 0x3E9A, 0x3E83, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_467)
{
    uint32_t const cps[2] = { 0x3339, 0x0061 };

    // 3339 0061;	
    // (㌹) SQUARE HERUTU	[3E8E 3E9A 3E83 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8E, 0x3E9A, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3339 0061;	
    // (㌹) SQUARE HERUTU	[3E8E 3E9A 3E83 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8E, 0x3E9A, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_468)
{
    uint32_t const cps[2] = { 0x3339, 0x0041 };

    // 3339 0041;	
    // (㌹) SQUARE HERUTU	[3E8E 3E9A 3E83 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8E, 0x3E9A, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3339 0041;	
    // (㌹) SQUARE HERUTU	[3E8E 3E9A 3E83 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8E, 0x3E9A, 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_469)
{
    uint32_t const cps[2] = { 0x3339, 0x0062 };

    // 3339 0062;	
    // (㌹) SQUARE HERUTU	[3E8E 3E9A 3E83 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x3E8E, 0x3E9A, 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3339 0062;	
    // (㌹) SQUARE HERUTU	[3E8E 3E9A 3E83 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x3E8E, 0x3E9A, 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_470)
{
    uint32_t const cps[2] = { 0x333A, 0x0021 };

    // 333A 0021;	
    // (㌺) SQUARE PENSU	[3E8E 3EA1 3E7E 0261 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x3EA1, 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333A 0021;	
    // (㌺) SQUARE PENSU	[3E8E 3EA1 3E7E | 0020 0038 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[19] = { 0x3E8E, 0x3EA1, 0x3E7E, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_471)
{
    uint32_t const cps[2] = { 0x333A, 0x003F };

    // 333A 003F;	
    // (㌺) SQUARE PENSU	[3E8E 3EA1 3E7E 0267 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x3EA1, 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333A 003F;	
    // (㌺) SQUARE PENSU	[3E8E 3EA1 3E7E | 0020 0038 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[19] = { 0x3E8E, 0x3EA1, 0x3E7E, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_472)
{
    uint32_t const cps[2] = { 0x333A, 0x0061 };

    // 333A 0061;	
    // (㌺) SQUARE PENSU	[3E8E 3EA1 3E7E 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x3EA1, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333A 0061;	
    // (㌺) SQUARE PENSU	[3E8E 3EA1 3E7E 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8E, 0x3EA1, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_473)
{
    uint32_t const cps[2] = { 0x333A, 0x0041 };

    // 333A 0041;	
    // (㌺) SQUARE PENSU	[3E8E 3EA1 3E7E 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x3EA1, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333A 0041;	
    // (㌺) SQUARE PENSU	[3E8E 3EA1 3E7E 1CAD | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8E, 0x3EA1, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_474)
{
    uint32_t const cps[2] = { 0x333A, 0x0062 };

    // 333A 0062;	
    // (㌺) SQUARE PENSU	[3E8E 3EA1 3E7E 1CC6 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E8E, 0x3EA1, 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 333A 0062;	
    // (㌺) SQUARE PENSU	[3E8E 3EA1 3E7E 1CC6 | 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E8E, 0x3EA1, 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_475)
{
    uint32_t const cps[3] = { 0x307B, 0x0334, 0x3099 };

    // 307B 0334 3099;	
    // (ほ̴) HIRAGANA LETTER HO, COMBINING TILDE OVERLAY	[3E8F | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307B 0334 3099;	
    // (ほ̴) HIRAGANA LETTER HO, COMBINING TILDE OVERLAY	[3E8F | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_476)
{
    uint32_t const cps[3] = { 0x307B, 0x3099, 0x0334 };

    // 307B 3099 0334;	
    // (ぼ) HIRAGANA LETTER HO, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8F | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307B 3099 0334;	
    // (ぼ) HIRAGANA LETTER HO, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8F | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_477)
{
    uint32_t const cps[2] = { 0x307C, 0x0334 };

    // 307C 0334;	
    // (ぼ) HIRAGANA LETTER BO	[3E8F | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307C 0334;	
    // (ぼ) HIRAGANA LETTER BO	[3E8F | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_478)
{
    uint32_t const cps[3] = { 0x30DB, 0x0334, 0x3099 };

    // 30DB 0334 3099;	
    // (ホ̴) KATAKANA LETTER HO, COMBINING TILDE OVERLAY	[3E8F | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DB 0334 3099;	
    // (ホ̴) KATAKANA LETTER HO, COMBINING TILDE OVERLAY	[3E8F | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_479)
{
    uint32_t const cps[3] = { 0x30DB, 0x3099, 0x0334 };

    // 30DB 3099 0334;	
    // (ボ) KATAKANA LETTER HO, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8F | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DB 3099 0334;	
    // (ボ) KATAKANA LETTER HO, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E8F | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_480)
{
    uint32_t const cps[2] = { 0x30DC, 0x0334 };

    // 30DC 0334;	
    // (ボ) KATAKANA LETTER BO	[3E8F | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DC 0334;	
    // (ボ) KATAKANA LETTER BO	[3E8F | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_481)
{
    uint32_t const cps[3] = { 0x307B, 0x0334, 0x309A };

    // 307B 0334 309A;	
    // (ほ̴) HIRAGANA LETTER HO, COMBINING TILDE OVERLAY	[3E8F | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307B 0334 309A;	
    // (ほ̴) HIRAGANA LETTER HO, COMBINING TILDE OVERLAY	[3E8F | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_482)
{
    uint32_t const cps[3] = { 0x307B, 0x309A, 0x0334 };

    // 307B 309A 0334;	
    // (ぽ) HIRAGANA LETTER HO, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8F | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307B 309A 0334;	
    // (ぽ) HIRAGANA LETTER HO, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8F | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_483)
{
    uint32_t const cps[2] = { 0x307D, 0x0334 };

    // 307D 0334;	
    // (ぽ) HIRAGANA LETTER PO	[3E8F | 0020 004A 0038 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307D 0334;	
    // (ぽ) HIRAGANA LETTER PO	[3E8F | 0020 004A 0038 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_484)
{
    uint32_t const cps[3] = { 0x30DB, 0x0334, 0x309A };

    // 30DB 0334 309A;	
    // (ホ̴) KATAKANA LETTER HO, COMBINING TILDE OVERLAY	[3E8F | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DB 0334 309A;	
    // (ホ̴) KATAKANA LETTER HO, COMBINING TILDE OVERLAY	[3E8F | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_485)
{
    uint32_t const cps[3] = { 0x30DB, 0x309A, 0x0334 };

    // 30DB 309A 0334;	
    // (ポ) KATAKANA LETTER HO, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8F | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DB 309A 0334;	
    // (ポ) KATAKANA LETTER HO, COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[3E8F | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_486)
{
    uint32_t const cps[2] = { 0x30DD, 0x0334 };

    // 30DD 0334;	
    // (ポ) KATAKANA LETTER PO	[3E8F | 0020 004A 0038 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DD 0334;	
    // (ポ) KATAKANA LETTER PO	[3E8F | 0020 004A 0038 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x3E8F, 0x0000, 0x0020, 0x004A, 0x0038, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_487)
{
    uint32_t const cps[2] = { 0x307B, 0x0021 };

    // 307B 0021;	
    // (ほ) HIRAGANA LETTER HO	[3E8F 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307B 0021;	
    // (ほ) HIRAGANA LETTER HO	[3E8F | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8F, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_488)
{
    uint32_t const cps[2] = { 0x31F9, 0x0021 };

    // 31F9 0021;	
    // (ㇹ) KATAKANA LETTER SMALL HO	[3E8F 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F9 0021;	
    // (ㇹ) KATAKANA LETTER SMALL HO	[3E8F | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8F, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_489)
{
    uint32_t const cps[2] = { 0x30DB, 0x0021 };

    // 30DB 0021;	
    // (ホ) KATAKANA LETTER HO	[3E8F 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DB 0021;	
    // (ホ) KATAKANA LETTER HO	[3E8F | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8F, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_490)
{
    uint32_t const cps[2] = { 0xFF8E, 0x0021 };

    // FF8E 0021;	
    // (ﾎ) HALFWIDTH KATAKANA LETTER HO	[3E8F 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8E 0021;	
    // (ﾎ) HALFWIDTH KATAKANA LETTER HO	[3E8F | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8F, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_491)
{
    uint32_t const cps[2] = { 0x32ED, 0x0021 };

    // 32ED 0021;	
    // (㋭) CIRCLED KATAKANA HO	[3E8F 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32ED 0021;	
    // (㋭) CIRCLED KATAKANA HO	[3E8F | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x3E8F, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_492)
{
    uint32_t const cps[2] = { 0x307C, 0x0021 };

    // 307C 0021;	
    // (ぼ) HIRAGANA LETTER BO	[3E8F 0261 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8F, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307C 0021;	
    // (ぼ) HIRAGANA LETTER BO	[3E8F | 0020 0037 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8F, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_493)
{
    uint32_t const cps[2] = { 0x30DC, 0x0021 };

    // 30DC 0021;	
    // (ボ) KATAKANA LETTER BO	[3E8F 0261 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8F, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DC 0021;	
    // (ボ) KATAKANA LETTER BO	[3E8F | 0020 0037 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8F, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_494)
{
    uint32_t const cps[2] = { 0x307D, 0x0021 };

    // 307D 0021;	
    // (ぽ) HIRAGANA LETTER PO	[3E8F 0261 | 0020 0038 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8F, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307D 0021;	
    // (ぽ) HIRAGANA LETTER PO	[3E8F | 0020 0038 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8F, 0x0000, 0x0020, 0x0038, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_495)
{
    uint32_t const cps[2] = { 0x30DD, 0x0021 };

    // 30DD 0021;	
    // (ポ) KATAKANA LETTER PO	[3E8F 0261 | 0020 0038 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E8F, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DD 0021;	
    // (ポ) KATAKANA LETTER PO	[3E8F | 0020 0038 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x3E8F, 0x0000, 0x0020, 0x0038, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_496)
{
    uint32_t const cps[2] = { 0x307B, 0x003F };

    // 307B 003F;	
    // (ほ) HIRAGANA LETTER HO	[3E8F 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 307B 003F;	
    // (ほ) HIRAGANA LETTER HO	[3E8F | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8F, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_497)
{
    uint32_t const cps[2] = { 0x31F9, 0x003F };

    // 31F9 003F;	
    // (ㇹ) KATAKANA LETTER SMALL HO	[3E8F 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F9 003F;	
    // (ㇹ) KATAKANA LETTER SMALL HO	[3E8F | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8F, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_498)
{
    uint32_t const cps[2] = { 0x30DB, 0x003F };

    // 30DB 003F;	
    // (ホ) KATAKANA LETTER HO	[3E8F 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30DB 003F;	
    // (ホ) KATAKANA LETTER HO	[3E8F | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8F, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_248_499)
{
    uint32_t const cps[2] = { 0xFF8E, 0x003F };

    // FF8E 003F;	
    // (ﾎ) HALFWIDTH KATAKANA LETTER HO	[3E8F 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x3E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF8E 003F;	
    // (ﾎ) HALFWIDTH KATAKANA LETTER HO	[3E8F | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x3E8F, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

