// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_071_000)
{
    // 1D84B 0041;	
    // (ù°ã) SIGNWRITING HAND-HINGE FOUR FINGERS CONJOINED	[18EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D84B, 0x0041 };
    uint32_t const ces[9] = { 0x18EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_001)
{
    // 1D84B 0062;	
    // (ù°ã) SIGNWRITING HAND-HINGE FOUR FINGERS CONJOINED	[18EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84B, 0x0062 };
    uint32_t const ces[9] = { 0x18EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_002)
{
    // 1D84C 0021;	
    // (ù°å) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD	[18EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84C, 0x0021 };
    uint32_t const ces[9] = { 0x18EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_003)
{
    // 1D84C 003F;	
    // (ù°å) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD	[18EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84C, 0x003F };
    uint32_t const ces[9] = { 0x18EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_004)
{
    // 1D84C 0061;	
    // (ù°å) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD	[18EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84C, 0x0061 };
    uint32_t const ces[9] = { 0x18EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_005)
{
    // 1D84C 0041;	
    // (ù°å) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD	[18EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D84C, 0x0041 };
    uint32_t const ces[9] = { 0x18EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_006)
{
    // 1D84C 0062;	
    // (ù°å) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD	[18EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84C, 0x0062 };
    uint32_t const ces[9] = { 0x18EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_007)
{
    // 1D84D 0021;	
    // (ù°ç) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD	[18F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84D, 0x0021 };
    uint32_t const ces[9] = { 0x18F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_008)
{
    // 1D84D 003F;	
    // (ù°ç) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD	[18F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84D, 0x003F };
    uint32_t const ces[9] = { 0x18F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_009)
{
    // 1D84D 0061;	
    // (ù°ç) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD	[18F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84D, 0x0061 };
    uint32_t const ces[9] = { 0x18F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_010)
{
    // 1D84D 0041;	
    // (ù°ç) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD	[18F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D84D, 0x0041 };
    uint32_t const ces[9] = { 0x18F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_011)
{
    // 1D84D 0062;	
    // (ù°ç) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD	[18F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84D, 0x0062 };
    uint32_t const ces[9] = { 0x18F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_012)
{
    // 1D84E 0021;	
    // (ù°é) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD FOUR BENT	[18F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84E, 0x0021 };
    uint32_t const ces[9] = { 0x18F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_013)
{
    // 1D84E 003F;	
    // (ù°é) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD FOUR BENT	[18F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84E, 0x003F };
    uint32_t const ces[9] = { 0x18F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_014)
{
    // 1D84E 0061;	
    // (ù°é) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD FOUR BENT	[18F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84E, 0x0061 };
    uint32_t const ces[9] = { 0x18F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_015)
{
    // 1D84E 0041;	
    // (ù°é) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD FOUR BENT	[18F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D84E, 0x0041 };
    uint32_t const ces[9] = { 0x18F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_016)
{
    // 1D84E 0062;	
    // (ù°é) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD FOUR BENT	[18F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84E, 0x0062 };
    uint32_t const ces[9] = { 0x18F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_017)
{
    // 1D84F 0021;	
    // (ù°è) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD FOUR BENT	[18F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84F, 0x0021 };
    uint32_t const ces[9] = { 0x18F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_018)
{
    // 1D84F 003F;	
    // (ù°è) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD FOUR BENT	[18F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84F, 0x003F };
    uint32_t const ces[9] = { 0x18F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_019)
{
    // 1D84F 0061;	
    // (ù°è) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD FOUR BENT	[18F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84F, 0x0061 };
    uint32_t const ces[9] = { 0x18F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_020)
{
    // 1D84F 0041;	
    // (ù°è) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD FOUR BENT	[18F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D84F, 0x0041 };
    uint32_t const ces[9] = { 0x18F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_021)
{
    // 1D84F 0062;	
    // (ù°è) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD FOUR BENT	[18F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D84F, 0x0062 };
    uint32_t const ces[9] = { 0x18F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_022)
{
    // 1D850 0021;	
    // (ù°ê) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD BENT	[18F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D850, 0x0021 };
    uint32_t const ces[9] = { 0x18F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_023)
{
    // 1D850 003F;	
    // (ù°ê) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD BENT	[18F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D850, 0x003F };
    uint32_t const ces[9] = { 0x18F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_024)
{
    // 1D850 0061;	
    // (ù°ê) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD BENT	[18F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D850, 0x0061 };
    uint32_t const ces[9] = { 0x18F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_025)
{
    // 1D850 0041;	
    // (ù°ê) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD BENT	[18F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D850, 0x0041 };
    uint32_t const ces[9] = { 0x18F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_026)
{
    // 1D850 0062;	
    // (ù°ê) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD BENT	[18F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D850, 0x0062 };
    uint32_t const ces[9] = { 0x18F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_027)
{
    // 1D851 0021;	
    // (ù°ë) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD BENT	[18F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D851, 0x0021 };
    uint32_t const ces[9] = { 0x18F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_028)
{
    // 1D851 003F;	
    // (ù°ë) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD BENT	[18F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D851, 0x003F };
    uint32_t const ces[9] = { 0x18F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_029)
{
    // 1D851 0061;	
    // (ù°ë) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD BENT	[18F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D851, 0x0061 };
    uint32_t const ces[9] = { 0x18F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_030)
{
    // 1D851 0041;	
    // (ù°ë) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD BENT	[18F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D851, 0x0041 };
    uint32_t const ces[9] = { 0x18F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_031)
{
    // 1D851 0062;	
    // (ù°ë) SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD BENT	[18F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D851, 0x0062 };
    uint32_t const ces[9] = { 0x18F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_032)
{
    // 1D852 0021;	
    // (ù°í) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD THUMB FORWARD	[18F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D852, 0x0021 };
    uint32_t const ces[9] = { 0x18F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_033)
{
    // 1D852 003F;	
    // (ù°í) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD THUMB FORWARD	[18F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D852, 0x003F };
    uint32_t const ces[9] = { 0x18F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_034)
{
    // 1D852 0061;	
    // (ù°í) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD THUMB FORWARD	[18F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D852, 0x0061 };
    uint32_t const ces[9] = { 0x18F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_035)
{
    // 1D852 0041;	
    // (ù°í) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD THUMB FORWARD	[18F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D852, 0x0041 };
    uint32_t const ces[9] = { 0x18F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_036)
{
    // 1D852 0062;	
    // (ù°í) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD THUMB FORWARD	[18F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D852, 0x0062 };
    uint32_t const ces[9] = { 0x18F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_037)
{
    // 1D853 0021;	
    // (ù°ì) SIGNWRITING HAND-CUP FIVE FINGERS SPREAD	[18F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D853, 0x0021 };
    uint32_t const ces[9] = { 0x18F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_038)
{
    // 1D853 003F;	
    // (ù°ì) SIGNWRITING HAND-CUP FIVE FINGERS SPREAD	[18F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D853, 0x003F };
    uint32_t const ces[9] = { 0x18F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_039)
{
    // 1D853 0061;	
    // (ù°ì) SIGNWRITING HAND-CUP FIVE FINGERS SPREAD	[18F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D853, 0x0061 };
    uint32_t const ces[9] = { 0x18F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_040)
{
    // 1D853 0041;	
    // (ù°ì) SIGNWRITING HAND-CUP FIVE FINGERS SPREAD	[18F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D853, 0x0041 };
    uint32_t const ces[9] = { 0x18F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_041)
{
    // 1D853 0062;	
    // (ù°ì) SIGNWRITING HAND-CUP FIVE FINGERS SPREAD	[18F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D853, 0x0062 };
    uint32_t const ces[9] = { 0x18F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_042)
{
    // 1D854 0021;	
    // (ù°î) SIGNWRITING HAND-CUP FIVE FINGERS SPREAD OPEN	[18F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D854, 0x0021 };
    uint32_t const ces[9] = { 0x18F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_043)
{
    // 1D854 003F;	
    // (ù°î) SIGNWRITING HAND-CUP FIVE FINGERS SPREAD OPEN	[18F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D854, 0x003F };
    uint32_t const ces[9] = { 0x18F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_044)
{
    // 1D854 0061;	
    // (ù°î) SIGNWRITING HAND-CUP FIVE FINGERS SPREAD OPEN	[18F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D854, 0x0061 };
    uint32_t const ces[9] = { 0x18F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_045)
{
    // 1D854 0041;	
    // (ù°î) SIGNWRITING HAND-CUP FIVE FINGERS SPREAD OPEN	[18F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D854, 0x0041 };
    uint32_t const ces[9] = { 0x18F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_046)
{
    // 1D854 0062;	
    // (ù°î) SIGNWRITING HAND-CUP FIVE FINGERS SPREAD OPEN	[18F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D854, 0x0062 };
    uint32_t const ces[9] = { 0x18F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_047)
{
    // 1D855 0021;	
    // (ù°ï) SIGNWRITING HAND-HINGE FIVE FINGERS SPREAD OPEN	[18F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D855, 0x0021 };
    uint32_t const ces[9] = { 0x18F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_048)
{
    // 1D855 003F;	
    // (ù°ï) SIGNWRITING HAND-HINGE FIVE FINGERS SPREAD OPEN	[18F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D855, 0x003F };
    uint32_t const ces[9] = { 0x18F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_049)
{
    // 1D855 0061;	
    // (ù°ï) SIGNWRITING HAND-HINGE FIVE FINGERS SPREAD OPEN	[18F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D855, 0x0061 };
    uint32_t const ces[9] = { 0x18F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_050)
{
    // 1D855 0041;	
    // (ù°ï) SIGNWRITING HAND-HINGE FIVE FINGERS SPREAD OPEN	[18F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D855, 0x0041 };
    uint32_t const ces[9] = { 0x18F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_051)
{
    // 1D855 0062;	
    // (ù°ï) SIGNWRITING HAND-HINGE FIVE FINGERS SPREAD OPEN	[18F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D855, 0x0062 };
    uint32_t const ces[9] = { 0x18F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_052)
{
    // 1D856 0021;	
    // (ù°ñ) SIGNWRITING HAND-OVAL FIVE FINGERS SPREAD	[18F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D856, 0x0021 };
    uint32_t const ces[9] = { 0x18F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_053)
{
    // 1D856 003F;	
    // (ù°ñ) SIGNWRITING HAND-OVAL FIVE FINGERS SPREAD	[18F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D856, 0x003F };
    uint32_t const ces[9] = { 0x18F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_054)
{
    // 1D856 0061;	
    // (ù°ñ) SIGNWRITING HAND-OVAL FIVE FINGERS SPREAD	[18F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D856, 0x0061 };
    uint32_t const ces[9] = { 0x18F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_055)
{
    // 1D856 0041;	
    // (ù°ñ) SIGNWRITING HAND-OVAL FIVE FINGERS SPREAD	[18F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D856, 0x0041 };
    uint32_t const ces[9] = { 0x18F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_056)
{
    // 1D856 0062;	
    // (ù°ñ) SIGNWRITING HAND-OVAL FIVE FINGERS SPREAD	[18F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D856, 0x0062 };
    uint32_t const ces[9] = { 0x18F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_057)
{
    // 1D857 0021;	
    // (ù°ó) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED	[18FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D857, 0x0021 };
    uint32_t const ces[9] = { 0x18FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_058)
{
    // 1D857 003F;	
    // (ù°ó) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED	[18FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D857, 0x003F };
    uint32_t const ces[9] = { 0x18FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_059)
{
    // 1D857 0061;	
    // (ù°ó) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED	[18FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D857, 0x0061 };
    uint32_t const ces[9] = { 0x18FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_060)
{
    // 1D857 0041;	
    // (ù°ó) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED	[18FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D857, 0x0041 };
    uint32_t const ces[9] = { 0x18FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_061)
{
    // 1D857 0062;	
    // (ù°ó) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED	[18FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D857, 0x0062 };
    uint32_t const ces[9] = { 0x18FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_062)
{
    // 1D858 0021;	
    // (ù°ò) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED THUMB SIDE	[18FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D858, 0x0021 };
    uint32_t const ces[9] = { 0x18FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_063)
{
    // 1D858 003F;	
    // (ù°ò) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED THUMB SIDE	[18FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D858, 0x003F };
    uint32_t const ces[9] = { 0x18FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_064)
{
    // 1D858 0061;	
    // (ù°ò) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED THUMB SIDE	[18FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D858, 0x0061 };
    uint32_t const ces[9] = { 0x18FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_065)
{
    // 1D858 0041;	
    // (ù°ò) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED THUMB SIDE	[18FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D858, 0x0041 };
    uint32_t const ces[9] = { 0x18FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_066)
{
    // 1D858 0062;	
    // (ù°ò) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED THUMB SIDE	[18FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D858, 0x0062 };
    uint32_t const ces[9] = { 0x18FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_067)
{
    // 1D859 0021;	
    // (ù°ô) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED NO THUMB	[18FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D859, 0x0021 };
    uint32_t const ces[9] = { 0x18FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_068)
{
    // 1D859 003F;	
    // (ù°ô) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED NO THUMB	[18FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D859, 0x003F };
    uint32_t const ces[9] = { 0x18FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_069)
{
    // 1D859 0061;	
    // (ù°ô) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED NO THUMB	[18FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D859, 0x0061 };
    uint32_t const ces[9] = { 0x18FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_070)
{
    // 1D859 0041;	
    // (ù°ô) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED NO THUMB	[18FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D859, 0x0041 };
    uint32_t const ces[9] = { 0x18FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_071)
{
    // 1D859 0062;	
    // (ù°ô) SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED NO THUMB	[18FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D859, 0x0062 };
    uint32_t const ces[9] = { 0x18FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_072)
{
    // 1D85A 0021;	
    // (ù°ö) SIGNWRITING HAND-FLAT	[18FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85A, 0x0021 };
    uint32_t const ces[9] = { 0x18FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_073)
{
    // 1D85A 003F;	
    // (ù°ö) SIGNWRITING HAND-FLAT	[18FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85A, 0x003F };
    uint32_t const ces[9] = { 0x18FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_074)
{
    // 1D85A 0061;	
    // (ù°ö) SIGNWRITING HAND-FLAT	[18FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85A, 0x0061 };
    uint32_t const ces[9] = { 0x18FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_075)
{
    // 1D85A 0041;	
    // (ù°ö) SIGNWRITING HAND-FLAT	[18FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D85A, 0x0041 };
    uint32_t const ces[9] = { 0x18FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_076)
{
    // 1D85A 0062;	
    // (ù°ö) SIGNWRITING HAND-FLAT	[18FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85A, 0x0062 };
    uint32_t const ces[9] = { 0x18FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_077)
{
    // 1D85B 0021;	
    // (ù°õ) SIGNWRITING HAND-FLAT BETWEEN PALM FACINGS	[18FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85B, 0x0021 };
    uint32_t const ces[9] = { 0x18FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_078)
{
    // 1D85B 003F;	
    // (ù°õ) SIGNWRITING HAND-FLAT BETWEEN PALM FACINGS	[18FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85B, 0x003F };
    uint32_t const ces[9] = { 0x18FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_079)
{
    // 1D85B 0061;	
    // (ù°õ) SIGNWRITING HAND-FLAT BETWEEN PALM FACINGS	[18FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85B, 0x0061 };
    uint32_t const ces[9] = { 0x18FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_080)
{
    // 1D85B 0041;	
    // (ù°õ) SIGNWRITING HAND-FLAT BETWEEN PALM FACINGS	[18FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D85B, 0x0041 };
    uint32_t const ces[9] = { 0x18FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_081)
{
    // 1D85B 0062;	
    // (ù°õ) SIGNWRITING HAND-FLAT BETWEEN PALM FACINGS	[18FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85B, 0x0062 };
    uint32_t const ces[9] = { 0x18FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_082)
{
    // 1D85C 0021;	
    // (ù°ú) SIGNWRITING HAND-FLAT HEEL	[18FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85C, 0x0021 };
    uint32_t const ces[9] = { 0x18FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_083)
{
    // 1D85C 003F;	
    // (ù°ú) SIGNWRITING HAND-FLAT HEEL	[18FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85C, 0x003F };
    uint32_t const ces[9] = { 0x18FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_084)
{
    // 1D85C 0061;	
    // (ù°ú) SIGNWRITING HAND-FLAT HEEL	[18FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85C, 0x0061 };
    uint32_t const ces[9] = { 0x18FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_085)
{
    // 1D85C 0041;	
    // (ù°ú) SIGNWRITING HAND-FLAT HEEL	[18FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D85C, 0x0041 };
    uint32_t const ces[9] = { 0x18FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_086)
{
    // 1D85C 0062;	
    // (ù°ú) SIGNWRITING HAND-FLAT HEEL	[18FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85C, 0x0062 };
    uint32_t const ces[9] = { 0x18FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_087)
{
    // 1D85D 0021;	
    // (ù°ù) SIGNWRITING HAND-FLAT THUMB SIDE	[1900 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85D, 0x0021 };
    uint32_t const ces[9] = { 0x1900, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_088)
{
    // 1D85D 003F;	
    // (ù°ù) SIGNWRITING HAND-FLAT THUMB SIDE	[1900 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85D, 0x003F };
    uint32_t const ces[9] = { 0x1900, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_089)
{
    // 1D85D 0061;	
    // (ù°ù) SIGNWRITING HAND-FLAT THUMB SIDE	[1900 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85D, 0x0061 };
    uint32_t const ces[9] = { 0x1900, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_090)
{
    // 1D85D 0041;	
    // (ù°ù) SIGNWRITING HAND-FLAT THUMB SIDE	[1900 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D85D, 0x0041 };
    uint32_t const ces[9] = { 0x1900, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_091)
{
    // 1D85D 0062;	
    // (ù°ù) SIGNWRITING HAND-FLAT THUMB SIDE	[1900 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85D, 0x0062 };
    uint32_t const ces[9] = { 0x1900, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_092)
{
    // 1D85E 0021;	
    // (ù°û) SIGNWRITING HAND-FLAT HEEL THUMB SIDE	[1901 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85E, 0x0021 };
    uint32_t const ces[9] = { 0x1901, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_093)
{
    // 1D85E 003F;	
    // (ù°û) SIGNWRITING HAND-FLAT HEEL THUMB SIDE	[1901 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85E, 0x003F };
    uint32_t const ces[9] = { 0x1901, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_094)
{
    // 1D85E 0061;	
    // (ù°û) SIGNWRITING HAND-FLAT HEEL THUMB SIDE	[1901 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85E, 0x0061 };
    uint32_t const ces[9] = { 0x1901, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_095)
{
    // 1D85E 0041;	
    // (ù°û) SIGNWRITING HAND-FLAT HEEL THUMB SIDE	[1901 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D85E, 0x0041 };
    uint32_t const ces[9] = { 0x1901, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_096)
{
    // 1D85E 0062;	
    // (ù°û) SIGNWRITING HAND-FLAT HEEL THUMB SIDE	[1901 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85E, 0x0062 };
    uint32_t const ces[9] = { 0x1901, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_097)
{
    // 1D85F 0021;	
    // (ù°ü) SIGNWRITING HAND-FLAT THUMB BENT	[1902 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85F, 0x0021 };
    uint32_t const ces[9] = { 0x1902, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_098)
{
    // 1D85F 003F;	
    // (ù°ü) SIGNWRITING HAND-FLAT THUMB BENT	[1902 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85F, 0x003F };
    uint32_t const ces[9] = { 0x1902, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_099)
{
    // 1D85F 0061;	
    // (ù°ü) SIGNWRITING HAND-FLAT THUMB BENT	[1902 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85F, 0x0061 };
    uint32_t const ces[9] = { 0x1902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_100)
{
    // 1D85F 0041;	
    // (ù°ü) SIGNWRITING HAND-FLAT THUMB BENT	[1902 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D85F, 0x0041 };
    uint32_t const ces[9] = { 0x1902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_101)
{
    // 1D85F 0062;	
    // (ù°ü) SIGNWRITING HAND-FLAT THUMB BENT	[1902 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D85F, 0x0062 };
    uint32_t const ces[9] = { 0x1902, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_102)
{
    // 1D860 0021;	
    // (ù°†) SIGNWRITING HAND-FLAT THUMB FORWARD	[1903 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D860, 0x0021 };
    uint32_t const ces[9] = { 0x1903, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_103)
{
    // 1D860 003F;	
    // (ù°†) SIGNWRITING HAND-FLAT THUMB FORWARD	[1903 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D860, 0x003F };
    uint32_t const ces[9] = { 0x1903, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_104)
{
    // 1D860 0061;	
    // (ù°†) SIGNWRITING HAND-FLAT THUMB FORWARD	[1903 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D860, 0x0061 };
    uint32_t const ces[9] = { 0x1903, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_105)
{
    // 1D860 0041;	
    // (ù°†) SIGNWRITING HAND-FLAT THUMB FORWARD	[1903 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D860, 0x0041 };
    uint32_t const ces[9] = { 0x1903, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_106)
{
    // 1D860 0062;	
    // (ù°†) SIGNWRITING HAND-FLAT THUMB FORWARD	[1903 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D860, 0x0062 };
    uint32_t const ces[9] = { 0x1903, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_107)
{
    // 1D861 0021;	
    // (ù°°) SIGNWRITING HAND-FLAT SPLIT INDEX THUMB SIDE	[1904 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D861, 0x0021 };
    uint32_t const ces[9] = { 0x1904, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_108)
{
    // 1D861 003F;	
    // (ù°°) SIGNWRITING HAND-FLAT SPLIT INDEX THUMB SIDE	[1904 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D861, 0x003F };
    uint32_t const ces[9] = { 0x1904, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_109)
{
    // 1D861 0061;	
    // (ù°°) SIGNWRITING HAND-FLAT SPLIT INDEX THUMB SIDE	[1904 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D861, 0x0061 };
    uint32_t const ces[9] = { 0x1904, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_110)
{
    // 1D861 0041;	
    // (ù°°) SIGNWRITING HAND-FLAT SPLIT INDEX THUMB SIDE	[1904 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D861, 0x0041 };
    uint32_t const ces[9] = { 0x1904, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_111)
{
    // 1D861 0062;	
    // (ù°°) SIGNWRITING HAND-FLAT SPLIT INDEX THUMB SIDE	[1904 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D861, 0x0062 };
    uint32_t const ces[9] = { 0x1904, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_112)
{
    // 1D862 0021;	
    // (ù°¢) SIGNWRITING HAND-FLAT SPLIT CENTRE	[1905 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D862, 0x0021 };
    uint32_t const ces[9] = { 0x1905, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_113)
{
    // 1D862 003F;	
    // (ù°¢) SIGNWRITING HAND-FLAT SPLIT CENTRE	[1905 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D862, 0x003F };
    uint32_t const ces[9] = { 0x1905, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_114)
{
    // 1D862 0061;	
    // (ù°¢) SIGNWRITING HAND-FLAT SPLIT CENTRE	[1905 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D862, 0x0061 };
    uint32_t const ces[9] = { 0x1905, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_115)
{
    // 1D862 0041;	
    // (ù°¢) SIGNWRITING HAND-FLAT SPLIT CENTRE	[1905 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D862, 0x0041 };
    uint32_t const ces[9] = { 0x1905, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_116)
{
    // 1D862 0062;	
    // (ù°¢) SIGNWRITING HAND-FLAT SPLIT CENTRE	[1905 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D862, 0x0062 };
    uint32_t const ces[9] = { 0x1905, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_117)
{
    // 1D863 0021;	
    // (ù°£) SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE	[1906 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D863, 0x0021 };
    uint32_t const ces[9] = { 0x1906, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_118)
{
    // 1D863 003F;	
    // (ù°£) SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE	[1906 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D863, 0x003F };
    uint32_t const ces[9] = { 0x1906, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_119)
{
    // 1D863 0061;	
    // (ù°£) SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE	[1906 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D863, 0x0061 };
    uint32_t const ces[9] = { 0x1906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_120)
{
    // 1D863 0041;	
    // (ù°£) SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE	[1906 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D863, 0x0041 };
    uint32_t const ces[9] = { 0x1906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_121)
{
    // 1D863 0062;	
    // (ù°£) SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE	[1906 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D863, 0x0062 };
    uint32_t const ces[9] = { 0x1906, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_122)
{
    // 1D864 0021;	
    // (ù°§) SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE BENT	[1907 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D864, 0x0021 };
    uint32_t const ces[9] = { 0x1907, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_123)
{
    // 1D864 003F;	
    // (ù°§) SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE BENT	[1907 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D864, 0x003F };
    uint32_t const ces[9] = { 0x1907, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_124)
{
    // 1D864 0061;	
    // (ù°§) SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE BENT	[1907 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D864, 0x0061 };
    uint32_t const ces[9] = { 0x1907, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_125)
{
    // 1D864 0041;	
    // (ù°§) SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE BENT	[1907 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D864, 0x0041 };
    uint32_t const ces[9] = { 0x1907, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_126)
{
    // 1D864 0062;	
    // (ù°§) SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE BENT	[1907 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D864, 0x0062 };
    uint32_t const ces[9] = { 0x1907, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_127)
{
    // 1D865 0021;	
    // (ù°•) SIGNWRITING HAND-FLAT SPLIT LITTLE	[1908 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D865, 0x0021 };
    uint32_t const ces[9] = { 0x1908, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_128)
{
    // 1D865 003F;	
    // (ù°•) SIGNWRITING HAND-FLAT SPLIT LITTLE	[1908 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D865, 0x003F };
    uint32_t const ces[9] = { 0x1908, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_129)
{
    // 1D865 0061;	
    // (ù°•) SIGNWRITING HAND-FLAT SPLIT LITTLE	[1908 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D865, 0x0061 };
    uint32_t const ces[9] = { 0x1908, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_130)
{
    // 1D865 0041;	
    // (ù°•) SIGNWRITING HAND-FLAT SPLIT LITTLE	[1908 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D865, 0x0041 };
    uint32_t const ces[9] = { 0x1908, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_131)
{
    // 1D865 0062;	
    // (ù°•) SIGNWRITING HAND-FLAT SPLIT LITTLE	[1908 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D865, 0x0062 };
    uint32_t const ces[9] = { 0x1908, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_132)
{
    // 1D866 0021;	
    // (ù°¶) SIGNWRITING HAND-CLAW	[1909 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D866, 0x0021 };
    uint32_t const ces[9] = { 0x1909, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_133)
{
    // 1D866 003F;	
    // (ù°¶) SIGNWRITING HAND-CLAW	[1909 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D866, 0x003F };
    uint32_t const ces[9] = { 0x1909, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_134)
{
    // 1D866 0061;	
    // (ù°¶) SIGNWRITING HAND-CLAW	[1909 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D866, 0x0061 };
    uint32_t const ces[9] = { 0x1909, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_135)
{
    // 1D866 0041;	
    // (ù°¶) SIGNWRITING HAND-CLAW	[1909 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D866, 0x0041 };
    uint32_t const ces[9] = { 0x1909, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_136)
{
    // 1D866 0062;	
    // (ù°¶) SIGNWRITING HAND-CLAW	[1909 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D866, 0x0062 };
    uint32_t const ces[9] = { 0x1909, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_137)
{
    // 1D867 0021;	
    // (ù°ß) SIGNWRITING HAND-CLAW THUMB SIDE	[190A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D867, 0x0021 };
    uint32_t const ces[9] = { 0x190A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_138)
{
    // 1D867 003F;	
    // (ù°ß) SIGNWRITING HAND-CLAW THUMB SIDE	[190A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D867, 0x003F };
    uint32_t const ces[9] = { 0x190A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_139)
{
    // 1D867 0061;	
    // (ù°ß) SIGNWRITING HAND-CLAW THUMB SIDE	[190A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D867, 0x0061 };
    uint32_t const ces[9] = { 0x190A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_140)
{
    // 1D867 0041;	
    // (ù°ß) SIGNWRITING HAND-CLAW THUMB SIDE	[190A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D867, 0x0041 };
    uint32_t const ces[9] = { 0x190A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_141)
{
    // 1D867 0062;	
    // (ù°ß) SIGNWRITING HAND-CLAW THUMB SIDE	[190A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D867, 0x0062 };
    uint32_t const ces[9] = { 0x190A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_142)
{
    // 1D868 0021;	
    // (ù°®) SIGNWRITING HAND-CLAW NO THUMB	[190B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D868, 0x0021 };
    uint32_t const ces[9] = { 0x190B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_143)
{
    // 1D868 003F;	
    // (ù°®) SIGNWRITING HAND-CLAW NO THUMB	[190B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D868, 0x003F };
    uint32_t const ces[9] = { 0x190B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_144)
{
    // 1D868 0061;	
    // (ù°®) SIGNWRITING HAND-CLAW NO THUMB	[190B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D868, 0x0061 };
    uint32_t const ces[9] = { 0x190B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_145)
{
    // 1D868 0041;	
    // (ù°®) SIGNWRITING HAND-CLAW NO THUMB	[190B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D868, 0x0041 };
    uint32_t const ces[9] = { 0x190B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_146)
{
    // 1D868 0062;	
    // (ù°®) SIGNWRITING HAND-CLAW NO THUMB	[190B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D868, 0x0062 };
    uint32_t const ces[9] = { 0x190B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_147)
{
    // 1D869 0021;	
    // (ù°©) SIGNWRITING HAND-CLAW THUMB FORWARD	[190C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D869, 0x0021 };
    uint32_t const ces[9] = { 0x190C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_148)
{
    // 1D869 003F;	
    // (ù°©) SIGNWRITING HAND-CLAW THUMB FORWARD	[190C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D869, 0x003F };
    uint32_t const ces[9] = { 0x190C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_149)
{
    // 1D869 0061;	
    // (ù°©) SIGNWRITING HAND-CLAW THUMB FORWARD	[190C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D869, 0x0061 };
    uint32_t const ces[9] = { 0x190C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_150)
{
    // 1D869 0041;	
    // (ù°©) SIGNWRITING HAND-CLAW THUMB FORWARD	[190C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D869, 0x0041 };
    uint32_t const ces[9] = { 0x190C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_151)
{
    // 1D869 0062;	
    // (ù°©) SIGNWRITING HAND-CLAW THUMB FORWARD	[190C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D869, 0x0062 };
    uint32_t const ces[9] = { 0x190C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_152)
{
    // 1D86A 0021;	
    // (ù°™) SIGNWRITING HAND-HOOK CURLICUE	[190D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86A, 0x0021 };
    uint32_t const ces[9] = { 0x190D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_153)
{
    // 1D86A 003F;	
    // (ù°™) SIGNWRITING HAND-HOOK CURLICUE	[190D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86A, 0x003F };
    uint32_t const ces[9] = { 0x190D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_154)
{
    // 1D86A 0061;	
    // (ù°™) SIGNWRITING HAND-HOOK CURLICUE	[190D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86A, 0x0061 };
    uint32_t const ces[9] = { 0x190D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_155)
{
    // 1D86A 0041;	
    // (ù°™) SIGNWRITING HAND-HOOK CURLICUE	[190D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D86A, 0x0041 };
    uint32_t const ces[9] = { 0x190D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_156)
{
    // 1D86A 0062;	
    // (ù°™) SIGNWRITING HAND-HOOK CURLICUE	[190D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86A, 0x0062 };
    uint32_t const ces[9] = { 0x190D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_157)
{
    // 1D86B 0021;	
    // (ù°´) SIGNWRITING HAND-HOOK	[190E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86B, 0x0021 };
    uint32_t const ces[9] = { 0x190E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_158)
{
    // 1D86B 003F;	
    // (ù°´) SIGNWRITING HAND-HOOK	[190E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86B, 0x003F };
    uint32_t const ces[9] = { 0x190E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_159)
{
    // 1D86B 0061;	
    // (ù°´) SIGNWRITING HAND-HOOK	[190E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86B, 0x0061 };
    uint32_t const ces[9] = { 0x190E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_160)
{
    // 1D86B 0041;	
    // (ù°´) SIGNWRITING HAND-HOOK	[190E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D86B, 0x0041 };
    uint32_t const ces[9] = { 0x190E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_161)
{
    // 1D86B 0062;	
    // (ù°´) SIGNWRITING HAND-HOOK	[190E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86B, 0x0062 };
    uint32_t const ces[9] = { 0x190E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_162)
{
    // 1D86C 0021;	
    // (ù°¨) SIGNWRITING HAND-CUP OPEN	[190F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86C, 0x0021 };
    uint32_t const ces[9] = { 0x190F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_163)
{
    // 1D86C 003F;	
    // (ù°¨) SIGNWRITING HAND-CUP OPEN	[190F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86C, 0x003F };
    uint32_t const ces[9] = { 0x190F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_164)
{
    // 1D86C 0061;	
    // (ù°¨) SIGNWRITING HAND-CUP OPEN	[190F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86C, 0x0061 };
    uint32_t const ces[9] = { 0x190F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_165)
{
    // 1D86C 0041;	
    // (ù°¨) SIGNWRITING HAND-CUP OPEN	[190F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D86C, 0x0041 };
    uint32_t const ces[9] = { 0x190F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_166)
{
    // 1D86C 0062;	
    // (ù°¨) SIGNWRITING HAND-CUP OPEN	[190F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86C, 0x0062 };
    uint32_t const ces[9] = { 0x190F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_167)
{
    // 1D86D 0021;	
    // (ù°≠) SIGNWRITING HAND-CUP	[1910 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86D, 0x0021 };
    uint32_t const ces[9] = { 0x1910, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_168)
{
    // 1D86D 003F;	
    // (ù°≠) SIGNWRITING HAND-CUP	[1910 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86D, 0x003F };
    uint32_t const ces[9] = { 0x1910, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_169)
{
    // 1D86D 0061;	
    // (ù°≠) SIGNWRITING HAND-CUP	[1910 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86D, 0x0061 };
    uint32_t const ces[9] = { 0x1910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_170)
{
    // 1D86D 0041;	
    // (ù°≠) SIGNWRITING HAND-CUP	[1910 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D86D, 0x0041 };
    uint32_t const ces[9] = { 0x1910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_171)
{
    // 1D86D 0062;	
    // (ù°≠) SIGNWRITING HAND-CUP	[1910 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86D, 0x0062 };
    uint32_t const ces[9] = { 0x1910, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_172)
{
    // 1D86E 0021;	
    // (ù°Æ) SIGNWRITING HAND-CUP OPEN THUMB SIDE	[1911 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86E, 0x0021 };
    uint32_t const ces[9] = { 0x1911, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_173)
{
    // 1D86E 003F;	
    // (ù°Æ) SIGNWRITING HAND-CUP OPEN THUMB SIDE	[1911 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86E, 0x003F };
    uint32_t const ces[9] = { 0x1911, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_174)
{
    // 1D86E 0061;	
    // (ù°Æ) SIGNWRITING HAND-CUP OPEN THUMB SIDE	[1911 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86E, 0x0061 };
    uint32_t const ces[9] = { 0x1911, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_175)
{
    // 1D86E 0041;	
    // (ù°Æ) SIGNWRITING HAND-CUP OPEN THUMB SIDE	[1911 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D86E, 0x0041 };
    uint32_t const ces[9] = { 0x1911, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_176)
{
    // 1D86E 0062;	
    // (ù°Æ) SIGNWRITING HAND-CUP OPEN THUMB SIDE	[1911 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86E, 0x0062 };
    uint32_t const ces[9] = { 0x1911, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_177)
{
    // 1D86F 0021;	
    // (ù°Ø) SIGNWRITING HAND-CUP THUMB SIDE	[1912 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86F, 0x0021 };
    uint32_t const ces[9] = { 0x1912, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_178)
{
    // 1D86F 003F;	
    // (ù°Ø) SIGNWRITING HAND-CUP THUMB SIDE	[1912 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86F, 0x003F };
    uint32_t const ces[9] = { 0x1912, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_179)
{
    // 1D86F 0061;	
    // (ù°Ø) SIGNWRITING HAND-CUP THUMB SIDE	[1912 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86F, 0x0061 };
    uint32_t const ces[9] = { 0x1912, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_180)
{
    // 1D86F 0041;	
    // (ù°Ø) SIGNWRITING HAND-CUP THUMB SIDE	[1912 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D86F, 0x0041 };
    uint32_t const ces[9] = { 0x1912, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_181)
{
    // 1D86F 0062;	
    // (ù°Ø) SIGNWRITING HAND-CUP THUMB SIDE	[1912 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D86F, 0x0062 };
    uint32_t const ces[9] = { 0x1912, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_182)
{
    // 1D870 0021;	
    // (ù°∞) SIGNWRITING HAND-CUP OPEN NO THUMB	[1913 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D870, 0x0021 };
    uint32_t const ces[9] = { 0x1913, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_183)
{
    // 1D870 003F;	
    // (ù°∞) SIGNWRITING HAND-CUP OPEN NO THUMB	[1913 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D870, 0x003F };
    uint32_t const ces[9] = { 0x1913, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_184)
{
    // 1D870 0061;	
    // (ù°∞) SIGNWRITING HAND-CUP OPEN NO THUMB	[1913 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D870, 0x0061 };
    uint32_t const ces[9] = { 0x1913, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_185)
{
    // 1D870 0041;	
    // (ù°∞) SIGNWRITING HAND-CUP OPEN NO THUMB	[1913 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D870, 0x0041 };
    uint32_t const ces[9] = { 0x1913, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_186)
{
    // 1D870 0062;	
    // (ù°∞) SIGNWRITING HAND-CUP OPEN NO THUMB	[1913 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D870, 0x0062 };
    uint32_t const ces[9] = { 0x1913, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_187)
{
    // 1D871 0021;	
    // (ù°±) SIGNWRITING HAND-CUP NO THUMB	[1914 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D871, 0x0021 };
    uint32_t const ces[9] = { 0x1914, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_188)
{
    // 1D871 003F;	
    // (ù°±) SIGNWRITING HAND-CUP NO THUMB	[1914 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D871, 0x003F };
    uint32_t const ces[9] = { 0x1914, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_189)
{
    // 1D871 0061;	
    // (ù°±) SIGNWRITING HAND-CUP NO THUMB	[1914 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D871, 0x0061 };
    uint32_t const ces[9] = { 0x1914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_190)
{
    // 1D871 0041;	
    // (ù°±) SIGNWRITING HAND-CUP NO THUMB	[1914 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D871, 0x0041 };
    uint32_t const ces[9] = { 0x1914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_191)
{
    // 1D871 0062;	
    // (ù°±) SIGNWRITING HAND-CUP NO THUMB	[1914 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D871, 0x0062 };
    uint32_t const ces[9] = { 0x1914, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_192)
{
    // 1D872 0021;	
    // (ù°≤) SIGNWRITING HAND-CUP OPEN THUMB FORWARD	[1915 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D872, 0x0021 };
    uint32_t const ces[9] = { 0x1915, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_193)
{
    // 1D872 003F;	
    // (ù°≤) SIGNWRITING HAND-CUP OPEN THUMB FORWARD	[1915 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D872, 0x003F };
    uint32_t const ces[9] = { 0x1915, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_194)
{
    // 1D872 0061;	
    // (ù°≤) SIGNWRITING HAND-CUP OPEN THUMB FORWARD	[1915 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D872, 0x0061 };
    uint32_t const ces[9] = { 0x1915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_195)
{
    // 1D872 0041;	
    // (ù°≤) SIGNWRITING HAND-CUP OPEN THUMB FORWARD	[1915 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D872, 0x0041 };
    uint32_t const ces[9] = { 0x1915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_196)
{
    // 1D872 0062;	
    // (ù°≤) SIGNWRITING HAND-CUP OPEN THUMB FORWARD	[1915 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D872, 0x0062 };
    uint32_t const ces[9] = { 0x1915, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_197)
{
    // 1D873 0021;	
    // (ù°≥) SIGNWRITING HAND-CUP THUMB FORWARD	[1916 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D873, 0x0021 };
    uint32_t const ces[9] = { 0x1916, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_198)
{
    // 1D873 003F;	
    // (ù°≥) SIGNWRITING HAND-CUP THUMB FORWARD	[1916 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D873, 0x003F };
    uint32_t const ces[9] = { 0x1916, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_199)
{
    // 1D873 0061;	
    // (ù°≥) SIGNWRITING HAND-CUP THUMB FORWARD	[1916 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D873, 0x0061 };
    uint32_t const ces[9] = { 0x1916, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_200)
{
    // 1D873 0041;	
    // (ù°≥) SIGNWRITING HAND-CUP THUMB FORWARD	[1916 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D873, 0x0041 };
    uint32_t const ces[9] = { 0x1916, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_201)
{
    // 1D873 0062;	
    // (ù°≥) SIGNWRITING HAND-CUP THUMB FORWARD	[1916 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D873, 0x0062 };
    uint32_t const ces[9] = { 0x1916, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_202)
{
    // 1D874 0021;	
    // (ù°¥) SIGNWRITING HAND-CURLICUE OPEN	[1917 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D874, 0x0021 };
    uint32_t const ces[9] = { 0x1917, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_203)
{
    // 1D874 003F;	
    // (ù°¥) SIGNWRITING HAND-CURLICUE OPEN	[1917 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D874, 0x003F };
    uint32_t const ces[9] = { 0x1917, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_204)
{
    // 1D874 0061;	
    // (ù°¥) SIGNWRITING HAND-CURLICUE OPEN	[1917 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D874, 0x0061 };
    uint32_t const ces[9] = { 0x1917, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_205)
{
    // 1D874 0041;	
    // (ù°¥) SIGNWRITING HAND-CURLICUE OPEN	[1917 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D874, 0x0041 };
    uint32_t const ces[9] = { 0x1917, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_206)
{
    // 1D874 0062;	
    // (ù°¥) SIGNWRITING HAND-CURLICUE OPEN	[1917 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D874, 0x0062 };
    uint32_t const ces[9] = { 0x1917, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_207)
{
    // 1D875 0021;	
    // (ù°µ) SIGNWRITING HAND-CURLICUE	[1918 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D875, 0x0021 };
    uint32_t const ces[9] = { 0x1918, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_208)
{
    // 1D875 003F;	
    // (ù°µ) SIGNWRITING HAND-CURLICUE	[1918 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D875, 0x003F };
    uint32_t const ces[9] = { 0x1918, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_209)
{
    // 1D875 0061;	
    // (ù°µ) SIGNWRITING HAND-CURLICUE	[1918 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D875, 0x0061 };
    uint32_t const ces[9] = { 0x1918, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_210)
{
    // 1D875 0041;	
    // (ù°µ) SIGNWRITING HAND-CURLICUE	[1918 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D875, 0x0041 };
    uint32_t const ces[9] = { 0x1918, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_211)
{
    // 1D875 0062;	
    // (ù°µ) SIGNWRITING HAND-CURLICUE	[1918 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D875, 0x0062 };
    uint32_t const ces[9] = { 0x1918, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_212)
{
    // 1D876 0021;	
    // (ù°∂) SIGNWRITING HAND-CIRCLE	[1919 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D876, 0x0021 };
    uint32_t const ces[9] = { 0x1919, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_213)
{
    // 1D876 003F;	
    // (ù°∂) SIGNWRITING HAND-CIRCLE	[1919 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D876, 0x003F };
    uint32_t const ces[9] = { 0x1919, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_214)
{
    // 1D876 0061;	
    // (ù°∂) SIGNWRITING HAND-CIRCLE	[1919 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D876, 0x0061 };
    uint32_t const ces[9] = { 0x1919, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_215)
{
    // 1D876 0041;	
    // (ù°∂) SIGNWRITING HAND-CIRCLE	[1919 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D876, 0x0041 };
    uint32_t const ces[9] = { 0x1919, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_216)
{
    // 1D876 0062;	
    // (ù°∂) SIGNWRITING HAND-CIRCLE	[1919 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D876, 0x0062 };
    uint32_t const ces[9] = { 0x1919, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_217)
{
    // 1D877 0021;	
    // (ù°∑) SIGNWRITING HAND-OVAL	[191A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D877, 0x0021 };
    uint32_t const ces[9] = { 0x191A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_218)
{
    // 1D877 003F;	
    // (ù°∑) SIGNWRITING HAND-OVAL	[191A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D877, 0x003F };
    uint32_t const ces[9] = { 0x191A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_219)
{
    // 1D877 0061;	
    // (ù°∑) SIGNWRITING HAND-OVAL	[191A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D877, 0x0061 };
    uint32_t const ces[9] = { 0x191A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_220)
{
    // 1D877 0041;	
    // (ù°∑) SIGNWRITING HAND-OVAL	[191A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D877, 0x0041 };
    uint32_t const ces[9] = { 0x191A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_221)
{
    // 1D877 0062;	
    // (ù°∑) SIGNWRITING HAND-OVAL	[191A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D877, 0x0062 };
    uint32_t const ces[9] = { 0x191A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_222)
{
    // 1D878 0021;	
    // (ù°∏) SIGNWRITING HAND-OVAL THUMB SIDE	[191B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D878, 0x0021 };
    uint32_t const ces[9] = { 0x191B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_223)
{
    // 1D878 003F;	
    // (ù°∏) SIGNWRITING HAND-OVAL THUMB SIDE	[191B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D878, 0x003F };
    uint32_t const ces[9] = { 0x191B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_224)
{
    // 1D878 0061;	
    // (ù°∏) SIGNWRITING HAND-OVAL THUMB SIDE	[191B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D878, 0x0061 };
    uint32_t const ces[9] = { 0x191B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_225)
{
    // 1D878 0041;	
    // (ù°∏) SIGNWRITING HAND-OVAL THUMB SIDE	[191B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D878, 0x0041 };
    uint32_t const ces[9] = { 0x191B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_226)
{
    // 1D878 0062;	
    // (ù°∏) SIGNWRITING HAND-OVAL THUMB SIDE	[191B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D878, 0x0062 };
    uint32_t const ces[9] = { 0x191B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_227)
{
    // 1D879 0021;	
    // (ù°π) SIGNWRITING HAND-OVAL NO THUMB	[191C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D879, 0x0021 };
    uint32_t const ces[9] = { 0x191C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_228)
{
    // 1D879 003F;	
    // (ù°π) SIGNWRITING HAND-OVAL NO THUMB	[191C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D879, 0x003F };
    uint32_t const ces[9] = { 0x191C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_229)
{
    // 1D879 0061;	
    // (ù°π) SIGNWRITING HAND-OVAL NO THUMB	[191C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D879, 0x0061 };
    uint32_t const ces[9] = { 0x191C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_230)
{
    // 1D879 0041;	
    // (ù°π) SIGNWRITING HAND-OVAL NO THUMB	[191C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D879, 0x0041 };
    uint32_t const ces[9] = { 0x191C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_231)
{
    // 1D879 0062;	
    // (ù°π) SIGNWRITING HAND-OVAL NO THUMB	[191C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D879, 0x0062 };
    uint32_t const ces[9] = { 0x191C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_232)
{
    // 1D87A 0021;	
    // (ù°∫) SIGNWRITING HAND-OVAL THUMB FORWARD	[191D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87A, 0x0021 };
    uint32_t const ces[9] = { 0x191D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_233)
{
    // 1D87A 003F;	
    // (ù°∫) SIGNWRITING HAND-OVAL THUMB FORWARD	[191D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87A, 0x003F };
    uint32_t const ces[9] = { 0x191D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_234)
{
    // 1D87A 0061;	
    // (ù°∫) SIGNWRITING HAND-OVAL THUMB FORWARD	[191D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87A, 0x0061 };
    uint32_t const ces[9] = { 0x191D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_235)
{
    // 1D87A 0041;	
    // (ù°∫) SIGNWRITING HAND-OVAL THUMB FORWARD	[191D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D87A, 0x0041 };
    uint32_t const ces[9] = { 0x191D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_236)
{
    // 1D87A 0062;	
    // (ù°∫) SIGNWRITING HAND-OVAL THUMB FORWARD	[191D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87A, 0x0062 };
    uint32_t const ces[9] = { 0x191D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_237)
{
    // 1D87B 0021;	
    // (ù°ª) SIGNWRITING HAND-HINGE OPEN	[191E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87B, 0x0021 };
    uint32_t const ces[9] = { 0x191E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_238)
{
    // 1D87B 003F;	
    // (ù°ª) SIGNWRITING HAND-HINGE OPEN	[191E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87B, 0x003F };
    uint32_t const ces[9] = { 0x191E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_239)
{
    // 1D87B 0061;	
    // (ù°ª) SIGNWRITING HAND-HINGE OPEN	[191E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87B, 0x0061 };
    uint32_t const ces[9] = { 0x191E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_240)
{
    // 1D87B 0041;	
    // (ù°ª) SIGNWRITING HAND-HINGE OPEN	[191E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D87B, 0x0041 };
    uint32_t const ces[9] = { 0x191E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_241)
{
    // 1D87B 0062;	
    // (ù°ª) SIGNWRITING HAND-HINGE OPEN	[191E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87B, 0x0062 };
    uint32_t const ces[9] = { 0x191E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_242)
{
    // 1D87C 0021;	
    // (ù°º) SIGNWRITING HAND-HINGE OPEN THUMB FORWARD	[191F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87C, 0x0021 };
    uint32_t const ces[9] = { 0x191F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_243)
{
    // 1D87C 003F;	
    // (ù°º) SIGNWRITING HAND-HINGE OPEN THUMB FORWARD	[191F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87C, 0x003F };
    uint32_t const ces[9] = { 0x191F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_244)
{
    // 1D87C 0061;	
    // (ù°º) SIGNWRITING HAND-HINGE OPEN THUMB FORWARD	[191F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87C, 0x0061 };
    uint32_t const ces[9] = { 0x191F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_245)
{
    // 1D87C 0041;	
    // (ù°º) SIGNWRITING HAND-HINGE OPEN THUMB FORWARD	[191F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D87C, 0x0041 };
    uint32_t const ces[9] = { 0x191F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_246)
{
    // 1D87C 0062;	
    // (ù°º) SIGNWRITING HAND-HINGE OPEN THUMB FORWARD	[191F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87C, 0x0062 };
    uint32_t const ces[9] = { 0x191F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_247)
{
    // 1D87D 0021;	
    // (ù°Ω) SIGNWRITING HAND-HINGE	[1920 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87D, 0x0021 };
    uint32_t const ces[9] = { 0x1920, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_248)
{
    // 1D87D 003F;	
    // (ù°Ω) SIGNWRITING HAND-HINGE	[1920 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87D, 0x003F };
    uint32_t const ces[9] = { 0x1920, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_249)
{
    // 1D87D 0061;	
    // (ù°Ω) SIGNWRITING HAND-HINGE	[1920 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87D, 0x0061 };
    uint32_t const ces[9] = { 0x1920, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_250)
{
    // 1D87D 0041;	
    // (ù°Ω) SIGNWRITING HAND-HINGE	[1920 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D87D, 0x0041 };
    uint32_t const ces[9] = { 0x1920, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_251)
{
    // 1D87D 0062;	
    // (ù°Ω) SIGNWRITING HAND-HINGE	[1920 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87D, 0x0062 };
    uint32_t const ces[9] = { 0x1920, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_252)
{
    // 1D87E 0021;	
    // (ù°æ) SIGNWRITING HAND-HINGE SMALL	[1921 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87E, 0x0021 };
    uint32_t const ces[9] = { 0x1921, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_253)
{
    // 1D87E 003F;	
    // (ù°æ) SIGNWRITING HAND-HINGE SMALL	[1921 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87E, 0x003F };
    uint32_t const ces[9] = { 0x1921, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_254)
{
    // 1D87E 0061;	
    // (ù°æ) SIGNWRITING HAND-HINGE SMALL	[1921 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87E, 0x0061 };
    uint32_t const ces[9] = { 0x1921, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_255)
{
    // 1D87E 0041;	
    // (ù°æ) SIGNWRITING HAND-HINGE SMALL	[1921 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D87E, 0x0041 };
    uint32_t const ces[9] = { 0x1921, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_256)
{
    // 1D87E 0062;	
    // (ù°æ) SIGNWRITING HAND-HINGE SMALL	[1921 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87E, 0x0062 };
    uint32_t const ces[9] = { 0x1921, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_257)
{
    // 1D87F 0021;	
    // (ù°ø) SIGNWRITING HAND-HINGE OPEN THUMB SIDE	[1922 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87F, 0x0021 };
    uint32_t const ces[9] = { 0x1922, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_258)
{
    // 1D87F 003F;	
    // (ù°ø) SIGNWRITING HAND-HINGE OPEN THUMB SIDE	[1922 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87F, 0x003F };
    uint32_t const ces[9] = { 0x1922, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_259)
{
    // 1D87F 0061;	
    // (ù°ø) SIGNWRITING HAND-HINGE OPEN THUMB SIDE	[1922 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87F, 0x0061 };
    uint32_t const ces[9] = { 0x1922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_260)
{
    // 1D87F 0041;	
    // (ù°ø) SIGNWRITING HAND-HINGE OPEN THUMB SIDE	[1922 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D87F, 0x0041 };
    uint32_t const ces[9] = { 0x1922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_261)
{
    // 1D87F 0062;	
    // (ù°ø) SIGNWRITING HAND-HINGE OPEN THUMB SIDE	[1922 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D87F, 0x0062 };
    uint32_t const ces[9] = { 0x1922, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_262)
{
    // 1D880 0021;	
    // (ù¢Ä) SIGNWRITING HAND-HINGE THUMB SIDE	[1923 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D880, 0x0021 };
    uint32_t const ces[9] = { 0x1923, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_263)
{
    // 1D880 003F;	
    // (ù¢Ä) SIGNWRITING HAND-HINGE THUMB SIDE	[1923 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D880, 0x003F };
    uint32_t const ces[9] = { 0x1923, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_264)
{
    // 1D880 0061;	
    // (ù¢Ä) SIGNWRITING HAND-HINGE THUMB SIDE	[1923 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D880, 0x0061 };
    uint32_t const ces[9] = { 0x1923, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_265)
{
    // 1D880 0041;	
    // (ù¢Ä) SIGNWRITING HAND-HINGE THUMB SIDE	[1923 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D880, 0x0041 };
    uint32_t const ces[9] = { 0x1923, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_266)
{
    // 1D880 0062;	
    // (ù¢Ä) SIGNWRITING HAND-HINGE THUMB SIDE	[1923 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D880, 0x0062 };
    uint32_t const ces[9] = { 0x1923, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_267)
{
    // 1D881 0021;	
    // (ù¢Å) SIGNWRITING HAND-HINGE OPEN NO THUMB	[1924 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D881, 0x0021 };
    uint32_t const ces[9] = { 0x1924, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_268)
{
    // 1D881 003F;	
    // (ù¢Å) SIGNWRITING HAND-HINGE OPEN NO THUMB	[1924 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D881, 0x003F };
    uint32_t const ces[9] = { 0x1924, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_269)
{
    // 1D881 0061;	
    // (ù¢Å) SIGNWRITING HAND-HINGE OPEN NO THUMB	[1924 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D881, 0x0061 };
    uint32_t const ces[9] = { 0x1924, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_270)
{
    // 1D881 0041;	
    // (ù¢Å) SIGNWRITING HAND-HINGE OPEN NO THUMB	[1924 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D881, 0x0041 };
    uint32_t const ces[9] = { 0x1924, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_271)
{
    // 1D881 0062;	
    // (ù¢Å) SIGNWRITING HAND-HINGE OPEN NO THUMB	[1924 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D881, 0x0062 };
    uint32_t const ces[9] = { 0x1924, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_272)
{
    // 1D882 0021;	
    // (ù¢Ç) SIGNWRITING HAND-HINGE NO THUMB	[1925 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D882, 0x0021 };
    uint32_t const ces[9] = { 0x1925, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_273)
{
    // 1D882 003F;	
    // (ù¢Ç) SIGNWRITING HAND-HINGE NO THUMB	[1925 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D882, 0x003F };
    uint32_t const ces[9] = { 0x1925, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_274)
{
    // 1D882 0061;	
    // (ù¢Ç) SIGNWRITING HAND-HINGE NO THUMB	[1925 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D882, 0x0061 };
    uint32_t const ces[9] = { 0x1925, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_275)
{
    // 1D882 0041;	
    // (ù¢Ç) SIGNWRITING HAND-HINGE NO THUMB	[1925 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D882, 0x0041 };
    uint32_t const ces[9] = { 0x1925, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_276)
{
    // 1D882 0062;	
    // (ù¢Ç) SIGNWRITING HAND-HINGE NO THUMB	[1925 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D882, 0x0062 };
    uint32_t const ces[9] = { 0x1925, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_277)
{
    // 1D883 0021;	
    // (ù¢É) SIGNWRITING HAND-HINGE THUMB SIDE TOUCHING INDEX	[1926 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D883, 0x0021 };
    uint32_t const ces[9] = { 0x1926, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_278)
{
    // 1D883 003F;	
    // (ù¢É) SIGNWRITING HAND-HINGE THUMB SIDE TOUCHING INDEX	[1926 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D883, 0x003F };
    uint32_t const ces[9] = { 0x1926, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_279)
{
    // 1D883 0061;	
    // (ù¢É) SIGNWRITING HAND-HINGE THUMB SIDE TOUCHING INDEX	[1926 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D883, 0x0061 };
    uint32_t const ces[9] = { 0x1926, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_280)
{
    // 1D883 0041;	
    // (ù¢É) SIGNWRITING HAND-HINGE THUMB SIDE TOUCHING INDEX	[1926 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D883, 0x0041 };
    uint32_t const ces[9] = { 0x1926, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_281)
{
    // 1D883 0062;	
    // (ù¢É) SIGNWRITING HAND-HINGE THUMB SIDE TOUCHING INDEX	[1926 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D883, 0x0062 };
    uint32_t const ces[9] = { 0x1926, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_282)
{
    // 1D884 0021;	
    // (ù¢Ñ) SIGNWRITING HAND-HINGE THUMB BETWEEN MIDDLE RING	[1927 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D884, 0x0021 };
    uint32_t const ces[9] = { 0x1927, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_283)
{
    // 1D884 003F;	
    // (ù¢Ñ) SIGNWRITING HAND-HINGE THUMB BETWEEN MIDDLE RING	[1927 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D884, 0x003F };
    uint32_t const ces[9] = { 0x1927, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_284)
{
    // 1D884 0061;	
    // (ù¢Ñ) SIGNWRITING HAND-HINGE THUMB BETWEEN MIDDLE RING	[1927 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D884, 0x0061 };
    uint32_t const ces[9] = { 0x1927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_285)
{
    // 1D884 0041;	
    // (ù¢Ñ) SIGNWRITING HAND-HINGE THUMB BETWEEN MIDDLE RING	[1927 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D884, 0x0041 };
    uint32_t const ces[9] = { 0x1927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_286)
{
    // 1D884 0062;	
    // (ù¢Ñ) SIGNWRITING HAND-HINGE THUMB BETWEEN MIDDLE RING	[1927 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D884, 0x0062 };
    uint32_t const ces[9] = { 0x1927, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_287)
{
    // 1D885 0021;	
    // (ù¢Ö) SIGNWRITING HAND-ANGLE	[1928 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D885, 0x0021 };
    uint32_t const ces[9] = { 0x1928, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_288)
{
    // 1D885 003F;	
    // (ù¢Ö) SIGNWRITING HAND-ANGLE	[1928 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D885, 0x003F };
    uint32_t const ces[9] = { 0x1928, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_289)
{
    // 1D885 0061;	
    // (ù¢Ö) SIGNWRITING HAND-ANGLE	[1928 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D885, 0x0061 };
    uint32_t const ces[9] = { 0x1928, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_290)
{
    // 1D885 0041;	
    // (ù¢Ö) SIGNWRITING HAND-ANGLE	[1928 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D885, 0x0041 };
    uint32_t const ces[9] = { 0x1928, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_291)
{
    // 1D885 0062;	
    // (ù¢Ö) SIGNWRITING HAND-ANGLE	[1928 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D885, 0x0062 };
    uint32_t const ces[9] = { 0x1928, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_292)
{
    // 1D886 0021;	
    // (ù¢Ü) SIGNWRITING HAND-FIST INDEX MIDDLE RING	[1929 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D886, 0x0021 };
    uint32_t const ces[9] = { 0x1929, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_293)
{
    // 1D886 003F;	
    // (ù¢Ü) SIGNWRITING HAND-FIST INDEX MIDDLE RING	[1929 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D886, 0x003F };
    uint32_t const ces[9] = { 0x1929, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_294)
{
    // 1D886 0061;	
    // (ù¢Ü) SIGNWRITING HAND-FIST INDEX MIDDLE RING	[1929 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D886, 0x0061 };
    uint32_t const ces[9] = { 0x1929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_295)
{
    // 1D886 0041;	
    // (ù¢Ü) SIGNWRITING HAND-FIST INDEX MIDDLE RING	[1929 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D886, 0x0041 };
    uint32_t const ces[9] = { 0x1929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_296)
{
    // 1D886 0062;	
    // (ù¢Ü) SIGNWRITING HAND-FIST INDEX MIDDLE RING	[1929 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D886, 0x0062 };
    uint32_t const ces[9] = { 0x1929, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_297)
{
    // 1D887 0021;	
    // (ù¢á) SIGNWRITING HAND-CIRCLE INDEX MIDDLE RING	[192A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D887, 0x0021 };
    uint32_t const ces[9] = { 0x192A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_298)
{
    // 1D887 003F;	
    // (ù¢á) SIGNWRITING HAND-CIRCLE INDEX MIDDLE RING	[192A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D887, 0x003F };
    uint32_t const ces[9] = { 0x192A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_299)
{
    // 1D887 0061;	
    // (ù¢á) SIGNWRITING HAND-CIRCLE INDEX MIDDLE RING	[192A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D887, 0x0061 };
    uint32_t const ces[9] = { 0x192A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_300)
{
    // 1D887 0041;	
    // (ù¢á) SIGNWRITING HAND-CIRCLE INDEX MIDDLE RING	[192A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D887, 0x0041 };
    uint32_t const ces[9] = { 0x192A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_301)
{
    // 1D887 0062;	
    // (ù¢á) SIGNWRITING HAND-CIRCLE INDEX MIDDLE RING	[192A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D887, 0x0062 };
    uint32_t const ces[9] = { 0x192A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_302)
{
    // 1D888 0021;	
    // (ù¢à) SIGNWRITING HAND-HINGE INDEX MIDDLE RING	[192B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D888, 0x0021 };
    uint32_t const ces[9] = { 0x192B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_303)
{
    // 1D888 003F;	
    // (ù¢à) SIGNWRITING HAND-HINGE INDEX MIDDLE RING	[192B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D888, 0x003F };
    uint32_t const ces[9] = { 0x192B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_304)
{
    // 1D888 0061;	
    // (ù¢à) SIGNWRITING HAND-HINGE INDEX MIDDLE RING	[192B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D888, 0x0061 };
    uint32_t const ces[9] = { 0x192B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_305)
{
    // 1D888 0041;	
    // (ù¢à) SIGNWRITING HAND-HINGE INDEX MIDDLE RING	[192B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D888, 0x0041 };
    uint32_t const ces[9] = { 0x192B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_306)
{
    // 1D888 0062;	
    // (ù¢à) SIGNWRITING HAND-HINGE INDEX MIDDLE RING	[192B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D888, 0x0062 };
    uint32_t const ces[9] = { 0x192B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_307)
{
    // 1D889 0021;	
    // (ù¢â) SIGNWRITING HAND-ANGLE INDEX MIDDLE RING	[192C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D889, 0x0021 };
    uint32_t const ces[9] = { 0x192C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_308)
{
    // 1D889 003F;	
    // (ù¢â) SIGNWRITING HAND-ANGLE INDEX MIDDLE RING	[192C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D889, 0x003F };
    uint32_t const ces[9] = { 0x192C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_309)
{
    // 1D889 0061;	
    // (ù¢â) SIGNWRITING HAND-ANGLE INDEX MIDDLE RING	[192C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D889, 0x0061 };
    uint32_t const ces[9] = { 0x192C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_310)
{
    // 1D889 0041;	
    // (ù¢â) SIGNWRITING HAND-ANGLE INDEX MIDDLE RING	[192C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D889, 0x0041 };
    uint32_t const ces[9] = { 0x192C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_311)
{
    // 1D889 0062;	
    // (ù¢â) SIGNWRITING HAND-ANGLE INDEX MIDDLE RING	[192C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D889, 0x0062 };
    uint32_t const ces[9] = { 0x192C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_312)
{
    // 1D88A 0021;	
    // (ù¢ä) SIGNWRITING HAND-HINGE LITTLE	[192D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88A, 0x0021 };
    uint32_t const ces[9] = { 0x192D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_313)
{
    // 1D88A 003F;	
    // (ù¢ä) SIGNWRITING HAND-HINGE LITTLE	[192D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88A, 0x003F };
    uint32_t const ces[9] = { 0x192D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_314)
{
    // 1D88A 0061;	
    // (ù¢ä) SIGNWRITING HAND-HINGE LITTLE	[192D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88A, 0x0061 };
    uint32_t const ces[9] = { 0x192D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_315)
{
    // 1D88A 0041;	
    // (ù¢ä) SIGNWRITING HAND-HINGE LITTLE	[192D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D88A, 0x0041 };
    uint32_t const ces[9] = { 0x192D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_316)
{
    // 1D88A 0062;	
    // (ù¢ä) SIGNWRITING HAND-HINGE LITTLE	[192D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88A, 0x0062 };
    uint32_t const ces[9] = { 0x192D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_317)
{
    // 1D88B 0021;	
    // (ù¢ã) SIGNWRITING HAND-FIST INDEX MIDDLE RING BENT	[192E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88B, 0x0021 };
    uint32_t const ces[9] = { 0x192E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_318)
{
    // 1D88B 003F;	
    // (ù¢ã) SIGNWRITING HAND-FIST INDEX MIDDLE RING BENT	[192E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88B, 0x003F };
    uint32_t const ces[9] = { 0x192E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_319)
{
    // 1D88B 0061;	
    // (ù¢ã) SIGNWRITING HAND-FIST INDEX MIDDLE RING BENT	[192E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88B, 0x0061 };
    uint32_t const ces[9] = { 0x192E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_320)
{
    // 1D88B 0041;	
    // (ù¢ã) SIGNWRITING HAND-FIST INDEX MIDDLE RING BENT	[192E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D88B, 0x0041 };
    uint32_t const ces[9] = { 0x192E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_321)
{
    // 1D88B 0062;	
    // (ù¢ã) SIGNWRITING HAND-FIST INDEX MIDDLE RING BENT	[192E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88B, 0x0062 };
    uint32_t const ces[9] = { 0x192E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_322)
{
    // 1D88C 0021;	
    // (ù¢å) SIGNWRITING HAND-FIST INDEX MIDDLE RING CONJOINED	[192F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88C, 0x0021 };
    uint32_t const ces[9] = { 0x192F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_323)
{
    // 1D88C 003F;	
    // (ù¢å) SIGNWRITING HAND-FIST INDEX MIDDLE RING CONJOINED	[192F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88C, 0x003F };
    uint32_t const ces[9] = { 0x192F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_324)
{
    // 1D88C 0061;	
    // (ù¢å) SIGNWRITING HAND-FIST INDEX MIDDLE RING CONJOINED	[192F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88C, 0x0061 };
    uint32_t const ces[9] = { 0x192F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_325)
{
    // 1D88C 0041;	
    // (ù¢å) SIGNWRITING HAND-FIST INDEX MIDDLE RING CONJOINED	[192F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D88C, 0x0041 };
    uint32_t const ces[9] = { 0x192F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_326)
{
    // 1D88C 0062;	
    // (ù¢å) SIGNWRITING HAND-FIST INDEX MIDDLE RING CONJOINED	[192F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88C, 0x0062 };
    uint32_t const ces[9] = { 0x192F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_327)
{
    // 1D88D 0021;	
    // (ù¢ç) SIGNWRITING HAND-HINGE INDEX MIDDLE RING CONJOINED	[1930 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88D, 0x0021 };
    uint32_t const ces[9] = { 0x1930, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_328)
{
    // 1D88D 003F;	
    // (ù¢ç) SIGNWRITING HAND-HINGE INDEX MIDDLE RING CONJOINED	[1930 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88D, 0x003F };
    uint32_t const ces[9] = { 0x1930, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_329)
{
    // 1D88D 0061;	
    // (ù¢ç) SIGNWRITING HAND-HINGE INDEX MIDDLE RING CONJOINED	[1930 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88D, 0x0061 };
    uint32_t const ces[9] = { 0x1930, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_330)
{
    // 1D88D 0041;	
    // (ù¢ç) SIGNWRITING HAND-HINGE INDEX MIDDLE RING CONJOINED	[1930 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D88D, 0x0041 };
    uint32_t const ces[9] = { 0x1930, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_331)
{
    // 1D88D 0062;	
    // (ù¢ç) SIGNWRITING HAND-HINGE INDEX MIDDLE RING CONJOINED	[1930 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88D, 0x0062 };
    uint32_t const ces[9] = { 0x1930, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_332)
{
    // 1D88E 0021;	
    // (ù¢é) SIGNWRITING HAND-FIST LITTLE DOWN	[1931 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88E, 0x0021 };
    uint32_t const ces[9] = { 0x1931, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_333)
{
    // 1D88E 003F;	
    // (ù¢é) SIGNWRITING HAND-FIST LITTLE DOWN	[1931 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88E, 0x003F };
    uint32_t const ces[9] = { 0x1931, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_334)
{
    // 1D88E 0061;	
    // (ù¢é) SIGNWRITING HAND-FIST LITTLE DOWN	[1931 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88E, 0x0061 };
    uint32_t const ces[9] = { 0x1931, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_335)
{
    // 1D88E 0041;	
    // (ù¢é) SIGNWRITING HAND-FIST LITTLE DOWN	[1931 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D88E, 0x0041 };
    uint32_t const ces[9] = { 0x1931, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_336)
{
    // 1D88E 0062;	
    // (ù¢é) SIGNWRITING HAND-FIST LITTLE DOWN	[1931 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88E, 0x0062 };
    uint32_t const ces[9] = { 0x1931, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_337)
{
    // 1D88F 0021;	
    // (ù¢è) SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE STRAIGHT	[1932 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88F, 0x0021 };
    uint32_t const ces[9] = { 0x1932, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_338)
{
    // 1D88F 003F;	
    // (ù¢è) SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE STRAIGHT	[1932 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88F, 0x003F };
    uint32_t const ces[9] = { 0x1932, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_339)
{
    // 1D88F 0061;	
    // (ù¢è) SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE STRAIGHT	[1932 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88F, 0x0061 };
    uint32_t const ces[9] = { 0x1932, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_340)
{
    // 1D88F 0041;	
    // (ù¢è) SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE STRAIGHT	[1932 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D88F, 0x0041 };
    uint32_t const ces[9] = { 0x1932, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_341)
{
    // 1D88F 0062;	
    // (ù¢è) SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE STRAIGHT	[1932 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88F, 0x0062 };
    uint32_t const ces[9] = { 0x1932, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_342)
{
    // 1D890 0021;	
    // (ù¢ê) SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE CURVED	[1933 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D890, 0x0021 };
    uint32_t const ces[9] = { 0x1933, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_343)
{
    // 1D890 003F;	
    // (ù¢ê) SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE CURVED	[1933 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D890, 0x003F };
    uint32_t const ces[9] = { 0x1933, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_344)
{
    // 1D890 0061;	
    // (ù¢ê) SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE CURVED	[1933 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D890, 0x0061 };
    uint32_t const ces[9] = { 0x1933, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_345)
{
    // 1D890 0041;	
    // (ù¢ê) SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE CURVED	[1933 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D890, 0x0041 };
    uint32_t const ces[9] = { 0x1933, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_346)
{
    // 1D890 0062;	
    // (ù¢ê) SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE CURVED	[1933 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D890, 0x0062 };
    uint32_t const ces[9] = { 0x1933, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_347)
{
    // 1D891 0021;	
    // (ù¢ë) SIGNWRITING HAND-FIST LITTLE DOWN OTHERS CIRCLED	[1934 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D891, 0x0021 };
    uint32_t const ces[9] = { 0x1934, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_348)
{
    // 1D891 003F;	
    // (ù¢ë) SIGNWRITING HAND-FIST LITTLE DOWN OTHERS CIRCLED	[1934 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D891, 0x003F };
    uint32_t const ces[9] = { 0x1934, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_349)
{
    // 1D891 0061;	
    // (ù¢ë) SIGNWRITING HAND-FIST LITTLE DOWN OTHERS CIRCLED	[1934 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D891, 0x0061 };
    uint32_t const ces[9] = { 0x1934, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_350)
{
    // 1D891 0041;	
    // (ù¢ë) SIGNWRITING HAND-FIST LITTLE DOWN OTHERS CIRCLED	[1934 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D891, 0x0041 };
    uint32_t const ces[9] = { 0x1934, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_351)
{
    // 1D891 0062;	
    // (ù¢ë) SIGNWRITING HAND-FIST LITTLE DOWN OTHERS CIRCLED	[1934 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D891, 0x0062 };
    uint32_t const ces[9] = { 0x1934, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_352)
{
    // 1D892 0021;	
    // (ù¢í) SIGNWRITING HAND-FIST LITTLE UP	[1935 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D892, 0x0021 };
    uint32_t const ces[9] = { 0x1935, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_353)
{
    // 1D892 003F;	
    // (ù¢í) SIGNWRITING HAND-FIST LITTLE UP	[1935 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D892, 0x003F };
    uint32_t const ces[9] = { 0x1935, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_354)
{
    // 1D892 0061;	
    // (ù¢í) SIGNWRITING HAND-FIST LITTLE UP	[1935 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D892, 0x0061 };
    uint32_t const ces[9] = { 0x1935, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_355)
{
    // 1D892 0041;	
    // (ù¢í) SIGNWRITING HAND-FIST LITTLE UP	[1935 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D892, 0x0041 };
    uint32_t const ces[9] = { 0x1935, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_356)
{
    // 1D892 0062;	
    // (ù¢í) SIGNWRITING HAND-FIST LITTLE UP	[1935 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D892, 0x0062 };
    uint32_t const ces[9] = { 0x1935, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_357)
{
    // 1D893 0021;	
    // (ù¢ì) SIGNWRITING HAND-FIST THUMB UNDER LITTLE UP	[1936 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D893, 0x0021 };
    uint32_t const ces[9] = { 0x1936, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_358)
{
    // 1D893 003F;	
    // (ù¢ì) SIGNWRITING HAND-FIST THUMB UNDER LITTLE UP	[1936 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D893, 0x003F };
    uint32_t const ces[9] = { 0x1936, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_359)
{
    // 1D893 0061;	
    // (ù¢ì) SIGNWRITING HAND-FIST THUMB UNDER LITTLE UP	[1936 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D893, 0x0061 };
    uint32_t const ces[9] = { 0x1936, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_360)
{
    // 1D893 0041;	
    // (ù¢ì) SIGNWRITING HAND-FIST THUMB UNDER LITTLE UP	[1936 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D893, 0x0041 };
    uint32_t const ces[9] = { 0x1936, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_361)
{
    // 1D893 0062;	
    // (ù¢ì) SIGNWRITING HAND-FIST THUMB UNDER LITTLE UP	[1936 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D893, 0x0062 };
    uint32_t const ces[9] = { 0x1936, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_362)
{
    // 1D894 0021;	
    // (ù¢î) SIGNWRITING HAND-CIRCLE LITTLE UP	[1937 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D894, 0x0021 };
    uint32_t const ces[9] = { 0x1937, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_363)
{
    // 1D894 003F;	
    // (ù¢î) SIGNWRITING HAND-CIRCLE LITTLE UP	[1937 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D894, 0x003F };
    uint32_t const ces[9] = { 0x1937, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_364)
{
    // 1D894 0061;	
    // (ù¢î) SIGNWRITING HAND-CIRCLE LITTLE UP	[1937 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D894, 0x0061 };
    uint32_t const ces[9] = { 0x1937, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_365)
{
    // 1D894 0041;	
    // (ù¢î) SIGNWRITING HAND-CIRCLE LITTLE UP	[1937 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D894, 0x0041 };
    uint32_t const ces[9] = { 0x1937, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_366)
{
    // 1D894 0062;	
    // (ù¢î) SIGNWRITING HAND-CIRCLE LITTLE UP	[1937 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D894, 0x0062 };
    uint32_t const ces[9] = { 0x1937, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_367)
{
    // 1D895 0021;	
    // (ù¢ï) SIGNWRITING HAND-OVAL LITTLE UP	[1938 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D895, 0x0021 };
    uint32_t const ces[9] = { 0x1938, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_368)
{
    // 1D895 003F;	
    // (ù¢ï) SIGNWRITING HAND-OVAL LITTLE UP	[1938 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D895, 0x003F };
    uint32_t const ces[9] = { 0x1938, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_369)
{
    // 1D895 0061;	
    // (ù¢ï) SIGNWRITING HAND-OVAL LITTLE UP	[1938 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D895, 0x0061 };
    uint32_t const ces[9] = { 0x1938, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_370)
{
    // 1D895 0041;	
    // (ù¢ï) SIGNWRITING HAND-OVAL LITTLE UP	[1938 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D895, 0x0041 };
    uint32_t const ces[9] = { 0x1938, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_371)
{
    // 1D895 0062;	
    // (ù¢ï) SIGNWRITING HAND-OVAL LITTLE UP	[1938 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D895, 0x0062 };
    uint32_t const ces[9] = { 0x1938, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_372)
{
    // 1D896 0021;	
    // (ù¢ñ) SIGNWRITING HAND-ANGLE LITTLE UP	[1939 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D896, 0x0021 };
    uint32_t const ces[9] = { 0x1939, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_373)
{
    // 1D896 003F;	
    // (ù¢ñ) SIGNWRITING HAND-ANGLE LITTLE UP	[1939 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D896, 0x003F };
    uint32_t const ces[9] = { 0x1939, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_374)
{
    // 1D896 0061;	
    // (ù¢ñ) SIGNWRITING HAND-ANGLE LITTLE UP	[1939 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D896, 0x0061 };
    uint32_t const ces[9] = { 0x1939, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_375)
{
    // 1D896 0041;	
    // (ù¢ñ) SIGNWRITING HAND-ANGLE LITTLE UP	[1939 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D896, 0x0041 };
    uint32_t const ces[9] = { 0x1939, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_376)
{
    // 1D896 0062;	
    // (ù¢ñ) SIGNWRITING HAND-ANGLE LITTLE UP	[1939 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D896, 0x0062 };
    uint32_t const ces[9] = { 0x1939, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_377)
{
    // 1D897 0021;	
    // (ù¢ó) SIGNWRITING HAND-FIST LITTLE RAISED KNUCKLE	[193A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D897, 0x0021 };
    uint32_t const ces[9] = { 0x193A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_378)
{
    // 1D897 003F;	
    // (ù¢ó) SIGNWRITING HAND-FIST LITTLE RAISED KNUCKLE	[193A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D897, 0x003F };
    uint32_t const ces[9] = { 0x193A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_379)
{
    // 1D897 0061;	
    // (ù¢ó) SIGNWRITING HAND-FIST LITTLE RAISED KNUCKLE	[193A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D897, 0x0061 };
    uint32_t const ces[9] = { 0x193A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_380)
{
    // 1D897 0041;	
    // (ù¢ó) SIGNWRITING HAND-FIST LITTLE RAISED KNUCKLE	[193A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D897, 0x0041 };
    uint32_t const ces[9] = { 0x193A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_381)
{
    // 1D897 0062;	
    // (ù¢ó) SIGNWRITING HAND-FIST LITTLE RAISED KNUCKLE	[193A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D897, 0x0062 };
    uint32_t const ces[9] = { 0x193A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_382)
{
    // 1D898 0021;	
    // (ù¢ò) SIGNWRITING HAND-FIST LITTLE BENT	[193B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D898, 0x0021 };
    uint32_t const ces[9] = { 0x193B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_383)
{
    // 1D898 003F;	
    // (ù¢ò) SIGNWRITING HAND-FIST LITTLE BENT	[193B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D898, 0x003F };
    uint32_t const ces[9] = { 0x193B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_384)
{
    // 1D898 0061;	
    // (ù¢ò) SIGNWRITING HAND-FIST LITTLE BENT	[193B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D898, 0x0061 };
    uint32_t const ces[9] = { 0x193B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_385)
{
    // 1D898 0041;	
    // (ù¢ò) SIGNWRITING HAND-FIST LITTLE BENT	[193B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D898, 0x0041 };
    uint32_t const ces[9] = { 0x193B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_386)
{
    // 1D898 0062;	
    // (ù¢ò) SIGNWRITING HAND-FIST LITTLE BENT	[193B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D898, 0x0062 };
    uint32_t const ces[9] = { 0x193B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_387)
{
    // 1D899 0021;	
    // (ù¢ô) SIGNWRITING HAND-FIST LITTLE TOUCHES THUMB	[193C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D899, 0x0021 };
    uint32_t const ces[9] = { 0x193C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_388)
{
    // 1D899 003F;	
    // (ù¢ô) SIGNWRITING HAND-FIST LITTLE TOUCHES THUMB	[193C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D899, 0x003F };
    uint32_t const ces[9] = { 0x193C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_389)
{
    // 1D899 0061;	
    // (ù¢ô) SIGNWRITING HAND-FIST LITTLE TOUCHES THUMB	[193C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D899, 0x0061 };
    uint32_t const ces[9] = { 0x193C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_390)
{
    // 1D899 0041;	
    // (ù¢ô) SIGNWRITING HAND-FIST LITTLE TOUCHES THUMB	[193C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D899, 0x0041 };
    uint32_t const ces[9] = { 0x193C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_391)
{
    // 1D899 0062;	
    // (ù¢ô) SIGNWRITING HAND-FIST LITTLE TOUCHES THUMB	[193C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D899, 0x0062 };
    uint32_t const ces[9] = { 0x193C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_392)
{
    // 1D89A 0021;	
    // (ù¢ö) SIGNWRITING HAND-FIST LITTLE THUMB	[193D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89A, 0x0021 };
    uint32_t const ces[9] = { 0x193D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_393)
{
    // 1D89A 003F;	
    // (ù¢ö) SIGNWRITING HAND-FIST LITTLE THUMB	[193D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89A, 0x003F };
    uint32_t const ces[9] = { 0x193D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_394)
{
    // 1D89A 0061;	
    // (ù¢ö) SIGNWRITING HAND-FIST LITTLE THUMB	[193D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89A, 0x0061 };
    uint32_t const ces[9] = { 0x193D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_395)
{
    // 1D89A 0041;	
    // (ù¢ö) SIGNWRITING HAND-FIST LITTLE THUMB	[193D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D89A, 0x0041 };
    uint32_t const ces[9] = { 0x193D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_396)
{
    // 1D89A 0062;	
    // (ù¢ö) SIGNWRITING HAND-FIST LITTLE THUMB	[193D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89A, 0x0062 };
    uint32_t const ces[9] = { 0x193D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_397)
{
    // 1D89B 0021;	
    // (ù¢õ) SIGNWRITING HAND-HINGE LITTLE THUMB	[193E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89B, 0x0021 };
    uint32_t const ces[9] = { 0x193E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_398)
{
    // 1D89B 003F;	
    // (ù¢õ) SIGNWRITING HAND-HINGE LITTLE THUMB	[193E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89B, 0x003F };
    uint32_t const ces[9] = { 0x193E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_399)
{
    // 1D89B 0061;	
    // (ù¢õ) SIGNWRITING HAND-HINGE LITTLE THUMB	[193E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89B, 0x0061 };
    uint32_t const ces[9] = { 0x193E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_400)
{
    // 1D89B 0041;	
    // (ù¢õ) SIGNWRITING HAND-HINGE LITTLE THUMB	[193E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D89B, 0x0041 };
    uint32_t const ces[9] = { 0x193E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_401)
{
    // 1D89B 0062;	
    // (ù¢õ) SIGNWRITING HAND-HINGE LITTLE THUMB	[193E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89B, 0x0062 };
    uint32_t const ces[9] = { 0x193E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_402)
{
    // 1D89C 0021;	
    // (ù¢ú) SIGNWRITING HAND-FIST LITTLE INDEX THUMB	[193F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89C, 0x0021 };
    uint32_t const ces[9] = { 0x193F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_403)
{
    // 1D89C 003F;	
    // (ù¢ú) SIGNWRITING HAND-FIST LITTLE INDEX THUMB	[193F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89C, 0x003F };
    uint32_t const ces[9] = { 0x193F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_404)
{
    // 1D89C 0061;	
    // (ù¢ú) SIGNWRITING HAND-FIST LITTLE INDEX THUMB	[193F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89C, 0x0061 };
    uint32_t const ces[9] = { 0x193F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_405)
{
    // 1D89C 0041;	
    // (ù¢ú) SIGNWRITING HAND-FIST LITTLE INDEX THUMB	[193F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D89C, 0x0041 };
    uint32_t const ces[9] = { 0x193F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_406)
{
    // 1D89C 0062;	
    // (ù¢ú) SIGNWRITING HAND-FIST LITTLE INDEX THUMB	[193F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89C, 0x0062 };
    uint32_t const ces[9] = { 0x193F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_407)
{
    // 1D89D 0021;	
    // (ù¢ù) SIGNWRITING HAND-HINGE LITTLE INDEX THUMB	[1940 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89D, 0x0021 };
    uint32_t const ces[9] = { 0x1940, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_408)
{
    // 1D89D 003F;	
    // (ù¢ù) SIGNWRITING HAND-HINGE LITTLE INDEX THUMB	[1940 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89D, 0x003F };
    uint32_t const ces[9] = { 0x1940, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_409)
{
    // 1D89D 0061;	
    // (ù¢ù) SIGNWRITING HAND-HINGE LITTLE INDEX THUMB	[1940 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89D, 0x0061 };
    uint32_t const ces[9] = { 0x1940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_410)
{
    // 1D89D 0041;	
    // (ù¢ù) SIGNWRITING HAND-HINGE LITTLE INDEX THUMB	[1940 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D89D, 0x0041 };
    uint32_t const ces[9] = { 0x1940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_411)
{
    // 1D89D 0062;	
    // (ù¢ù) SIGNWRITING HAND-HINGE LITTLE INDEX THUMB	[1940 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89D, 0x0062 };
    uint32_t const ces[9] = { 0x1940, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_412)
{
    // 1D89E 0021;	
    // (ù¢û) SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB OUT	[1941 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89E, 0x0021 };
    uint32_t const ces[9] = { 0x1941, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_413)
{
    // 1D89E 003F;	
    // (ù¢û) SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB OUT	[1941 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89E, 0x003F };
    uint32_t const ces[9] = { 0x1941, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_414)
{
    // 1D89E 0061;	
    // (ù¢û) SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB OUT	[1941 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89E, 0x0061 };
    uint32_t const ces[9] = { 0x1941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_415)
{
    // 1D89E 0041;	
    // (ù¢û) SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB OUT	[1941 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D89E, 0x0041 };
    uint32_t const ces[9] = { 0x1941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_416)
{
    // 1D89E 0062;	
    // (ù¢û) SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB OUT	[1941 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89E, 0x0062 };
    uint32_t const ces[9] = { 0x1941, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_417)
{
    // 1D89F 0021;	
    // (ù¢ü) SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB	[1942 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89F, 0x0021 };
    uint32_t const ces[9] = { 0x1942, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_418)
{
    // 1D89F 003F;	
    // (ù¢ü) SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB	[1942 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89F, 0x003F };
    uint32_t const ces[9] = { 0x1942, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_419)
{
    // 1D89F 0061;	
    // (ù¢ü) SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB	[1942 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89F, 0x0061 };
    uint32_t const ces[9] = { 0x1942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_420)
{
    // 1D89F 0041;	
    // (ù¢ü) SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB	[1942 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D89F, 0x0041 };
    uint32_t const ces[9] = { 0x1942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_421)
{
    // 1D89F 0062;	
    // (ù¢ü) SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB	[1942 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D89F, 0x0062 };
    uint32_t const ces[9] = { 0x1942, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_422)
{
    // 1D8A0 0021;	
    // (ù¢†) SIGNWRITING HAND-FIST LITTLE INDEX	[1943 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A0, 0x0021 };
    uint32_t const ces[9] = { 0x1943, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_423)
{
    // 1D8A0 003F;	
    // (ù¢†) SIGNWRITING HAND-FIST LITTLE INDEX	[1943 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A0, 0x003F };
    uint32_t const ces[9] = { 0x1943, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_424)
{
    // 1D8A0 0061;	
    // (ù¢†) SIGNWRITING HAND-FIST LITTLE INDEX	[1943 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A0, 0x0061 };
    uint32_t const ces[9] = { 0x1943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_425)
{
    // 1D8A0 0041;	
    // (ù¢†) SIGNWRITING HAND-FIST LITTLE INDEX	[1943 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8A0, 0x0041 };
    uint32_t const ces[9] = { 0x1943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_426)
{
    // 1D8A0 0062;	
    // (ù¢†) SIGNWRITING HAND-FIST LITTLE INDEX	[1943 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A0, 0x0062 };
    uint32_t const ces[9] = { 0x1943, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_427)
{
    // 1D8A1 0021;	
    // (ù¢°) SIGNWRITING HAND-CIRCLE LITTLE INDEX	[1944 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A1, 0x0021 };
    uint32_t const ces[9] = { 0x1944, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_428)
{
    // 1D8A1 003F;	
    // (ù¢°) SIGNWRITING HAND-CIRCLE LITTLE INDEX	[1944 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A1, 0x003F };
    uint32_t const ces[9] = { 0x1944, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_429)
{
    // 1D8A1 0061;	
    // (ù¢°) SIGNWRITING HAND-CIRCLE LITTLE INDEX	[1944 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A1, 0x0061 };
    uint32_t const ces[9] = { 0x1944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_430)
{
    // 1D8A1 0041;	
    // (ù¢°) SIGNWRITING HAND-CIRCLE LITTLE INDEX	[1944 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8A1, 0x0041 };
    uint32_t const ces[9] = { 0x1944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_431)
{
    // 1D8A1 0062;	
    // (ù¢°) SIGNWRITING HAND-CIRCLE LITTLE INDEX	[1944 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A1, 0x0062 };
    uint32_t const ces[9] = { 0x1944, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_432)
{
    // 1D8A2 0021;	
    // (ù¢¢) SIGNWRITING HAND-HINGE LITTLE INDEX	[1945 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A2, 0x0021 };
    uint32_t const ces[9] = { 0x1945, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_433)
{
    // 1D8A2 003F;	
    // (ù¢¢) SIGNWRITING HAND-HINGE LITTLE INDEX	[1945 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A2, 0x003F };
    uint32_t const ces[9] = { 0x1945, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_434)
{
    // 1D8A2 0061;	
    // (ù¢¢) SIGNWRITING HAND-HINGE LITTLE INDEX	[1945 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A2, 0x0061 };
    uint32_t const ces[9] = { 0x1945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_435)
{
    // 1D8A2 0041;	
    // (ù¢¢) SIGNWRITING HAND-HINGE LITTLE INDEX	[1945 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8A2, 0x0041 };
    uint32_t const ces[9] = { 0x1945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_436)
{
    // 1D8A2 0062;	
    // (ù¢¢) SIGNWRITING HAND-HINGE LITTLE INDEX	[1945 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A2, 0x0062 };
    uint32_t const ces[9] = { 0x1945, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_437)
{
    // 1D8A3 0021;	
    // (ù¢£) SIGNWRITING HAND-ANGLE LITTLE INDEX	[1946 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A3, 0x0021 };
    uint32_t const ces[9] = { 0x1946, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_438)
{
    // 1D8A3 003F;	
    // (ù¢£) SIGNWRITING HAND-ANGLE LITTLE INDEX	[1946 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A3, 0x003F };
    uint32_t const ces[9] = { 0x1946, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_439)
{
    // 1D8A3 0061;	
    // (ù¢£) SIGNWRITING HAND-ANGLE LITTLE INDEX	[1946 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A3, 0x0061 };
    uint32_t const ces[9] = { 0x1946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_440)
{
    // 1D8A3 0041;	
    // (ù¢£) SIGNWRITING HAND-ANGLE LITTLE INDEX	[1946 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8A3, 0x0041 };
    uint32_t const ces[9] = { 0x1946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_441)
{
    // 1D8A3 0062;	
    // (ù¢£) SIGNWRITING HAND-ANGLE LITTLE INDEX	[1946 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A3, 0x0062 };
    uint32_t const ces[9] = { 0x1946, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_442)
{
    // 1D8A4 0021;	
    // (ù¢§) SIGNWRITING HAND-FIST INDEX MIDDLE LITTLE	[1947 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A4, 0x0021 };
    uint32_t const ces[9] = { 0x1947, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_443)
{
    // 1D8A4 003F;	
    // (ù¢§) SIGNWRITING HAND-FIST INDEX MIDDLE LITTLE	[1947 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A4, 0x003F };
    uint32_t const ces[9] = { 0x1947, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_444)
{
    // 1D8A4 0061;	
    // (ù¢§) SIGNWRITING HAND-FIST INDEX MIDDLE LITTLE	[1947 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A4, 0x0061 };
    uint32_t const ces[9] = { 0x1947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_445)
{
    // 1D8A4 0041;	
    // (ù¢§) SIGNWRITING HAND-FIST INDEX MIDDLE LITTLE	[1947 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8A4, 0x0041 };
    uint32_t const ces[9] = { 0x1947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_446)
{
    // 1D8A4 0062;	
    // (ù¢§) SIGNWRITING HAND-FIST INDEX MIDDLE LITTLE	[1947 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A4, 0x0062 };
    uint32_t const ces[9] = { 0x1947, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_447)
{
    // 1D8A5 0021;	
    // (ù¢•) SIGNWRITING HAND-CIRCLE INDEX MIDDLE LITTLE	[1948 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A5, 0x0021 };
    uint32_t const ces[9] = { 0x1948, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_448)
{
    // 1D8A5 003F;	
    // (ù¢•) SIGNWRITING HAND-CIRCLE INDEX MIDDLE LITTLE	[1948 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A5, 0x003F };
    uint32_t const ces[9] = { 0x1948, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_449)
{
    // 1D8A5 0061;	
    // (ù¢•) SIGNWRITING HAND-CIRCLE INDEX MIDDLE LITTLE	[1948 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A5, 0x0061 };
    uint32_t const ces[9] = { 0x1948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_450)
{
    // 1D8A5 0041;	
    // (ù¢•) SIGNWRITING HAND-CIRCLE INDEX MIDDLE LITTLE	[1948 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8A5, 0x0041 };
    uint32_t const ces[9] = { 0x1948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_451)
{
    // 1D8A5 0062;	
    // (ù¢•) SIGNWRITING HAND-CIRCLE INDEX MIDDLE LITTLE	[1948 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A5, 0x0062 };
    uint32_t const ces[9] = { 0x1948, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_452)
{
    // 1D8A6 0021;	
    // (ù¢¶) SIGNWRITING HAND-HINGE INDEX MIDDLE LITTLE	[1949 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A6, 0x0021 };
    uint32_t const ces[9] = { 0x1949, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_453)
{
    // 1D8A6 003F;	
    // (ù¢¶) SIGNWRITING HAND-HINGE INDEX MIDDLE LITTLE	[1949 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A6, 0x003F };
    uint32_t const ces[9] = { 0x1949, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_454)
{
    // 1D8A6 0061;	
    // (ù¢¶) SIGNWRITING HAND-HINGE INDEX MIDDLE LITTLE	[1949 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A6, 0x0061 };
    uint32_t const ces[9] = { 0x1949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_455)
{
    // 1D8A6 0041;	
    // (ù¢¶) SIGNWRITING HAND-HINGE INDEX MIDDLE LITTLE	[1949 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8A6, 0x0041 };
    uint32_t const ces[9] = { 0x1949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_456)
{
    // 1D8A6 0062;	
    // (ù¢¶) SIGNWRITING HAND-HINGE INDEX MIDDLE LITTLE	[1949 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A6, 0x0062 };
    uint32_t const ces[9] = { 0x1949, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_457)
{
    // 1D8A7 0021;	
    // (ù¢ß) SIGNWRITING HAND-HINGE RING	[194A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A7, 0x0021 };
    uint32_t const ces[9] = { 0x194A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_458)
{
    // 1D8A7 003F;	
    // (ù¢ß) SIGNWRITING HAND-HINGE RING	[194A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A7, 0x003F };
    uint32_t const ces[9] = { 0x194A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_459)
{
    // 1D8A7 0061;	
    // (ù¢ß) SIGNWRITING HAND-HINGE RING	[194A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A7, 0x0061 };
    uint32_t const ces[9] = { 0x194A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_460)
{
    // 1D8A7 0041;	
    // (ù¢ß) SIGNWRITING HAND-HINGE RING	[194A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8A7, 0x0041 };
    uint32_t const ces[9] = { 0x194A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_461)
{
    // 1D8A7 0062;	
    // (ù¢ß) SIGNWRITING HAND-HINGE RING	[194A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A7, 0x0062 };
    uint32_t const ces[9] = { 0x194A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_462)
{
    // 1D8A8 0021;	
    // (ù¢®) SIGNWRITING HAND-ANGLE INDEX MIDDLE LITTLE	[194B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A8, 0x0021 };
    uint32_t const ces[9] = { 0x194B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_463)
{
    // 1D8A8 003F;	
    // (ù¢®) SIGNWRITING HAND-ANGLE INDEX MIDDLE LITTLE	[194B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A8, 0x003F };
    uint32_t const ces[9] = { 0x194B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_464)
{
    // 1D8A8 0061;	
    // (ù¢®) SIGNWRITING HAND-ANGLE INDEX MIDDLE LITTLE	[194B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A8, 0x0061 };
    uint32_t const ces[9] = { 0x194B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_465)
{
    // 1D8A8 0041;	
    // (ù¢®) SIGNWRITING HAND-ANGLE INDEX MIDDLE LITTLE	[194B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8A8, 0x0041 };
    uint32_t const ces[9] = { 0x194B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_466)
{
    // 1D8A8 0062;	
    // (ù¢®) SIGNWRITING HAND-ANGLE INDEX MIDDLE LITTLE	[194B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A8, 0x0062 };
    uint32_t const ces[9] = { 0x194B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_467)
{
    // 1D8A9 0021;	
    // (ù¢©) SIGNWRITING HAND-FIST INDEX MIDDLE CROSS LITTLE	[194C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A9, 0x0021 };
    uint32_t const ces[9] = { 0x194C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_468)
{
    // 1D8A9 003F;	
    // (ù¢©) SIGNWRITING HAND-FIST INDEX MIDDLE CROSS LITTLE	[194C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A9, 0x003F };
    uint32_t const ces[9] = { 0x194C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_469)
{
    // 1D8A9 0061;	
    // (ù¢©) SIGNWRITING HAND-FIST INDEX MIDDLE CROSS LITTLE	[194C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A9, 0x0061 };
    uint32_t const ces[9] = { 0x194C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_470)
{
    // 1D8A9 0041;	
    // (ù¢©) SIGNWRITING HAND-FIST INDEX MIDDLE CROSS LITTLE	[194C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8A9, 0x0041 };
    uint32_t const ces[9] = { 0x194C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_471)
{
    // 1D8A9 0062;	
    // (ù¢©) SIGNWRITING HAND-FIST INDEX MIDDLE CROSS LITTLE	[194C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8A9, 0x0062 };
    uint32_t const ces[9] = { 0x194C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_472)
{
    // 1D8AA 0021;	
    // (ù¢™) SIGNWRITING HAND-CIRCLE INDEX MIDDLE CROSS LITTLE	[194D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AA, 0x0021 };
    uint32_t const ces[9] = { 0x194D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_473)
{
    // 1D8AA 003F;	
    // (ù¢™) SIGNWRITING HAND-CIRCLE INDEX MIDDLE CROSS LITTLE	[194D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AA, 0x003F };
    uint32_t const ces[9] = { 0x194D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_474)
{
    // 1D8AA 0061;	
    // (ù¢™) SIGNWRITING HAND-CIRCLE INDEX MIDDLE CROSS LITTLE	[194D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AA, 0x0061 };
    uint32_t const ces[9] = { 0x194D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_475)
{
    // 1D8AA 0041;	
    // (ù¢™) SIGNWRITING HAND-CIRCLE INDEX MIDDLE CROSS LITTLE	[194D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8AA, 0x0041 };
    uint32_t const ces[9] = { 0x194D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_476)
{
    // 1D8AA 0062;	
    // (ù¢™) SIGNWRITING HAND-CIRCLE INDEX MIDDLE CROSS LITTLE	[194D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AA, 0x0062 };
    uint32_t const ces[9] = { 0x194D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_477)
{
    // 1D8AB 0021;	
    // (ù¢´) SIGNWRITING HAND-FIST RING DOWN	[194E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AB, 0x0021 };
    uint32_t const ces[9] = { 0x194E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_478)
{
    // 1D8AB 003F;	
    // (ù¢´) SIGNWRITING HAND-FIST RING DOWN	[194E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AB, 0x003F };
    uint32_t const ces[9] = { 0x194E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_479)
{
    // 1D8AB 0061;	
    // (ù¢´) SIGNWRITING HAND-FIST RING DOWN	[194E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AB, 0x0061 };
    uint32_t const ces[9] = { 0x194E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_480)
{
    // 1D8AB 0041;	
    // (ù¢´) SIGNWRITING HAND-FIST RING DOWN	[194E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8AB, 0x0041 };
    uint32_t const ces[9] = { 0x194E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_481)
{
    // 1D8AB 0062;	
    // (ù¢´) SIGNWRITING HAND-FIST RING DOWN	[194E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AB, 0x0062 };
    uint32_t const ces[9] = { 0x194E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_482)
{
    // 1D8AC 0021;	
    // (ù¢¨) SIGNWRITING HAND-HINGE RING DOWN INDEX THUMB HOOK MIDDLE	[194F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AC, 0x0021 };
    uint32_t const ces[9] = { 0x194F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_483)
{
    // 1D8AC 003F;	
    // (ù¢¨) SIGNWRITING HAND-HINGE RING DOWN INDEX THUMB HOOK MIDDLE	[194F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AC, 0x003F };
    uint32_t const ces[9] = { 0x194F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_484)
{
    // 1D8AC 0061;	
    // (ù¢¨) SIGNWRITING HAND-HINGE RING DOWN INDEX THUMB HOOK MIDDLE	[194F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AC, 0x0061 };
    uint32_t const ces[9] = { 0x194F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_485)
{
    // 1D8AC 0041;	
    // (ù¢¨) SIGNWRITING HAND-HINGE RING DOWN INDEX THUMB HOOK MIDDLE	[194F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8AC, 0x0041 };
    uint32_t const ces[9] = { 0x194F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_486)
{
    // 1D8AC 0062;	
    // (ù¢¨) SIGNWRITING HAND-HINGE RING DOWN INDEX THUMB HOOK MIDDLE	[194F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AC, 0x0062 };
    uint32_t const ces[9] = { 0x194F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_487)
{
    // 1D8AD 0021;	
    // (ù¢≠) SIGNWRITING HAND-ANGLE RING DOWN MIDDLE THUMB INDEX CROSS	[1950 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AD, 0x0021 };
    uint32_t const ces[9] = { 0x1950, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_488)
{
    // 1D8AD 003F;	
    // (ù¢≠) SIGNWRITING HAND-ANGLE RING DOWN MIDDLE THUMB INDEX CROSS	[1950 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AD, 0x003F };
    uint32_t const ces[9] = { 0x1950, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_489)
{
    // 1D8AD 0061;	
    // (ù¢≠) SIGNWRITING HAND-ANGLE RING DOWN MIDDLE THUMB INDEX CROSS	[1950 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AD, 0x0061 };
    uint32_t const ces[9] = { 0x1950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_490)
{
    // 1D8AD 0041;	
    // (ù¢≠) SIGNWRITING HAND-ANGLE RING DOWN MIDDLE THUMB INDEX CROSS	[1950 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8AD, 0x0041 };
    uint32_t const ces[9] = { 0x1950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_491)
{
    // 1D8AD 0062;	
    // (ù¢≠) SIGNWRITING HAND-ANGLE RING DOWN MIDDLE THUMB INDEX CROSS	[1950 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AD, 0x0062 };
    uint32_t const ces[9] = { 0x1950, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_492)
{
    // 1D8AE 0021;	
    // (ù¢Æ) SIGNWRITING HAND-FIST RING UP	[1951 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AE, 0x0021 };
    uint32_t const ces[9] = { 0x1951, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_493)
{
    // 1D8AE 003F;	
    // (ù¢Æ) SIGNWRITING HAND-FIST RING UP	[1951 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AE, 0x003F };
    uint32_t const ces[9] = { 0x1951, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_494)
{
    // 1D8AE 0061;	
    // (ù¢Æ) SIGNWRITING HAND-FIST RING UP	[1951 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AE, 0x0061 };
    uint32_t const ces[9] = { 0x1951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_495)
{
    // 1D8AE 0041;	
    // (ù¢Æ) SIGNWRITING HAND-FIST RING UP	[1951 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8AE, 0x0041 };
    uint32_t const ces[9] = { 0x1951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_496)
{
    // 1D8AE 0062;	
    // (ù¢Æ) SIGNWRITING HAND-FIST RING UP	[1951 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AE, 0x0062 };
    uint32_t const ces[9] = { 0x1951, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_497)
{
    // 1D8AF 0021;	
    // (ù¢Ø) SIGNWRITING HAND-FIST RING RAISED KNUCKLE	[1952 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AF, 0x0021 };
    uint32_t const ces[9] = { 0x1952, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_498)
{
    // 1D8AF 003F;	
    // (ù¢Ø) SIGNWRITING HAND-FIST RING RAISED KNUCKLE	[1952 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AF, 0x003F };
    uint32_t const ces[9] = { 0x1952, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_071_499)
{
    // 1D8AF 0061;	
    // (ù¢Ø) SIGNWRITING HAND-FIST RING RAISED KNUCKLE	[1952 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8AF, 0x0061 };
    uint32_t const ces[9] = { 0x1952, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

